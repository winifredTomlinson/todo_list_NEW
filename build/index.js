/******/ (function(modules) { // webpackBootstrap
/******/ 	var parentHotUpdateCallback = this["webpackHotUpdate"];
/******/ 	this["webpackHotUpdate"] = 
/******/ 	function webpackHotUpdateCallback(chunkId, moreModules) { // eslint-disable-line no-unused-vars
/******/ 		hotAddUpdateChunk(chunkId, moreModules);
/******/ 		if(parentHotUpdateCallback) parentHotUpdateCallback(chunkId, moreModules);
/******/ 	}
/******/ 	
/******/ 	function hotDownloadUpdateChunk(chunkId) { // eslint-disable-line no-unused-vars
/******/ 		var head = document.getElementsByTagName("head")[0];
/******/ 		var script = document.createElement("script");
/******/ 		script.type = "text/javascript";
/******/ 		script.charset = "utf-8";
/******/ 		script.src = __webpack_require__.p + "" + chunkId + "." + hotCurrentHash + ".hot-update.js";
/******/ 		head.appendChild(script);
/******/ 	}
/******/ 	
/******/ 	function hotDownloadManifest(callback) { // eslint-disable-line no-unused-vars
/******/ 		if(typeof XMLHttpRequest === "undefined")
/******/ 			return callback(new Error("No browser support"));
/******/ 		try {
/******/ 			var request = new XMLHttpRequest();
/******/ 			var requestPath = __webpack_require__.p + "" + hotCurrentHash + ".hot-update.json";
/******/ 			request.open("GET", requestPath, true);
/******/ 			request.timeout = 10000;
/******/ 			request.send(null);
/******/ 		} catch(err) {
/******/ 			return callback(err);
/******/ 		}
/******/ 		request.onreadystatechange = function() {
/******/ 			if(request.readyState !== 4) return;
/******/ 			if(request.status === 0) {
/******/ 				// timeout
/******/ 				callback(new Error("Manifest request to " + requestPath + " timed out."));
/******/ 			} else if(request.status === 404) {
/******/ 				// no update available
/******/ 				callback();
/******/ 			} else if(request.status !== 200 && request.status !== 304) {
/******/ 				// other failure
/******/ 				callback(new Error("Manifest request to " + requestPath + " failed."));
/******/ 			} else {
/******/ 				// success
/******/ 				try {
/******/ 					var update = JSON.parse(request.responseText);
/******/ 				} catch(e) {
/******/ 					callback(e);
/******/ 					return;
/******/ 				}
/******/ 				callback(null, update);
/******/ 			}
/******/ 		};
/******/ 	}

/******/ 	
/******/ 	
/******/ 	// Copied from https://github.com/facebook/react/blob/bef45b0/src/shared/utils/canDefineProperty.js
/******/ 	var canDefineProperty = false;
/******/ 	try {
/******/ 		Object.defineProperty({}, "x", {
/******/ 			get: function() {}
/******/ 		});
/******/ 		canDefineProperty = true;
/******/ 	} catch(x) {
/******/ 		// IE will fail on defineProperty
/******/ 	}
/******/ 	
/******/ 	var hotApplyOnUpdate = true;
/******/ 	var hotCurrentHash = "9499c54af549c8786b07"; // eslint-disable-line no-unused-vars
/******/ 	var hotCurrentModuleData = {};
/******/ 	var hotCurrentParents = []; // eslint-disable-line no-unused-vars
/******/ 	
/******/ 	function hotCreateRequire(moduleId) { // eslint-disable-line no-unused-vars
/******/ 		var me = installedModules[moduleId];
/******/ 		if(!me) return __webpack_require__;
/******/ 		var fn = function(request) {
/******/ 			if(me.hot.active) {
/******/ 				if(installedModules[request]) {
/******/ 					if(installedModules[request].parents.indexOf(moduleId) < 0)
/******/ 						installedModules[request].parents.push(moduleId);
/******/ 					if(me.children.indexOf(request) < 0)
/******/ 						me.children.push(request);
/******/ 				} else hotCurrentParents = [moduleId];
/******/ 			} else {
/******/ 				console.warn("[HMR] unexpected require(" + request + ") from disposed module " + moduleId);
/******/ 				hotCurrentParents = [];
/******/ 			}
/******/ 			return __webpack_require__(request);
/******/ 		};
/******/ 		for(var name in __webpack_require__) {
/******/ 			if(Object.prototype.hasOwnProperty.call(__webpack_require__, name)) {
/******/ 				if(canDefineProperty) {
/******/ 					Object.defineProperty(fn, name, (function(name) {
/******/ 						return {
/******/ 							configurable: true,
/******/ 							enumerable: true,
/******/ 							get: function() {
/******/ 								return __webpack_require__[name];
/******/ 							},
/******/ 							set: function(value) {
/******/ 								__webpack_require__[name] = value;
/******/ 							}
/******/ 						};
/******/ 					}(name)));
/******/ 				} else {
/******/ 					fn[name] = __webpack_require__[name];
/******/ 				}
/******/ 			}
/******/ 		}
/******/ 	
/******/ 		function ensure(chunkId, callback) {
/******/ 			if(hotStatus === "ready")
/******/ 				hotSetStatus("prepare");
/******/ 			hotChunksLoading++;
/******/ 			__webpack_require__.e(chunkId, function() {
/******/ 				try {
/******/ 					callback.call(null, fn);
/******/ 				} finally {
/******/ 					finishChunkLoading();
/******/ 				}
/******/ 	
/******/ 				function finishChunkLoading() {
/******/ 					hotChunksLoading--;
/******/ 					if(hotStatus === "prepare") {
/******/ 						if(!hotWaitingFilesMap[chunkId]) {
/******/ 							hotEnsureUpdateChunk(chunkId);
/******/ 						}
/******/ 						if(hotChunksLoading === 0 && hotWaitingFiles === 0) {
/******/ 							hotUpdateDownloaded();
/******/ 						}
/******/ 					}
/******/ 				}
/******/ 			});
/******/ 		}
/******/ 		if(canDefineProperty) {
/******/ 			Object.defineProperty(fn, "e", {
/******/ 				enumerable: true,
/******/ 				value: ensure
/******/ 			});
/******/ 		} else {
/******/ 			fn.e = ensure;
/******/ 		}
/******/ 		return fn;
/******/ 	}
/******/ 	
/******/ 	function hotCreateModule(moduleId) { // eslint-disable-line no-unused-vars
/******/ 		var hot = {
/******/ 			// private stuff
/******/ 			_acceptedDependencies: {},
/******/ 			_declinedDependencies: {},
/******/ 			_selfAccepted: false,
/******/ 			_selfDeclined: false,
/******/ 			_disposeHandlers: [],
/******/ 	
/******/ 			// Module API
/******/ 			active: true,
/******/ 			accept: function(dep, callback) {
/******/ 				if(typeof dep === "undefined")
/******/ 					hot._selfAccepted = true;
/******/ 				else if(typeof dep === "function")
/******/ 					hot._selfAccepted = dep;
/******/ 				else if(typeof dep === "object")
/******/ 					for(var i = 0; i < dep.length; i++)
/******/ 						hot._acceptedDependencies[dep[i]] = callback;
/******/ 				else
/******/ 					hot._acceptedDependencies[dep] = callback;
/******/ 			},
/******/ 			decline: function(dep) {
/******/ 				if(typeof dep === "undefined")
/******/ 					hot._selfDeclined = true;
/******/ 				else if(typeof dep === "number")
/******/ 					hot._declinedDependencies[dep] = true;
/******/ 				else
/******/ 					for(var i = 0; i < dep.length; i++)
/******/ 						hot._declinedDependencies[dep[i]] = true;
/******/ 			},
/******/ 			dispose: function(callback) {
/******/ 				hot._disposeHandlers.push(callback);
/******/ 			},
/******/ 			addDisposeHandler: function(callback) {
/******/ 				hot._disposeHandlers.push(callback);
/******/ 			},
/******/ 			removeDisposeHandler: function(callback) {
/******/ 				var idx = hot._disposeHandlers.indexOf(callback);
/******/ 				if(idx >= 0) hot._disposeHandlers.splice(idx, 1);
/******/ 			},
/******/ 	
/******/ 			// Management API
/******/ 			check: hotCheck,
/******/ 			apply: hotApply,
/******/ 			status: function(l) {
/******/ 				if(!l) return hotStatus;
/******/ 				hotStatusHandlers.push(l);
/******/ 			},
/******/ 			addStatusHandler: function(l) {
/******/ 				hotStatusHandlers.push(l);
/******/ 			},
/******/ 			removeStatusHandler: function(l) {
/******/ 				var idx = hotStatusHandlers.indexOf(l);
/******/ 				if(idx >= 0) hotStatusHandlers.splice(idx, 1);
/******/ 			},
/******/ 	
/******/ 			//inherit from previous dispose call
/******/ 			data: hotCurrentModuleData[moduleId]
/******/ 		};
/******/ 		return hot;
/******/ 	}
/******/ 	
/******/ 	var hotStatusHandlers = [];
/******/ 	var hotStatus = "idle";
/******/ 	
/******/ 	function hotSetStatus(newStatus) {
/******/ 		hotStatus = newStatus;
/******/ 		for(var i = 0; i < hotStatusHandlers.length; i++)
/******/ 			hotStatusHandlers[i].call(null, newStatus);
/******/ 	}
/******/ 	
/******/ 	// while downloading
/******/ 	var hotWaitingFiles = 0;
/******/ 	var hotChunksLoading = 0;
/******/ 	var hotWaitingFilesMap = {};
/******/ 	var hotRequestedFilesMap = {};
/******/ 	var hotAvailibleFilesMap = {};
/******/ 	var hotCallback;
/******/ 	
/******/ 	// The update info
/******/ 	var hotUpdate, hotUpdateNewHash;
/******/ 	
/******/ 	function toModuleId(id) {
/******/ 		var isNumber = (+id) + "" === id;
/******/ 		return isNumber ? +id : id;
/******/ 	}
/******/ 	
/******/ 	function hotCheck(apply, callback) {
/******/ 		if(hotStatus !== "idle") throw new Error("check() is only allowed in idle status");
/******/ 		if(typeof apply === "function") {
/******/ 			hotApplyOnUpdate = false;
/******/ 			callback = apply;
/******/ 		} else {
/******/ 			hotApplyOnUpdate = apply;
/******/ 			callback = callback || function(err) {
/******/ 				if(err) throw err;
/******/ 			};
/******/ 		}
/******/ 		hotSetStatus("check");
/******/ 		hotDownloadManifest(function(err, update) {
/******/ 			if(err) return callback(err);
/******/ 			if(!update) {
/******/ 				hotSetStatus("idle");
/******/ 				callback(null, null);
/******/ 				return;
/******/ 			}
/******/ 	
/******/ 			hotRequestedFilesMap = {};
/******/ 			hotAvailibleFilesMap = {};
/******/ 			hotWaitingFilesMap = {};
/******/ 			for(var i = 0; i < update.c.length; i++)
/******/ 				hotAvailibleFilesMap[update.c[i]] = true;
/******/ 			hotUpdateNewHash = update.h;
/******/ 	
/******/ 			hotSetStatus("prepare");
/******/ 			hotCallback = callback;
/******/ 			hotUpdate = {};
/******/ 			var chunkId = 0;
/******/ 			{ // eslint-disable-line no-lone-blocks
/******/ 				/*globals chunkId */
/******/ 				hotEnsureUpdateChunk(chunkId);
/******/ 			}
/******/ 			if(hotStatus === "prepare" && hotChunksLoading === 0 && hotWaitingFiles === 0) {
/******/ 				hotUpdateDownloaded();
/******/ 			}
/******/ 		});
/******/ 	}
/******/ 	
/******/ 	function hotAddUpdateChunk(chunkId, moreModules) { // eslint-disable-line no-unused-vars
/******/ 		if(!hotAvailibleFilesMap[chunkId] || !hotRequestedFilesMap[chunkId])
/******/ 			return;
/******/ 		hotRequestedFilesMap[chunkId] = false;
/******/ 		for(var moduleId in moreModules) {
/******/ 			if(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {
/******/ 				hotUpdate[moduleId] = moreModules[moduleId];
/******/ 			}
/******/ 		}
/******/ 		if(--hotWaitingFiles === 0 && hotChunksLoading === 0) {
/******/ 			hotUpdateDownloaded();
/******/ 		}
/******/ 	}
/******/ 	
/******/ 	function hotEnsureUpdateChunk(chunkId) {
/******/ 		if(!hotAvailibleFilesMap[chunkId]) {
/******/ 			hotWaitingFilesMap[chunkId] = true;
/******/ 		} else {
/******/ 			hotRequestedFilesMap[chunkId] = true;
/******/ 			hotWaitingFiles++;
/******/ 			hotDownloadUpdateChunk(chunkId);
/******/ 		}
/******/ 	}
/******/ 	
/******/ 	function hotUpdateDownloaded() {
/******/ 		hotSetStatus("ready");
/******/ 		var callback = hotCallback;
/******/ 		hotCallback = null;
/******/ 		if(!callback) return;
/******/ 		if(hotApplyOnUpdate) {
/******/ 			hotApply(hotApplyOnUpdate, callback);
/******/ 		} else {
/******/ 			var outdatedModules = [];
/******/ 			for(var id in hotUpdate) {
/******/ 				if(Object.prototype.hasOwnProperty.call(hotUpdate, id)) {
/******/ 					outdatedModules.push(toModuleId(id));
/******/ 				}
/******/ 			}
/******/ 			callback(null, outdatedModules);
/******/ 		}
/******/ 	}
/******/ 	
/******/ 	function hotApply(options, callback) {
/******/ 		if(hotStatus !== "ready") throw new Error("apply() is only allowed in ready status");
/******/ 		if(typeof options === "function") {
/******/ 			callback = options;
/******/ 			options = {};
/******/ 		} else if(options && typeof options === "object") {
/******/ 			callback = callback || function(err) {
/******/ 				if(err) throw err;
/******/ 			};
/******/ 		} else {
/******/ 			options = {};
/******/ 			callback = callback || function(err) {
/******/ 				if(err) throw err;
/******/ 			};
/******/ 		}
/******/ 	
/******/ 		function getAffectedStuff(module) {
/******/ 			var outdatedModules = [module];
/******/ 			var outdatedDependencies = {};
/******/ 	
/******/ 			var queue = outdatedModules.slice();
/******/ 			while(queue.length > 0) {
/******/ 				var moduleId = queue.pop();
/******/ 				var module = installedModules[moduleId];
/******/ 				if(!module || module.hot._selfAccepted)
/******/ 					continue;
/******/ 				if(module.hot._selfDeclined) {
/******/ 					return new Error("Aborted because of self decline: " + moduleId);
/******/ 				}
/******/ 				if(moduleId === 0) {
/******/ 					return;
/******/ 				}
/******/ 				for(var i = 0; i < module.parents.length; i++) {
/******/ 					var parentId = module.parents[i];
/******/ 					var parent = installedModules[parentId];
/******/ 					if(parent.hot._declinedDependencies[moduleId]) {
/******/ 						return new Error("Aborted because of declined dependency: " + moduleId + " in " + parentId);
/******/ 					}
/******/ 					if(outdatedModules.indexOf(parentId) >= 0) continue;
/******/ 					if(parent.hot._acceptedDependencies[moduleId]) {
/******/ 						if(!outdatedDependencies[parentId])
/******/ 							outdatedDependencies[parentId] = [];
/******/ 						addAllToSet(outdatedDependencies[parentId], [moduleId]);
/******/ 						continue;
/******/ 					}
/******/ 					delete outdatedDependencies[parentId];
/******/ 					outdatedModules.push(parentId);
/******/ 					queue.push(parentId);
/******/ 				}
/******/ 			}
/******/ 	
/******/ 			return [outdatedModules, outdatedDependencies];
/******/ 		}
/******/ 	
/******/ 		function addAllToSet(a, b) {
/******/ 			for(var i = 0; i < b.length; i++) {
/******/ 				var item = b[i];
/******/ 				if(a.indexOf(item) < 0)
/******/ 					a.push(item);
/******/ 			}
/******/ 		}
/******/ 	
/******/ 		// at begin all updates modules are outdated
/******/ 		// the "outdated" status can propagate to parents if they don't accept the children
/******/ 		var outdatedDependencies = {};
/******/ 		var outdatedModules = [];
/******/ 		var appliedUpdate = {};
/******/ 		for(var id in hotUpdate) {
/******/ 			if(Object.prototype.hasOwnProperty.call(hotUpdate, id)) {
/******/ 				var moduleId = toModuleId(id);
/******/ 				var result = getAffectedStuff(moduleId);
/******/ 				if(!result) {
/******/ 					if(options.ignoreUnaccepted)
/******/ 						continue;
/******/ 					hotSetStatus("abort");
/******/ 					return callback(new Error("Aborted because " + moduleId + " is not accepted"));
/******/ 				}
/******/ 				if(result instanceof Error) {
/******/ 					hotSetStatus("abort");
/******/ 					return callback(result);
/******/ 				}
/******/ 				appliedUpdate[moduleId] = hotUpdate[moduleId];
/******/ 				addAllToSet(outdatedModules, result[0]);
/******/ 				for(var moduleId in result[1]) {
/******/ 					if(Object.prototype.hasOwnProperty.call(result[1], moduleId)) {
/******/ 						if(!outdatedDependencies[moduleId])
/******/ 							outdatedDependencies[moduleId] = [];
/******/ 						addAllToSet(outdatedDependencies[moduleId], result[1][moduleId]);
/******/ 					}
/******/ 				}
/******/ 			}
/******/ 		}
/******/ 	
/******/ 		// Store self accepted outdated modules to require them later by the module system
/******/ 		var outdatedSelfAcceptedModules = [];
/******/ 		for(var i = 0; i < outdatedModules.length; i++) {
/******/ 			var moduleId = outdatedModules[i];
/******/ 			if(installedModules[moduleId] && installedModules[moduleId].hot._selfAccepted)
/******/ 				outdatedSelfAcceptedModules.push({
/******/ 					module: moduleId,
/******/ 					errorHandler: installedModules[moduleId].hot._selfAccepted
/******/ 				});
/******/ 		}
/******/ 	
/******/ 		// Now in "dispose" phase
/******/ 		hotSetStatus("dispose");
/******/ 		var queue = outdatedModules.slice();
/******/ 		while(queue.length > 0) {
/******/ 			var moduleId = queue.pop();
/******/ 			var module = installedModules[moduleId];
/******/ 			if(!module) continue;
/******/ 	
/******/ 			var data = {};
/******/ 	
/******/ 			// Call dispose handlers
/******/ 			var disposeHandlers = module.hot._disposeHandlers;
/******/ 			for(var j = 0; j < disposeHandlers.length; j++) {
/******/ 				var cb = disposeHandlers[j];
/******/ 				cb(data);
/******/ 			}
/******/ 			hotCurrentModuleData[moduleId] = data;
/******/ 	
/******/ 			// disable module (this disables requires from this module)
/******/ 			module.hot.active = false;
/******/ 	
/******/ 			// remove module from cache
/******/ 			delete installedModules[moduleId];
/******/ 	
/******/ 			// remove "parents" references from all children
/******/ 			for(var j = 0; j < module.children.length; j++) {
/******/ 				var child = installedModules[module.children[j]];
/******/ 				if(!child) continue;
/******/ 				var idx = child.parents.indexOf(moduleId);
/******/ 				if(idx >= 0) {
/******/ 					child.parents.splice(idx, 1);
/******/ 				}
/******/ 			}
/******/ 		}
/******/ 	
/******/ 		// remove outdated dependency from module children
/******/ 		for(var moduleId in outdatedDependencies) {
/******/ 			if(Object.prototype.hasOwnProperty.call(outdatedDependencies, moduleId)) {
/******/ 				var module = installedModules[moduleId];
/******/ 				var moduleOutdatedDependencies = outdatedDependencies[moduleId];
/******/ 				for(var j = 0; j < moduleOutdatedDependencies.length; j++) {
/******/ 					var dependency = moduleOutdatedDependencies[j];
/******/ 					var idx = module.children.indexOf(dependency);
/******/ 					if(idx >= 0) module.children.splice(idx, 1);
/******/ 				}
/******/ 			}
/******/ 		}
/******/ 	
/******/ 		// Not in "apply" phase
/******/ 		hotSetStatus("apply");
/******/ 	
/******/ 		hotCurrentHash = hotUpdateNewHash;
/******/ 	
/******/ 		// insert new code
/******/ 		for(var moduleId in appliedUpdate) {
/******/ 			if(Object.prototype.hasOwnProperty.call(appliedUpdate, moduleId)) {
/******/ 				modules[moduleId] = appliedUpdate[moduleId];
/******/ 			}
/******/ 		}
/******/ 	
/******/ 		// call accept handlers
/******/ 		var error = null;
/******/ 		for(var moduleId in outdatedDependencies) {
/******/ 			if(Object.prototype.hasOwnProperty.call(outdatedDependencies, moduleId)) {
/******/ 				var module = installedModules[moduleId];
/******/ 				var moduleOutdatedDependencies = outdatedDependencies[moduleId];
/******/ 				var callbacks = [];
/******/ 				for(var i = 0; i < moduleOutdatedDependencies.length; i++) {
/******/ 					var dependency = moduleOutdatedDependencies[i];
/******/ 					var cb = module.hot._acceptedDependencies[dependency];
/******/ 					if(callbacks.indexOf(cb) >= 0) continue;
/******/ 					callbacks.push(cb);
/******/ 				}
/******/ 				for(var i = 0; i < callbacks.length; i++) {
/******/ 					var cb = callbacks[i];
/******/ 					try {
/******/ 						cb(outdatedDependencies);
/******/ 					} catch(err) {
/******/ 						if(!error)
/******/ 							error = err;
/******/ 					}
/******/ 				}
/******/ 			}
/******/ 		}
/******/ 	
/******/ 		// Load self accepted modules
/******/ 		for(var i = 0; i < outdatedSelfAcceptedModules.length; i++) {
/******/ 			var item = outdatedSelfAcceptedModules[i];
/******/ 			var moduleId = item.module;
/******/ 			hotCurrentParents = [moduleId];
/******/ 			try {
/******/ 				__webpack_require__(moduleId);
/******/ 			} catch(err) {
/******/ 				if(typeof item.errorHandler === "function") {
/******/ 					try {
/******/ 						item.errorHandler(err);
/******/ 					} catch(err) {
/******/ 						if(!error)
/******/ 							error = err;
/******/ 					}
/******/ 				} else if(!error)
/******/ 					error = err;
/******/ 			}
/******/ 		}
/******/ 	
/******/ 		// handle errors in accept handlers and self accepted module load
/******/ 		if(error) {
/******/ 			hotSetStatus("fail");
/******/ 			return callback(error);
/******/ 		}
/******/ 	
/******/ 		hotSetStatus("idle");
/******/ 		callback(null, outdatedModules);
/******/ 	}

/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false,
/******/ 			hot: hotCreateModule(moduleId),
/******/ 			parents: hotCurrentParents,
/******/ 			children: []
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, hotCreateRequire(moduleId));

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "http://127.0.0.1:8080/build/";

/******/ 	// __webpack_hash__
/******/ 	__webpack_require__.h = function() { return hotCurrentHash; };

/******/ 	// Load entry module and return exports
/******/ 	return hotCreateRequire(0)(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(1);
	__webpack_require__(75);
	module.exports = __webpack_require__(77);


/***/ },
/* 1 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(__resourceQuery) {var url = __webpack_require__(2);
	var stripAnsi = __webpack_require__(8);
	var socket = __webpack_require__(10);

	function getCurrentScriptSource() {
		// `document.currentScript` is the most accurate way to find the current script,
		// but is not supported in all browsers.
		if(document.currentScript)
			return document.currentScript.getAttribute("src");
		// Fall back to getting all scripts in the document.
		var scriptElements = document.scripts || [];
		var currentScript = scriptElements[scriptElements.length - 1];
		if(currentScript)
			return currentScript.getAttribute("src");
		// Fail as there was no script to use.
		throw new Error("[WDS] Failed to get current script source");
	}

	var urlParts;
	if(true) {
		// If this bundle is inlined, use the resource query to get the correct url.
		urlParts = url.parse(__resourceQuery.substr(1));
	} else {
		// Else, get the url from the <script> this file was called with.
		var scriptHost = getCurrentScriptSource();
		scriptHost = scriptHost.replace(/\/[^\/]+$/, "");
		urlParts = url.parse((scriptHost ? scriptHost : "/"), false, true);
	}

	var hot = false;
	var initial = true;
	var currentHash = "";
	var logLevel = "info";

	function log(level, msg) {
		if(logLevel === "info" && level === "info")
			return console.log(msg);
		if(["info", "warning"].indexOf(logLevel) >= 0 && level === "warning")
			return console.warn(msg);
		if(["info", "warning", "error"].indexOf(logLevel) >= 0 && level === "error")
			return console.error(msg);
	}

	var onSocketMsg = {
		hot: function() {
			hot = true;
			log("info", "[WDS] Hot Module Replacement enabled.");
		},
		invalid: function() {
			log("info", "[WDS] App updated. Recompiling...");
		},
		hash: function(hash) {
			currentHash = hash;
		},
		"still-ok": function() {
			log("info", "[WDS] Nothing changed.")
		},
		"log-level": function(level) {
			logLevel = level;
		},
		ok: function() {
			if(initial) return initial = false;
			reloadApp();
		},
		warnings: function(warnings) {
			log("info", "[WDS] Warnings while compiling.");
			for(var i = 0; i < warnings.length; i++)
				console.warn(stripAnsi(warnings[i]));
			if(initial) return initial = false;
			reloadApp();
		},
		errors: function(errors) {
			log("info", "[WDS] Errors while compiling.");
			for(var i = 0; i < errors.length; i++)
				console.error(stripAnsi(errors[i]));
			if(initial) return initial = false;
			reloadApp();
		},
		"proxy-error": function(errors) {
			log("info", "[WDS] Proxy error.");
			for(var i = 0; i < errors.length; i++)
				log("error", stripAnsi(errors[i]));
			if(initial) return initial = false;
		},
		close: function() {
			log("error", "[WDS] Disconnected!");
		}
	};

	var hostname = urlParts.hostname;
	var protocol = urlParts.protocol;

	if(urlParts.hostname === '0.0.0.0') {
		// why do we need this check?
		// hostname n/a for file protocol (example, when using electron, ionic)
		// see: https://github.com/webpack/webpack-dev-server/pull/384
		if(window.location.hostname && !!~window.location.protocol.indexOf('http')) {
			hostname = window.location.hostname;
		}
	}

	// `hostname` can be empty when the script path is relative. In that case, specifying
	// a protocol would result in an invalid URL.
	// When https is used in the app, secure websockets are always necessary
	// because the browser doesn't accept non-secure websockets.
	if(hostname && (window.location.protocol === "https:" || urlParts.hostname === '0.0.0.0')) {
		protocol = window.location.protocol;
	}

	var socketUrl = url.format({
		protocol: protocol,
		auth: urlParts.auth,
		hostname: hostname,
		port: (urlParts.port === '0') ? window.location.port : urlParts.port,
		pathname: urlParts.path == null || urlParts.path === '/' ? "/sockjs-node" : urlParts.path
	});

	socket(socketUrl, onSocketMsg);

	function reloadApp() {
		if(hot) {
			log("info", "[WDS] App hot update...");
			window.postMessage("webpackHotUpdate" + currentHash, "*");
		} else {
			log("info", "[WDS] App updated. Reloading...");
			window.location.reload();
		}
	}

	/* WEBPACK VAR INJECTION */}.call(exports, "?http://127.0.0.1:8080/"))

/***/ },
/* 2 */
/***/ function(module, exports, __webpack_require__) {

	// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.

	var punycode = __webpack_require__(3);

	exports.parse = urlParse;
	exports.resolve = urlResolve;
	exports.resolveObject = urlResolveObject;
	exports.format = urlFormat;

	exports.Url = Url;

	function Url() {
	  this.protocol = null;
	  this.slashes = null;
	  this.auth = null;
	  this.host = null;
	  this.port = null;
	  this.hostname = null;
	  this.hash = null;
	  this.search = null;
	  this.query = null;
	  this.pathname = null;
	  this.path = null;
	  this.href = null;
	}

	// Reference: RFC 3986, RFC 1808, RFC 2396

	// define these here so at least they only have to be
	// compiled once on the first module load.
	var protocolPattern = /^([a-z0-9.+-]+:)/i,
	    portPattern = /:[0-9]*$/,

	    // RFC 2396: characters reserved for delimiting URLs.
	    // We actually just auto-escape these.
	    delims = ['<', '>', '"', '`', ' ', '\r', '\n', '\t'],

	    // RFC 2396: characters not allowed for various reasons.
	    unwise = ['{', '}', '|', '\\', '^', '`'].concat(delims),

	    // Allowed by RFCs, but cause of XSS attacks.  Always escape these.
	    autoEscape = ['\''].concat(unwise),
	    // Characters that are never ever allowed in a hostname.
	    // Note that any invalid chars are also handled, but these
	    // are the ones that are *expected* to be seen, so we fast-path
	    // them.
	    nonHostChars = ['%', '/', '?', ';', '#'].concat(autoEscape),
	    hostEndingChars = ['/', '?', '#'],
	    hostnameMaxLen = 255,
	    hostnamePartPattern = /^[a-z0-9A-Z_-]{0,63}$/,
	    hostnamePartStart = /^([a-z0-9A-Z_-]{0,63})(.*)$/,
	    // protocols that can allow "unsafe" and "unwise" chars.
	    unsafeProtocol = {
	      'javascript': true,
	      'javascript:': true
	    },
	    // protocols that never have a hostname.
	    hostlessProtocol = {
	      'javascript': true,
	      'javascript:': true
	    },
	    // protocols that always contain a // bit.
	    slashedProtocol = {
	      'http': true,
	      'https': true,
	      'ftp': true,
	      'gopher': true,
	      'file': true,
	      'http:': true,
	      'https:': true,
	      'ftp:': true,
	      'gopher:': true,
	      'file:': true
	    },
	    querystring = __webpack_require__(5);

	function urlParse(url, parseQueryString, slashesDenoteHost) {
	  if (url && isObject(url) && url instanceof Url) return url;

	  var u = new Url;
	  u.parse(url, parseQueryString, slashesDenoteHost);
	  return u;
	}

	Url.prototype.parse = function(url, parseQueryString, slashesDenoteHost) {
	  if (!isString(url)) {
	    throw new TypeError("Parameter 'url' must be a string, not " + typeof url);
	  }

	  var rest = url;

	  // trim before proceeding.
	  // This is to support parse stuff like "  http://foo.com  \n"
	  rest = rest.trim();

	  var proto = protocolPattern.exec(rest);
	  if (proto) {
	    proto = proto[0];
	    var lowerProto = proto.toLowerCase();
	    this.protocol = lowerProto;
	    rest = rest.substr(proto.length);
	  }

	  // figure out if it's got a host
	  // user@server is *always* interpreted as a hostname, and url
	  // resolution will treat //foo/bar as host=foo,path=bar because that's
	  // how the browser resolves relative URLs.
	  if (slashesDenoteHost || proto || rest.match(/^\/\/[^@\/]+@[^@\/]+/)) {
	    var slashes = rest.substr(0, 2) === '//';
	    if (slashes && !(proto && hostlessProtocol[proto])) {
	      rest = rest.substr(2);
	      this.slashes = true;
	    }
	  }

	  if (!hostlessProtocol[proto] &&
	      (slashes || (proto && !slashedProtocol[proto]))) {

	    // there's a hostname.
	    // the first instance of /, ?, ;, or # ends the host.
	    //
	    // If there is an @ in the hostname, then non-host chars *are* allowed
	    // to the left of the last @ sign, unless some host-ending character
	    // comes *before* the @-sign.
	    // URLs are obnoxious.
	    //
	    // ex:
	    // http://a@b@c/ => user:a@b host:c
	    // http://a@b?@c => user:a host:c path:/?@c

	    // v0.12 TODO(isaacs): This is not quite how Chrome does things.
	    // Review our test case against browsers more comprehensively.

	    // find the first instance of any hostEndingChars
	    var hostEnd = -1;
	    for (var i = 0; i < hostEndingChars.length; i++) {
	      var hec = rest.indexOf(hostEndingChars[i]);
	      if (hec !== -1 && (hostEnd === -1 || hec < hostEnd))
	        hostEnd = hec;
	    }

	    // at this point, either we have an explicit point where the
	    // auth portion cannot go past, or the last @ char is the decider.
	    var auth, atSign;
	    if (hostEnd === -1) {
	      // atSign can be anywhere.
	      atSign = rest.lastIndexOf('@');
	    } else {
	      // atSign must be in auth portion.
	      // http://a@b/c@d => host:b auth:a path:/c@d
	      atSign = rest.lastIndexOf('@', hostEnd);
	    }

	    // Now we have a portion which is definitely the auth.
	    // Pull that off.
	    if (atSign !== -1) {
	      auth = rest.slice(0, atSign);
	      rest = rest.slice(atSign + 1);
	      this.auth = decodeURIComponent(auth);
	    }

	    // the host is the remaining to the left of the first non-host char
	    hostEnd = -1;
	    for (var i = 0; i < nonHostChars.length; i++) {
	      var hec = rest.indexOf(nonHostChars[i]);
	      if (hec !== -1 && (hostEnd === -1 || hec < hostEnd))
	        hostEnd = hec;
	    }
	    // if we still have not hit it, then the entire thing is a host.
	    if (hostEnd === -1)
	      hostEnd = rest.length;

	    this.host = rest.slice(0, hostEnd);
	    rest = rest.slice(hostEnd);

	    // pull out port.
	    this.parseHost();

	    // we've indicated that there is a hostname,
	    // so even if it's empty, it has to be present.
	    this.hostname = this.hostname || '';

	    // if hostname begins with [ and ends with ]
	    // assume that it's an IPv6 address.
	    var ipv6Hostname = this.hostname[0] === '[' &&
	        this.hostname[this.hostname.length - 1] === ']';

	    // validate a little.
	    if (!ipv6Hostname) {
	      var hostparts = this.hostname.split(/\./);
	      for (var i = 0, l = hostparts.length; i < l; i++) {
	        var part = hostparts[i];
	        if (!part) continue;
	        if (!part.match(hostnamePartPattern)) {
	          var newpart = '';
	          for (var j = 0, k = part.length; j < k; j++) {
	            if (part.charCodeAt(j) > 127) {
	              // we replace non-ASCII char with a temporary placeholder
	              // we need this to make sure size of hostname is not
	              // broken by replacing non-ASCII by nothing
	              newpart += 'x';
	            } else {
	              newpart += part[j];
	            }
	          }
	          // we test again with ASCII char only
	          if (!newpart.match(hostnamePartPattern)) {
	            var validParts = hostparts.slice(0, i);
	            var notHost = hostparts.slice(i + 1);
	            var bit = part.match(hostnamePartStart);
	            if (bit) {
	              validParts.push(bit[1]);
	              notHost.unshift(bit[2]);
	            }
	            if (notHost.length) {
	              rest = '/' + notHost.join('.') + rest;
	            }
	            this.hostname = validParts.join('.');
	            break;
	          }
	        }
	      }
	    }

	    if (this.hostname.length > hostnameMaxLen) {
	      this.hostname = '';
	    } else {
	      // hostnames are always lower case.
	      this.hostname = this.hostname.toLowerCase();
	    }

	    if (!ipv6Hostname) {
	      // IDNA Support: Returns a puny coded representation of "domain".
	      // It only converts the part of the domain name that
	      // has non ASCII characters. I.e. it dosent matter if
	      // you call it with a domain that already is in ASCII.
	      var domainArray = this.hostname.split('.');
	      var newOut = [];
	      for (var i = 0; i < domainArray.length; ++i) {
	        var s = domainArray[i];
	        newOut.push(s.match(/[^A-Za-z0-9_-]/) ?
	            'xn--' + punycode.encode(s) : s);
	      }
	      this.hostname = newOut.join('.');
	    }

	    var p = this.port ? ':' + this.port : '';
	    var h = this.hostname || '';
	    this.host = h + p;
	    this.href += this.host;

	    // strip [ and ] from the hostname
	    // the host field still retains them, though
	    if (ipv6Hostname) {
	      this.hostname = this.hostname.substr(1, this.hostname.length - 2);
	      if (rest[0] !== '/') {
	        rest = '/' + rest;
	      }
	    }
	  }

	  // now rest is set to the post-host stuff.
	  // chop off any delim chars.
	  if (!unsafeProtocol[lowerProto]) {

	    // First, make 100% sure that any "autoEscape" chars get
	    // escaped, even if encodeURIComponent doesn't think they
	    // need to be.
	    for (var i = 0, l = autoEscape.length; i < l; i++) {
	      var ae = autoEscape[i];
	      var esc = encodeURIComponent(ae);
	      if (esc === ae) {
	        esc = escape(ae);
	      }
	      rest = rest.split(ae).join(esc);
	    }
	  }


	  // chop off from the tail first.
	  var hash = rest.indexOf('#');
	  if (hash !== -1) {
	    // got a fragment string.
	    this.hash = rest.substr(hash);
	    rest = rest.slice(0, hash);
	  }
	  var qm = rest.indexOf('?');
	  if (qm !== -1) {
	    this.search = rest.substr(qm);
	    this.query = rest.substr(qm + 1);
	    if (parseQueryString) {
	      this.query = querystring.parse(this.query);
	    }
	    rest = rest.slice(0, qm);
	  } else if (parseQueryString) {
	    // no query string, but parseQueryString still requested
	    this.search = '';
	    this.query = {};
	  }
	  if (rest) this.pathname = rest;
	  if (slashedProtocol[lowerProto] &&
	      this.hostname && !this.pathname) {
	    this.pathname = '/';
	  }

	  //to support http.request
	  if (this.pathname || this.search) {
	    var p = this.pathname || '';
	    var s = this.search || '';
	    this.path = p + s;
	  }

	  // finally, reconstruct the href based on what has been validated.
	  this.href = this.format();
	  return this;
	};

	// format a parsed object into a url string
	function urlFormat(obj) {
	  // ensure it's an object, and not a string url.
	  // If it's an obj, this is a no-op.
	  // this way, you can call url_format() on strings
	  // to clean up potentially wonky urls.
	  if (isString(obj)) obj = urlParse(obj);
	  if (!(obj instanceof Url)) return Url.prototype.format.call(obj);
	  return obj.format();
	}

	Url.prototype.format = function() {
	  var auth = this.auth || '';
	  if (auth) {
	    auth = encodeURIComponent(auth);
	    auth = auth.replace(/%3A/i, ':');
	    auth += '@';
	  }

	  var protocol = this.protocol || '',
	      pathname = this.pathname || '',
	      hash = this.hash || '',
	      host = false,
	      query = '';

	  if (this.host) {
	    host = auth + this.host;
	  } else if (this.hostname) {
	    host = auth + (this.hostname.indexOf(':') === -1 ?
	        this.hostname :
	        '[' + this.hostname + ']');
	    if (this.port) {
	      host += ':' + this.port;
	    }
	  }

	  if (this.query &&
	      isObject(this.query) &&
	      Object.keys(this.query).length) {
	    query = querystring.stringify(this.query);
	  }

	  var search = this.search || (query && ('?' + query)) || '';

	  if (protocol && protocol.substr(-1) !== ':') protocol += ':';

	  // only the slashedProtocols get the //.  Not mailto:, xmpp:, etc.
	  // unless they had them to begin with.
	  if (this.slashes ||
	      (!protocol || slashedProtocol[protocol]) && host !== false) {
	    host = '//' + (host || '');
	    if (pathname && pathname.charAt(0) !== '/') pathname = '/' + pathname;
	  } else if (!host) {
	    host = '';
	  }

	  if (hash && hash.charAt(0) !== '#') hash = '#' + hash;
	  if (search && search.charAt(0) !== '?') search = '?' + search;

	  pathname = pathname.replace(/[?#]/g, function(match) {
	    return encodeURIComponent(match);
	  });
	  search = search.replace('#', '%23');

	  return protocol + host + pathname + search + hash;
	};

	function urlResolve(source, relative) {
	  return urlParse(source, false, true).resolve(relative);
	}

	Url.prototype.resolve = function(relative) {
	  return this.resolveObject(urlParse(relative, false, true)).format();
	};

	function urlResolveObject(source, relative) {
	  if (!source) return relative;
	  return urlParse(source, false, true).resolveObject(relative);
	}

	Url.prototype.resolveObject = function(relative) {
	  if (isString(relative)) {
	    var rel = new Url();
	    rel.parse(relative, false, true);
	    relative = rel;
	  }

	  var result = new Url();
	  Object.keys(this).forEach(function(k) {
	    result[k] = this[k];
	  }, this);

	  // hash is always overridden, no matter what.
	  // even href="" will remove it.
	  result.hash = relative.hash;

	  // if the relative url is empty, then there's nothing left to do here.
	  if (relative.href === '') {
	    result.href = result.format();
	    return result;
	  }

	  // hrefs like //foo/bar always cut to the protocol.
	  if (relative.slashes && !relative.protocol) {
	    // take everything except the protocol from relative
	    Object.keys(relative).forEach(function(k) {
	      if (k !== 'protocol')
	        result[k] = relative[k];
	    });

	    //urlParse appends trailing / to urls like http://www.example.com
	    if (slashedProtocol[result.protocol] &&
	        result.hostname && !result.pathname) {
	      result.path = result.pathname = '/';
	    }

	    result.href = result.format();
	    return result;
	  }

	  if (relative.protocol && relative.protocol !== result.protocol) {
	    // if it's a known url protocol, then changing
	    // the protocol does weird things
	    // first, if it's not file:, then we MUST have a host,
	    // and if there was a path
	    // to begin with, then we MUST have a path.
	    // if it is file:, then the host is dropped,
	    // because that's known to be hostless.
	    // anything else is assumed to be absolute.
	    if (!slashedProtocol[relative.protocol]) {
	      Object.keys(relative).forEach(function(k) {
	        result[k] = relative[k];
	      });
	      result.href = result.format();
	      return result;
	    }

	    result.protocol = relative.protocol;
	    if (!relative.host && !hostlessProtocol[relative.protocol]) {
	      var relPath = (relative.pathname || '').split('/');
	      while (relPath.length && !(relative.host = relPath.shift()));
	      if (!relative.host) relative.host = '';
	      if (!relative.hostname) relative.hostname = '';
	      if (relPath[0] !== '') relPath.unshift('');
	      if (relPath.length < 2) relPath.unshift('');
	      result.pathname = relPath.join('/');
	    } else {
	      result.pathname = relative.pathname;
	    }
	    result.search = relative.search;
	    result.query = relative.query;
	    result.host = relative.host || '';
	    result.auth = relative.auth;
	    result.hostname = relative.hostname || relative.host;
	    result.port = relative.port;
	    // to support http.request
	    if (result.pathname || result.search) {
	      var p = result.pathname || '';
	      var s = result.search || '';
	      result.path = p + s;
	    }
	    result.slashes = result.slashes || relative.slashes;
	    result.href = result.format();
	    return result;
	  }

	  var isSourceAbs = (result.pathname && result.pathname.charAt(0) === '/'),
	      isRelAbs = (
	          relative.host ||
	          relative.pathname && relative.pathname.charAt(0) === '/'
	      ),
	      mustEndAbs = (isRelAbs || isSourceAbs ||
	                    (result.host && relative.pathname)),
	      removeAllDots = mustEndAbs,
	      srcPath = result.pathname && result.pathname.split('/') || [],
	      relPath = relative.pathname && relative.pathname.split('/') || [],
	      psychotic = result.protocol && !slashedProtocol[result.protocol];

	  // if the url is a non-slashed url, then relative
	  // links like ../.. should be able
	  // to crawl up to the hostname, as well.  This is strange.
	  // result.protocol has already been set by now.
	  // Later on, put the first path part into the host field.
	  if (psychotic) {
	    result.hostname = '';
	    result.port = null;
	    if (result.host) {
	      if (srcPath[0] === '') srcPath[0] = result.host;
	      else srcPath.unshift(result.host);
	    }
	    result.host = '';
	    if (relative.protocol) {
	      relative.hostname = null;
	      relative.port = null;
	      if (relative.host) {
	        if (relPath[0] === '') relPath[0] = relative.host;
	        else relPath.unshift(relative.host);
	      }
	      relative.host = null;
	    }
	    mustEndAbs = mustEndAbs && (relPath[0] === '' || srcPath[0] === '');
	  }

	  if (isRelAbs) {
	    // it's absolute.
	    result.host = (relative.host || relative.host === '') ?
	                  relative.host : result.host;
	    result.hostname = (relative.hostname || relative.hostname === '') ?
	                      relative.hostname : result.hostname;
	    result.search = relative.search;
	    result.query = relative.query;
	    srcPath = relPath;
	    // fall through to the dot-handling below.
	  } else if (relPath.length) {
	    // it's relative
	    // throw away the existing file, and take the new path instead.
	    if (!srcPath) srcPath = [];
	    srcPath.pop();
	    srcPath = srcPath.concat(relPath);
	    result.search = relative.search;
	    result.query = relative.query;
	  } else if (!isNullOrUndefined(relative.search)) {
	    // just pull out the search.
	    // like href='?foo'.
	    // Put this after the other two cases because it simplifies the booleans
	    if (psychotic) {
	      result.hostname = result.host = srcPath.shift();
	      //occationaly the auth can get stuck only in host
	      //this especialy happens in cases like
	      //url.resolveObject('mailto:local1@domain1', 'local2@domain2')
	      var authInHost = result.host && result.host.indexOf('@') > 0 ?
	                       result.host.split('@') : false;
	      if (authInHost) {
	        result.auth = authInHost.shift();
	        result.host = result.hostname = authInHost.shift();
	      }
	    }
	    result.search = relative.search;
	    result.query = relative.query;
	    //to support http.request
	    if (!isNull(result.pathname) || !isNull(result.search)) {
	      result.path = (result.pathname ? result.pathname : '') +
	                    (result.search ? result.search : '');
	    }
	    result.href = result.format();
	    return result;
	  }

	  if (!srcPath.length) {
	    // no path at all.  easy.
	    // we've already handled the other stuff above.
	    result.pathname = null;
	    //to support http.request
	    if (result.search) {
	      result.path = '/' + result.search;
	    } else {
	      result.path = null;
	    }
	    result.href = result.format();
	    return result;
	  }

	  // if a url ENDs in . or .., then it must get a trailing slash.
	  // however, if it ends in anything else non-slashy,
	  // then it must NOT get a trailing slash.
	  var last = srcPath.slice(-1)[0];
	  var hasTrailingSlash = (
	      (result.host || relative.host) && (last === '.' || last === '..') ||
	      last === '');

	  // strip single dots, resolve double dots to parent dir
	  // if the path tries to go above the root, `up` ends up > 0
	  var up = 0;
	  for (var i = srcPath.length; i >= 0; i--) {
	    last = srcPath[i];
	    if (last == '.') {
	      srcPath.splice(i, 1);
	    } else if (last === '..') {
	      srcPath.splice(i, 1);
	      up++;
	    } else if (up) {
	      srcPath.splice(i, 1);
	      up--;
	    }
	  }

	  // if the path is allowed to go above the root, restore leading ..s
	  if (!mustEndAbs && !removeAllDots) {
	    for (; up--; up) {
	      srcPath.unshift('..');
	    }
	  }

	  if (mustEndAbs && srcPath[0] !== '' &&
	      (!srcPath[0] || srcPath[0].charAt(0) !== '/')) {
	    srcPath.unshift('');
	  }

	  if (hasTrailingSlash && (srcPath.join('/').substr(-1) !== '/')) {
	    srcPath.push('');
	  }

	  var isAbsolute = srcPath[0] === '' ||
	      (srcPath[0] && srcPath[0].charAt(0) === '/');

	  // put the host back
	  if (psychotic) {
	    result.hostname = result.host = isAbsolute ? '' :
	                                    srcPath.length ? srcPath.shift() : '';
	    //occationaly the auth can get stuck only in host
	    //this especialy happens in cases like
	    //url.resolveObject('mailto:local1@domain1', 'local2@domain2')
	    var authInHost = result.host && result.host.indexOf('@') > 0 ?
	                     result.host.split('@') : false;
	    if (authInHost) {
	      result.auth = authInHost.shift();
	      result.host = result.hostname = authInHost.shift();
	    }
	  }

	  mustEndAbs = mustEndAbs || (result.host && srcPath.length);

	  if (mustEndAbs && !isAbsolute) {
	    srcPath.unshift('');
	  }

	  if (!srcPath.length) {
	    result.pathname = null;
	    result.path = null;
	  } else {
	    result.pathname = srcPath.join('/');
	  }

	  //to support request.http
	  if (!isNull(result.pathname) || !isNull(result.search)) {
	    result.path = (result.pathname ? result.pathname : '') +
	                  (result.search ? result.search : '');
	  }
	  result.auth = relative.auth || result.auth;
	  result.slashes = result.slashes || relative.slashes;
	  result.href = result.format();
	  return result;
	};

	Url.prototype.parseHost = function() {
	  var host = this.host;
	  var port = portPattern.exec(host);
	  if (port) {
	    port = port[0];
	    if (port !== ':') {
	      this.port = port.substr(1);
	    }
	    host = host.substr(0, host.length - port.length);
	  }
	  if (host) this.hostname = host;
	};

	function isString(arg) {
	  return typeof arg === "string";
	}

	function isObject(arg) {
	  return typeof arg === 'object' && arg !== null;
	}

	function isNull(arg) {
	  return arg === null;
	}
	function isNullOrUndefined(arg) {
	  return  arg == null;
	}


/***/ },
/* 3 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(module, global) {/*! https://mths.be/punycode v1.3.2 by @mathias */
	;(function(root) {

		/** Detect free variables */
		var freeExports = typeof exports == 'object' && exports &&
			!exports.nodeType && exports;
		var freeModule = typeof module == 'object' && module &&
			!module.nodeType && module;
		var freeGlobal = typeof global == 'object' && global;
		if (
			freeGlobal.global === freeGlobal ||
			freeGlobal.window === freeGlobal ||
			freeGlobal.self === freeGlobal
		) {
			root = freeGlobal;
		}

		/**
		 * The `punycode` object.
		 * @name punycode
		 * @type Object
		 */
		var punycode,

		/** Highest positive signed 32-bit float value */
		maxInt = 2147483647, // aka. 0x7FFFFFFF or 2^31-1

		/** Bootstring parameters */
		base = 36,
		tMin = 1,
		tMax = 26,
		skew = 38,
		damp = 700,
		initialBias = 72,
		initialN = 128, // 0x80
		delimiter = '-', // '\x2D'

		/** Regular expressions */
		regexPunycode = /^xn--/,
		regexNonASCII = /[^\x20-\x7E]/, // unprintable ASCII chars + non-ASCII chars
		regexSeparators = /[\x2E\u3002\uFF0E\uFF61]/g, // RFC 3490 separators

		/** Error messages */
		errors = {
			'overflow': 'Overflow: input needs wider integers to process',
			'not-basic': 'Illegal input >= 0x80 (not a basic code point)',
			'invalid-input': 'Invalid input'
		},

		/** Convenience shortcuts */
		baseMinusTMin = base - tMin,
		floor = Math.floor,
		stringFromCharCode = String.fromCharCode,

		/** Temporary variable */
		key;

		/*--------------------------------------------------------------------------*/

		/**
		 * A generic error utility function.
		 * @private
		 * @param {String} type The error type.
		 * @returns {Error} Throws a `RangeError` with the applicable error message.
		 */
		function error(type) {
			throw RangeError(errors[type]);
		}

		/**
		 * A generic `Array#map` utility function.
		 * @private
		 * @param {Array} array The array to iterate over.
		 * @param {Function} callback The function that gets called for every array
		 * item.
		 * @returns {Array} A new array of values returned by the callback function.
		 */
		function map(array, fn) {
			var length = array.length;
			var result = [];
			while (length--) {
				result[length] = fn(array[length]);
			}
			return result;
		}

		/**
		 * A simple `Array#map`-like wrapper to work with domain name strings or email
		 * addresses.
		 * @private
		 * @param {String} domain The domain name or email address.
		 * @param {Function} callback The function that gets called for every
		 * character.
		 * @returns {Array} A new string of characters returned by the callback
		 * function.
		 */
		function mapDomain(string, fn) {
			var parts = string.split('@');
			var result = '';
			if (parts.length > 1) {
				// In email addresses, only the domain name should be punycoded. Leave
				// the local part (i.e. everything up to `@`) intact.
				result = parts[0] + '@';
				string = parts[1];
			}
			// Avoid `split(regex)` for IE8 compatibility. See #17.
			string = string.replace(regexSeparators, '\x2E');
			var labels = string.split('.');
			var encoded = map(labels, fn).join('.');
			return result + encoded;
		}

		/**
		 * Creates an array containing the numeric code points of each Unicode
		 * character in the string. While JavaScript uses UCS-2 internally,
		 * this function will convert a pair of surrogate halves (each of which
		 * UCS-2 exposes as separate characters) into a single code point,
		 * matching UTF-16.
		 * @see `punycode.ucs2.encode`
		 * @see <https://mathiasbynens.be/notes/javascript-encoding>
		 * @memberOf punycode.ucs2
		 * @name decode
		 * @param {String} string The Unicode input string (UCS-2).
		 * @returns {Array} The new array of code points.
		 */
		function ucs2decode(string) {
			var output = [],
			    counter = 0,
			    length = string.length,
			    value,
			    extra;
			while (counter < length) {
				value = string.charCodeAt(counter++);
				if (value >= 0xD800 && value <= 0xDBFF && counter < length) {
					// high surrogate, and there is a next character
					extra = string.charCodeAt(counter++);
					if ((extra & 0xFC00) == 0xDC00) { // low surrogate
						output.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);
					} else {
						// unmatched surrogate; only append this code unit, in case the next
						// code unit is the high surrogate of a surrogate pair
						output.push(value);
						counter--;
					}
				} else {
					output.push(value);
				}
			}
			return output;
		}

		/**
		 * Creates a string based on an array of numeric code points.
		 * @see `punycode.ucs2.decode`
		 * @memberOf punycode.ucs2
		 * @name encode
		 * @param {Array} codePoints The array of numeric code points.
		 * @returns {String} The new Unicode string (UCS-2).
		 */
		function ucs2encode(array) {
			return map(array, function(value) {
				var output = '';
				if (value > 0xFFFF) {
					value -= 0x10000;
					output += stringFromCharCode(value >>> 10 & 0x3FF | 0xD800);
					value = 0xDC00 | value & 0x3FF;
				}
				output += stringFromCharCode(value);
				return output;
			}).join('');
		}

		/**
		 * Converts a basic code point into a digit/integer.
		 * @see `digitToBasic()`
		 * @private
		 * @param {Number} codePoint The basic numeric code point value.
		 * @returns {Number} The numeric value of a basic code point (for use in
		 * representing integers) in the range `0` to `base - 1`, or `base` if
		 * the code point does not represent a value.
		 */
		function basicToDigit(codePoint) {
			if (codePoint - 48 < 10) {
				return codePoint - 22;
			}
			if (codePoint - 65 < 26) {
				return codePoint - 65;
			}
			if (codePoint - 97 < 26) {
				return codePoint - 97;
			}
			return base;
		}

		/**
		 * Converts a digit/integer into a basic code point.
		 * @see `basicToDigit()`
		 * @private
		 * @param {Number} digit The numeric value of a basic code point.
		 * @returns {Number} The basic code point whose value (when used for
		 * representing integers) is `digit`, which needs to be in the range
		 * `0` to `base - 1`. If `flag` is non-zero, the uppercase form is
		 * used; else, the lowercase form is used. The behavior is undefined
		 * if `flag` is non-zero and `digit` has no uppercase form.
		 */
		function digitToBasic(digit, flag) {
			//  0..25 map to ASCII a..z or A..Z
			// 26..35 map to ASCII 0..9
			return digit + 22 + 75 * (digit < 26) - ((flag != 0) << 5);
		}

		/**
		 * Bias adaptation function as per section 3.4 of RFC 3492.
		 * http://tools.ietf.org/html/rfc3492#section-3.4
		 * @private
		 */
		function adapt(delta, numPoints, firstTime) {
			var k = 0;
			delta = firstTime ? floor(delta / damp) : delta >> 1;
			delta += floor(delta / numPoints);
			for (/* no initialization */; delta > baseMinusTMin * tMax >> 1; k += base) {
				delta = floor(delta / baseMinusTMin);
			}
			return floor(k + (baseMinusTMin + 1) * delta / (delta + skew));
		}

		/**
		 * Converts a Punycode string of ASCII-only symbols to a string of Unicode
		 * symbols.
		 * @memberOf punycode
		 * @param {String} input The Punycode string of ASCII-only symbols.
		 * @returns {String} The resulting string of Unicode symbols.
		 */
		function decode(input) {
			// Don't use UCS-2
			var output = [],
			    inputLength = input.length,
			    out,
			    i = 0,
			    n = initialN,
			    bias = initialBias,
			    basic,
			    j,
			    index,
			    oldi,
			    w,
			    k,
			    digit,
			    t,
			    /** Cached calculation results */
			    baseMinusT;

			// Handle the basic code points: let `basic` be the number of input code
			// points before the last delimiter, or `0` if there is none, then copy
			// the first basic code points to the output.

			basic = input.lastIndexOf(delimiter);
			if (basic < 0) {
				basic = 0;
			}

			for (j = 0; j < basic; ++j) {
				// if it's not a basic code point
				if (input.charCodeAt(j) >= 0x80) {
					error('not-basic');
				}
				output.push(input.charCodeAt(j));
			}

			// Main decoding loop: start just after the last delimiter if any basic code
			// points were copied; start at the beginning otherwise.

			for (index = basic > 0 ? basic + 1 : 0; index < inputLength; /* no final expression */) {

				// `index` is the index of the next character to be consumed.
				// Decode a generalized variable-length integer into `delta`,
				// which gets added to `i`. The overflow checking is easier
				// if we increase `i` as we go, then subtract off its starting
				// value at the end to obtain `delta`.
				for (oldi = i, w = 1, k = base; /* no condition */; k += base) {

					if (index >= inputLength) {
						error('invalid-input');
					}

					digit = basicToDigit(input.charCodeAt(index++));

					if (digit >= base || digit > floor((maxInt - i) / w)) {
						error('overflow');
					}

					i += digit * w;
					t = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);

					if (digit < t) {
						break;
					}

					baseMinusT = base - t;
					if (w > floor(maxInt / baseMinusT)) {
						error('overflow');
					}

					w *= baseMinusT;

				}

				out = output.length + 1;
				bias = adapt(i - oldi, out, oldi == 0);

				// `i` was supposed to wrap around from `out` to `0`,
				// incrementing `n` each time, so we'll fix that now:
				if (floor(i / out) > maxInt - n) {
					error('overflow');
				}

				n += floor(i / out);
				i %= out;

				// Insert `n` at position `i` of the output
				output.splice(i++, 0, n);

			}

			return ucs2encode(output);
		}

		/**
		 * Converts a string of Unicode symbols (e.g. a domain name label) to a
		 * Punycode string of ASCII-only symbols.
		 * @memberOf punycode
		 * @param {String} input The string of Unicode symbols.
		 * @returns {String} The resulting Punycode string of ASCII-only symbols.
		 */
		function encode(input) {
			var n,
			    delta,
			    handledCPCount,
			    basicLength,
			    bias,
			    j,
			    m,
			    q,
			    k,
			    t,
			    currentValue,
			    output = [],
			    /** `inputLength` will hold the number of code points in `input`. */
			    inputLength,
			    /** Cached calculation results */
			    handledCPCountPlusOne,
			    baseMinusT,
			    qMinusT;

			// Convert the input in UCS-2 to Unicode
			input = ucs2decode(input);

			// Cache the length
			inputLength = input.length;

			// Initialize the state
			n = initialN;
			delta = 0;
			bias = initialBias;

			// Handle the basic code points
			for (j = 0; j < inputLength; ++j) {
				currentValue = input[j];
				if (currentValue < 0x80) {
					output.push(stringFromCharCode(currentValue));
				}
			}

			handledCPCount = basicLength = output.length;

			// `handledCPCount` is the number of code points that have been handled;
			// `basicLength` is the number of basic code points.

			// Finish the basic string - if it is not empty - with a delimiter
			if (basicLength) {
				output.push(delimiter);
			}

			// Main encoding loop:
			while (handledCPCount < inputLength) {

				// All non-basic code points < n have been handled already. Find the next
				// larger one:
				for (m = maxInt, j = 0; j < inputLength; ++j) {
					currentValue = input[j];
					if (currentValue >= n && currentValue < m) {
						m = currentValue;
					}
				}

				// Increase `delta` enough to advance the decoder's <n,i> state to <m,0>,
				// but guard against overflow
				handledCPCountPlusOne = handledCPCount + 1;
				if (m - n > floor((maxInt - delta) / handledCPCountPlusOne)) {
					error('overflow');
				}

				delta += (m - n) * handledCPCountPlusOne;
				n = m;

				for (j = 0; j < inputLength; ++j) {
					currentValue = input[j];

					if (currentValue < n && ++delta > maxInt) {
						error('overflow');
					}

					if (currentValue == n) {
						// Represent delta as a generalized variable-length integer
						for (q = delta, k = base; /* no condition */; k += base) {
							t = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);
							if (q < t) {
								break;
							}
							qMinusT = q - t;
							baseMinusT = base - t;
							output.push(
								stringFromCharCode(digitToBasic(t + qMinusT % baseMinusT, 0))
							);
							q = floor(qMinusT / baseMinusT);
						}

						output.push(stringFromCharCode(digitToBasic(q, 0)));
						bias = adapt(delta, handledCPCountPlusOne, handledCPCount == basicLength);
						delta = 0;
						++handledCPCount;
					}
				}

				++delta;
				++n;

			}
			return output.join('');
		}

		/**
		 * Converts a Punycode string representing a domain name or an email address
		 * to Unicode. Only the Punycoded parts of the input will be converted, i.e.
		 * it doesn't matter if you call it on a string that has already been
		 * converted to Unicode.
		 * @memberOf punycode
		 * @param {String} input The Punycoded domain name or email address to
		 * convert to Unicode.
		 * @returns {String} The Unicode representation of the given Punycode
		 * string.
		 */
		function toUnicode(input) {
			return mapDomain(input, function(string) {
				return regexPunycode.test(string)
					? decode(string.slice(4).toLowerCase())
					: string;
			});
		}

		/**
		 * Converts a Unicode string representing a domain name or an email address to
		 * Punycode. Only the non-ASCII parts of the domain name will be converted,
		 * i.e. it doesn't matter if you call it with a domain that's already in
		 * ASCII.
		 * @memberOf punycode
		 * @param {String} input The domain name or email address to convert, as a
		 * Unicode string.
		 * @returns {String} The Punycode representation of the given domain name or
		 * email address.
		 */
		function toASCII(input) {
			return mapDomain(input, function(string) {
				return regexNonASCII.test(string)
					? 'xn--' + encode(string)
					: string;
			});
		}

		/*--------------------------------------------------------------------------*/

		/** Define the public API */
		punycode = {
			/**
			 * A string representing the current Punycode.js version number.
			 * @memberOf punycode
			 * @type String
			 */
			'version': '1.3.2',
			/**
			 * An object of methods to convert from JavaScript's internal character
			 * representation (UCS-2) to Unicode code points, and back.
			 * @see <https://mathiasbynens.be/notes/javascript-encoding>
			 * @memberOf punycode
			 * @type Object
			 */
			'ucs2': {
				'decode': ucs2decode,
				'encode': ucs2encode
			},
			'decode': decode,
			'encode': encode,
			'toASCII': toASCII,
			'toUnicode': toUnicode
		};

		/** Expose `punycode` */
		// Some AMD build optimizers, like r.js, check for specific condition patterns
		// like the following:
		if (
			true
		) {
			!(__WEBPACK_AMD_DEFINE_RESULT__ = function() {
				return punycode;
			}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
		} else if (freeExports && freeModule) {
			if (module.exports == freeExports) { // in Node.js or RingoJS v0.8.0+
				freeModule.exports = punycode;
			} else { // in Narwhal or RingoJS v0.7.0-
				for (key in punycode) {
					punycode.hasOwnProperty(key) && (freeExports[key] = punycode[key]);
				}
			}
		} else { // in Rhino or a web browser
			root.punycode = punycode;
		}

	}(this));

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)(module), (function() { return this; }())))

/***/ },
/* 4 */
/***/ function(module, exports) {

	module.exports = function(module) {
		if(!module.webpackPolyfill) {
			module.deprecate = function() {};
			module.paths = [];
			// module.parent = undefined by default
			module.children = [];
			module.webpackPolyfill = 1;
		}
		return module;
	}


/***/ },
/* 5 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.decode = exports.parse = __webpack_require__(6);
	exports.encode = exports.stringify = __webpack_require__(7);


/***/ },
/* 6 */
/***/ function(module, exports) {

	// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.

	'use strict';

	// If obj.hasOwnProperty has been overridden, then calling
	// obj.hasOwnProperty(prop) will break.
	// See: https://github.com/joyent/node/issues/1707
	function hasOwnProperty(obj, prop) {
	  return Object.prototype.hasOwnProperty.call(obj, prop);
	}

	module.exports = function(qs, sep, eq, options) {
	  sep = sep || '&';
	  eq = eq || '=';
	  var obj = {};

	  if (typeof qs !== 'string' || qs.length === 0) {
	    return obj;
	  }

	  var regexp = /\+/g;
	  qs = qs.split(sep);

	  var maxKeys = 1000;
	  if (options && typeof options.maxKeys === 'number') {
	    maxKeys = options.maxKeys;
	  }

	  var len = qs.length;
	  // maxKeys <= 0 means that we should not limit keys count
	  if (maxKeys > 0 && len > maxKeys) {
	    len = maxKeys;
	  }

	  for (var i = 0; i < len; ++i) {
	    var x = qs[i].replace(regexp, '%20'),
	        idx = x.indexOf(eq),
	        kstr, vstr, k, v;

	    if (idx >= 0) {
	      kstr = x.substr(0, idx);
	      vstr = x.substr(idx + 1);
	    } else {
	      kstr = x;
	      vstr = '';
	    }

	    k = decodeURIComponent(kstr);
	    v = decodeURIComponent(vstr);

	    if (!hasOwnProperty(obj, k)) {
	      obj[k] = v;
	    } else if (Array.isArray(obj[k])) {
	      obj[k].push(v);
	    } else {
	      obj[k] = [obj[k], v];
	    }
	  }

	  return obj;
	};


/***/ },
/* 7 */
/***/ function(module, exports) {

	// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.

	'use strict';

	var stringifyPrimitive = function(v) {
	  switch (typeof v) {
	    case 'string':
	      return v;

	    case 'boolean':
	      return v ? 'true' : 'false';

	    case 'number':
	      return isFinite(v) ? v : '';

	    default:
	      return '';
	  }
	};

	module.exports = function(obj, sep, eq, name) {
	  sep = sep || '&';
	  eq = eq || '=';
	  if (obj === null) {
	    obj = undefined;
	  }

	  if (typeof obj === 'object') {
	    return Object.keys(obj).map(function(k) {
	      var ks = encodeURIComponent(stringifyPrimitive(k)) + eq;
	      if (Array.isArray(obj[k])) {
	        return obj[k].map(function(v) {
	          return ks + encodeURIComponent(stringifyPrimitive(v));
	        }).join(sep);
	      } else {
	        return ks + encodeURIComponent(stringifyPrimitive(obj[k]));
	      }
	    }).join(sep);

	  }

	  if (!name) return '';
	  return encodeURIComponent(stringifyPrimitive(name)) + eq +
	         encodeURIComponent(stringifyPrimitive(obj));
	};


/***/ },
/* 8 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var ansiRegex = __webpack_require__(9)();

	module.exports = function (str) {
		return typeof str === 'string' ? str.replace(ansiRegex, '') : str;
	};


/***/ },
/* 9 */
/***/ function(module, exports) {

	'use strict';
	module.exports = function () {
		return /[\u001b\u009b][[()#;?]*(?:[0-9]{1,4}(?:;[0-9]{0,4})*)?[0-9A-ORZcf-nqry=><]/g;
	};


/***/ },
/* 10 */
/***/ function(module, exports, __webpack_require__) {

	var SockJS = __webpack_require__(11);

	var retries = 0;
	var sock = null;

	function socket(url, handlers) {
		sock = new SockJS(url);

		sock.onopen = function() {
			retries = 0;
		}

		sock.onclose = function() {
			if(retries === 0)
				handlers.close();

			// Try to reconnect.
			sock = null;

			// After 10 retries stop trying, to prevent logspam.
			if(retries <= 10) {
				// Exponentially increase timeout to reconnect.
				// Respectfully copied from the package `got`.
				var retryInMs = 1000 * Math.pow(2, retries) + Math.random() * 100;
				retries += 1;

				setTimeout(function() {
					socket(url, handlers);
				}, retryInMs);
			}
		};

		sock.onmessage = function(e) {
			// This assumes that all data sent via the websocket is JSON.
			var msg = JSON.parse(e.data);
			if(handlers[msg.type])
				handlers[msg.type](msg.data);
		};
	}

	module.exports = socket;


/***/ },
/* 11 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {'use strict';

	var transportList = __webpack_require__(12);

	module.exports = __webpack_require__(59)(transportList);

	// TODO can't get rid of this until all servers do
	if ('_sockjs_onload' in global) {
	  setTimeout(global._sockjs_onload, 1);
	}

	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 12 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	module.exports = [
	  // streaming transports
	  __webpack_require__(13)
	, __webpack_require__(30)
	, __webpack_require__(40)
	, __webpack_require__(42)
	, __webpack_require__(45)(__webpack_require__(42))

	  // polling transports
	, __webpack_require__(52)
	, __webpack_require__(45)(__webpack_require__(52))
	, __webpack_require__(54)
	, __webpack_require__(55)
	, __webpack_require__(45)(__webpack_require__(54))
	, __webpack_require__(56)
	];


/***/ },
/* 13 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	var utils = __webpack_require__(15)
	  , urlUtils = __webpack_require__(18)
	  , inherits = __webpack_require__(26)
	  , EventEmitter = __webpack_require__(27).EventEmitter
	  , WebsocketDriver = __webpack_require__(29)
	  ;

	var debug = function() {};
	if (process.env.NODE_ENV !== 'production') {
	  debug = __webpack_require__(23)('sockjs-client:websocket');
	}

	function WebSocketTransport(transUrl, ignore, options) {
	  if (!WebSocketTransport.enabled()) {
	    throw new Error('Transport created when disabled');
	  }

	  EventEmitter.call(this);
	  debug('constructor', transUrl);

	  var self = this;
	  var url = urlUtils.addPath(transUrl, '/websocket');
	  if (url.slice(0, 5) === 'https') {
	    url = 'wss' + url.slice(5);
	  } else {
	    url = 'ws' + url.slice(4);
	  }
	  this.url = url;

	  this.ws = new WebsocketDriver(this.url, [], options);
	  this.ws.onmessage = function(e) {
	    debug('message event', e.data);
	    self.emit('message', e.data);
	  };
	  // Firefox has an interesting bug. If a websocket connection is
	  // created after onunload, it stays alive even when user
	  // navigates away from the page. In such situation let's lie -
	  // let's not open the ws connection at all. See:
	  // https://github.com/sockjs/sockjs-client/issues/28
	  // https://bugzilla.mozilla.org/show_bug.cgi?id=696085
	  this.unloadRef = utils.unloadAdd(function() {
	    debug('unload');
	    self.ws.close();
	  });
	  this.ws.onclose = function(e) {
	    debug('close event', e.code, e.reason);
	    self.emit('close', e.code, e.reason);
	    self._cleanup();
	  };
	  this.ws.onerror = function(e) {
	    debug('error event', e);
	    self.emit('close', 1006, 'WebSocket connection broken');
	    self._cleanup();
	  };
	}

	inherits(WebSocketTransport, EventEmitter);

	WebSocketTransport.prototype.send = function(data) {
	  var msg = '[' + data + ']';
	  debug('send', msg);
	  this.ws.send(msg);
	};

	WebSocketTransport.prototype.close = function() {
	  debug('close');
	  if (this.ws) {
	    this.ws.close();
	  }
	  this._cleanup();
	};

	WebSocketTransport.prototype._cleanup = function() {
	  debug('_cleanup');
	  var ws = this.ws;
	  if (ws) {
	    ws.onmessage = ws.onclose = ws.onerror = null;
	  }
	  utils.unloadDel(this.unloadRef);
	  this.unloadRef = this.ws = null;
	  this.removeAllListeners();
	};

	WebSocketTransport.enabled = function() {
	  debug('enabled');
	  return !!WebsocketDriver;
	};
	WebSocketTransport.transportName = 'websocket';

	// In theory, ws should require 1 round trip. But in chrome, this is
	// not very stable over SSL. Most likely a ws connection requires a
	// separate SSL connection, in which case 2 round trips are an
	// absolute minumum.
	WebSocketTransport.roundTrips = 2;

	module.exports = WebSocketTransport;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(14)))

/***/ },
/* 14 */
/***/ function(module, exports) {

	// shim for using process in browser
	var process = module.exports = {};

	// cached from whatever global is present so that test runners that stub it
	// don't break things.  But we need to wrap it in a try catch in case it is
	// wrapped in strict mode code which doesn't define any globals.  It's inside a
	// function because try/catches deoptimize in certain engines.

	var cachedSetTimeout;
	var cachedClearTimeout;

	function defaultSetTimout() {
	    throw new Error('setTimeout has not been defined');
	}
	function defaultClearTimeout () {
	    throw new Error('clearTimeout has not been defined');
	}
	(function () {
	    try {
	        if (typeof setTimeout === 'function') {
	            cachedSetTimeout = setTimeout;
	        } else {
	            cachedSetTimeout = defaultSetTimout;
	        }
	    } catch (e) {
	        cachedSetTimeout = defaultSetTimout;
	    }
	    try {
	        if (typeof clearTimeout === 'function') {
	            cachedClearTimeout = clearTimeout;
	        } else {
	            cachedClearTimeout = defaultClearTimeout;
	        }
	    } catch (e) {
	        cachedClearTimeout = defaultClearTimeout;
	    }
	} ())
	function runTimeout(fun) {
	    if (cachedSetTimeout === setTimeout) {
	        //normal enviroments in sane situations
	        return setTimeout(fun, 0);
	    }
	    // if setTimeout wasn't available but was latter defined
	    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
	        cachedSetTimeout = setTimeout;
	        return setTimeout(fun, 0);
	    }
	    try {
	        // when when somebody has screwed with setTimeout but no I.E. maddness
	        return cachedSetTimeout(fun, 0);
	    } catch(e){
	        try {
	            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
	            return cachedSetTimeout.call(null, fun, 0);
	        } catch(e){
	            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
	            return cachedSetTimeout.call(this, fun, 0);
	        }
	    }


	}
	function runClearTimeout(marker) {
	    if (cachedClearTimeout === clearTimeout) {
	        //normal enviroments in sane situations
	        return clearTimeout(marker);
	    }
	    // if clearTimeout wasn't available but was latter defined
	    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
	        cachedClearTimeout = clearTimeout;
	        return clearTimeout(marker);
	    }
	    try {
	        // when when somebody has screwed with setTimeout but no I.E. maddness
	        return cachedClearTimeout(marker);
	    } catch (e){
	        try {
	            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
	            return cachedClearTimeout.call(null, marker);
	        } catch (e){
	            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
	            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
	            return cachedClearTimeout.call(this, marker);
	        }
	    }



	}
	var queue = [];
	var draining = false;
	var currentQueue;
	var queueIndex = -1;

	function cleanUpNextTick() {
	    if (!draining || !currentQueue) {
	        return;
	    }
	    draining = false;
	    if (currentQueue.length) {
	        queue = currentQueue.concat(queue);
	    } else {
	        queueIndex = -1;
	    }
	    if (queue.length) {
	        drainQueue();
	    }
	}

	function drainQueue() {
	    if (draining) {
	        return;
	    }
	    var timeout = runTimeout(cleanUpNextTick);
	    draining = true;

	    var len = queue.length;
	    while(len) {
	        currentQueue = queue;
	        queue = [];
	        while (++queueIndex < len) {
	            if (currentQueue) {
	                currentQueue[queueIndex].run();
	            }
	        }
	        queueIndex = -1;
	        len = queue.length;
	    }
	    currentQueue = null;
	    draining = false;
	    runClearTimeout(timeout);
	}

	process.nextTick = function (fun) {
	    var args = new Array(arguments.length - 1);
	    if (arguments.length > 1) {
	        for (var i = 1; i < arguments.length; i++) {
	            args[i - 1] = arguments[i];
	        }
	    }
	    queue.push(new Item(fun, args));
	    if (queue.length === 1 && !draining) {
	        runTimeout(drainQueue);
	    }
	};

	// v8 likes predictible objects
	function Item(fun, array) {
	    this.fun = fun;
	    this.array = array;
	}
	Item.prototype.run = function () {
	    this.fun.apply(null, this.array);
	};
	process.title = 'browser';
	process.browser = true;
	process.env = {};
	process.argv = [];
	process.version = ''; // empty string to avoid regexp issues
	process.versions = {};

	function noop() {}

	process.on = noop;
	process.addListener = noop;
	process.once = noop;
	process.off = noop;
	process.removeListener = noop;
	process.removeAllListeners = noop;
	process.emit = noop;

	process.binding = function (name) {
	    throw new Error('process.binding is not supported');
	};

	process.cwd = function () { return '/' };
	process.chdir = function (dir) {
	    throw new Error('process.chdir is not supported');
	};
	process.umask = function() { return 0; };


/***/ },
/* 15 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {'use strict';

	var random = __webpack_require__(16);

	var onUnload = {}
	  , afterUnload = false
	    // detect google chrome packaged apps because they don't allow the 'unload' event
	  , isChromePackagedApp = global.chrome && global.chrome.app && global.chrome.app.runtime
	  ;

	module.exports = {
	  attachEvent: function(event, listener) {
	    if (typeof global.addEventListener !== 'undefined') {
	      global.addEventListener(event, listener, false);
	    } else if (global.document && global.attachEvent) {
	      // IE quirks.
	      // According to: http://stevesouders.com/misc/test-postmessage.php
	      // the message gets delivered only to 'document', not 'window'.
	      global.document.attachEvent('on' + event, listener);
	      // I get 'window' for ie8.
	      global.attachEvent('on' + event, listener);
	    }
	  }

	, detachEvent: function(event, listener) {
	    if (typeof global.addEventListener !== 'undefined') {
	      global.removeEventListener(event, listener, false);
	    } else if (global.document && global.detachEvent) {
	      global.document.detachEvent('on' + event, listener);
	      global.detachEvent('on' + event, listener);
	    }
	  }

	, unloadAdd: function(listener) {
	    if (isChromePackagedApp) {
	      return null;
	    }

	    var ref = random.string(8);
	    onUnload[ref] = listener;
	    if (afterUnload) {
	      setTimeout(this.triggerUnloadCallbacks, 0);
	    }
	    return ref;
	  }

	, unloadDel: function(ref) {
	    if (ref in onUnload) {
	      delete onUnload[ref];
	    }
	  }

	, triggerUnloadCallbacks: function() {
	    for (var ref in onUnload) {
	      onUnload[ref]();
	      delete onUnload[ref];
	    }
	  }
	};

	var unloadTriggered = function() {
	  if (afterUnload) {
	    return;
	  }
	  afterUnload = true;
	  module.exports.triggerUnloadCallbacks();
	};

	// 'unload' alone is not reliable in opera within an iframe, but we
	// can't use `beforeunload` as IE fires it on javascript: links.
	if (!isChromePackagedApp) {
	  module.exports.attachEvent('unload', unloadTriggered);
	}

	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 16 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	/* global crypto:true */
	var crypto = __webpack_require__(17);

	// This string has length 32, a power of 2, so the modulus doesn't introduce a
	// bias.
	var _randomStringChars = 'abcdefghijklmnopqrstuvwxyz012345';
	module.exports = {
	  string: function(length) {
	    var max = _randomStringChars.length;
	    var bytes = crypto.randomBytes(length);
	    var ret = [];
	    for (var i = 0; i < length; i++) {
	      ret.push(_randomStringChars.substr(bytes[i] % max, 1));
	    }
	    return ret.join('');
	  }

	, number: function(max) {
	    return Math.floor(Math.random() * max);
	  }

	, numberString: function(max) {
	    var t = ('' + (max - 1)).length;
	    var p = new Array(t + 1).join('0');
	    return (p + this.number(max)).slice(-t);
	  }
	};


/***/ },
/* 17 */
/***/ function(module, exports) {

	/* WEBPACK VAR INJECTION */(function(global) {'use strict';

	if (global.crypto && global.crypto.getRandomValues) {
	  module.exports.randomBytes = function(length) {
	    var bytes = new Uint8Array(length);
	    global.crypto.getRandomValues(bytes);
	    return bytes;
	  };
	} else {
	  module.exports.randomBytes = function(length) {
	    var bytes = new Array(length);
	    for (var i = 0; i < length; i++) {
	      bytes[i] = Math.floor(Math.random() * 256);
	    }
	    return bytes;
	  };
	}

	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 18 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	var URL = __webpack_require__(19);

	var debug = function() {};
	if (process.env.NODE_ENV !== 'production') {
	  debug = __webpack_require__(23)('sockjs-client:utils:url');
	}

	module.exports = {
	  getOrigin: function(url) {
	    if (!url) {
	      return null;
	    }

	    var p = new URL(url);
	    if (p.protocol === 'file:') {
	      return null;
	    }

	    var port = p.port;
	    if (!port) {
	      port = (p.protocol === 'https:') ? '443' : '80';
	    }

	    return p.protocol + '//' + p.hostname + ':' + port;
	  }

	, isOriginEqual: function(a, b) {
	    var res = this.getOrigin(a) === this.getOrigin(b);
	    debug('same', a, b, res);
	    return res;
	  }

	, isSchemeEqual: function(a, b) {
	    return (a.split(':')[0] === b.split(':')[0]);
	  }

	, addPath: function (url, path) {
	    var qs = url.split('?');
	    return qs[0] + path + (qs[1] ? '?' + qs[1] : '');
	  }

	, addQuery: function (url, q) {
	    return url + (url.indexOf('?') === -1 ? ('?' + q) : ('&' + q));
	  }
	};

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(14)))

/***/ },
/* 19 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var required = __webpack_require__(20)
	  , lolcation = __webpack_require__(21)
	  , qs = __webpack_require__(22)
	  , protocolre = /^([a-z][a-z0-9.+-]*:)?(\/\/)?([\S\s]*)/i;

	/**
	 * These are the parse rules for the URL parser, it informs the parser
	 * about:
	 *
	 * 0. The char it Needs to parse, if it's a string it should be done using
	 *    indexOf, RegExp using exec and NaN means set as current value.
	 * 1. The property we should set when parsing this value.
	 * 2. Indication if it's backwards or forward parsing, when set as number it's
	 *    the value of extra chars that should be split off.
	 * 3. Inherit from location if non existing in the parser.
	 * 4. `toLowerCase` the resulting value.
	 */
	var rules = [
	  ['#', 'hash'],                        // Extract from the back.
	  ['?', 'query'],                       // Extract from the back.
	  ['/', 'pathname'],                    // Extract from the back.
	  ['@', 'auth', 1],                     // Extract from the front.
	  [NaN, 'host', undefined, 1, 1],       // Set left over value.
	  [/:(\d+)$/, 'port', undefined, 1],    // RegExp the back.
	  [NaN, 'hostname', undefined, 1, 1]    // Set left over.
	];

	/**
	 * @typedef ProtocolExtract
	 * @type Object
	 * @property {String} protocol Protocol matched in the URL, in lowercase.
	 * @property {Boolean} slashes `true` if protocol is followed by "//", else `false`.
	 * @property {String} rest Rest of the URL that is not part of the protocol.
	 */

	/**
	 * Extract protocol information from a URL with/without double slash ("//").
	 *
	 * @param {String} address URL we want to extract from.
	 * @return {ProtocolExtract} Extracted information.
	 * @api private
	 */
	function extractProtocol(address) {
	  var match = protocolre.exec(address);

	  return {
	    protocol: match[1] ? match[1].toLowerCase() : '',
	    slashes: !!match[2],
	    rest: match[3]
	  };
	}

	/**
	 * Resolve a relative URL pathname against a base URL pathname.
	 *
	 * @param {String} relative Pathname of the relative URL.
	 * @param {String} base Pathname of the base URL.
	 * @return {String} Resolved pathname.
	 * @api private
	 */
	function resolve(relative, base) {
	  var path = (base || '/').split('/').slice(0, -1).concat(relative.split('/'))
	    , i = path.length
	    , last = path[i - 1]
	    , unshift = false
	    , up = 0;

	  while (i--) {
	    if (path[i] === '.') {
	      path.splice(i, 1);
	    } else if (path[i] === '..') {
	      path.splice(i, 1);
	      up++;
	    } else if (up) {
	      if (i === 0) unshift = true;
	      path.splice(i, 1);
	      up--;
	    }
	  }

	  if (unshift) path.unshift('');
	  if (last === '.' || last === '..') path.push('');

	  return path.join('/');
	}

	/**
	 * The actual URL instance. Instead of returning an object we've opted-in to
	 * create an actual constructor as it's much more memory efficient and
	 * faster and it pleases my OCD.
	 *
	 * @constructor
	 * @param {String} address URL we want to parse.
	 * @param {Object|String} location Location defaults for relative paths.
	 * @param {Boolean|Function} parser Parser for the query string.
	 * @api public
	 */
	function URL(address, location, parser) {
	  if (!(this instanceof URL)) {
	    return new URL(address, location, parser);
	  }

	  var relative, extracted, parse, instruction, index, key
	    , instructions = rules.slice()
	    , type = typeof location
	    , url = this
	    , i = 0;

	  //
	  // The following if statements allows this module two have compatibility with
	  // 2 different API:
	  //
	  // 1. Node.js's `url.parse` api which accepts a URL, boolean as arguments
	  //    where the boolean indicates that the query string should also be parsed.
	  //
	  // 2. The `URL` interface of the browser which accepts a URL, object as
	  //    arguments. The supplied object will be used as default values / fall-back
	  //    for relative paths.
	  //
	  if ('object' !== type && 'string' !== type) {
	    parser = location;
	    location = null;
	  }

	  if (parser && 'function' !== typeof parser) parser = qs.parse;

	  location = lolcation(location);

	  //
	  // Extract protocol information before running the instructions.
	  //
	  extracted = extractProtocol(address || '');
	  relative = !extracted.protocol && !extracted.slashes;
	  url.slashes = extracted.slashes || relative && location.slashes;
	  url.protocol = extracted.protocol || location.protocol || '';
	  address = extracted.rest;

	  //
	  // When the authority component is absent the URL starts with a path
	  // component.
	  //
	  if (!extracted.slashes) instructions[2] = [/(.*)/, 'pathname'];

	  for (; i < instructions.length; i++) {
	    instruction = instructions[i];
	    parse = instruction[0];
	    key = instruction[1];

	    if (parse !== parse) {
	      url[key] = address;
	    } else if ('string' === typeof parse) {
	      if (~(index = address.indexOf(parse))) {
	        if ('number' === typeof instruction[2]) {
	          url[key] = address.slice(0, index);
	          address = address.slice(index + instruction[2]);
	        } else {
	          url[key] = address.slice(index);
	          address = address.slice(0, index);
	        }
	      }
	    } else if (index = parse.exec(address)) {
	      url[key] = index[1];
	      address = address.slice(0, index.index);
	    }

	    url[key] = url[key] || (
	      relative && instruction[3] ? location[key] || '' : ''
	    );

	    //
	    // Hostname, host and protocol should be lowercased so they can be used to
	    // create a proper `origin`.
	    //
	    if (instruction[4]) url[key] = url[key].toLowerCase();
	  }

	  //
	  // Also parse the supplied query string in to an object. If we're supplied
	  // with a custom parser as function use that instead of the default build-in
	  // parser.
	  //
	  if (parser) url.query = parser(url.query);

	  //
	  // If the URL is relative, resolve the pathname against the base URL.
	  //
	  if (
	      relative
	    && location.slashes
	    && url.pathname.charAt(0) !== '/'
	    && (url.pathname !== '' || location.pathname !== '')
	  ) {
	    url.pathname = resolve(url.pathname, location.pathname);
	  }

	  //
	  // We should not add port numbers if they are already the default port number
	  // for a given protocol. As the host also contains the port number we're going
	  // override it with the hostname which contains no port number.
	  //
	  if (!required(url.port, url.protocol)) {
	    url.host = url.hostname;
	    url.port = '';
	  }

	  //
	  // Parse down the `auth` for the username and password.
	  //
	  url.username = url.password = '';
	  if (url.auth) {
	    instruction = url.auth.split(':');
	    url.username = instruction[0] || '';
	    url.password = instruction[1] || '';
	  }

	  url.origin = url.protocol && url.host && url.protocol !== 'file:'
	    ? url.protocol +'//'+ url.host
	    : 'null';

	  //
	  // The href is just the compiled result.
	  //
	  url.href = url.toString();
	}

	/**
	 * This is convenience method for changing properties in the URL instance to
	 * insure that they all propagate correctly.
	 *
	 * @param {String} part          Property we need to adjust.
	 * @param {Mixed} value          The newly assigned value.
	 * @param {Boolean|Function} fn  When setting the query, it will be the function
	 *                               used to parse the query.
	 *                               When setting the protocol, double slash will be
	 *                               removed from the final url if it is true.
	 * @returns {URL}
	 * @api public
	 */
	URL.prototype.set = function set(part, value, fn) {
	  var url = this;

	  switch (part) {
	    case 'query':
	      if ('string' === typeof value && value.length) {
	        value = (fn || qs.parse)(value);
	      }

	      url[part] = value;
	      break;

	    case 'port':
	      url[part] = value;

	      if (!required(value, url.protocol)) {
	        url.host = url.hostname;
	        url[part] = '';
	      } else if (value) {
	        url.host = url.hostname +':'+ value;
	      }

	      break;

	    case 'hostname':
	      url[part] = value;

	      if (url.port) value += ':'+ url.port;
	      url.host = value;
	      break;

	    case 'host':
	      url[part] = value;

	      if (/:\d+$/.test(value)) {
	        value = value.split(':');
	        url.port = value.pop();
	        url.hostname = value.join(':');
	      } else {
	        url.hostname = value;
	        url.port = '';
	      }

	      break;

	    case 'protocol':
	      url.protocol = value.toLowerCase();
	      url.slashes = !fn;
	      break;

	    case 'pathname':
	      url.pathname = value.length && value.charAt(0) !== '/' ? '/' + value : value;

	      break;

	    default:
	      url[part] = value;
	  }

	  for (var i = 0; i < rules.length; i++) {
	    var ins = rules[i];

	    if (ins[4]) url[ins[1]] = url[ins[1]].toLowerCase();
	  }

	  url.origin = url.protocol && url.host && url.protocol !== 'file:'
	    ? url.protocol +'//'+ url.host
	    : 'null';

	  url.href = url.toString();

	  return url;
	};

	/**
	 * Transform the properties back in to a valid and full URL string.
	 *
	 * @param {Function} stringify Optional query stringify function.
	 * @returns {String}
	 * @api public
	 */
	URL.prototype.toString = function toString(stringify) {
	  if (!stringify || 'function' !== typeof stringify) stringify = qs.stringify;

	  var query
	    , url = this
	    , protocol = url.protocol;

	  if (protocol && protocol.charAt(protocol.length - 1) !== ':') protocol += ':';

	  var result = protocol + (url.slashes ? '//' : '');

	  if (url.username) {
	    result += url.username;
	    if (url.password) result += ':'+ url.password;
	    result += '@';
	  }

	  result += url.host + url.pathname;

	  query = 'object' === typeof url.query ? stringify(url.query) : url.query;
	  if (query) result += '?' !== query.charAt(0) ? '?'+ query : query;

	  if (url.hash) result += url.hash;

	  return result;
	};

	//
	// Expose the URL parser and some additional properties that might be useful for
	// others or testing.
	//
	URL.extractProtocol = extractProtocol;
	URL.location = lolcation;
	URL.qs = qs;

	module.exports = URL;


/***/ },
/* 20 */
/***/ function(module, exports) {

	'use strict';

	/**
	 * Check if we're required to add a port number.
	 *
	 * @see https://url.spec.whatwg.org/#default-port
	 * @param {Number|String} port Port number we need to check
	 * @param {String} protocol Protocol we need to check against.
	 * @returns {Boolean} Is it a default port for the given protocol
	 * @api private
	 */
	module.exports = function required(port, protocol) {
	  protocol = protocol.split(':')[0];
	  port = +port;

	  if (!port) return false;

	  switch (protocol) {
	    case 'http':
	    case 'ws':
	    return port !== 80;

	    case 'https':
	    case 'wss':
	    return port !== 443;

	    case 'ftp':
	    return port !== 21;

	    case 'gopher':
	    return port !== 70;

	    case 'file':
	    return false;
	  }

	  return port !== 0;
	};


/***/ },
/* 21 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {'use strict';

	var slashes = /^[A-Za-z][A-Za-z0-9+-.]*:\/\//;

	/**
	 * These properties should not be copied or inherited from. This is only needed
	 * for all non blob URL's as a blob URL does not include a hash, only the
	 * origin.
	 *
	 * @type {Object}
	 * @private
	 */
	var ignore = { hash: 1, query: 1 }
	  , URL;

	/**
	 * The location object differs when your code is loaded through a normal page,
	 * Worker or through a worker using a blob. And with the blobble begins the
	 * trouble as the location object will contain the URL of the blob, not the
	 * location of the page where our code is loaded in. The actual origin is
	 * encoded in the `pathname` so we can thankfully generate a good "default"
	 * location from it so we can generate proper relative URL's again.
	 *
	 * @param {Object|String} loc Optional default location object.
	 * @returns {Object} lolcation object.
	 * @api public
	 */
	module.exports = function lolcation(loc) {
	  loc = loc || global.location || {};
	  URL = URL || __webpack_require__(19);

	  var finaldestination = {}
	    , type = typeof loc
	    , key;

	  if ('blob:' === loc.protocol) {
	    finaldestination = new URL(unescape(loc.pathname), {});
	  } else if ('string' === type) {
	    finaldestination = new URL(loc, {});
	    for (key in ignore) delete finaldestination[key];
	  } else if ('object' === type) {
	    for (key in loc) {
	      if (key in ignore) continue;
	      finaldestination[key] = loc[key];
	    }

	    if (finaldestination.slashes === undefined) {
	      finaldestination.slashes = slashes.test(loc.href);
	    }
	  }

	  return finaldestination;
	};

	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 22 */
/***/ function(module, exports) {

	'use strict';

	var has = Object.prototype.hasOwnProperty;

	/**
	 * Simple query string parser.
	 *
	 * @param {String} query The query string that needs to be parsed.
	 * @returns {Object}
	 * @api public
	 */
	function querystring(query) {
	  var parser = /([^=?&]+)=?([^&]*)/g
	    , result = {}
	    , part;

	  //
	  // Little nifty parsing hack, leverage the fact that RegExp.exec increments
	  // the lastIndex property so we can continue executing this loop until we've
	  // parsed all results.
	  //
	  for (;
	    part = parser.exec(query);
	    result[decodeURIComponent(part[1])] = decodeURIComponent(part[2])
	  );

	  return result;
	}

	/**
	 * Transform a query string to an object.
	 *
	 * @param {Object} obj Object that should be transformed.
	 * @param {String} prefix Optional prefix.
	 * @returns {String}
	 * @api public
	 */
	function querystringify(obj, prefix) {
	  prefix = prefix || '';

	  var pairs = [];

	  //
	  // Optionally prefix with a '?' if needed
	  //
	  if ('string' !== typeof prefix) prefix = '?';

	  for (var key in obj) {
	    if (has.call(obj, key)) {
	      pairs.push(encodeURIComponent(key) +'='+ encodeURIComponent(obj[key]));
	    }
	  }

	  return pairs.length ? prefix + pairs.join('&') : '';
	}

	//
	// Expose the module.
	//
	exports.stringify = querystringify;
	exports.parse = querystring;


/***/ },
/* 23 */
/***/ function(module, exports, __webpack_require__) {

	
	/**
	 * This is the web browser implementation of `debug()`.
	 *
	 * Expose `debug()` as the module.
	 */

	exports = module.exports = __webpack_require__(24);
	exports.log = log;
	exports.formatArgs = formatArgs;
	exports.save = save;
	exports.load = load;
	exports.useColors = useColors;
	exports.storage = 'undefined' != typeof chrome
	               && 'undefined' != typeof chrome.storage
	                  ? chrome.storage.local
	                  : localstorage();

	/**
	 * Colors.
	 */

	exports.colors = [
	  'lightseagreen',
	  'forestgreen',
	  'goldenrod',
	  'dodgerblue',
	  'darkorchid',
	  'crimson'
	];

	/**
	 * Currently only WebKit-based Web Inspectors, Firefox >= v31,
	 * and the Firebug extension (any Firefox version) are known
	 * to support "%c" CSS customizations.
	 *
	 * TODO: add a `localStorage` variable to explicitly enable/disable colors
	 */

	function useColors() {
	  // is webkit? http://stackoverflow.com/a/16459606/376773
	  return ('WebkitAppearance' in document.documentElement.style) ||
	    // is firebug? http://stackoverflow.com/a/398120/376773
	    (window.console && (console.firebug || (console.exception && console.table))) ||
	    // is firefox >= v31?
	    // https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages
	    (navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/) && parseInt(RegExp.$1, 10) >= 31);
	}

	/**
	 * Map %j to `JSON.stringify()`, since no Web Inspectors do that by default.
	 */

	exports.formatters.j = function(v) {
	  return JSON.stringify(v);
	};


	/**
	 * Colorize log arguments if enabled.
	 *
	 * @api public
	 */

	function formatArgs() {
	  var args = arguments;
	  var useColors = this.useColors;

	  args[0] = (useColors ? '%c' : '')
	    + this.namespace
	    + (useColors ? ' %c' : ' ')
	    + args[0]
	    + (useColors ? '%c ' : ' ')
	    + '+' + exports.humanize(this.diff);

	  if (!useColors) return args;

	  var c = 'color: ' + this.color;
	  args = [args[0], c, 'color: inherit'].concat(Array.prototype.slice.call(args, 1));

	  // the final "%c" is somewhat tricky, because there could be other
	  // arguments passed either before or after the %c, so we need to
	  // figure out the correct index to insert the CSS into
	  var index = 0;
	  var lastC = 0;
	  args[0].replace(/%[a-z%]/g, function(match) {
	    if ('%%' === match) return;
	    index++;
	    if ('%c' === match) {
	      // we only are interested in the *last* %c
	      // (the user may have provided their own)
	      lastC = index;
	    }
	  });

	  args.splice(lastC, 0, c);
	  return args;
	}

	/**
	 * Invokes `console.log()` when available.
	 * No-op when `console.log` is not a "function".
	 *
	 * @api public
	 */

	function log() {
	  // this hackery is required for IE8/9, where
	  // the `console.log` function doesn't have 'apply'
	  return 'object' === typeof console
	    && console.log
	    && Function.prototype.apply.call(console.log, console, arguments);
	}

	/**
	 * Save `namespaces`.
	 *
	 * @param {String} namespaces
	 * @api private
	 */

	function save(namespaces) {
	  try {
	    if (null == namespaces) {
	      exports.storage.removeItem('debug');
	    } else {
	      exports.storage.debug = namespaces;
	    }
	  } catch(e) {}
	}

	/**
	 * Load `namespaces`.
	 *
	 * @return {String} returns the previously persisted debug modes
	 * @api private
	 */

	function load() {
	  var r;
	  try {
	    r = exports.storage.debug;
	  } catch(e) {}
	  return r;
	}

	/**
	 * Enable namespaces listed in `localStorage.debug` initially.
	 */

	exports.enable(load());

	/**
	 * Localstorage attempts to return the localstorage.
	 *
	 * This is necessary because safari throws
	 * when a user disables cookies/localstorage
	 * and you attempt to access it.
	 *
	 * @return {LocalStorage}
	 * @api private
	 */

	function localstorage(){
	  try {
	    return window.localStorage;
	  } catch (e) {}
	}


/***/ },
/* 24 */
/***/ function(module, exports, __webpack_require__) {

	
	/**
	 * This is the common logic for both the Node.js and web browser
	 * implementations of `debug()`.
	 *
	 * Expose `debug()` as the module.
	 */

	exports = module.exports = debug;
	exports.coerce = coerce;
	exports.disable = disable;
	exports.enable = enable;
	exports.enabled = enabled;
	exports.humanize = __webpack_require__(25);

	/**
	 * The currently active debug mode names, and names to skip.
	 */

	exports.names = [];
	exports.skips = [];

	/**
	 * Map of special "%n" handling functions, for the debug "format" argument.
	 *
	 * Valid key names are a single, lowercased letter, i.e. "n".
	 */

	exports.formatters = {};

	/**
	 * Previously assigned color.
	 */

	var prevColor = 0;

	/**
	 * Previous log timestamp.
	 */

	var prevTime;

	/**
	 * Select a color.
	 *
	 * @return {Number}
	 * @api private
	 */

	function selectColor() {
	  return exports.colors[prevColor++ % exports.colors.length];
	}

	/**
	 * Create a debugger with the given `namespace`.
	 *
	 * @param {String} namespace
	 * @return {Function}
	 * @api public
	 */

	function debug(namespace) {

	  // define the `disabled` version
	  function disabled() {
	  }
	  disabled.enabled = false;

	  // define the `enabled` version
	  function enabled() {

	    var self = enabled;

	    // set `diff` timestamp
	    var curr = +new Date();
	    var ms = curr - (prevTime || curr);
	    self.diff = ms;
	    self.prev = prevTime;
	    self.curr = curr;
	    prevTime = curr;

	    // add the `color` if not set
	    if (null == self.useColors) self.useColors = exports.useColors();
	    if (null == self.color && self.useColors) self.color = selectColor();

	    var args = Array.prototype.slice.call(arguments);

	    args[0] = exports.coerce(args[0]);

	    if ('string' !== typeof args[0]) {
	      // anything else let's inspect with %o
	      args = ['%o'].concat(args);
	    }

	    // apply any `formatters` transformations
	    var index = 0;
	    args[0] = args[0].replace(/%([a-z%])/g, function(match, format) {
	      // if we encounter an escaped % then don't increase the array index
	      if (match === '%%') return match;
	      index++;
	      var formatter = exports.formatters[format];
	      if ('function' === typeof formatter) {
	        var val = args[index];
	        match = formatter.call(self, val);

	        // now we need to remove `args[index]` since it's inlined in the `format`
	        args.splice(index, 1);
	        index--;
	      }
	      return match;
	    });

	    if ('function' === typeof exports.formatArgs) {
	      args = exports.formatArgs.apply(self, args);
	    }
	    var logFn = enabled.log || exports.log || console.log.bind(console);
	    logFn.apply(self, args);
	  }
	  enabled.enabled = true;

	  var fn = exports.enabled(namespace) ? enabled : disabled;

	  fn.namespace = namespace;

	  return fn;
	}

	/**
	 * Enables a debug mode by namespaces. This can include modes
	 * separated by a colon and wildcards.
	 *
	 * @param {String} namespaces
	 * @api public
	 */

	function enable(namespaces) {
	  exports.save(namespaces);

	  var split = (namespaces || '').split(/[\s,]+/);
	  var len = split.length;

	  for (var i = 0; i < len; i++) {
	    if (!split[i]) continue; // ignore empty strings
	    namespaces = split[i].replace(/\*/g, '.*?');
	    if (namespaces[0] === '-') {
	      exports.skips.push(new RegExp('^' + namespaces.substr(1) + '$'));
	    } else {
	      exports.names.push(new RegExp('^' + namespaces + '$'));
	    }
	  }
	}

	/**
	 * Disable debug output.
	 *
	 * @api public
	 */

	function disable() {
	  exports.enable('');
	}

	/**
	 * Returns true if the given mode name is enabled, false otherwise.
	 *
	 * @param {String} name
	 * @return {Boolean}
	 * @api public
	 */

	function enabled(name) {
	  var i, len;
	  for (i = 0, len = exports.skips.length; i < len; i++) {
	    if (exports.skips[i].test(name)) {
	      return false;
	    }
	  }
	  for (i = 0, len = exports.names.length; i < len; i++) {
	    if (exports.names[i].test(name)) {
	      return true;
	    }
	  }
	  return false;
	}

	/**
	 * Coerce `val`.
	 *
	 * @param {Mixed} val
	 * @return {Mixed}
	 * @api private
	 */

	function coerce(val) {
	  if (val instanceof Error) return val.stack || val.message;
	  return val;
	}


/***/ },
/* 25 */
/***/ function(module, exports) {

	/**
	 * Helpers.
	 */

	var s = 1000;
	var m = s * 60;
	var h = m * 60;
	var d = h * 24;
	var y = d * 365.25;

	/**
	 * Parse or format the given `val`.
	 *
	 * Options:
	 *
	 *  - `long` verbose formatting [false]
	 *
	 * @param {String|Number} val
	 * @param {Object} options
	 * @return {String|Number}
	 * @api public
	 */

	module.exports = function(val, options){
	  options = options || {};
	  if ('string' == typeof val) return parse(val);
	  return options.long
	    ? long(val)
	    : short(val);
	};

	/**
	 * Parse the given `str` and return milliseconds.
	 *
	 * @param {String} str
	 * @return {Number}
	 * @api private
	 */

	function parse(str) {
	  str = '' + str;
	  if (str.length > 10000) return;
	  var match = /^((?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|years?|yrs?|y)?$/i.exec(str);
	  if (!match) return;
	  var n = parseFloat(match[1]);
	  var type = (match[2] || 'ms').toLowerCase();
	  switch (type) {
	    case 'years':
	    case 'year':
	    case 'yrs':
	    case 'yr':
	    case 'y':
	      return n * y;
	    case 'days':
	    case 'day':
	    case 'd':
	      return n * d;
	    case 'hours':
	    case 'hour':
	    case 'hrs':
	    case 'hr':
	    case 'h':
	      return n * h;
	    case 'minutes':
	    case 'minute':
	    case 'mins':
	    case 'min':
	    case 'm':
	      return n * m;
	    case 'seconds':
	    case 'second':
	    case 'secs':
	    case 'sec':
	    case 's':
	      return n * s;
	    case 'milliseconds':
	    case 'millisecond':
	    case 'msecs':
	    case 'msec':
	    case 'ms':
	      return n;
	  }
	}

	/**
	 * Short format for `ms`.
	 *
	 * @param {Number} ms
	 * @return {String}
	 * @api private
	 */

	function short(ms) {
	  if (ms >= d) return Math.round(ms / d) + 'd';
	  if (ms >= h) return Math.round(ms / h) + 'h';
	  if (ms >= m) return Math.round(ms / m) + 'm';
	  if (ms >= s) return Math.round(ms / s) + 's';
	  return ms + 'ms';
	}

	/**
	 * Long format for `ms`.
	 *
	 * @param {Number} ms
	 * @return {String}
	 * @api private
	 */

	function long(ms) {
	  return plural(ms, d, 'day')
	    || plural(ms, h, 'hour')
	    || plural(ms, m, 'minute')
	    || plural(ms, s, 'second')
	    || ms + ' ms';
	}

	/**
	 * Pluralization helper.
	 */

	function plural(ms, n, name) {
	  if (ms < n) return;
	  if (ms < n * 1.5) return Math.floor(ms / n) + ' ' + name;
	  return Math.ceil(ms / n) + ' ' + name + 's';
	}


/***/ },
/* 26 */
/***/ function(module, exports) {

	if (typeof Object.create === 'function') {
	  // implementation from standard node.js 'util' module
	  module.exports = function inherits(ctor, superCtor) {
	    ctor.super_ = superCtor
	    ctor.prototype = Object.create(superCtor.prototype, {
	      constructor: {
	        value: ctor,
	        enumerable: false,
	        writable: true,
	        configurable: true
	      }
	    });
	  };
	} else {
	  // old school shim for old browsers
	  module.exports = function inherits(ctor, superCtor) {
	    ctor.super_ = superCtor
	    var TempCtor = function () {}
	    TempCtor.prototype = superCtor.prototype
	    ctor.prototype = new TempCtor()
	    ctor.prototype.constructor = ctor
	  }
	}


/***/ },
/* 27 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var inherits = __webpack_require__(26)
	  , EventTarget = __webpack_require__(28)
	  ;

	function EventEmitter() {
	  EventTarget.call(this);
	}

	inherits(EventEmitter, EventTarget);

	EventEmitter.prototype.removeAllListeners = function(type) {
	  if (type) {
	    delete this._listeners[type];
	  } else {
	    this._listeners = {};
	  }
	};

	EventEmitter.prototype.once = function(type, listener) {
	  var self = this
	    , fired = false;

	  function g() {
	    self.removeListener(type, g);

	    if (!fired) {
	      fired = true;
	      listener.apply(this, arguments);
	    }
	  }

	  this.on(type, g);
	};

	EventEmitter.prototype.emit = function() {
	  var type = arguments[0];
	  var listeners = this._listeners[type];
	  if (!listeners) {
	    return;
	  }
	  // equivalent of Array.prototype.slice.call(arguments, 1);
	  var l = arguments.length;
	  var args = new Array(l - 1);
	  for (var ai = 1; ai < l; ai++) {
	    args[ai - 1] = arguments[ai];
	  }
	  for (var i = 0; i < listeners.length; i++) {
	    listeners[i].apply(this, args);
	  }
	};

	EventEmitter.prototype.on = EventEmitter.prototype.addListener = EventTarget.prototype.addEventListener;
	EventEmitter.prototype.removeListener = EventTarget.prototype.removeEventListener;

	module.exports.EventEmitter = EventEmitter;


/***/ },
/* 28 */
/***/ function(module, exports) {

	'use strict';

	/* Simplified implementation of DOM2 EventTarget.
	 *   http://www.w3.org/TR/DOM-Level-2-Events/events.html#Events-EventTarget
	 */

	function EventTarget() {
	  this._listeners = {};
	}

	EventTarget.prototype.addEventListener = function(eventType, listener) {
	  if (!(eventType in this._listeners)) {
	    this._listeners[eventType] = [];
	  }
	  var arr = this._listeners[eventType];
	  // #4
	  if (arr.indexOf(listener) === -1) {
	    // Make a copy so as not to interfere with a current dispatchEvent.
	    arr = arr.concat([listener]);
	  }
	  this._listeners[eventType] = arr;
	};

	EventTarget.prototype.removeEventListener = function(eventType, listener) {
	  var arr = this._listeners[eventType];
	  if (!arr) {
	    return;
	  }
	  var idx = arr.indexOf(listener);
	  if (idx !== -1) {
	    if (arr.length > 1) {
	      // Make a copy so as not to interfere with a current dispatchEvent.
	      this._listeners[eventType] = arr.slice(0, idx).concat(arr.slice(idx + 1));
	    } else {
	      delete this._listeners[eventType];
	    }
	    return;
	  }
	};

	EventTarget.prototype.dispatchEvent = function() {
	  var event = arguments[0];
	  var t = event.type;
	  // equivalent of Array.prototype.slice.call(arguments, 0);
	  var args = arguments.length === 1 ? [event] : Array.apply(null, arguments);
	  // TODO: This doesn't match the real behavior; per spec, onfoo get
	  // their place in line from the /first/ time they're set from
	  // non-null. Although WebKit bumps it to the end every time it's
	  // set.
	  if (this['on' + t]) {
	    this['on' + t].apply(this, args);
	  }
	  if (t in this._listeners) {
	    // Grab a reference to the listeners list. removeEventListener may alter the list.
	    var listeners = this._listeners[t];
	    for (var i = 0; i < listeners.length; i++) {
	      listeners[i].apply(this, args);
	    }
	  }
	};

	module.exports = EventTarget;


/***/ },
/* 29 */
/***/ function(module, exports) {

	/* WEBPACK VAR INJECTION */(function(global) {'use strict';

	var Driver = global.WebSocket || global.MozWebSocket;
	if (Driver) {
		module.exports = function WebSocketBrowserDriver(url) {
			return new Driver(url);
		};
	}

	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 30 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {'use strict';

	var inherits = __webpack_require__(26)
	  , AjaxBasedTransport = __webpack_require__(31)
	  , XhrReceiver = __webpack_require__(35)
	  , XHRCorsObject = __webpack_require__(36)
	  , XHRLocalObject = __webpack_require__(38)
	  , browser = __webpack_require__(39)
	  ;

	function XhrStreamingTransport(transUrl) {
	  if (!XHRLocalObject.enabled && !XHRCorsObject.enabled) {
	    throw new Error('Transport created when disabled');
	  }
	  AjaxBasedTransport.call(this, transUrl, '/xhr_streaming', XhrReceiver, XHRCorsObject);
	}

	inherits(XhrStreamingTransport, AjaxBasedTransport);

	XhrStreamingTransport.enabled = function(info) {
	  if (info.nullOrigin) {
	    return false;
	  }
	  // Opera doesn't support xhr-streaming #60
	  // But it might be able to #92
	  if (browser.isOpera()) {
	    return false;
	  }

	  return XHRCorsObject.enabled;
	};

	XhrStreamingTransport.transportName = 'xhr-streaming';
	XhrStreamingTransport.roundTrips = 2; // preflight, ajax

	// Safari gets confused when a streaming ajax request is started
	// before onload. This causes the load indicator to spin indefinetely.
	// Only require body when used in a browser
	XhrStreamingTransport.needBody = !!global.document;

	module.exports = XhrStreamingTransport;

	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 31 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	var inherits = __webpack_require__(26)
	  , urlUtils = __webpack_require__(18)
	  , SenderReceiver = __webpack_require__(32)
	  ;

	var debug = function() {};
	if (process.env.NODE_ENV !== 'production') {
	  debug = __webpack_require__(23)('sockjs-client:ajax-based');
	}

	function createAjaxSender(AjaxObject) {
	  return function(url, payload, callback) {
	    debug('create ajax sender', url, payload);
	    var opt = {};
	    if (typeof payload === 'string') {
	      opt.headers = {'Content-type': 'text/plain'};
	    }
	    var ajaxUrl = urlUtils.addPath(url, '/xhr_send');
	    var xo = new AjaxObject('POST', ajaxUrl, payload, opt);
	    xo.once('finish', function(status) {
	      debug('finish', status);
	      xo = null;

	      if (status !== 200 && status !== 204) {
	        return callback(new Error('http status ' + status));
	      }
	      callback();
	    });
	    return function() {
	      debug('abort');
	      xo.close();
	      xo = null;

	      var err = new Error('Aborted');
	      err.code = 1000;
	      callback(err);
	    };
	  };
	}

	function AjaxBasedTransport(transUrl, urlSuffix, Receiver, AjaxObject) {
	  SenderReceiver.call(this, transUrl, urlSuffix, createAjaxSender(AjaxObject), Receiver, AjaxObject);
	}

	inherits(AjaxBasedTransport, SenderReceiver);

	module.exports = AjaxBasedTransport;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(14)))

/***/ },
/* 32 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	var inherits = __webpack_require__(26)
	  , urlUtils = __webpack_require__(18)
	  , BufferedSender = __webpack_require__(33)
	  , Polling = __webpack_require__(34)
	  ;

	var debug = function() {};
	if (process.env.NODE_ENV !== 'production') {
	  debug = __webpack_require__(23)('sockjs-client:sender-receiver');
	}

	function SenderReceiver(transUrl, urlSuffix, senderFunc, Receiver, AjaxObject) {
	  var pollUrl = urlUtils.addPath(transUrl, urlSuffix);
	  debug(pollUrl);
	  var self = this;
	  BufferedSender.call(this, transUrl, senderFunc);

	  this.poll = new Polling(Receiver, pollUrl, AjaxObject);
	  this.poll.on('message', function(msg) {
	    debug('poll message', msg);
	    self.emit('message', msg);
	  });
	  this.poll.once('close', function(code, reason) {
	    debug('poll close', code, reason);
	    self.poll = null;
	    self.emit('close', code, reason);
	    self.close();
	  });
	}

	inherits(SenderReceiver, BufferedSender);

	SenderReceiver.prototype.close = function() {
	  debug('close');
	  this.removeAllListeners();
	  if (this.poll) {
	    this.poll.abort();
	    this.poll = null;
	  }
	  this.stop();
	};

	module.exports = SenderReceiver;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(14)))

/***/ },
/* 33 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	var inherits = __webpack_require__(26)
	  , EventEmitter = __webpack_require__(27).EventEmitter
	  ;

	var debug = function() {};
	if (process.env.NODE_ENV !== 'production') {
	  debug = __webpack_require__(23)('sockjs-client:buffered-sender');
	}

	function BufferedSender(url, sender) {
	  debug(url);
	  EventEmitter.call(this);
	  this.sendBuffer = [];
	  this.sender = sender;
	  this.url = url;
	}

	inherits(BufferedSender, EventEmitter);

	BufferedSender.prototype.send = function(message) {
	  debug('send', message);
	  this.sendBuffer.push(message);
	  if (!this.sendStop) {
	    this.sendSchedule();
	  }
	};

	// For polling transports in a situation when in the message callback,
	// new message is being send. If the sending connection was started
	// before receiving one, it is possible to saturate the network and
	// timeout due to the lack of receiving socket. To avoid that we delay
	// sending messages by some small time, in order to let receiving
	// connection be started beforehand. This is only a halfmeasure and
	// does not fix the big problem, but it does make the tests go more
	// stable on slow networks.
	BufferedSender.prototype.sendScheduleWait = function() {
	  debug('sendScheduleWait');
	  var self = this;
	  var tref;
	  this.sendStop = function() {
	    debug('sendStop');
	    self.sendStop = null;
	    clearTimeout(tref);
	  };
	  tref = setTimeout(function() {
	    debug('timeout');
	    self.sendStop = null;
	    self.sendSchedule();
	  }, 25);
	};

	BufferedSender.prototype.sendSchedule = function() {
	  debug('sendSchedule', this.sendBuffer.length);
	  var self = this;
	  if (this.sendBuffer.length > 0) {
	    var payload = '[' + this.sendBuffer.join(',') + ']';
	    this.sendStop = this.sender(this.url, payload, function(err) {
	      self.sendStop = null;
	      if (err) {
	        debug('error', err);
	        self.emit('close', err.code || 1006, 'Sending error: ' + err);
	        self._cleanup();
	      } else {
	        self.sendScheduleWait();
	      }
	    });
	    this.sendBuffer = [];
	  }
	};

	BufferedSender.prototype._cleanup = function() {
	  debug('_cleanup');
	  this.removeAllListeners();
	};

	BufferedSender.prototype.stop = function() {
	  debug('stop');
	  this._cleanup();
	  if (this.sendStop) {
	    this.sendStop();
	    this.sendStop = null;
	  }
	};

	module.exports = BufferedSender;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(14)))

/***/ },
/* 34 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	var inherits = __webpack_require__(26)
	  , EventEmitter = __webpack_require__(27).EventEmitter
	  ;

	var debug = function() {};
	if (process.env.NODE_ENV !== 'production') {
	  debug = __webpack_require__(23)('sockjs-client:polling');
	}

	function Polling(Receiver, receiveUrl, AjaxObject) {
	  debug(receiveUrl);
	  EventEmitter.call(this);
	  this.Receiver = Receiver;
	  this.receiveUrl = receiveUrl;
	  this.AjaxObject = AjaxObject;
	  this._scheduleReceiver();
	}

	inherits(Polling, EventEmitter);

	Polling.prototype._scheduleReceiver = function() {
	  debug('_scheduleReceiver');
	  var self = this;
	  var poll = this.poll = new this.Receiver(this.receiveUrl, this.AjaxObject);

	  poll.on('message', function(msg) {
	    debug('message', msg);
	    self.emit('message', msg);
	  });

	  poll.once('close', function(code, reason) {
	    debug('close', code, reason, self.pollIsClosing);
	    self.poll = poll = null;

	    if (!self.pollIsClosing) {
	      if (reason === 'network') {
	        self._scheduleReceiver();
	      } else {
	        self.emit('close', code || 1006, reason);
	        self.removeAllListeners();
	      }
	    }
	  });
	};

	Polling.prototype.abort = function() {
	  debug('abort');
	  this.removeAllListeners();
	  this.pollIsClosing = true;
	  if (this.poll) {
	    this.poll.abort();
	  }
	};

	module.exports = Polling;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(14)))

/***/ },
/* 35 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	var inherits = __webpack_require__(26)
	  , EventEmitter = __webpack_require__(27).EventEmitter
	  ;

	var debug = function() {};
	if (process.env.NODE_ENV !== 'production') {
	  debug = __webpack_require__(23)('sockjs-client:receiver:xhr');
	}

	function XhrReceiver(url, AjaxObject) {
	  debug(url);
	  EventEmitter.call(this);
	  var self = this;

	  this.bufferPosition = 0;

	  this.xo = new AjaxObject('POST', url, null);
	  this.xo.on('chunk', this._chunkHandler.bind(this));
	  this.xo.once('finish', function(status, text) {
	    debug('finish', status, text);
	    self._chunkHandler(status, text);
	    self.xo = null;
	    var reason = status === 200 ? 'network' : 'permanent';
	    debug('close', reason);
	    self.emit('close', null, reason);
	    self._cleanup();
	  });
	}

	inherits(XhrReceiver, EventEmitter);

	XhrReceiver.prototype._chunkHandler = function(status, text) {
	  debug('_chunkHandler', status);
	  if (status !== 200 || !text) {
	    return;
	  }

	  for (var idx = -1; ; this.bufferPosition += idx + 1) {
	    var buf = text.slice(this.bufferPosition);
	    idx = buf.indexOf('\n');
	    if (idx === -1) {
	      break;
	    }
	    var msg = buf.slice(0, idx);
	    if (msg) {
	      debug('message', msg);
	      this.emit('message', msg);
	    }
	  }
	};

	XhrReceiver.prototype._cleanup = function() {
	  debug('_cleanup');
	  this.removeAllListeners();
	};

	XhrReceiver.prototype.abort = function() {
	  debug('abort');
	  if (this.xo) {
	    this.xo.close();
	    debug('close');
	    this.emit('close', null, 'user');
	    this.xo = null;
	  }
	  this._cleanup();
	};

	module.exports = XhrReceiver;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(14)))

/***/ },
/* 36 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var inherits = __webpack_require__(26)
	  , XhrDriver = __webpack_require__(37)
	  ;

	function XHRCorsObject(method, url, payload, opts) {
	  XhrDriver.call(this, method, url, payload, opts);
	}

	inherits(XHRCorsObject, XhrDriver);

	XHRCorsObject.enabled = XhrDriver.enabled && XhrDriver.supportsCORS;

	module.exports = XHRCorsObject;


/***/ },
/* 37 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global, process) {'use strict';

	var EventEmitter = __webpack_require__(27).EventEmitter
	  , inherits = __webpack_require__(26)
	  , utils = __webpack_require__(15)
	  , urlUtils = __webpack_require__(18)
	  , XHR = global.XMLHttpRequest
	  ;

	var debug = function() {};
	if (process.env.NODE_ENV !== 'production') {
	  debug = __webpack_require__(23)('sockjs-client:browser:xhr');
	}

	function AbstractXHRObject(method, url, payload, opts) {
	  debug(method, url);
	  var self = this;
	  EventEmitter.call(this);

	  setTimeout(function () {
	    self._start(method, url, payload, opts);
	  }, 0);
	}

	inherits(AbstractXHRObject, EventEmitter);

	AbstractXHRObject.prototype._start = function(method, url, payload, opts) {
	  var self = this;

	  try {
	    this.xhr = new XHR();
	  } catch (x) {
	    // intentionally empty
	  }

	  if (!this.xhr) {
	    debug('no xhr');
	    this.emit('finish', 0, 'no xhr support');
	    this._cleanup();
	    return;
	  }

	  // several browsers cache POSTs
	  url = urlUtils.addQuery(url, 't=' + (+new Date()));

	  // Explorer tends to keep connection open, even after the
	  // tab gets closed: http://bugs.jquery.com/ticket/5280
	  this.unloadRef = utils.unloadAdd(function() {
	    debug('unload cleanup');
	    self._cleanup(true);
	  });
	  try {
	    this.xhr.open(method, url, true);
	    if (this.timeout && 'timeout' in this.xhr) {
	      this.xhr.timeout = this.timeout;
	      this.xhr.ontimeout = function() {
	        debug('xhr timeout');
	        self.emit('finish', 0, '');
	        self._cleanup(false);
	      };
	    }
	  } catch (e) {
	    debug('exception', e);
	    // IE raises an exception on wrong port.
	    this.emit('finish', 0, '');
	    this._cleanup(false);
	    return;
	  }

	  if ((!opts || !opts.noCredentials) && AbstractXHRObject.supportsCORS) {
	    debug('withCredentials');
	    // Mozilla docs says https://developer.mozilla.org/en/XMLHttpRequest :
	    // "This never affects same-site requests."

	    this.xhr.withCredentials = 'true';
	  }
	  if (opts && opts.headers) {
	    for (var key in opts.headers) {
	      this.xhr.setRequestHeader(key, opts.headers[key]);
	    }
	  }

	  this.xhr.onreadystatechange = function() {
	    if (self.xhr) {
	      var x = self.xhr;
	      var text, status;
	      debug('readyState', x.readyState);
	      switch (x.readyState) {
	      case 3:
	        // IE doesn't like peeking into responseText or status
	        // on Microsoft.XMLHTTP and readystate=3
	        try {
	          status = x.status;
	          text = x.responseText;
	        } catch (e) {
	          // intentionally empty
	        }
	        debug('status', status);
	        // IE returns 1223 for 204: http://bugs.jquery.com/ticket/1450
	        if (status === 1223) {
	          status = 204;
	        }

	        // IE does return readystate == 3 for 404 answers.
	        if (status === 200 && text && text.length > 0) {
	          debug('chunk');
	          self.emit('chunk', status, text);
	        }
	        break;
	      case 4:
	        status = x.status;
	        debug('status', status);
	        // IE returns 1223 for 204: http://bugs.jquery.com/ticket/1450
	        if (status === 1223) {
	          status = 204;
	        }
	        // IE returns this for a bad port
	        // http://msdn.microsoft.com/en-us/library/windows/desktop/aa383770(v=vs.85).aspx
	        if (status === 12005 || status === 12029) {
	          status = 0;
	        }

	        debug('finish', status, x.responseText);
	        self.emit('finish', status, x.responseText);
	        self._cleanup(false);
	        break;
	      }
	    }
	  };

	  try {
	    self.xhr.send(payload);
	  } catch (e) {
	    self.emit('finish', 0, '');
	    self._cleanup(false);
	  }
	};

	AbstractXHRObject.prototype._cleanup = function(abort) {
	  debug('cleanup');
	  if (!this.xhr) {
	    return;
	  }
	  this.removeAllListeners();
	  utils.unloadDel(this.unloadRef);

	  // IE needs this field to be a function
	  this.xhr.onreadystatechange = function() {};
	  if (this.xhr.ontimeout) {
	    this.xhr.ontimeout = null;
	  }

	  if (abort) {
	    try {
	      this.xhr.abort();
	    } catch (x) {
	      // intentionally empty
	    }
	  }
	  this.unloadRef = this.xhr = null;
	};

	AbstractXHRObject.prototype.close = function() {
	  debug('close');
	  this._cleanup(true);
	};

	AbstractXHRObject.enabled = !!XHR;
	// override XMLHttpRequest for IE6/7
	// obfuscate to avoid firewalls
	var axo = ['Active'].concat('Object').join('X');
	if (!AbstractXHRObject.enabled && (axo in global)) {
	  debug('overriding xmlhttprequest');
	  XHR = function() {
	    try {
	      return new global[axo]('Microsoft.XMLHTTP');
	    } catch (e) {
	      return null;
	    }
	  };
	  AbstractXHRObject.enabled = !!new XHR();
	}

	var cors = false;
	try {
	  cors = 'withCredentials' in new XHR();
	} catch (ignored) {
	  // intentionally empty
	}

	AbstractXHRObject.supportsCORS = cors;

	module.exports = AbstractXHRObject;

	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }()), __webpack_require__(14)))

/***/ },
/* 38 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var inherits = __webpack_require__(26)
	  , XhrDriver = __webpack_require__(37)
	  ;

	function XHRLocalObject(method, url, payload /*, opts */) {
	  XhrDriver.call(this, method, url, payload, {
	    noCredentials: true
	  });
	}

	inherits(XHRLocalObject, XhrDriver);

	XHRLocalObject.enabled = XhrDriver.enabled;

	module.exports = XHRLocalObject;


/***/ },
/* 39 */
/***/ function(module, exports) {

	/* WEBPACK VAR INJECTION */(function(global) {'use strict';

	module.exports = {
	  isOpera: function() {
	    return global.navigator &&
	      /opera/i.test(global.navigator.userAgent);
	  }

	, isKonqueror: function() {
	    return global.navigator &&
	      /konqueror/i.test(global.navigator.userAgent);
	  }

	  // #187 wrap document.domain in try/catch because of WP8 from file:///
	, hasDomain: function () {
	    // non-browser client always has a domain
	    if (!global.document) {
	      return true;
	    }

	    try {
	      return !!global.document.domain;
	    } catch (e) {
	      return false;
	    }
	  }
	};

	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 40 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var inherits = __webpack_require__(26)
	  , AjaxBasedTransport = __webpack_require__(31)
	  , XhrReceiver = __webpack_require__(35)
	  , XDRObject = __webpack_require__(41)
	  ;

	// According to:
	//   http://stackoverflow.com/questions/1641507/detect-browser-support-for-cross-domain-xmlhttprequests
	//   http://hacks.mozilla.org/2009/07/cross-site-xmlhttprequest-with-cors/

	function XdrStreamingTransport(transUrl) {
	  if (!XDRObject.enabled) {
	    throw new Error('Transport created when disabled');
	  }
	  AjaxBasedTransport.call(this, transUrl, '/xhr_streaming', XhrReceiver, XDRObject);
	}

	inherits(XdrStreamingTransport, AjaxBasedTransport);

	XdrStreamingTransport.enabled = function(info) {
	  if (info.cookie_needed || info.nullOrigin) {
	    return false;
	  }
	  return XDRObject.enabled && info.sameScheme;
	};

	XdrStreamingTransport.transportName = 'xdr-streaming';
	XdrStreamingTransport.roundTrips = 2; // preflight, ajax

	module.exports = XdrStreamingTransport;


/***/ },
/* 41 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process, global) {'use strict';

	var EventEmitter = __webpack_require__(27).EventEmitter
	  , inherits = __webpack_require__(26)
	  , eventUtils = __webpack_require__(15)
	  , browser = __webpack_require__(39)
	  , urlUtils = __webpack_require__(18)
	  ;

	var debug = function() {};
	if (process.env.NODE_ENV !== 'production') {
	  debug = __webpack_require__(23)('sockjs-client:sender:xdr');
	}

	// References:
	//   http://ajaxian.com/archives/100-line-ajax-wrapper
	//   http://msdn.microsoft.com/en-us/library/cc288060(v=VS.85).aspx

	function XDRObject(method, url, payload) {
	  debug(method, url);
	  var self = this;
	  EventEmitter.call(this);

	  setTimeout(function() {
	    self._start(method, url, payload);
	  }, 0);
	}

	inherits(XDRObject, EventEmitter);

	XDRObject.prototype._start = function(method, url, payload) {
	  debug('_start');
	  var self = this;
	  var xdr = new global.XDomainRequest();
	  // IE caches even POSTs
	  url = urlUtils.addQuery(url, 't=' + (+new Date()));

	  xdr.onerror = function() {
	    debug('onerror');
	    self._error();
	  };
	  xdr.ontimeout = function() {
	    debug('ontimeout');
	    self._error();
	  };
	  xdr.onprogress = function() {
	    debug('progress', xdr.responseText);
	    self.emit('chunk', 200, xdr.responseText);
	  };
	  xdr.onload = function() {
	    debug('load');
	    self.emit('finish', 200, xdr.responseText);
	    self._cleanup(false);
	  };
	  this.xdr = xdr;
	  this.unloadRef = eventUtils.unloadAdd(function() {
	    self._cleanup(true);
	  });
	  try {
	    // Fails with AccessDenied if port number is bogus
	    this.xdr.open(method, url);
	    if (this.timeout) {
	      this.xdr.timeout = this.timeout;
	    }
	    this.xdr.send(payload);
	  } catch (x) {
	    this._error();
	  }
	};

	XDRObject.prototype._error = function() {
	  this.emit('finish', 0, '');
	  this._cleanup(false);
	};

	XDRObject.prototype._cleanup = function(abort) {
	  debug('cleanup', abort);
	  if (!this.xdr) {
	    return;
	  }
	  this.removeAllListeners();
	  eventUtils.unloadDel(this.unloadRef);

	  this.xdr.ontimeout = this.xdr.onerror = this.xdr.onprogress = this.xdr.onload = null;
	  if (abort) {
	    try {
	      this.xdr.abort();
	    } catch (x) {
	      // intentionally empty
	    }
	  }
	  this.unloadRef = this.xdr = null;
	};

	XDRObject.prototype.close = function() {
	  debug('close');
	  this._cleanup(true);
	};

	// IE 8/9 if the request target uses the same scheme - #79
	XDRObject.enabled = !!(global.XDomainRequest && browser.hasDomain());

	module.exports = XDRObject;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(14), (function() { return this; }())))

/***/ },
/* 42 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var inherits = __webpack_require__(26)
	  , AjaxBasedTransport = __webpack_require__(31)
	  , EventSourceReceiver = __webpack_require__(43)
	  , XHRCorsObject = __webpack_require__(36)
	  , EventSourceDriver = __webpack_require__(44)
	  ;

	function EventSourceTransport(transUrl) {
	  if (!EventSourceTransport.enabled()) {
	    throw new Error('Transport created when disabled');
	  }

	  AjaxBasedTransport.call(this, transUrl, '/eventsource', EventSourceReceiver, XHRCorsObject);
	}

	inherits(EventSourceTransport, AjaxBasedTransport);

	EventSourceTransport.enabled = function() {
	  return !!EventSourceDriver;
	};

	EventSourceTransport.transportName = 'eventsource';
	EventSourceTransport.roundTrips = 2;

	module.exports = EventSourceTransport;


/***/ },
/* 43 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	var inherits = __webpack_require__(26)
	  , EventEmitter = __webpack_require__(27).EventEmitter
	  , EventSourceDriver = __webpack_require__(44)
	  ;

	var debug = function() {};
	if (process.env.NODE_ENV !== 'production') {
	  debug = __webpack_require__(23)('sockjs-client:receiver:eventsource');
	}

	function EventSourceReceiver(url) {
	  debug(url);
	  EventEmitter.call(this);

	  var self = this;
	  var es = this.es = new EventSourceDriver(url);
	  es.onmessage = function(e) {
	    debug('message', e.data);
	    self.emit('message', decodeURI(e.data));
	  };
	  es.onerror = function(e) {
	    debug('error', es.readyState, e);
	    // ES on reconnection has readyState = 0 or 1.
	    // on network error it's CLOSED = 2
	    var reason = (es.readyState !== 2 ? 'network' : 'permanent');
	    self._cleanup();
	    self._close(reason);
	  };
	}

	inherits(EventSourceReceiver, EventEmitter);

	EventSourceReceiver.prototype.abort = function() {
	  debug('abort');
	  this._cleanup();
	  this._close('user');
	};

	EventSourceReceiver.prototype._cleanup = function() {
	  debug('cleanup');
	  var es = this.es;
	  if (es) {
	    es.onmessage = es.onerror = null;
	    es.close();
	    this.es = null;
	  }
	};

	EventSourceReceiver.prototype._close = function(reason) {
	  debug('close', reason);
	  var self = this;
	  // Safari and chrome < 15 crash if we close window before
	  // waiting for ES cleanup. See:
	  // https://code.google.com/p/chromium/issues/detail?id=89155
	  setTimeout(function() {
	    self.emit('close', null, reason);
	    self.removeAllListeners();
	  }, 200);
	};

	module.exports = EventSourceReceiver;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(14)))

/***/ },
/* 44 */
/***/ function(module, exports) {

	/* WEBPACK VAR INJECTION */(function(global) {module.exports = global.EventSource;

	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 45 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {'use strict';

	var inherits = __webpack_require__(26)
	  , IframeTransport = __webpack_require__(46)
	  , objectUtils = __webpack_require__(51)
	  ;

	module.exports = function(transport) {

	  function IframeWrapTransport(transUrl, baseUrl) {
	    IframeTransport.call(this, transport.transportName, transUrl, baseUrl);
	  }

	  inherits(IframeWrapTransport, IframeTransport);

	  IframeWrapTransport.enabled = function(url, info) {
	    if (!global.document) {
	      return false;
	    }

	    var iframeInfo = objectUtils.extend({}, info);
	    iframeInfo.sameOrigin = true;
	    return transport.enabled(iframeInfo) && IframeTransport.enabled();
	  };

	  IframeWrapTransport.transportName = 'iframe-' + transport.transportName;
	  IframeWrapTransport.needBody = true;
	  IframeWrapTransport.roundTrips = IframeTransport.roundTrips + transport.roundTrips - 1; // html, javascript (2) + transport - no CORS (1)

	  IframeWrapTransport.facadeTransport = transport;

	  return IframeWrapTransport;
	};

	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 46 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	// Few cool transports do work only for same-origin. In order to make
	// them work cross-domain we shall use iframe, served from the
	// remote domain. New browsers have capabilities to communicate with
	// cross domain iframe using postMessage(). In IE it was implemented
	// from IE 8+, but of course, IE got some details wrong:
	//    http://msdn.microsoft.com/en-us/library/cc197015(v=VS.85).aspx
	//    http://stevesouders.com/misc/test-postmessage.php

	var inherits = __webpack_require__(26)
	  , JSON3 = __webpack_require__(47)
	  , EventEmitter = __webpack_require__(27).EventEmitter
	  , version = __webpack_require__(49)
	  , urlUtils = __webpack_require__(18)
	  , iframeUtils = __webpack_require__(50)
	  , eventUtils = __webpack_require__(15)
	  , random = __webpack_require__(16)
	  ;

	var debug = function() {};
	if (process.env.NODE_ENV !== 'production') {
	  debug = __webpack_require__(23)('sockjs-client:transport:iframe');
	}

	function IframeTransport(transport, transUrl, baseUrl) {
	  if (!IframeTransport.enabled()) {
	    throw new Error('Transport created when disabled');
	  }
	  EventEmitter.call(this);

	  var self = this;
	  this.origin = urlUtils.getOrigin(baseUrl);
	  this.baseUrl = baseUrl;
	  this.transUrl = transUrl;
	  this.transport = transport;
	  this.windowId = random.string(8);

	  var iframeUrl = urlUtils.addPath(baseUrl, '/iframe.html') + '#' + this.windowId;
	  debug(transport, transUrl, iframeUrl);

	  this.iframeObj = iframeUtils.createIframe(iframeUrl, function(r) {
	    debug('err callback');
	    self.emit('close', 1006, 'Unable to load an iframe (' + r + ')');
	    self.close();
	  });

	  this.onmessageCallback = this._message.bind(this);
	  eventUtils.attachEvent('message', this.onmessageCallback);
	}

	inherits(IframeTransport, EventEmitter);

	IframeTransport.prototype.close = function() {
	  debug('close');
	  this.removeAllListeners();
	  if (this.iframeObj) {
	    eventUtils.detachEvent('message', this.onmessageCallback);
	    try {
	      // When the iframe is not loaded, IE raises an exception
	      // on 'contentWindow'.
	      this.postMessage('c');
	    } catch (x) {
	      // intentionally empty
	    }
	    this.iframeObj.cleanup();
	    this.iframeObj = null;
	    this.onmessageCallback = this.iframeObj = null;
	  }
	};

	IframeTransport.prototype._message = function(e) {
	  debug('message', e.data);
	  if (!urlUtils.isOriginEqual(e.origin, this.origin)) {
	    debug('not same origin', e.origin, this.origin);
	    return;
	  }

	  var iframeMessage;
	  try {
	    iframeMessage = JSON3.parse(e.data);
	  } catch (ignored) {
	    debug('bad json', e.data);
	    return;
	  }

	  if (iframeMessage.windowId !== this.windowId) {
	    debug('mismatched window id', iframeMessage.windowId, this.windowId);
	    return;
	  }

	  switch (iframeMessage.type) {
	  case 's':
	    this.iframeObj.loaded();
	    // window global dependency
	    this.postMessage('s', JSON3.stringify([
	      version
	    , this.transport
	    , this.transUrl
	    , this.baseUrl
	    ]));
	    break;
	  case 't':
	    this.emit('message', iframeMessage.data);
	    break;
	  case 'c':
	    var cdata;
	    try {
	      cdata = JSON3.parse(iframeMessage.data);
	    } catch (ignored) {
	      debug('bad json', iframeMessage.data);
	      return;
	    }
	    this.emit('close', cdata[0], cdata[1]);
	    this.close();
	    break;
	  }
	};

	IframeTransport.prototype.postMessage = function(type, data) {
	  debug('postMessage', type, data);
	  this.iframeObj.post(JSON3.stringify({
	    windowId: this.windowId
	  , type: type
	  , data: data || ''
	  }), this.origin);
	};

	IframeTransport.prototype.send = function(message) {
	  debug('send', message);
	  this.postMessage('m', message);
	};

	IframeTransport.enabled = function() {
	  return iframeUtils.iframeEnabled;
	};

	IframeTransport.transportName = 'iframe';
	IframeTransport.roundTrips = 2;

	module.exports = IframeTransport;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(14)))

/***/ },
/* 47 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(module, global) {/*! JSON v3.3.2 | http://bestiejs.github.io/json3 | Copyright 2012-2014, Kit Cambridge | http://kit.mit-license.org */
	;(function () {
	  // Detect the `define` function exposed by asynchronous module loaders. The
	  // strict `define` check is necessary for compatibility with `r.js`.
	  var isLoader = "function" === "function" && __webpack_require__(48);

	  // A set of types used to distinguish objects from primitives.
	  var objectTypes = {
	    "function": true,
	    "object": true
	  };

	  // Detect the `exports` object exposed by CommonJS implementations.
	  var freeExports = objectTypes[typeof exports] && exports && !exports.nodeType && exports;

	  // Use the `global` object exposed by Node (including Browserify via
	  // `insert-module-globals`), Narwhal, and Ringo as the default context,
	  // and the `window` object in browsers. Rhino exports a `global` function
	  // instead.
	  var root = objectTypes[typeof window] && window || this,
	      freeGlobal = freeExports && objectTypes[typeof module] && module && !module.nodeType && typeof global == "object" && global;

	  if (freeGlobal && (freeGlobal["global"] === freeGlobal || freeGlobal["window"] === freeGlobal || freeGlobal["self"] === freeGlobal)) {
	    root = freeGlobal;
	  }

	  // Public: Initializes JSON 3 using the given `context` object, attaching the
	  // `stringify` and `parse` functions to the specified `exports` object.
	  function runInContext(context, exports) {
	    context || (context = root["Object"]());
	    exports || (exports = root["Object"]());

	    // Native constructor aliases.
	    var Number = context["Number"] || root["Number"],
	        String = context["String"] || root["String"],
	        Object = context["Object"] || root["Object"],
	        Date = context["Date"] || root["Date"],
	        SyntaxError = context["SyntaxError"] || root["SyntaxError"],
	        TypeError = context["TypeError"] || root["TypeError"],
	        Math = context["Math"] || root["Math"],
	        nativeJSON = context["JSON"] || root["JSON"];

	    // Delegate to the native `stringify` and `parse` implementations.
	    if (typeof nativeJSON == "object" && nativeJSON) {
	      exports.stringify = nativeJSON.stringify;
	      exports.parse = nativeJSON.parse;
	    }

	    // Convenience aliases.
	    var objectProto = Object.prototype,
	        getClass = objectProto.toString,
	        isProperty, forEach, undef;

	    // Test the `Date#getUTC*` methods. Based on work by @Yaffle.
	    var isExtended = new Date(-3509827334573292);
	    try {
	      // The `getUTCFullYear`, `Month`, and `Date` methods return nonsensical
	      // results for certain dates in Opera >= 10.53.
	      isExtended = isExtended.getUTCFullYear() == -109252 && isExtended.getUTCMonth() === 0 && isExtended.getUTCDate() === 1 &&
	        // Safari < 2.0.2 stores the internal millisecond time value correctly,
	        // but clips the values returned by the date methods to the range of
	        // signed 32-bit integers ([-2 ** 31, 2 ** 31 - 1]).
	        isExtended.getUTCHours() == 10 && isExtended.getUTCMinutes() == 37 && isExtended.getUTCSeconds() == 6 && isExtended.getUTCMilliseconds() == 708;
	    } catch (exception) {}

	    // Internal: Determines whether the native `JSON.stringify` and `parse`
	    // implementations are spec-compliant. Based on work by Ken Snyder.
	    function has(name) {
	      if (has[name] !== undef) {
	        // Return cached feature test result.
	        return has[name];
	      }
	      var isSupported;
	      if (name == "bug-string-char-index") {
	        // IE <= 7 doesn't support accessing string characters using square
	        // bracket notation. IE 8 only supports this for primitives.
	        isSupported = "a"[0] != "a";
	      } else if (name == "json") {
	        // Indicates whether both `JSON.stringify` and `JSON.parse` are
	        // supported.
	        isSupported = has("json-stringify") && has("json-parse");
	      } else {
	        var value, serialized = '{"a":[1,true,false,null,"\\u0000\\b\\n\\f\\r\\t"]}';
	        // Test `JSON.stringify`.
	        if (name == "json-stringify") {
	          var stringify = exports.stringify, stringifySupported = typeof stringify == "function" && isExtended;
	          if (stringifySupported) {
	            // A test function object with a custom `toJSON` method.
	            (value = function () {
	              return 1;
	            }).toJSON = value;
	            try {
	              stringifySupported =
	                // Firefox 3.1b1 and b2 serialize string, number, and boolean
	                // primitives as object literals.
	                stringify(0) === "0" &&
	                // FF 3.1b1, b2, and JSON 2 serialize wrapped primitives as object
	                // literals.
	                stringify(new Number()) === "0" &&
	                stringify(new String()) == '""' &&
	                // FF 3.1b1, 2 throw an error if the value is `null`, `undefined`, or
	                // does not define a canonical JSON representation (this applies to
	                // objects with `toJSON` properties as well, *unless* they are nested
	                // within an object or array).
	                stringify(getClass) === undef &&
	                // IE 8 serializes `undefined` as `"undefined"`. Safari <= 5.1.7 and
	                // FF 3.1b3 pass this test.
	                stringify(undef) === undef &&
	                // Safari <= 5.1.7 and FF 3.1b3 throw `Error`s and `TypeError`s,
	                // respectively, if the value is omitted entirely.
	                stringify() === undef &&
	                // FF 3.1b1, 2 throw an error if the given value is not a number,
	                // string, array, object, Boolean, or `null` literal. This applies to
	                // objects with custom `toJSON` methods as well, unless they are nested
	                // inside object or array literals. YUI 3.0.0b1 ignores custom `toJSON`
	                // methods entirely.
	                stringify(value) === "1" &&
	                stringify([value]) == "[1]" &&
	                // Prototype <= 1.6.1 serializes `[undefined]` as `"[]"` instead of
	                // `"[null]"`.
	                stringify([undef]) == "[null]" &&
	                // YUI 3.0.0b1 fails to serialize `null` literals.
	                stringify(null) == "null" &&
	                // FF 3.1b1, 2 halts serialization if an array contains a function:
	                // `[1, true, getClass, 1]` serializes as "[1,true,],". FF 3.1b3
	                // elides non-JSON values from objects and arrays, unless they
	                // define custom `toJSON` methods.
	                stringify([undef, getClass, null]) == "[null,null,null]" &&
	                // Simple serialization test. FF 3.1b1 uses Unicode escape sequences
	                // where character escape codes are expected (e.g., `\b` => `\u0008`).
	                stringify({ "a": [value, true, false, null, "\x00\b\n\f\r\t"] }) == serialized &&
	                // FF 3.1b1 and b2 ignore the `filter` and `width` arguments.
	                stringify(null, value) === "1" &&
	                stringify([1, 2], null, 1) == "[\n 1,\n 2\n]" &&
	                // JSON 2, Prototype <= 1.7, and older WebKit builds incorrectly
	                // serialize extended years.
	                stringify(new Date(-8.64e15)) == '"-271821-04-20T00:00:00.000Z"' &&
	                // The milliseconds are optional in ES 5, but required in 5.1.
	                stringify(new Date(8.64e15)) == '"+275760-09-13T00:00:00.000Z"' &&
	                // Firefox <= 11.0 incorrectly serializes years prior to 0 as negative
	                // four-digit years instead of six-digit years. Credits: @Yaffle.
	                stringify(new Date(-621987552e5)) == '"-000001-01-01T00:00:00.000Z"' &&
	                // Safari <= 5.1.5 and Opera >= 10.53 incorrectly serialize millisecond
	                // values less than 1000. Credits: @Yaffle.
	                stringify(new Date(-1)) == '"1969-12-31T23:59:59.999Z"';
	            } catch (exception) {
	              stringifySupported = false;
	            }
	          }
	          isSupported = stringifySupported;
	        }
	        // Test `JSON.parse`.
	        if (name == "json-parse") {
	          var parse = exports.parse;
	          if (typeof parse == "function") {
	            try {
	              // FF 3.1b1, b2 will throw an exception if a bare literal is provided.
	              // Conforming implementations should also coerce the initial argument to
	              // a string prior to parsing.
	              if (parse("0") === 0 && !parse(false)) {
	                // Simple parsing test.
	                value = parse(serialized);
	                var parseSupported = value["a"].length == 5 && value["a"][0] === 1;
	                if (parseSupported) {
	                  try {
	                    // Safari <= 5.1.2 and FF 3.1b1 allow unescaped tabs in strings.
	                    parseSupported = !parse('"\t"');
	                  } catch (exception) {}
	                  if (parseSupported) {
	                    try {
	                      // FF 4.0 and 4.0.1 allow leading `+` signs and leading
	                      // decimal points. FF 4.0, 4.0.1, and IE 9-10 also allow
	                      // certain octal literals.
	                      parseSupported = parse("01") !== 1;
	                    } catch (exception) {}
	                  }
	                  if (parseSupported) {
	                    try {
	                      // FF 4.0, 4.0.1, and Rhino 1.7R3-R4 allow trailing decimal
	                      // points. These environments, along with FF 3.1b1 and 2,
	                      // also allow trailing commas in JSON objects and arrays.
	                      parseSupported = parse("1.") !== 1;
	                    } catch (exception) {}
	                  }
	                }
	              }
	            } catch (exception) {
	              parseSupported = false;
	            }
	          }
	          isSupported = parseSupported;
	        }
	      }
	      return has[name] = !!isSupported;
	    }

	    if (!has("json")) {
	      // Common `[[Class]]` name aliases.
	      var functionClass = "[object Function]",
	          dateClass = "[object Date]",
	          numberClass = "[object Number]",
	          stringClass = "[object String]",
	          arrayClass = "[object Array]",
	          booleanClass = "[object Boolean]";

	      // Detect incomplete support for accessing string characters by index.
	      var charIndexBuggy = has("bug-string-char-index");

	      // Define additional utility methods if the `Date` methods are buggy.
	      if (!isExtended) {
	        var floor = Math.floor;
	        // A mapping between the months of the year and the number of days between
	        // January 1st and the first of the respective month.
	        var Months = [0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334];
	        // Internal: Calculates the number of days between the Unix epoch and the
	        // first day of the given month.
	        var getDay = function (year, month) {
	          return Months[month] + 365 * (year - 1970) + floor((year - 1969 + (month = +(month > 1))) / 4) - floor((year - 1901 + month) / 100) + floor((year - 1601 + month) / 400);
	        };
	      }

	      // Internal: Determines if a property is a direct property of the given
	      // object. Delegates to the native `Object#hasOwnProperty` method.
	      if (!(isProperty = objectProto.hasOwnProperty)) {
	        isProperty = function (property) {
	          var members = {}, constructor;
	          if ((members.__proto__ = null, members.__proto__ = {
	            // The *proto* property cannot be set multiple times in recent
	            // versions of Firefox and SeaMonkey.
	            "toString": 1
	          }, members).toString != getClass) {
	            // Safari <= 2.0.3 doesn't implement `Object#hasOwnProperty`, but
	            // supports the mutable *proto* property.
	            isProperty = function (property) {
	              // Capture and break the object's prototype chain (see section 8.6.2
	              // of the ES 5.1 spec). The parenthesized expression prevents an
	              // unsafe transformation by the Closure Compiler.
	              var original = this.__proto__, result = property in (this.__proto__ = null, this);
	              // Restore the original prototype chain.
	              this.__proto__ = original;
	              return result;
	            };
	          } else {
	            // Capture a reference to the top-level `Object` constructor.
	            constructor = members.constructor;
	            // Use the `constructor` property to simulate `Object#hasOwnProperty` in
	            // other environments.
	            isProperty = function (property) {
	              var parent = (this.constructor || constructor).prototype;
	              return property in this && !(property in parent && this[property] === parent[property]);
	            };
	          }
	          members = null;
	          return isProperty.call(this, property);
	        };
	      }

	      // Internal: Normalizes the `for...in` iteration algorithm across
	      // environments. Each enumerated key is yielded to a `callback` function.
	      forEach = function (object, callback) {
	        var size = 0, Properties, members, property;

	        // Tests for bugs in the current environment's `for...in` algorithm. The
	        // `valueOf` property inherits the non-enumerable flag from
	        // `Object.prototype` in older versions of IE, Netscape, and Mozilla.
	        (Properties = function () {
	          this.valueOf = 0;
	        }).prototype.valueOf = 0;

	        // Iterate over a new instance of the `Properties` class.
	        members = new Properties();
	        for (property in members) {
	          // Ignore all properties inherited from `Object.prototype`.
	          if (isProperty.call(members, property)) {
	            size++;
	          }
	        }
	        Properties = members = null;

	        // Normalize the iteration algorithm.
	        if (!size) {
	          // A list of non-enumerable properties inherited from `Object.prototype`.
	          members = ["valueOf", "toString", "toLocaleString", "propertyIsEnumerable", "isPrototypeOf", "hasOwnProperty", "constructor"];
	          // IE <= 8, Mozilla 1.0, and Netscape 6.2 ignore shadowed non-enumerable
	          // properties.
	          forEach = function (object, callback) {
	            var isFunction = getClass.call(object) == functionClass, property, length;
	            var hasProperty = !isFunction && typeof object.constructor != "function" && objectTypes[typeof object.hasOwnProperty] && object.hasOwnProperty || isProperty;
	            for (property in object) {
	              // Gecko <= 1.0 enumerates the `prototype` property of functions under
	              // certain conditions; IE does not.
	              if (!(isFunction && property == "prototype") && hasProperty.call(object, property)) {
	                callback(property);
	              }
	            }
	            // Manually invoke the callback for each non-enumerable property.
	            for (length = members.length; property = members[--length]; hasProperty.call(object, property) && callback(property));
	          };
	        } else if (size == 2) {
	          // Safari <= 2.0.4 enumerates shadowed properties twice.
	          forEach = function (object, callback) {
	            // Create a set of iterated properties.
	            var members = {}, isFunction = getClass.call(object) == functionClass, property;
	            for (property in object) {
	              // Store each property name to prevent double enumeration. The
	              // `prototype` property of functions is not enumerated due to cross-
	              // environment inconsistencies.
	              if (!(isFunction && property == "prototype") && !isProperty.call(members, property) && (members[property] = 1) && isProperty.call(object, property)) {
	                callback(property);
	              }
	            }
	          };
	        } else {
	          // No bugs detected; use the standard `for...in` algorithm.
	          forEach = function (object, callback) {
	            var isFunction = getClass.call(object) == functionClass, property, isConstructor;
	            for (property in object) {
	              if (!(isFunction && property == "prototype") && isProperty.call(object, property) && !(isConstructor = property === "constructor")) {
	                callback(property);
	              }
	            }
	            // Manually invoke the callback for the `constructor` property due to
	            // cross-environment inconsistencies.
	            if (isConstructor || isProperty.call(object, (property = "constructor"))) {
	              callback(property);
	            }
	          };
	        }
	        return forEach(object, callback);
	      };

	      // Public: Serializes a JavaScript `value` as a JSON string. The optional
	      // `filter` argument may specify either a function that alters how object and
	      // array members are serialized, or an array of strings and numbers that
	      // indicates which properties should be serialized. The optional `width`
	      // argument may be either a string or number that specifies the indentation
	      // level of the output.
	      if (!has("json-stringify")) {
	        // Internal: A map of control characters and their escaped equivalents.
	        var Escapes = {
	          92: "\\\\",
	          34: '\\"',
	          8: "\\b",
	          12: "\\f",
	          10: "\\n",
	          13: "\\r",
	          9: "\\t"
	        };

	        // Internal: Converts `value` into a zero-padded string such that its
	        // length is at least equal to `width`. The `width` must be <= 6.
	        var leadingZeroes = "000000";
	        var toPaddedString = function (width, value) {
	          // The `|| 0` expression is necessary to work around a bug in
	          // Opera <= 7.54u2 where `0 == -0`, but `String(-0) !== "0"`.
	          return (leadingZeroes + (value || 0)).slice(-width);
	        };

	        // Internal: Double-quotes a string `value`, replacing all ASCII control
	        // characters (characters with code unit values between 0 and 31) with
	        // their escaped equivalents. This is an implementation of the
	        // `Quote(value)` operation defined in ES 5.1 section 15.12.3.
	        var unicodePrefix = "\\u00";
	        var quote = function (value) {
	          var result = '"', index = 0, length = value.length, useCharIndex = !charIndexBuggy || length > 10;
	          var symbols = useCharIndex && (charIndexBuggy ? value.split("") : value);
	          for (; index < length; index++) {
	            var charCode = value.charCodeAt(index);
	            // If the character is a control character, append its Unicode or
	            // shorthand escape sequence; otherwise, append the character as-is.
	            switch (charCode) {
	              case 8: case 9: case 10: case 12: case 13: case 34: case 92:
	                result += Escapes[charCode];
	                break;
	              default:
	                if (charCode < 32) {
	                  result += unicodePrefix + toPaddedString(2, charCode.toString(16));
	                  break;
	                }
	                result += useCharIndex ? symbols[index] : value.charAt(index);
	            }
	          }
	          return result + '"';
	        };

	        // Internal: Recursively serializes an object. Implements the
	        // `Str(key, holder)`, `JO(value)`, and `JA(value)` operations.
	        var serialize = function (property, object, callback, properties, whitespace, indentation, stack) {
	          var value, className, year, month, date, time, hours, minutes, seconds, milliseconds, results, element, index, length, prefix, result;
	          try {
	            // Necessary for host object support.
	            value = object[property];
	          } catch (exception) {}
	          if (typeof value == "object" && value) {
	            className = getClass.call(value);
	            if (className == dateClass && !isProperty.call(value, "toJSON")) {
	              if (value > -1 / 0 && value < 1 / 0) {
	                // Dates are serialized according to the `Date#toJSON` method
	                // specified in ES 5.1 section 15.9.5.44. See section 15.9.1.15
	                // for the ISO 8601 date time string format.
	                if (getDay) {
	                  // Manually compute the year, month, date, hours, minutes,
	                  // seconds, and milliseconds if the `getUTC*` methods are
	                  // buggy. Adapted from @Yaffle's `date-shim` project.
	                  date = floor(value / 864e5);
	                  for (year = floor(date / 365.2425) + 1970 - 1; getDay(year + 1, 0) <= date; year++);
	                  for (month = floor((date - getDay(year, 0)) / 30.42); getDay(year, month + 1) <= date; month++);
	                  date = 1 + date - getDay(year, month);
	                  // The `time` value specifies the time within the day (see ES
	                  // 5.1 section 15.9.1.2). The formula `(A % B + B) % B` is used
	                  // to compute `A modulo B`, as the `%` operator does not
	                  // correspond to the `modulo` operation for negative numbers.
	                  time = (value % 864e5 + 864e5) % 864e5;
	                  // The hours, minutes, seconds, and milliseconds are obtained by
	                  // decomposing the time within the day. See section 15.9.1.10.
	                  hours = floor(time / 36e5) % 24;
	                  minutes = floor(time / 6e4) % 60;
	                  seconds = floor(time / 1e3) % 60;
	                  milliseconds = time % 1e3;
	                } else {
	                  year = value.getUTCFullYear();
	                  month = value.getUTCMonth();
	                  date = value.getUTCDate();
	                  hours = value.getUTCHours();
	                  minutes = value.getUTCMinutes();
	                  seconds = value.getUTCSeconds();
	                  milliseconds = value.getUTCMilliseconds();
	                }
	                // Serialize extended years correctly.
	                value = (year <= 0 || year >= 1e4 ? (year < 0 ? "-" : "+") + toPaddedString(6, year < 0 ? -year : year) : toPaddedString(4, year)) +
	                  "-" + toPaddedString(2, month + 1) + "-" + toPaddedString(2, date) +
	                  // Months, dates, hours, minutes, and seconds should have two
	                  // digits; milliseconds should have three.
	                  "T" + toPaddedString(2, hours) + ":" + toPaddedString(2, minutes) + ":" + toPaddedString(2, seconds) +
	                  // Milliseconds are optional in ES 5.0, but required in 5.1.
	                  "." + toPaddedString(3, milliseconds) + "Z";
	              } else {
	                value = null;
	              }
	            } else if (typeof value.toJSON == "function" && ((className != numberClass && className != stringClass && className != arrayClass) || isProperty.call(value, "toJSON"))) {
	              // Prototype <= 1.6.1 adds non-standard `toJSON` methods to the
	              // `Number`, `String`, `Date`, and `Array` prototypes. JSON 3
	              // ignores all `toJSON` methods on these objects unless they are
	              // defined directly on an instance.
	              value = value.toJSON(property);
	            }
	          }
	          if (callback) {
	            // If a replacement function was provided, call it to obtain the value
	            // for serialization.
	            value = callback.call(object, property, value);
	          }
	          if (value === null) {
	            return "null";
	          }
	          className = getClass.call(value);
	          if (className == booleanClass) {
	            // Booleans are represented literally.
	            return "" + value;
	          } else if (className == numberClass) {
	            // JSON numbers must be finite. `Infinity` and `NaN` are serialized as
	            // `"null"`.
	            return value > -1 / 0 && value < 1 / 0 ? "" + value : "null";
	          } else if (className == stringClass) {
	            // Strings are double-quoted and escaped.
	            return quote("" + value);
	          }
	          // Recursively serialize objects and arrays.
	          if (typeof value == "object") {
	            // Check for cyclic structures. This is a linear search; performance
	            // is inversely proportional to the number of unique nested objects.
	            for (length = stack.length; length--;) {
	              if (stack[length] === value) {
	                // Cyclic structures cannot be serialized by `JSON.stringify`.
	                throw TypeError();
	              }
	            }
	            // Add the object to the stack of traversed objects.
	            stack.push(value);
	            results = [];
	            // Save the current indentation level and indent one additional level.
	            prefix = indentation;
	            indentation += whitespace;
	            if (className == arrayClass) {
	              // Recursively serialize array elements.
	              for (index = 0, length = value.length; index < length; index++) {
	                element = serialize(index, value, callback, properties, whitespace, indentation, stack);
	                results.push(element === undef ? "null" : element);
	              }
	              result = results.length ? (whitespace ? "[\n" + indentation + results.join(",\n" + indentation) + "\n" + prefix + "]" : ("[" + results.join(",") + "]")) : "[]";
	            } else {
	              // Recursively serialize object members. Members are selected from
	              // either a user-specified list of property names, or the object
	              // itself.
	              forEach(properties || value, function (property) {
	                var element = serialize(property, value, callback, properties, whitespace, indentation, stack);
	                if (element !== undef) {
	                  // According to ES 5.1 section 15.12.3: "If `gap` {whitespace}
	                  // is not the empty string, let `member` {quote(property) + ":"}
	                  // be the concatenation of `member` and the `space` character."
	                  // The "`space` character" refers to the literal space
	                  // character, not the `space` {width} argument provided to
	                  // `JSON.stringify`.
	                  results.push(quote(property) + ":" + (whitespace ? " " : "") + element);
	                }
	              });
	              result = results.length ? (whitespace ? "{\n" + indentation + results.join(",\n" + indentation) + "\n" + prefix + "}" : ("{" + results.join(",") + "}")) : "{}";
	            }
	            // Remove the object from the traversed object stack.
	            stack.pop();
	            return result;
	          }
	        };

	        // Public: `JSON.stringify`. See ES 5.1 section 15.12.3.
	        exports.stringify = function (source, filter, width) {
	          var whitespace, callback, properties, className;
	          if (objectTypes[typeof filter] && filter) {
	            if ((className = getClass.call(filter)) == functionClass) {
	              callback = filter;
	            } else if (className == arrayClass) {
	              // Convert the property names array into a makeshift set.
	              properties = {};
	              for (var index = 0, length = filter.length, value; index < length; value = filter[index++], ((className = getClass.call(value)), className == stringClass || className == numberClass) && (properties[value] = 1));
	            }
	          }
	          if (width) {
	            if ((className = getClass.call(width)) == numberClass) {
	              // Convert the `width` to an integer and create a string containing
	              // `width` number of space characters.
	              if ((width -= width % 1) > 0) {
	                for (whitespace = "", width > 10 && (width = 10); whitespace.length < width; whitespace += " ");
	              }
	            } else if (className == stringClass) {
	              whitespace = width.length <= 10 ? width : width.slice(0, 10);
	            }
	          }
	          // Opera <= 7.54u2 discards the values associated with empty string keys
	          // (`""`) only if they are used directly within an object member list
	          // (e.g., `!("" in { "": 1})`).
	          return serialize("", (value = {}, value[""] = source, value), callback, properties, whitespace, "", []);
	        };
	      }

	      // Public: Parses a JSON source string.
	      if (!has("json-parse")) {
	        var fromCharCode = String.fromCharCode;

	        // Internal: A map of escaped control characters and their unescaped
	        // equivalents.
	        var Unescapes = {
	          92: "\\",
	          34: '"',
	          47: "/",
	          98: "\b",
	          116: "\t",
	          110: "\n",
	          102: "\f",
	          114: "\r"
	        };

	        // Internal: Stores the parser state.
	        var Index, Source;

	        // Internal: Resets the parser state and throws a `SyntaxError`.
	        var abort = function () {
	          Index = Source = null;
	          throw SyntaxError();
	        };

	        // Internal: Returns the next token, or `"$"` if the parser has reached
	        // the end of the source string. A token may be a string, number, `null`
	        // literal, or Boolean literal.
	        var lex = function () {
	          var source = Source, length = source.length, value, begin, position, isSigned, charCode;
	          while (Index < length) {
	            charCode = source.charCodeAt(Index);
	            switch (charCode) {
	              case 9: case 10: case 13: case 32:
	                // Skip whitespace tokens, including tabs, carriage returns, line
	                // feeds, and space characters.
	                Index++;
	                break;
	              case 123: case 125: case 91: case 93: case 58: case 44:
	                // Parse a punctuator token (`{`, `}`, `[`, `]`, `:`, or `,`) at
	                // the current position.
	                value = charIndexBuggy ? source.charAt(Index) : source[Index];
	                Index++;
	                return value;
	              case 34:
	                // `"` delimits a JSON string; advance to the next character and
	                // begin parsing the string. String tokens are prefixed with the
	                // sentinel `@` character to distinguish them from punctuators and
	                // end-of-string tokens.
	                for (value = "@", Index++; Index < length;) {
	                  charCode = source.charCodeAt(Index);
	                  if (charCode < 32) {
	                    // Unescaped ASCII control characters (those with a code unit
	                    // less than the space character) are not permitted.
	                    abort();
	                  } else if (charCode == 92) {
	                    // A reverse solidus (`\`) marks the beginning of an escaped
	                    // control character (including `"`, `\`, and `/`) or Unicode
	                    // escape sequence.
	                    charCode = source.charCodeAt(++Index);
	                    switch (charCode) {
	                      case 92: case 34: case 47: case 98: case 116: case 110: case 102: case 114:
	                        // Revive escaped control characters.
	                        value += Unescapes[charCode];
	                        Index++;
	                        break;
	                      case 117:
	                        // `\u` marks the beginning of a Unicode escape sequence.
	                        // Advance to the first character and validate the
	                        // four-digit code point.
	                        begin = ++Index;
	                        for (position = Index + 4; Index < position; Index++) {
	                          charCode = source.charCodeAt(Index);
	                          // A valid sequence comprises four hexdigits (case-
	                          // insensitive) that form a single hexadecimal value.
	                          if (!(charCode >= 48 && charCode <= 57 || charCode >= 97 && charCode <= 102 || charCode >= 65 && charCode <= 70)) {
	                            // Invalid Unicode escape sequence.
	                            abort();
	                          }
	                        }
	                        // Revive the escaped character.
	                        value += fromCharCode("0x" + source.slice(begin, Index));
	                        break;
	                      default:
	                        // Invalid escape sequence.
	                        abort();
	                    }
	                  } else {
	                    if (charCode == 34) {
	                      // An unescaped double-quote character marks the end of the
	                      // string.
	                      break;
	                    }
	                    charCode = source.charCodeAt(Index);
	                    begin = Index;
	                    // Optimize for the common case where a string is valid.
	                    while (charCode >= 32 && charCode != 92 && charCode != 34) {
	                      charCode = source.charCodeAt(++Index);
	                    }
	                    // Append the string as-is.
	                    value += source.slice(begin, Index);
	                  }
	                }
	                if (source.charCodeAt(Index) == 34) {
	                  // Advance to the next character and return the revived string.
	                  Index++;
	                  return value;
	                }
	                // Unterminated string.
	                abort();
	              default:
	                // Parse numbers and literals.
	                begin = Index;
	                // Advance past the negative sign, if one is specified.
	                if (charCode == 45) {
	                  isSigned = true;
	                  charCode = source.charCodeAt(++Index);
	                }
	                // Parse an integer or floating-point value.
	                if (charCode >= 48 && charCode <= 57) {
	                  // Leading zeroes are interpreted as octal literals.
	                  if (charCode == 48 && ((charCode = source.charCodeAt(Index + 1)), charCode >= 48 && charCode <= 57)) {
	                    // Illegal octal literal.
	                    abort();
	                  }
	                  isSigned = false;
	                  // Parse the integer component.
	                  for (; Index < length && ((charCode = source.charCodeAt(Index)), charCode >= 48 && charCode <= 57); Index++);
	                  // Floats cannot contain a leading decimal point; however, this
	                  // case is already accounted for by the parser.
	                  if (source.charCodeAt(Index) == 46) {
	                    position = ++Index;
	                    // Parse the decimal component.
	                    for (; position < length && ((charCode = source.charCodeAt(position)), charCode >= 48 && charCode <= 57); position++);
	                    if (position == Index) {
	                      // Illegal trailing decimal.
	                      abort();
	                    }
	                    Index = position;
	                  }
	                  // Parse exponents. The `e` denoting the exponent is
	                  // case-insensitive.
	                  charCode = source.charCodeAt(Index);
	                  if (charCode == 101 || charCode == 69) {
	                    charCode = source.charCodeAt(++Index);
	                    // Skip past the sign following the exponent, if one is
	                    // specified.
	                    if (charCode == 43 || charCode == 45) {
	                      Index++;
	                    }
	                    // Parse the exponential component.
	                    for (position = Index; position < length && ((charCode = source.charCodeAt(position)), charCode >= 48 && charCode <= 57); position++);
	                    if (position == Index) {
	                      // Illegal empty exponent.
	                      abort();
	                    }
	                    Index = position;
	                  }
	                  // Coerce the parsed value to a JavaScript number.
	                  return +source.slice(begin, Index);
	                }
	                // A negative sign may only precede numbers.
	                if (isSigned) {
	                  abort();
	                }
	                // `true`, `false`, and `null` literals.
	                if (source.slice(Index, Index + 4) == "true") {
	                  Index += 4;
	                  return true;
	                } else if (source.slice(Index, Index + 5) == "false") {
	                  Index += 5;
	                  return false;
	                } else if (source.slice(Index, Index + 4) == "null") {
	                  Index += 4;
	                  return null;
	                }
	                // Unrecognized token.
	                abort();
	            }
	          }
	          // Return the sentinel `$` character if the parser has reached the end
	          // of the source string.
	          return "$";
	        };

	        // Internal: Parses a JSON `value` token.
	        var get = function (value) {
	          var results, hasMembers;
	          if (value == "$") {
	            // Unexpected end of input.
	            abort();
	          }
	          if (typeof value == "string") {
	            if ((charIndexBuggy ? value.charAt(0) : value[0]) == "@") {
	              // Remove the sentinel `@` character.
	              return value.slice(1);
	            }
	            // Parse object and array literals.
	            if (value == "[") {
	              // Parses a JSON array, returning a new JavaScript array.
	              results = [];
	              for (;; hasMembers || (hasMembers = true)) {
	                value = lex();
	                // A closing square bracket marks the end of the array literal.
	                if (value == "]") {
	                  break;
	                }
	                // If the array literal contains elements, the current token
	                // should be a comma separating the previous element from the
	                // next.
	                if (hasMembers) {
	                  if (value == ",") {
	                    value = lex();
	                    if (value == "]") {
	                      // Unexpected trailing `,` in array literal.
	                      abort();
	                    }
	                  } else {
	                    // A `,` must separate each array element.
	                    abort();
	                  }
	                }
	                // Elisions and leading commas are not permitted.
	                if (value == ",") {
	                  abort();
	                }
	                results.push(get(value));
	              }
	              return results;
	            } else if (value == "{") {
	              // Parses a JSON object, returning a new JavaScript object.
	              results = {};
	              for (;; hasMembers || (hasMembers = true)) {
	                value = lex();
	                // A closing curly brace marks the end of the object literal.
	                if (value == "}") {
	                  break;
	                }
	                // If the object literal contains members, the current token
	                // should be a comma separator.
	                if (hasMembers) {
	                  if (value == ",") {
	                    value = lex();
	                    if (value == "}") {
	                      // Unexpected trailing `,` in object literal.
	                      abort();
	                    }
	                  } else {
	                    // A `,` must separate each object member.
	                    abort();
	                  }
	                }
	                // Leading commas are not permitted, object property names must be
	                // double-quoted strings, and a `:` must separate each property
	                // name and value.
	                if (value == "," || typeof value != "string" || (charIndexBuggy ? value.charAt(0) : value[0]) != "@" || lex() != ":") {
	                  abort();
	                }
	                results[value.slice(1)] = get(lex());
	              }
	              return results;
	            }
	            // Unexpected token encountered.
	            abort();
	          }
	          return value;
	        };

	        // Internal: Updates a traversed object member.
	        var update = function (source, property, callback) {
	          var element = walk(source, property, callback);
	          if (element === undef) {
	            delete source[property];
	          } else {
	            source[property] = element;
	          }
	        };

	        // Internal: Recursively traverses a parsed JSON object, invoking the
	        // `callback` function for each value. This is an implementation of the
	        // `Walk(holder, name)` operation defined in ES 5.1 section 15.12.2.
	        var walk = function (source, property, callback) {
	          var value = source[property], length;
	          if (typeof value == "object" && value) {
	            // `forEach` can't be used to traverse an array in Opera <= 8.54
	            // because its `Object#hasOwnProperty` implementation returns `false`
	            // for array indices (e.g., `![1, 2, 3].hasOwnProperty("0")`).
	            if (getClass.call(value) == arrayClass) {
	              for (length = value.length; length--;) {
	                update(value, length, callback);
	              }
	            } else {
	              forEach(value, function (property) {
	                update(value, property, callback);
	              });
	            }
	          }
	          return callback.call(source, property, value);
	        };

	        // Public: `JSON.parse`. See ES 5.1 section 15.12.2.
	        exports.parse = function (source, callback) {
	          var result, value;
	          Index = 0;
	          Source = "" + source;
	          result = get(lex());
	          // If a JSON string contains multiple tokens, it is invalid.
	          if (lex() != "$") {
	            abort();
	          }
	          // Reset the parser state.
	          Index = Source = null;
	          return callback && getClass.call(callback) == functionClass ? walk((value = {}, value[""] = result, value), "", callback) : result;
	        };
	      }
	    }

	    exports["runInContext"] = runInContext;
	    return exports;
	  }

	  if (freeExports && !isLoader) {
	    // Export for CommonJS environments.
	    runInContext(root, freeExports);
	  } else {
	    // Export for web browsers and JavaScript engines.
	    var nativeJSON = root.JSON,
	        previousJSON = root["JSON3"],
	        isRestored = false;

	    var JSON3 = runInContext(root, (root["JSON3"] = {
	      // Public: Restores the original value of the global `JSON` object and
	      // returns a reference to the `JSON3` object.
	      "noConflict": function () {
	        if (!isRestored) {
	          isRestored = true;
	          root.JSON = nativeJSON;
	          root["JSON3"] = previousJSON;
	          nativeJSON = previousJSON = null;
	        }
	        return JSON3;
	      }
	    }));

	    root.JSON = {
	      "parse": JSON3.parse,
	      "stringify": JSON3.stringify
	    };
	  }

	  // Export for asynchronous module loaders.
	  if (isLoader) {
	    !(__WEBPACK_AMD_DEFINE_RESULT__ = function () {
	      return JSON3;
	    }.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	  }
	}).call(this);

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)(module), (function() { return this; }())))

/***/ },
/* 48 */
/***/ function(module, exports) {

	/* WEBPACK VAR INJECTION */(function(__webpack_amd_options__) {module.exports = __webpack_amd_options__;

	/* WEBPACK VAR INJECTION */}.call(exports, {}))

/***/ },
/* 49 */
/***/ function(module, exports) {

	module.exports = '1.1.1';


/***/ },
/* 50 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process, global) {'use strict';

	var eventUtils = __webpack_require__(15)
	  , JSON3 = __webpack_require__(47)
	  , browser = __webpack_require__(39)
	  ;

	var debug = function() {};
	if (process.env.NODE_ENV !== 'production') {
	  debug = __webpack_require__(23)('sockjs-client:utils:iframe');
	}

	module.exports = {
	  WPrefix: '_jp'
	, currentWindowId: null

	, polluteGlobalNamespace: function() {
	    if (!(module.exports.WPrefix in global)) {
	      global[module.exports.WPrefix] = {};
	    }
	  }

	, postMessage: function(type, data) {
	    if (global.parent !== global) {
	      global.parent.postMessage(JSON3.stringify({
	        windowId: module.exports.currentWindowId
	      , type: type
	      , data: data || ''
	      }), '*');
	    } else {
	      debug('Cannot postMessage, no parent window.', type, data);
	    }
	  }

	, createIframe: function(iframeUrl, errorCallback) {
	    var iframe = global.document.createElement('iframe');
	    var tref, unloadRef;
	    var unattach = function() {
	      debug('unattach');
	      clearTimeout(tref);
	      // Explorer had problems with that.
	      try {
	        iframe.onload = null;
	      } catch (x) {
	        // intentionally empty
	      }
	      iframe.onerror = null;
	    };
	    var cleanup = function() {
	      debug('cleanup');
	      if (iframe) {
	        unattach();
	        // This timeout makes chrome fire onbeforeunload event
	        // within iframe. Without the timeout it goes straight to
	        // onunload.
	        setTimeout(function() {
	          if (iframe) {
	            iframe.parentNode.removeChild(iframe);
	          }
	          iframe = null;
	        }, 0);
	        eventUtils.unloadDel(unloadRef);
	      }
	    };
	    var onerror = function(err) {
	      debug('onerror', err);
	      if (iframe) {
	        cleanup();
	        errorCallback(err);
	      }
	    };
	    var post = function(msg, origin) {
	      debug('post', msg, origin);
	      try {
	        // When the iframe is not loaded, IE raises an exception
	        // on 'contentWindow'.
	        setTimeout(function() {
	          if (iframe && iframe.contentWindow) {
	            iframe.contentWindow.postMessage(msg, origin);
	          }
	        }, 0);
	      } catch (x) {
	        // intentionally empty
	      }
	    };

	    iframe.src = iframeUrl;
	    iframe.style.display = 'none';
	    iframe.style.position = 'absolute';
	    iframe.onerror = function() {
	      onerror('onerror');
	    };
	    iframe.onload = function() {
	      debug('onload');
	      // `onload` is triggered before scripts on the iframe are
	      // executed. Give it few seconds to actually load stuff.
	      clearTimeout(tref);
	      tref = setTimeout(function() {
	        onerror('onload timeout');
	      }, 2000);
	    };
	    global.document.body.appendChild(iframe);
	    tref = setTimeout(function() {
	      onerror('timeout');
	    }, 15000);
	    unloadRef = eventUtils.unloadAdd(cleanup);
	    return {
	      post: post
	    , cleanup: cleanup
	    , loaded: unattach
	    };
	  }

	/* jshint undef: false, newcap: false */
	/* eslint no-undef: 0, new-cap: 0 */
	, createHtmlfile: function(iframeUrl, errorCallback) {
	    var axo = ['Active'].concat('Object').join('X');
	    var doc = new global[axo]('htmlfile');
	    var tref, unloadRef;
	    var iframe;
	    var unattach = function() {
	      clearTimeout(tref);
	      iframe.onerror = null;
	    };
	    var cleanup = function() {
	      if (doc) {
	        unattach();
	        eventUtils.unloadDel(unloadRef);
	        iframe.parentNode.removeChild(iframe);
	        iframe = doc = null;
	        CollectGarbage();
	      }
	    };
	    var onerror = function(r) {
	      debug('onerror', r);
	      if (doc) {
	        cleanup();
	        errorCallback(r);
	      }
	    };
	    var post = function(msg, origin) {
	      try {
	        // When the iframe is not loaded, IE raises an exception
	        // on 'contentWindow'.
	        setTimeout(function() {
	          if (iframe && iframe.contentWindow) {
	              iframe.contentWindow.postMessage(msg, origin);
	          }
	        }, 0);
	      } catch (x) {
	        // intentionally empty
	      }
	    };

	    doc.open();
	    doc.write('<html><s' + 'cript>' +
	              'document.domain="' + global.document.domain + '";' +
	              '</s' + 'cript></html>');
	    doc.close();
	    doc.parentWindow[module.exports.WPrefix] = global[module.exports.WPrefix];
	    var c = doc.createElement('div');
	    doc.body.appendChild(c);
	    iframe = doc.createElement('iframe');
	    c.appendChild(iframe);
	    iframe.src = iframeUrl;
	    iframe.onerror = function() {
	      onerror('onerror');
	    };
	    tref = setTimeout(function() {
	      onerror('timeout');
	    }, 15000);
	    unloadRef = eventUtils.unloadAdd(cleanup);
	    return {
	      post: post
	    , cleanup: cleanup
	    , loaded: unattach
	    };
	  }
	};

	module.exports.iframeEnabled = false;
	if (global.document) {
	  // postMessage misbehaves in konqueror 4.6.5 - the messages are delivered with
	  // huge delay, or not at all.
	  module.exports.iframeEnabled = (typeof global.postMessage === 'function' ||
	    typeof global.postMessage === 'object') && (!browser.isKonqueror());
	}

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(14), (function() { return this; }())))

/***/ },
/* 51 */
/***/ function(module, exports) {

	'use strict';

	module.exports = {
	  isObject: function(obj) {
	    var type = typeof obj;
	    return type === 'function' || type === 'object' && !!obj;
	  }

	, extend: function(obj) {
	    if (!this.isObject(obj)) {
	      return obj;
	    }
	    var source, prop;
	    for (var i = 1, length = arguments.length; i < length; i++) {
	      source = arguments[i];
	      for (prop in source) {
	        if (Object.prototype.hasOwnProperty.call(source, prop)) {
	          obj[prop] = source[prop];
	        }
	      }
	    }
	    return obj;
	  }
	};


/***/ },
/* 52 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var inherits = __webpack_require__(26)
	  , HtmlfileReceiver = __webpack_require__(53)
	  , XHRLocalObject = __webpack_require__(38)
	  , AjaxBasedTransport = __webpack_require__(31)
	  ;

	function HtmlFileTransport(transUrl) {
	  if (!HtmlfileReceiver.enabled) {
	    throw new Error('Transport created when disabled');
	  }
	  AjaxBasedTransport.call(this, transUrl, '/htmlfile', HtmlfileReceiver, XHRLocalObject);
	}

	inherits(HtmlFileTransport, AjaxBasedTransport);

	HtmlFileTransport.enabled = function(info) {
	  return HtmlfileReceiver.enabled && info.sameOrigin;
	};

	HtmlFileTransport.transportName = 'htmlfile';
	HtmlFileTransport.roundTrips = 2;

	module.exports = HtmlFileTransport;


/***/ },
/* 53 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process, global) {'use strict';

	var inherits = __webpack_require__(26)
	  , iframeUtils = __webpack_require__(50)
	  , urlUtils = __webpack_require__(18)
	  , EventEmitter = __webpack_require__(27).EventEmitter
	  , random = __webpack_require__(16)
	  ;

	var debug = function() {};
	if (process.env.NODE_ENV !== 'production') {
	  debug = __webpack_require__(23)('sockjs-client:receiver:htmlfile');
	}

	function HtmlfileReceiver(url) {
	  debug(url);
	  EventEmitter.call(this);
	  var self = this;
	  iframeUtils.polluteGlobalNamespace();

	  this.id = 'a' + random.string(6);
	  url = urlUtils.addQuery(url, 'c=' + decodeURIComponent(iframeUtils.WPrefix + '.' + this.id));

	  debug('using htmlfile', HtmlfileReceiver.htmlfileEnabled);
	  var constructFunc = HtmlfileReceiver.htmlfileEnabled ?
	      iframeUtils.createHtmlfile : iframeUtils.createIframe;

	  global[iframeUtils.WPrefix][this.id] = {
	    start: function() {
	      debug('start');
	      self.iframeObj.loaded();
	    }
	  , message: function(data) {
	      debug('message', data);
	      self.emit('message', data);
	    }
	  , stop: function() {
	      debug('stop');
	      self._cleanup();
	      self._close('network');
	    }
	  };
	  this.iframeObj = constructFunc(url, function() {
	    debug('callback');
	    self._cleanup();
	    self._close('permanent');
	  });
	}

	inherits(HtmlfileReceiver, EventEmitter);

	HtmlfileReceiver.prototype.abort = function() {
	  debug('abort');
	  this._cleanup();
	  this._close('user');
	};

	HtmlfileReceiver.prototype._cleanup = function() {
	  debug('_cleanup');
	  if (this.iframeObj) {
	    this.iframeObj.cleanup();
	    this.iframeObj = null;
	  }
	  delete global[iframeUtils.WPrefix][this.id];
	};

	HtmlfileReceiver.prototype._close = function(reason) {
	  debug('_close', reason);
	  this.emit('close', null, reason);
	  this.removeAllListeners();
	};

	HtmlfileReceiver.htmlfileEnabled = false;

	// obfuscate to avoid firewalls
	var axo = ['Active'].concat('Object').join('X');
	if (axo in global) {
	  try {
	    HtmlfileReceiver.htmlfileEnabled = !!new global[axo]('htmlfile');
	  } catch (x) {
	    // intentionally empty
	  }
	}

	HtmlfileReceiver.enabled = HtmlfileReceiver.htmlfileEnabled || iframeUtils.iframeEnabled;

	module.exports = HtmlfileReceiver;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(14), (function() { return this; }())))

/***/ },
/* 54 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var inherits = __webpack_require__(26)
	  , AjaxBasedTransport = __webpack_require__(31)
	  , XhrReceiver = __webpack_require__(35)
	  , XHRCorsObject = __webpack_require__(36)
	  , XHRLocalObject = __webpack_require__(38)
	  ;

	function XhrPollingTransport(transUrl) {
	  if (!XHRLocalObject.enabled && !XHRCorsObject.enabled) {
	    throw new Error('Transport created when disabled');
	  }
	  AjaxBasedTransport.call(this, transUrl, '/xhr', XhrReceiver, XHRCorsObject);
	}

	inherits(XhrPollingTransport, AjaxBasedTransport);

	XhrPollingTransport.enabled = function(info) {
	  if (info.nullOrigin) {
	    return false;
	  }

	  if (XHRLocalObject.enabled && info.sameOrigin) {
	    return true;
	  }
	  return XHRCorsObject.enabled;
	};

	XhrPollingTransport.transportName = 'xhr-polling';
	XhrPollingTransport.roundTrips = 2; // preflight, ajax

	module.exports = XhrPollingTransport;


/***/ },
/* 55 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var inherits = __webpack_require__(26)
	  , AjaxBasedTransport = __webpack_require__(31)
	  , XdrStreamingTransport = __webpack_require__(40)
	  , XhrReceiver = __webpack_require__(35)
	  , XDRObject = __webpack_require__(41)
	  ;

	function XdrPollingTransport(transUrl) {
	  if (!XDRObject.enabled) {
	    throw new Error('Transport created when disabled');
	  }
	  AjaxBasedTransport.call(this, transUrl, '/xhr', XhrReceiver, XDRObject);
	}

	inherits(XdrPollingTransport, AjaxBasedTransport);

	XdrPollingTransport.enabled = XdrStreamingTransport.enabled;
	XdrPollingTransport.transportName = 'xdr-polling';
	XdrPollingTransport.roundTrips = 2; // preflight, ajax

	module.exports = XdrPollingTransport;


/***/ },
/* 56 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {'use strict';

	// The simplest and most robust transport, using the well-know cross
	// domain hack - JSONP. This transport is quite inefficient - one
	// message could use up to one http request. But at least it works almost
	// everywhere.
	// Known limitations:
	//   o you will get a spinning cursor
	//   o for Konqueror a dumb timer is needed to detect errors

	var inherits = __webpack_require__(26)
	  , SenderReceiver = __webpack_require__(32)
	  , JsonpReceiver = __webpack_require__(57)
	  , jsonpSender = __webpack_require__(58)
	  ;

	function JsonPTransport(transUrl) {
	  if (!JsonPTransport.enabled()) {
	    throw new Error('Transport created when disabled');
	  }
	  SenderReceiver.call(this, transUrl, '/jsonp', jsonpSender, JsonpReceiver);
	}

	inherits(JsonPTransport, SenderReceiver);

	JsonPTransport.enabled = function() {
	  return !!global.document;
	};

	JsonPTransport.transportName = 'jsonp-polling';
	JsonPTransport.roundTrips = 1;
	JsonPTransport.needBody = true;

	module.exports = JsonPTransport;

	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 57 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process, global) {'use strict';

	var utils = __webpack_require__(50)
	  , random = __webpack_require__(16)
	  , browser = __webpack_require__(39)
	  , urlUtils = __webpack_require__(18)
	  , inherits = __webpack_require__(26)
	  , EventEmitter = __webpack_require__(27).EventEmitter
	  ;

	var debug = function() {};
	if (process.env.NODE_ENV !== 'production') {
	  debug = __webpack_require__(23)('sockjs-client:receiver:jsonp');
	}

	function JsonpReceiver(url) {
	  debug(url);
	  var self = this;
	  EventEmitter.call(this);

	  utils.polluteGlobalNamespace();

	  this.id = 'a' + random.string(6);
	  var urlWithId = urlUtils.addQuery(url, 'c=' + encodeURIComponent(utils.WPrefix + '.' + this.id));

	  global[utils.WPrefix][this.id] = this._callback.bind(this);
	  this._createScript(urlWithId);

	  // Fallback mostly for Konqueror - stupid timer, 35 seconds shall be plenty.
	  this.timeoutId = setTimeout(function() {
	    debug('timeout');
	    self._abort(new Error('JSONP script loaded abnormally (timeout)'));
	  }, JsonpReceiver.timeout);
	}

	inherits(JsonpReceiver, EventEmitter);

	JsonpReceiver.prototype.abort = function() {
	  debug('abort');
	  if (global[utils.WPrefix][this.id]) {
	    var err = new Error('JSONP user aborted read');
	    err.code = 1000;
	    this._abort(err);
	  }
	};

	JsonpReceiver.timeout = 35000;
	JsonpReceiver.scriptErrorTimeout = 1000;

	JsonpReceiver.prototype._callback = function(data) {
	  debug('_callback', data);
	  this._cleanup();

	  if (this.aborting) {
	    return;
	  }

	  if (data) {
	    debug('message', data);
	    this.emit('message', data);
	  }
	  this.emit('close', null, 'network');
	  this.removeAllListeners();
	};

	JsonpReceiver.prototype._abort = function(err) {
	  debug('_abort', err);
	  this._cleanup();
	  this.aborting = true;
	  this.emit('close', err.code, err.message);
	  this.removeAllListeners();
	};

	JsonpReceiver.prototype._cleanup = function() {
	  debug('_cleanup');
	  clearTimeout(this.timeoutId);
	  if (this.script2) {
	    this.script2.parentNode.removeChild(this.script2);
	    this.script2 = null;
	  }
	  if (this.script) {
	    var script = this.script;
	    // Unfortunately, you can't really abort script loading of
	    // the script.
	    script.parentNode.removeChild(script);
	    script.onreadystatechange = script.onerror =
	        script.onload = script.onclick = null;
	    this.script = null;
	  }
	  delete global[utils.WPrefix][this.id];
	};

	JsonpReceiver.prototype._scriptError = function() {
	  debug('_scriptError');
	  var self = this;
	  if (this.errorTimer) {
	    return;
	  }

	  this.errorTimer = setTimeout(function() {
	    if (!self.loadedOkay) {
	      self._abort(new Error('JSONP script loaded abnormally (onerror)'));
	    }
	  }, JsonpReceiver.scriptErrorTimeout);
	};

	JsonpReceiver.prototype._createScript = function(url) {
	  debug('_createScript', url);
	  var self = this;
	  var script = this.script = global.document.createElement('script');
	  var script2;  // Opera synchronous load trick.

	  script.id = 'a' + random.string(8);
	  script.src = url;
	  script.type = 'text/javascript';
	  script.charset = 'UTF-8';
	  script.onerror = this._scriptError.bind(this);
	  script.onload = function() {
	    debug('onload');
	    self._abort(new Error('JSONP script loaded abnormally (onload)'));
	  };

	  // IE9 fires 'error' event after onreadystatechange or before, in random order.
	  // Use loadedOkay to determine if actually errored
	  script.onreadystatechange = function() {
	    debug('onreadystatechange', script.readyState);
	    if (/loaded|closed/.test(script.readyState)) {
	      if (script && script.htmlFor && script.onclick) {
	        self.loadedOkay = true;
	        try {
	          // In IE, actually execute the script.
	          script.onclick();
	        } catch (x) {
	          // intentionally empty
	        }
	      }
	      if (script) {
	        self._abort(new Error('JSONP script loaded abnormally (onreadystatechange)'));
	      }
	    }
	  };
	  // IE: event/htmlFor/onclick trick.
	  // One can't rely on proper order for onreadystatechange. In order to
	  // make sure, set a 'htmlFor' and 'event' properties, so that
	  // script code will be installed as 'onclick' handler for the
	  // script object. Later, onreadystatechange, manually execute this
	  // code. FF and Chrome doesn't work with 'event' and 'htmlFor'
	  // set. For reference see:
	  //   http://jaubourg.net/2010/07/loading-script-as-onclick-handler-of.html
	  // Also, read on that about script ordering:
	  //   http://wiki.whatwg.org/wiki/Dynamic_Script_Execution_Order
	  if (typeof script.async === 'undefined' && global.document.attachEvent) {
	    // According to mozilla docs, in recent browsers script.async defaults
	    // to 'true', so we may use it to detect a good browser:
	    // https://developer.mozilla.org/en/HTML/Element/script
	    if (!browser.isOpera()) {
	      // Naively assume we're in IE
	      try {
	        script.htmlFor = script.id;
	        script.event = 'onclick';
	      } catch (x) {
	        // intentionally empty
	      }
	      script.async = true;
	    } else {
	      // Opera, second sync script hack
	      script2 = this.script2 = global.document.createElement('script');
	      script2.text = "try{var a = document.getElementById('" + script.id + "'); if(a)a.onerror();}catch(x){};";
	      script.async = script2.async = false;
	    }
	  }
	  if (typeof script.async !== 'undefined') {
	    script.async = true;
	  }

	  var head = global.document.getElementsByTagName('head')[0];
	  head.insertBefore(script, head.firstChild);
	  if (script2) {
	    head.insertBefore(script2, head.firstChild);
	  }
	};

	module.exports = JsonpReceiver;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(14), (function() { return this; }())))

/***/ },
/* 58 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process, global) {'use strict';

	var random = __webpack_require__(16)
	  , urlUtils = __webpack_require__(18)
	  ;

	var debug = function() {};
	if (process.env.NODE_ENV !== 'production') {
	  debug = __webpack_require__(23)('sockjs-client:sender:jsonp');
	}

	var form, area;

	function createIframe(id) {
	  debug('createIframe', id);
	  try {
	    // ie6 dynamic iframes with target="" support (thanks Chris Lambacher)
	    return global.document.createElement('<iframe name="' + id + '">');
	  } catch (x) {
	    var iframe = global.document.createElement('iframe');
	    iframe.name = id;
	    return iframe;
	  }
	}

	function createForm() {
	  debug('createForm');
	  form = global.document.createElement('form');
	  form.style.display = 'none';
	  form.style.position = 'absolute';
	  form.method = 'POST';
	  form.enctype = 'application/x-www-form-urlencoded';
	  form.acceptCharset = 'UTF-8';

	  area = global.document.createElement('textarea');
	  area.name = 'd';
	  form.appendChild(area);

	  global.document.body.appendChild(form);
	}

	module.exports = function(url, payload, callback) {
	  debug(url, payload);
	  if (!form) {
	    createForm();
	  }
	  var id = 'a' + random.string(8);
	  form.target = id;
	  form.action = urlUtils.addQuery(urlUtils.addPath(url, '/jsonp_send'), 'i=' + id);

	  var iframe = createIframe(id);
	  iframe.id = id;
	  iframe.style.display = 'none';
	  form.appendChild(iframe);

	  try {
	    area.value = payload;
	  } catch (e) {
	    // seriously broken browsers get here
	  }
	  form.submit();

	  var completed = function(err) {
	    debug('completed', id, err);
	    if (!iframe.onerror) {
	      return;
	    }
	    iframe.onreadystatechange = iframe.onerror = iframe.onload = null;
	    // Opera mini doesn't like if we GC iframe
	    // immediately, thus this timeout.
	    setTimeout(function() {
	      debug('cleaning up', id);
	      iframe.parentNode.removeChild(iframe);
	      iframe = null;
	    }, 500);
	    area.value = '';
	    // It is not possible to detect if the iframe succeeded or
	    // failed to submit our form.
	    callback(err);
	  };
	  iframe.onerror = function() {
	    debug('onerror', id);
	    completed();
	  };
	  iframe.onload = function() {
	    debug('onload', id);
	    completed();
	  };
	  iframe.onreadystatechange = function(e) {
	    debug('onreadystatechange', id, iframe.readyState, e);
	    if (iframe.readyState === 'complete') {
	      completed();
	    }
	  };
	  return function() {
	    debug('aborted', id);
	    completed(new Error('Aborted'));
	  };
	};

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(14), (function() { return this; }())))

/***/ },
/* 59 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process, global) {'use strict';

	__webpack_require__(60);

	var URL = __webpack_require__(19)
	  , inherits = __webpack_require__(26)
	  , JSON3 = __webpack_require__(47)
	  , random = __webpack_require__(16)
	  , escape = __webpack_require__(61)
	  , urlUtils = __webpack_require__(18)
	  , eventUtils = __webpack_require__(15)
	  , transport = __webpack_require__(62)
	  , objectUtils = __webpack_require__(51)
	  , browser = __webpack_require__(39)
	  , log = __webpack_require__(63)
	  , Event = __webpack_require__(64)
	  , EventTarget = __webpack_require__(28)
	  , loc = __webpack_require__(65)
	  , CloseEvent = __webpack_require__(66)
	  , TransportMessageEvent = __webpack_require__(67)
	  , InfoReceiver = __webpack_require__(68)
	  ;

	var debug = function() {};
	if (process.env.NODE_ENV !== 'production') {
	  debug = __webpack_require__(23)('sockjs-client:main');
	}

	var transports;

	// follow constructor steps defined at http://dev.w3.org/html5/websockets/#the-websocket-interface
	function SockJS(url, protocols, options) {
	  if (!(this instanceof SockJS)) {
	    return new SockJS(url, protocols, options);
	  }
	  if (arguments.length < 1) {
	    throw new TypeError("Failed to construct 'SockJS: 1 argument required, but only 0 present");
	  }
	  EventTarget.call(this);

	  this.readyState = SockJS.CONNECTING;
	  this.extensions = '';
	  this.protocol = '';

	  // non-standard extension
	  options = options || {};
	  if (options.protocols_whitelist) {
	    log.warn("'protocols_whitelist' is DEPRECATED. Use 'transports' instead.");
	  }
	  this._transportsWhitelist = options.transports;
	  this._transportOptions = options.transportOptions || {};

	  var sessionId = options.sessionId || 8;
	  if (typeof sessionId === 'function') {
	    this._generateSessionId = sessionId;
	  } else if (typeof sessionId === 'number') {
	    this._generateSessionId = function() {
	      return random.string(sessionId);
	    };
	  } else {
	    throw new TypeError('If sessionId is used in the options, it needs to be a number or a function.');
	  }

	  this._server = options.server || random.numberString(1000);

	  // Step 1 of WS spec - parse and validate the url. Issue #8
	  var parsedUrl = new URL(url);
	  if (!parsedUrl.host || !parsedUrl.protocol) {
	    throw new SyntaxError("The URL '" + url + "' is invalid");
	  } else if (parsedUrl.hash) {
	    throw new SyntaxError('The URL must not contain a fragment');
	  } else if (parsedUrl.protocol !== 'http:' && parsedUrl.protocol !== 'https:') {
	    throw new SyntaxError("The URL's scheme must be either 'http:' or 'https:'. '" + parsedUrl.protocol + "' is not allowed.");
	  }

	  var secure = parsedUrl.protocol === 'https:';
	  // Step 2 - don't allow secure origin with an insecure protocol
	  if (loc.protocol === 'https' && !secure) {
	    throw new Error('SecurityError: An insecure SockJS connection may not be initiated from a page loaded over HTTPS');
	  }

	  // Step 3 - check port access - no need here
	  // Step 4 - parse protocols argument
	  if (!protocols) {
	    protocols = [];
	  } else if (!Array.isArray(protocols)) {
	    protocols = [protocols];
	  }

	  // Step 5 - check protocols argument
	  var sortedProtocols = protocols.sort();
	  sortedProtocols.forEach(function(proto, i) {
	    if (!proto) {
	      throw new SyntaxError("The protocols entry '" + proto + "' is invalid.");
	    }
	    if (i < (sortedProtocols.length - 1) && proto === sortedProtocols[i + 1]) {
	      throw new SyntaxError("The protocols entry '" + proto + "' is duplicated.");
	    }
	  });

	  // Step 6 - convert origin
	  var o = urlUtils.getOrigin(loc.href);
	  this._origin = o ? o.toLowerCase() : null;

	  // remove the trailing slash
	  parsedUrl.set('pathname', parsedUrl.pathname.replace(/\/+$/, ''));

	  // store the sanitized url
	  this.url = parsedUrl.href;
	  debug('using url', this.url);

	  // Step 7 - start connection in background
	  // obtain server info
	  // http://sockjs.github.io/sockjs-protocol/sockjs-protocol-0.3.3.html#section-26
	  this._urlInfo = {
	    nullOrigin: !browser.hasDomain()
	  , sameOrigin: urlUtils.isOriginEqual(this.url, loc.href)
	  , sameScheme: urlUtils.isSchemeEqual(this.url, loc.href)
	  };

	  this._ir = new InfoReceiver(this.url, this._urlInfo);
	  this._ir.once('finish', this._receiveInfo.bind(this));
	}

	inherits(SockJS, EventTarget);

	function userSetCode(code) {
	  return code === 1000 || (code >= 3000 && code <= 4999);
	}

	SockJS.prototype.close = function(code, reason) {
	  // Step 1
	  if (code && !userSetCode(code)) {
	    throw new Error('InvalidAccessError: Invalid code');
	  }
	  // Step 2.4 states the max is 123 bytes, but we are just checking length
	  if (reason && reason.length > 123) {
	    throw new SyntaxError('reason argument has an invalid length');
	  }

	  // Step 3.1
	  if (this.readyState === SockJS.CLOSING || this.readyState === SockJS.CLOSED) {
	    return;
	  }

	  // TODO look at docs to determine how to set this
	  var wasClean = true;
	  this._close(code || 1000, reason || 'Normal closure', wasClean);
	};

	SockJS.prototype.send = function(data) {
	  // #13 - convert anything non-string to string
	  // TODO this currently turns objects into [object Object]
	  if (typeof data !== 'string') {
	    data = '' + data;
	  }
	  if (this.readyState === SockJS.CONNECTING) {
	    throw new Error('InvalidStateError: The connection has not been established yet');
	  }
	  if (this.readyState !== SockJS.OPEN) {
	    return;
	  }
	  this._transport.send(escape.quote(data));
	};

	SockJS.version = __webpack_require__(49);

	SockJS.CONNECTING = 0;
	SockJS.OPEN = 1;
	SockJS.CLOSING = 2;
	SockJS.CLOSED = 3;

	SockJS.prototype._receiveInfo = function(info, rtt) {
	  debug('_receiveInfo', rtt);
	  this._ir = null;
	  if (!info) {
	    this._close(1002, 'Cannot connect to server');
	    return;
	  }

	  // establish a round-trip timeout (RTO) based on the
	  // round-trip time (RTT)
	  this._rto = this.countRTO(rtt);
	  // allow server to override url used for the actual transport
	  this._transUrl = info.base_url ? info.base_url : this.url;
	  info = objectUtils.extend(info, this._urlInfo);
	  debug('info', info);
	  // determine list of desired and supported transports
	  var enabledTransports = transports.filterToEnabled(this._transportsWhitelist, info);
	  this._transports = enabledTransports.main;
	  debug(this._transports.length + ' enabled transports');

	  this._connect();
	};

	SockJS.prototype._connect = function() {
	  for (var Transport = this._transports.shift(); Transport; Transport = this._transports.shift()) {
	    debug('attempt', Transport.transportName);
	    if (Transport.needBody) {
	      if (!global.document.body ||
	          (typeof global.document.readyState !== 'undefined' &&
	            global.document.readyState !== 'complete' &&
	            global.document.readyState !== 'interactive')) {
	        debug('waiting for body');
	        this._transports.unshift(Transport);
	        eventUtils.attachEvent('load', this._connect.bind(this));
	        return;
	      }
	    }

	    // calculate timeout based on RTO and round trips. Default to 5s
	    var timeoutMs = (this._rto * Transport.roundTrips) || 5000;
	    this._transportTimeoutId = setTimeout(this._transportTimeout.bind(this), timeoutMs);
	    debug('using timeout', timeoutMs);

	    var transportUrl = urlUtils.addPath(this._transUrl, '/' + this._server + '/' + this._generateSessionId());
	    var options = this._transportOptions[Transport.transportName];
	    debug('transport url', transportUrl);
	    var transportObj = new Transport(transportUrl, this._transUrl, options);
	    transportObj.on('message', this._transportMessage.bind(this));
	    transportObj.once('close', this._transportClose.bind(this));
	    transportObj.transportName = Transport.transportName;
	    this._transport = transportObj;

	    return;
	  }
	  this._close(2000, 'All transports failed', false);
	};

	SockJS.prototype._transportTimeout = function() {
	  debug('_transportTimeout');
	  if (this.readyState === SockJS.CONNECTING) {
	    this._transportClose(2007, 'Transport timed out');
	  }
	};

	SockJS.prototype._transportMessage = function(msg) {
	  debug('_transportMessage', msg);
	  var self = this
	    , type = msg.slice(0, 1)
	    , content = msg.slice(1)
	    , payload
	    ;

	  // first check for messages that don't need a payload
	  switch (type) {
	    case 'o':
	      this._open();
	      return;
	    case 'h':
	      this.dispatchEvent(new Event('heartbeat'));
	      debug('heartbeat', this.transport);
	      return;
	  }

	  if (content) {
	    try {
	      payload = JSON3.parse(content);
	    } catch (e) {
	      debug('bad json', content);
	    }
	  }

	  if (typeof payload === 'undefined') {
	    debug('empty payload', content);
	    return;
	  }

	  switch (type) {
	    case 'a':
	      if (Array.isArray(payload)) {
	        payload.forEach(function(p) {
	          debug('message', self.transport, p);
	          self.dispatchEvent(new TransportMessageEvent(p));
	        });
	      }
	      break;
	    case 'm':
	      debug('message', this.transport, payload);
	      this.dispatchEvent(new TransportMessageEvent(payload));
	      break;
	    case 'c':
	      if (Array.isArray(payload) && payload.length === 2) {
	        this._close(payload[0], payload[1], true);
	      }
	      break;
	  }
	};

	SockJS.prototype._transportClose = function(code, reason) {
	  debug('_transportClose', this.transport, code, reason);
	  if (this._transport) {
	    this._transport.removeAllListeners();
	    this._transport = null;
	    this.transport = null;
	  }

	  if (!userSetCode(code) && code !== 2000 && this.readyState === SockJS.CONNECTING) {
	    this._connect();
	    return;
	  }

	  this._close(code, reason);
	};

	SockJS.prototype._open = function() {
	  debug('_open', this._transport.transportName, this.readyState);
	  if (this.readyState === SockJS.CONNECTING) {
	    if (this._transportTimeoutId) {
	      clearTimeout(this._transportTimeoutId);
	      this._transportTimeoutId = null;
	    }
	    this.readyState = SockJS.OPEN;
	    this.transport = this._transport.transportName;
	    this.dispatchEvent(new Event('open'));
	    debug('connected', this.transport);
	  } else {
	    // The server might have been restarted, and lost track of our
	    // connection.
	    this._close(1006, 'Server lost session');
	  }
	};

	SockJS.prototype._close = function(code, reason, wasClean) {
	  debug('_close', this.transport, code, reason, wasClean, this.readyState);
	  var forceFail = false;

	  if (this._ir) {
	    forceFail = true;
	    this._ir.close();
	    this._ir = null;
	  }
	  if (this._transport) {
	    this._transport.close();
	    this._transport = null;
	    this.transport = null;
	  }

	  if (this.readyState === SockJS.CLOSED) {
	    throw new Error('InvalidStateError: SockJS has already been closed');
	  }

	  this.readyState = SockJS.CLOSING;
	  setTimeout(function() {
	    this.readyState = SockJS.CLOSED;

	    if (forceFail) {
	      this.dispatchEvent(new Event('error'));
	    }

	    var e = new CloseEvent('close');
	    e.wasClean = wasClean || false;
	    e.code = code || 1000;
	    e.reason = reason;

	    this.dispatchEvent(e);
	    this.onmessage = this.onclose = this.onerror = null;
	    debug('disconnected');
	  }.bind(this), 0);
	};

	// See: http://www.erg.abdn.ac.uk/~gerrit/dccp/notes/ccid2/rto_estimator/
	// and RFC 2988.
	SockJS.prototype.countRTO = function(rtt) {
	  // In a local environment, when using IE8/9 and the `jsonp-polling`
	  // transport the time needed to establish a connection (the time that pass
	  // from the opening of the transport to the call of `_dispatchOpen`) is
	  // around 200msec (the lower bound used in the article above) and this
	  // causes spurious timeouts. For this reason we calculate a value slightly
	  // larger than that used in the article.
	  if (rtt > 100) {
	    return 4 * rtt; // rto > 400msec
	  }
	  return 300 + rtt; // 300msec < rto <= 400msec
	};

	module.exports = function(availableTransports) {
	  transports = transport(availableTransports);
	  __webpack_require__(73)(SockJS, availableTransports);
	  return SockJS;
	};

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(14), (function() { return this; }())))

/***/ },
/* 60 */
/***/ function(module, exports) {

	/* eslint-disable */
	/* jscs: disable */
	'use strict';

	// pulled specific shims from https://github.com/es-shims/es5-shim

	var ArrayPrototype = Array.prototype;
	var ObjectPrototype = Object.prototype;
	var FunctionPrototype = Function.prototype;
	var StringPrototype = String.prototype;
	var array_slice = ArrayPrototype.slice;

	var _toString = ObjectPrototype.toString;
	var isFunction = function (val) {
	    return ObjectPrototype.toString.call(val) === '[object Function]';
	};
	var isArray = function isArray(obj) {
	    return _toString.call(obj) === '[object Array]';
	};
	var isString = function isString(obj) {
	    return _toString.call(obj) === '[object String]';
	};

	var supportsDescriptors = Object.defineProperty && (function () {
	    try {
	        Object.defineProperty({}, 'x', {});
	        return true;
	    } catch (e) { /* this is ES3 */
	        return false;
	    }
	}());

	// Define configurable, writable and non-enumerable props
	// if they don't exist.
	var defineProperty;
	if (supportsDescriptors) {
	    defineProperty = function (object, name, method, forceAssign) {
	        if (!forceAssign && (name in object)) { return; }
	        Object.defineProperty(object, name, {
	            configurable: true,
	            enumerable: false,
	            writable: true,
	            value: method
	        });
	    };
	} else {
	    defineProperty = function (object, name, method, forceAssign) {
	        if (!forceAssign && (name in object)) { return; }
	        object[name] = method;
	    };
	}
	var defineProperties = function (object, map, forceAssign) {
	    for (var name in map) {
	        if (ObjectPrototype.hasOwnProperty.call(map, name)) {
	          defineProperty(object, name, map[name], forceAssign);
	        }
	    }
	};

	var toObject = function (o) {
	    if (o == null) { // this matches both null and undefined
	        throw new TypeError("can't convert " + o + ' to object');
	    }
	    return Object(o);
	};

	//
	// Util
	// ======
	//

	// ES5 9.4
	// http://es5.github.com/#x9.4
	// http://jsperf.com/to-integer

	function toInteger(num) {
	    var n = +num;
	    if (n !== n) { // isNaN
	        n = 0;
	    } else if (n !== 0 && n !== (1 / 0) && n !== -(1 / 0)) {
	        n = (n > 0 || -1) * Math.floor(Math.abs(n));
	    }
	    return n;
	}

	function ToUint32(x) {
	    return x >>> 0;
	}

	//
	// Function
	// ========
	//

	// ES-5 15.3.4.5
	// http://es5.github.com/#x15.3.4.5

	function Empty() {}

	defineProperties(FunctionPrototype, {
	    bind: function bind(that) { // .length is 1
	        // 1. Let Target be the this value.
	        var target = this;
	        // 2. If IsCallable(Target) is false, throw a TypeError exception.
	        if (!isFunction(target)) {
	            throw new TypeError('Function.prototype.bind called on incompatible ' + target);
	        }
	        // 3. Let A be a new (possibly empty) internal list of all of the
	        //   argument values provided after thisArg (arg1, arg2 etc), in order.
	        // XXX slicedArgs will stand in for "A" if used
	        var args = array_slice.call(arguments, 1); // for normal call
	        // 4. Let F be a new native ECMAScript object.
	        // 11. Set the [[Prototype]] internal property of F to the standard
	        //   built-in Function prototype object as specified in 15.3.3.1.
	        // 12. Set the [[Call]] internal property of F as described in
	        //   15.3.4.5.1.
	        // 13. Set the [[Construct]] internal property of F as described in
	        //   15.3.4.5.2.
	        // 14. Set the [[HasInstance]] internal property of F as described in
	        //   15.3.4.5.3.
	        var binder = function () {

	            if (this instanceof bound) {
	                // 15.3.4.5.2 [[Construct]]
	                // When the [[Construct]] internal method of a function object,
	                // F that was created using the bind function is called with a
	                // list of arguments ExtraArgs, the following steps are taken:
	                // 1. Let target be the value of F's [[TargetFunction]]
	                //   internal property.
	                // 2. If target has no [[Construct]] internal method, a
	                //   TypeError exception is thrown.
	                // 3. Let boundArgs be the value of F's [[BoundArgs]] internal
	                //   property.
	                // 4. Let args be a new list containing the same values as the
	                //   list boundArgs in the same order followed by the same
	                //   values as the list ExtraArgs in the same order.
	                // 5. Return the result of calling the [[Construct]] internal
	                //   method of target providing args as the arguments.

	                var result = target.apply(
	                    this,
	                    args.concat(array_slice.call(arguments))
	                );
	                if (Object(result) === result) {
	                    return result;
	                }
	                return this;

	            } else {
	                // 15.3.4.5.1 [[Call]]
	                // When the [[Call]] internal method of a function object, F,
	                // which was created using the bind function is called with a
	                // this value and a list of arguments ExtraArgs, the following
	                // steps are taken:
	                // 1. Let boundArgs be the value of F's [[BoundArgs]] internal
	                //   property.
	                // 2. Let boundThis be the value of F's [[BoundThis]] internal
	                //   property.
	                // 3. Let target be the value of F's [[TargetFunction]] internal
	                //   property.
	                // 4. Let args be a new list containing the same values as the
	                //   list boundArgs in the same order followed by the same
	                //   values as the list ExtraArgs in the same order.
	                // 5. Return the result of calling the [[Call]] internal method
	                //   of target providing boundThis as the this value and
	                //   providing args as the arguments.

	                // equiv: target.call(this, ...boundArgs, ...args)
	                return target.apply(
	                    that,
	                    args.concat(array_slice.call(arguments))
	                );

	            }

	        };

	        // 15. If the [[Class]] internal property of Target is "Function", then
	        //     a. Let L be the length property of Target minus the length of A.
	        //     b. Set the length own property of F to either 0 or L, whichever is
	        //       larger.
	        // 16. Else set the length own property of F to 0.

	        var boundLength = Math.max(0, target.length - args.length);

	        // 17. Set the attributes of the length own property of F to the values
	        //   specified in 15.3.5.1.
	        var boundArgs = [];
	        for (var i = 0; i < boundLength; i++) {
	            boundArgs.push('$' + i);
	        }

	        // XXX Build a dynamic function with desired amount of arguments is the only
	        // way to set the length property of a function.
	        // In environments where Content Security Policies enabled (Chrome extensions,
	        // for ex.) all use of eval or Function costructor throws an exception.
	        // However in all of these environments Function.prototype.bind exists
	        // and so this code will never be executed.
	        var bound = Function('binder', 'return function (' + boundArgs.join(',') + '){ return binder.apply(this, arguments); }')(binder);

	        if (target.prototype) {
	            Empty.prototype = target.prototype;
	            bound.prototype = new Empty();
	            // Clean up dangling references.
	            Empty.prototype = null;
	        }

	        // TODO
	        // 18. Set the [[Extensible]] internal property of F to true.

	        // TODO
	        // 19. Let thrower be the [[ThrowTypeError]] function Object (13.2.3).
	        // 20. Call the [[DefineOwnProperty]] internal method of F with
	        //   arguments "caller", PropertyDescriptor {[[Get]]: thrower, [[Set]]:
	        //   thrower, [[Enumerable]]: false, [[Configurable]]: false}, and
	        //   false.
	        // 21. Call the [[DefineOwnProperty]] internal method of F with
	        //   arguments "arguments", PropertyDescriptor {[[Get]]: thrower,
	        //   [[Set]]: thrower, [[Enumerable]]: false, [[Configurable]]: false},
	        //   and false.

	        // TODO
	        // NOTE Function objects created using Function.prototype.bind do not
	        // have a prototype property or the [[Code]], [[FormalParameters]], and
	        // [[Scope]] internal properties.
	        // XXX can't delete prototype in pure-js.

	        // 22. Return F.
	        return bound;
	    }
	});

	//
	// Array
	// =====
	//

	// ES5 15.4.3.2
	// http://es5.github.com/#x15.4.3.2
	// https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/isArray
	defineProperties(Array, { isArray: isArray });


	var boxedString = Object('a');
	var splitString = boxedString[0] !== 'a' || !(0 in boxedString);

	var properlyBoxesContext = function properlyBoxed(method) {
	    // Check node 0.6.21 bug where third parameter is not boxed
	    var properlyBoxesNonStrict = true;
	    var properlyBoxesStrict = true;
	    if (method) {
	        method.call('foo', function (_, __, context) {
	            if (typeof context !== 'object') { properlyBoxesNonStrict = false; }
	        });

	        method.call([1], function () {
	            'use strict';
	            properlyBoxesStrict = typeof this === 'string';
	        }, 'x');
	    }
	    return !!method && properlyBoxesNonStrict && properlyBoxesStrict;
	};

	defineProperties(ArrayPrototype, {
	    forEach: function forEach(fun /*, thisp*/) {
	        var object = toObject(this),
	            self = splitString && isString(this) ? this.split('') : object,
	            thisp = arguments[1],
	            i = -1,
	            length = self.length >>> 0;

	        // If no callback function or if callback is not a callable function
	        if (!isFunction(fun)) {
	            throw new TypeError(); // TODO message
	        }

	        while (++i < length) {
	            if (i in self) {
	                // Invoke the callback function with call, passing arguments:
	                // context, property value, property key, thisArg object
	                // context
	                fun.call(thisp, self[i], i, object);
	            }
	        }
	    }
	}, !properlyBoxesContext(ArrayPrototype.forEach));

	// ES5 15.4.4.14
	// http://es5.github.com/#x15.4.4.14
	// https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/indexOf
	var hasFirefox2IndexOfBug = Array.prototype.indexOf && [0, 1].indexOf(1, 2) !== -1;
	defineProperties(ArrayPrototype, {
	    indexOf: function indexOf(sought /*, fromIndex */ ) {
	        var self = splitString && isString(this) ? this.split('') : toObject(this),
	            length = self.length >>> 0;

	        if (!length) {
	            return -1;
	        }

	        var i = 0;
	        if (arguments.length > 1) {
	            i = toInteger(arguments[1]);
	        }

	        // handle negative indices
	        i = i >= 0 ? i : Math.max(0, length + i);
	        for (; i < length; i++) {
	            if (i in self && self[i] === sought) {
	                return i;
	            }
	        }
	        return -1;
	    }
	}, hasFirefox2IndexOfBug);

	//
	// String
	// ======
	//

	// ES5 15.5.4.14
	// http://es5.github.com/#x15.5.4.14

	// [bugfix, IE lt 9, firefox 4, Konqueror, Opera, obscure browsers]
	// Many browsers do not split properly with regular expressions or they
	// do not perform the split correctly under obscure conditions.
	// See http://blog.stevenlevithan.com/archives/cross-browser-split
	// I've tested in many browsers and this seems to cover the deviant ones:
	//    'ab'.split(/(?:ab)*/) should be ["", ""], not [""]
	//    '.'.split(/(.?)(.?)/) should be ["", ".", "", ""], not ["", ""]
	//    'tesst'.split(/(s)*/) should be ["t", undefined, "e", "s", "t"], not
	//       [undefined, "t", undefined, "e", ...]
	//    ''.split(/.?/) should be [], not [""]
	//    '.'.split(/()()/) should be ["."], not ["", "", "."]

	var string_split = StringPrototype.split;
	if (
	    'ab'.split(/(?:ab)*/).length !== 2 ||
	    '.'.split(/(.?)(.?)/).length !== 4 ||
	    'tesst'.split(/(s)*/)[1] === 't' ||
	    'test'.split(/(?:)/, -1).length !== 4 ||
	    ''.split(/.?/).length ||
	    '.'.split(/()()/).length > 1
	) {
	    (function () {
	        var compliantExecNpcg = /()??/.exec('')[1] === void 0; // NPCG: nonparticipating capturing group

	        StringPrototype.split = function (separator, limit) {
	            var string = this;
	            if (separator === void 0 && limit === 0) {
	                return [];
	            }

	            // If `separator` is not a regex, use native split
	            if (_toString.call(separator) !== '[object RegExp]') {
	                return string_split.call(this, separator, limit);
	            }

	            var output = [],
	                flags = (separator.ignoreCase ? 'i' : '') +
	                        (separator.multiline  ? 'm' : '') +
	                        (separator.extended   ? 'x' : '') + // Proposed for ES6
	                        (separator.sticky     ? 'y' : ''), // Firefox 3+
	                lastLastIndex = 0,
	                // Make `global` and avoid `lastIndex` issues by working with a copy
	                separator2, match, lastIndex, lastLength;
	            separator = new RegExp(separator.source, flags + 'g');
	            string += ''; // Type-convert
	            if (!compliantExecNpcg) {
	                // Doesn't need flags gy, but they don't hurt
	                separator2 = new RegExp('^' + separator.source + '$(?!\\s)', flags);
	            }
	            /* Values for `limit`, per the spec:
	             * If undefined: 4294967295 // Math.pow(2, 32) - 1
	             * If 0, Infinity, or NaN: 0
	             * If positive number: limit = Math.floor(limit); if (limit > 4294967295) limit -= 4294967296;
	             * If negative number: 4294967296 - Math.floor(Math.abs(limit))
	             * If other: Type-convert, then use the above rules
	             */
	            limit = limit === void 0 ?
	                -1 >>> 0 : // Math.pow(2, 32) - 1
	                ToUint32(limit);
	            while (match = separator.exec(string)) {
	                // `separator.lastIndex` is not reliable cross-browser
	                lastIndex = match.index + match[0].length;
	                if (lastIndex > lastLastIndex) {
	                    output.push(string.slice(lastLastIndex, match.index));
	                    // Fix browsers whose `exec` methods don't consistently return `undefined` for
	                    // nonparticipating capturing groups
	                    if (!compliantExecNpcg && match.length > 1) {
	                        match[0].replace(separator2, function () {
	                            for (var i = 1; i < arguments.length - 2; i++) {
	                                if (arguments[i] === void 0) {
	                                    match[i] = void 0;
	                                }
	                            }
	                        });
	                    }
	                    if (match.length > 1 && match.index < string.length) {
	                        ArrayPrototype.push.apply(output, match.slice(1));
	                    }
	                    lastLength = match[0].length;
	                    lastLastIndex = lastIndex;
	                    if (output.length >= limit) {
	                        break;
	                    }
	                }
	                if (separator.lastIndex === match.index) {
	                    separator.lastIndex++; // Avoid an infinite loop
	                }
	            }
	            if (lastLastIndex === string.length) {
	                if (lastLength || !separator.test('')) {
	                    output.push('');
	                }
	            } else {
	                output.push(string.slice(lastLastIndex));
	            }
	            return output.length > limit ? output.slice(0, limit) : output;
	        };
	    }());

	// [bugfix, chrome]
	// If separator is undefined, then the result array contains just one String,
	// which is the this value (converted to a String). If limit is not undefined,
	// then the output array is truncated so that it contains no more than limit
	// elements.
	// "0".split(undefined, 0) -> []
	} else if ('0'.split(void 0, 0).length) {
	    StringPrototype.split = function split(separator, limit) {
	        if (separator === void 0 && limit === 0) { return []; }
	        return string_split.call(this, separator, limit);
	    };
	}

	// ES5 15.5.4.20
	// whitespace from: http://es5.github.io/#x15.5.4.20
	var ws = '\x09\x0A\x0B\x0C\x0D\x20\xA0\u1680\u180E\u2000\u2001\u2002\u2003' +
	    '\u2004\u2005\u2006\u2007\u2008\u2009\u200A\u202F\u205F\u3000\u2028' +
	    '\u2029\uFEFF';
	var zeroWidth = '\u200b';
	var wsRegexChars = '[' + ws + ']';
	var trimBeginRegexp = new RegExp('^' + wsRegexChars + wsRegexChars + '*');
	var trimEndRegexp = new RegExp(wsRegexChars + wsRegexChars + '*$');
	var hasTrimWhitespaceBug = StringPrototype.trim && (ws.trim() || !zeroWidth.trim());
	defineProperties(StringPrototype, {
	    // http://blog.stevenlevithan.com/archives/faster-trim-javascript
	    // http://perfectionkills.com/whitespace-deviations/
	    trim: function trim() {
	        if (this === void 0 || this === null) {
	            throw new TypeError("can't convert " + this + ' to object');
	        }
	        return String(this).replace(trimBeginRegexp, '').replace(trimEndRegexp, '');
	    }
	}, hasTrimWhitespaceBug);

	// ECMA-262, 3rd B.2.3
	// Not an ECMAScript standard, although ECMAScript 3rd Edition has a
	// non-normative section suggesting uniform semantics and it should be
	// normalized across all browsers
	// [bugfix, IE lt 9] IE < 9 substr() with negative value not working in IE
	var string_substr = StringPrototype.substr;
	var hasNegativeSubstrBug = ''.substr && '0b'.substr(-1) !== 'b';
	defineProperties(StringPrototype, {
	    substr: function substr(start, length) {
	        return string_substr.call(
	            this,
	            start < 0 ? ((start = this.length + start) < 0 ? 0 : start) : start,
	            length
	        );
	    }
	}, hasNegativeSubstrBug);


/***/ },
/* 61 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var JSON3 = __webpack_require__(47);

	// Some extra characters that Chrome gets wrong, and substitutes with
	// something else on the wire.
	var extraEscapable = /[\x00-\x1f\ud800-\udfff\ufffe\uffff\u0300-\u0333\u033d-\u0346\u034a-\u034c\u0350-\u0352\u0357-\u0358\u035c-\u0362\u0374\u037e\u0387\u0591-\u05af\u05c4\u0610-\u0617\u0653-\u0654\u0657-\u065b\u065d-\u065e\u06df-\u06e2\u06eb-\u06ec\u0730\u0732-\u0733\u0735-\u0736\u073a\u073d\u073f-\u0741\u0743\u0745\u0747\u07eb-\u07f1\u0951\u0958-\u095f\u09dc-\u09dd\u09df\u0a33\u0a36\u0a59-\u0a5b\u0a5e\u0b5c-\u0b5d\u0e38-\u0e39\u0f43\u0f4d\u0f52\u0f57\u0f5c\u0f69\u0f72-\u0f76\u0f78\u0f80-\u0f83\u0f93\u0f9d\u0fa2\u0fa7\u0fac\u0fb9\u1939-\u193a\u1a17\u1b6b\u1cda-\u1cdb\u1dc0-\u1dcf\u1dfc\u1dfe\u1f71\u1f73\u1f75\u1f77\u1f79\u1f7b\u1f7d\u1fbb\u1fbe\u1fc9\u1fcb\u1fd3\u1fdb\u1fe3\u1feb\u1fee-\u1fef\u1ff9\u1ffb\u1ffd\u2000-\u2001\u20d0-\u20d1\u20d4-\u20d7\u20e7-\u20e9\u2126\u212a-\u212b\u2329-\u232a\u2adc\u302b-\u302c\uaab2-\uaab3\uf900-\ufa0d\ufa10\ufa12\ufa15-\ufa1e\ufa20\ufa22\ufa25-\ufa26\ufa2a-\ufa2d\ufa30-\ufa6d\ufa70-\ufad9\ufb1d\ufb1f\ufb2a-\ufb36\ufb38-\ufb3c\ufb3e\ufb40-\ufb41\ufb43-\ufb44\ufb46-\ufb4e\ufff0-\uffff]/g
	  , extraLookup;

	// This may be quite slow, so let's delay until user actually uses bad
	// characters.
	var unrollLookup = function(escapable) {
	  var i;
	  var unrolled = {};
	  var c = [];
	  for (i = 0; i < 65536; i++) {
	    c.push( String.fromCharCode(i) );
	  }
	  escapable.lastIndex = 0;
	  c.join('').replace(escapable, function(a) {
	    unrolled[ a ] = '\\u' + ('0000' + a.charCodeAt(0).toString(16)).slice(-4);
	    return '';
	  });
	  escapable.lastIndex = 0;
	  return unrolled;
	};

	// Quote string, also taking care of unicode characters that browsers
	// often break. Especially, take care of unicode surrogates:
	// http://en.wikipedia.org/wiki/Mapping_of_Unicode_characters#Surrogates
	module.exports = {
	  quote: function(string) {
	    var quoted = JSON3.stringify(string);

	    // In most cases this should be very fast and good enough.
	    extraEscapable.lastIndex = 0;
	    if (!extraEscapable.test(quoted)) {
	      return quoted;
	    }

	    if (!extraLookup) {
	      extraLookup = unrollLookup(extraEscapable);
	    }

	    return quoted.replace(extraEscapable, function(a) {
	      return extraLookup[a];
	    });
	  }
	};


/***/ },
/* 62 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	var debug = function() {};
	if (process.env.NODE_ENV !== 'production') {
	  debug = __webpack_require__(23)('sockjs-client:utils:transport');
	}

	module.exports = function(availableTransports) {
	  return {
	    filterToEnabled: function(transportsWhitelist, info) {
	      var transports = {
	        main: []
	      , facade: []
	      };
	      if (!transportsWhitelist) {
	        transportsWhitelist = [];
	      } else if (typeof transportsWhitelist === 'string') {
	        transportsWhitelist = [transportsWhitelist];
	      }

	      availableTransports.forEach(function(trans) {
	        if (!trans) {
	          return;
	        }

	        if (trans.transportName === 'websocket' && info.websocket === false) {
	          debug('disabled from server', 'websocket');
	          return;
	        }

	        if (transportsWhitelist.length &&
	            transportsWhitelist.indexOf(trans.transportName) === -1) {
	          debug('not in whitelist', trans.transportName);
	          return;
	        }

	        if (trans.enabled(info)) {
	          debug('enabled', trans.transportName);
	          transports.main.push(trans);
	          if (trans.facadeTransport) {
	            transports.facade.push(trans.facadeTransport);
	          }
	        } else {
	          debug('disabled', trans.transportName);
	        }
	      });
	      return transports;
	    }
	  };
	};

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(14)))

/***/ },
/* 63 */
/***/ function(module, exports) {

	/* WEBPACK VAR INJECTION */(function(global) {'use strict';

	var logObject = {};
	['log', 'debug', 'warn'].forEach(function (level) {
	  var levelExists;

	  try {
	    levelExists = global.console && global.console[level] && global.console[level].apply;
	  } catch(e) {
	    // do nothing
	  }

	  logObject[level] = levelExists ? function () {
	    return global.console[level].apply(global.console, arguments);
	  } : (level === 'log' ? function () {} : logObject.log);
	});

	module.exports = logObject;

	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 64 */
/***/ function(module, exports) {

	'use strict';

	function Event(eventType) {
	  this.type = eventType;
	}

	Event.prototype.initEvent = function(eventType, canBubble, cancelable) {
	  this.type = eventType;
	  this.bubbles = canBubble;
	  this.cancelable = cancelable;
	  this.timeStamp = +new Date();
	  return this;
	};

	Event.prototype.stopPropagation = function() {};
	Event.prototype.preventDefault = function() {};

	Event.CAPTURING_PHASE = 1;
	Event.AT_TARGET = 2;
	Event.BUBBLING_PHASE = 3;

	module.exports = Event;


/***/ },
/* 65 */
/***/ function(module, exports) {

	/* WEBPACK VAR INJECTION */(function(global) {'use strict';

	module.exports = global.location || {
	  origin: 'http://localhost:80'
	, protocol: 'http'
	, host: 'localhost'
	, port: 80
	, href: 'http://localhost/'
	, hash: ''
	};

	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 66 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var inherits = __webpack_require__(26)
	  , Event = __webpack_require__(64)
	  ;

	function CloseEvent() {
	  Event.call(this);
	  this.initEvent('close', false, false);
	  this.wasClean = false;
	  this.code = 0;
	  this.reason = '';
	}

	inherits(CloseEvent, Event);

	module.exports = CloseEvent;


/***/ },
/* 67 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var inherits = __webpack_require__(26)
	  , Event = __webpack_require__(64)
	  ;

	function TransportMessageEvent(data) {
	  Event.call(this);
	  this.initEvent('message', false, false);
	  this.data = data;
	}

	inherits(TransportMessageEvent, Event);

	module.exports = TransportMessageEvent;


/***/ },
/* 68 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	var EventEmitter = __webpack_require__(27).EventEmitter
	  , inherits = __webpack_require__(26)
	  , urlUtils = __webpack_require__(18)
	  , XDR = __webpack_require__(41)
	  , XHRCors = __webpack_require__(36)
	  , XHRLocal = __webpack_require__(38)
	  , XHRFake = __webpack_require__(69)
	  , InfoIframe = __webpack_require__(70)
	  , InfoAjax = __webpack_require__(72)
	  ;

	var debug = function() {};
	if (process.env.NODE_ENV !== 'production') {
	  debug = __webpack_require__(23)('sockjs-client:info-receiver');
	}

	function InfoReceiver(baseUrl, urlInfo) {
	  debug(baseUrl);
	  var self = this;
	  EventEmitter.call(this);

	  setTimeout(function() {
	    self.doXhr(baseUrl, urlInfo);
	  }, 0);
	}

	inherits(InfoReceiver, EventEmitter);

	// TODO this is currently ignoring the list of available transports and the whitelist

	InfoReceiver._getReceiver = function(baseUrl, url, urlInfo) {
	  // determine method of CORS support (if needed)
	  if (urlInfo.sameOrigin) {
	    return new InfoAjax(url, XHRLocal);
	  }
	  if (XHRCors.enabled) {
	    return new InfoAjax(url, XHRCors);
	  }
	  if (XDR.enabled && urlInfo.sameScheme) {
	    return new InfoAjax(url, XDR);
	  }
	  if (InfoIframe.enabled()) {
	    return new InfoIframe(baseUrl, url);
	  }
	  return new InfoAjax(url, XHRFake);
	};

	InfoReceiver.prototype.doXhr = function(baseUrl, urlInfo) {
	  var self = this
	    , url = urlUtils.addPath(baseUrl, '/info')
	    ;
	  debug('doXhr', url);

	  this.xo = InfoReceiver._getReceiver(baseUrl, url, urlInfo);

	  this.timeoutRef = setTimeout(function() {
	    debug('timeout');
	    self._cleanup(false);
	    self.emit('finish');
	  }, InfoReceiver.timeout);

	  this.xo.once('finish', function(info, rtt) {
	    debug('finish', info, rtt);
	    self._cleanup(true);
	    self.emit('finish', info, rtt);
	  });
	};

	InfoReceiver.prototype._cleanup = function(wasClean) {
	  debug('_cleanup');
	  clearTimeout(this.timeoutRef);
	  this.timeoutRef = null;
	  if (!wasClean && this.xo) {
	    this.xo.close();
	  }
	  this.xo = null;
	};

	InfoReceiver.prototype.close = function() {
	  debug('close');
	  this.removeAllListeners();
	  this._cleanup(false);
	};

	InfoReceiver.timeout = 8000;

	module.exports = InfoReceiver;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(14)))

/***/ },
/* 69 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var EventEmitter = __webpack_require__(27).EventEmitter
	  , inherits = __webpack_require__(26)
	  ;

	function XHRFake(/* method, url, payload, opts */) {
	  var self = this;
	  EventEmitter.call(this);

	  this.to = setTimeout(function() {
	    self.emit('finish', 200, '{}');
	  }, XHRFake.timeout);
	}

	inherits(XHRFake, EventEmitter);

	XHRFake.prototype.close = function() {
	  clearTimeout(this.to);
	};

	XHRFake.timeout = 2000;

	module.exports = XHRFake;


/***/ },
/* 70 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process, global) {'use strict';

	var EventEmitter = __webpack_require__(27).EventEmitter
	  , inherits = __webpack_require__(26)
	  , JSON3 = __webpack_require__(47)
	  , utils = __webpack_require__(15)
	  , IframeTransport = __webpack_require__(46)
	  , InfoReceiverIframe = __webpack_require__(71)
	  ;

	var debug = function() {};
	if (process.env.NODE_ENV !== 'production') {
	  debug = __webpack_require__(23)('sockjs-client:info-iframe');
	}

	function InfoIframe(baseUrl, url) {
	  var self = this;
	  EventEmitter.call(this);

	  var go = function() {
	    var ifr = self.ifr = new IframeTransport(InfoReceiverIframe.transportName, url, baseUrl);

	    ifr.once('message', function(msg) {
	      if (msg) {
	        var d;
	        try {
	          d = JSON3.parse(msg);
	        } catch (e) {
	          debug('bad json', msg);
	          self.emit('finish');
	          self.close();
	          return;
	        }

	        var info = d[0], rtt = d[1];
	        self.emit('finish', info, rtt);
	      }
	      self.close();
	    });

	    ifr.once('close', function() {
	      self.emit('finish');
	      self.close();
	    });
	  };

	  // TODO this seems the same as the 'needBody' from transports
	  if (!global.document.body) {
	    utils.attachEvent('load', go);
	  } else {
	    go();
	  }
	}

	inherits(InfoIframe, EventEmitter);

	InfoIframe.enabled = function() {
	  return IframeTransport.enabled();
	};

	InfoIframe.prototype.close = function() {
	  if (this.ifr) {
	    this.ifr.close();
	  }
	  this.removeAllListeners();
	  this.ifr = null;
	};

	module.exports = InfoIframe;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(14), (function() { return this; }())))

/***/ },
/* 71 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var inherits = __webpack_require__(26)
	  , EventEmitter = __webpack_require__(27).EventEmitter
	  , JSON3 = __webpack_require__(47)
	  , XHRLocalObject = __webpack_require__(38)
	  , InfoAjax = __webpack_require__(72)
	  ;

	function InfoReceiverIframe(transUrl) {
	  var self = this;
	  EventEmitter.call(this);

	  this.ir = new InfoAjax(transUrl, XHRLocalObject);
	  this.ir.once('finish', function(info, rtt) {
	    self.ir = null;
	    self.emit('message', JSON3.stringify([info, rtt]));
	  });
	}

	inherits(InfoReceiverIframe, EventEmitter);

	InfoReceiverIframe.transportName = 'iframe-info-receiver';

	InfoReceiverIframe.prototype.close = function() {
	  if (this.ir) {
	    this.ir.close();
	    this.ir = null;
	  }
	  this.removeAllListeners();
	};

	module.exports = InfoReceiverIframe;


/***/ },
/* 72 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	var EventEmitter = __webpack_require__(27).EventEmitter
	  , inherits = __webpack_require__(26)
	  , JSON3 = __webpack_require__(47)
	  , objectUtils = __webpack_require__(51)
	  ;

	var debug = function() {};
	if (process.env.NODE_ENV !== 'production') {
	  debug = __webpack_require__(23)('sockjs-client:info-ajax');
	}

	function InfoAjax(url, AjaxObject) {
	  EventEmitter.call(this);

	  var self = this;
	  var t0 = +new Date();
	  this.xo = new AjaxObject('GET', url);

	  this.xo.once('finish', function(status, text) {
	    var info, rtt;
	    if (status === 200) {
	      rtt = (+new Date()) - t0;
	      if (text) {
	        try {
	          info = JSON3.parse(text);
	        } catch (e) {
	          debug('bad json', text);
	        }
	      }

	      if (!objectUtils.isObject(info)) {
	        info = {};
	      }
	    }
	    self.emit('finish', info, rtt);
	    self.removeAllListeners();
	  });
	}

	inherits(InfoAjax, EventEmitter);

	InfoAjax.prototype.close = function() {
	  this.removeAllListeners();
	  this.xo.close();
	};

	module.exports = InfoAjax;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(14)))

/***/ },
/* 73 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	var urlUtils = __webpack_require__(18)
	  , eventUtils = __webpack_require__(15)
	  , JSON3 = __webpack_require__(47)
	  , FacadeJS = __webpack_require__(74)
	  , InfoIframeReceiver = __webpack_require__(71)
	  , iframeUtils = __webpack_require__(50)
	  , loc = __webpack_require__(65)
	  ;

	var debug = function() {};
	if (process.env.NODE_ENV !== 'production') {
	  debug = __webpack_require__(23)('sockjs-client:iframe-bootstrap');
	}

	module.exports = function(SockJS, availableTransports) {
	  var transportMap = {};
	  availableTransports.forEach(function(at) {
	    if (at.facadeTransport) {
	      transportMap[at.facadeTransport.transportName] = at.facadeTransport;
	    }
	  });

	  // hard-coded for the info iframe
	  // TODO see if we can make this more dynamic
	  transportMap[InfoIframeReceiver.transportName] = InfoIframeReceiver;
	  var parentOrigin;

	  /* eslint-disable camelcase */
	  SockJS.bootstrap_iframe = function() {
	    /* eslint-enable camelcase */
	    var facade;
	    iframeUtils.currentWindowId = loc.hash.slice(1);
	    var onMessage = function(e) {
	      if (e.source !== parent) {
	        return;
	      }
	      if (typeof parentOrigin === 'undefined') {
	        parentOrigin = e.origin;
	      }
	      if (e.origin !== parentOrigin) {
	        return;
	      }

	      var iframeMessage;
	      try {
	        iframeMessage = JSON3.parse(e.data);
	      } catch (ignored) {
	        debug('bad json', e.data);
	        return;
	      }

	      if (iframeMessage.windowId !== iframeUtils.currentWindowId) {
	        return;
	      }
	      switch (iframeMessage.type) {
	      case 's':
	        var p;
	        try {
	          p = JSON3.parse(iframeMessage.data);
	        } catch (ignored) {
	          debug('bad json', iframeMessage.data);
	          break;
	        }
	        var version = p[0];
	        var transport = p[1];
	        var transUrl = p[2];
	        var baseUrl = p[3];
	        debug(version, transport, transUrl, baseUrl);
	        // change this to semver logic
	        if (version !== SockJS.version) {
	          throw new Error('Incompatible SockJS! Main site uses:' +
	                    ' "' + version + '", the iframe:' +
	                    ' "' + SockJS.version + '".');
	        }

	        if (!urlUtils.isOriginEqual(transUrl, loc.href) ||
	            !urlUtils.isOriginEqual(baseUrl, loc.href)) {
	          throw new Error('Can\'t connect to different domain from within an ' +
	                    'iframe. (' + loc.href + ', ' + transUrl + ', ' + baseUrl + ')');
	        }
	        facade = new FacadeJS(new transportMap[transport](transUrl, baseUrl));
	        break;
	      case 'm':
	        facade._send(iframeMessage.data);
	        break;
	      case 'c':
	        if (facade) {
	          facade._close();
	        }
	        facade = null;
	        break;
	      }
	    };

	    eventUtils.attachEvent('message', onMessage);

	    // Start
	    iframeUtils.postMessage('s');
	  };
	};

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(14)))

/***/ },
/* 74 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var JSON3 = __webpack_require__(47)
	  , iframeUtils = __webpack_require__(50)
	  ;

	function FacadeJS(transport) {
	  this._transport = transport;
	  transport.on('message', this._transportMessage.bind(this));
	  transport.on('close', this._transportClose.bind(this));
	}

	FacadeJS.prototype._transportClose = function(code, reason) {
	  iframeUtils.postMessage('c', JSON3.stringify([code, reason]));
	};
	FacadeJS.prototype._transportMessage = function(frame) {
	  iframeUtils.postMessage('t', frame);
	};
	FacadeJS.prototype._send = function(data) {
	  this._transport.send(data);
	};
	FacadeJS.prototype._close = function() {
	  this._transport.close();
	  this._transport.removeAllListeners();
	};

	module.exports = FacadeJS;


/***/ },
/* 75 */
/***/ function(module, exports, __webpack_require__) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	/*globals window __webpack_hash__ */
	if(true) {
		var lastData;
		var upToDate = function upToDate() {
			return lastData.indexOf(__webpack_require__.h()) >= 0;
		};
		var check = function check() {
			module.hot.check(function(err, updatedModules) {
				if(err) {
					if(module.hot.status() in {
							abort: 1,
							fail: 1
						}) {
						console.warn("[HMR] Cannot check for update. Need to do a full reload!");
						console.warn("[HMR] " + err.stack || err.message);
					} else {
						console.warn("[HMR] Update check failed: " + err.stack || err.message);
					}
					return;
				}

				if(!updatedModules) {
					console.warn("[HMR] Cannot find update. Need to do a full reload!");
					console.warn("[HMR] (Probably because of restarting the webpack-dev-server)");
					return;
				}

				module.hot.apply({
					ignoreUnaccepted: true
				}, function(err, renewedModules) {
					if(err) {
						if(module.hot.status() in {
								abort: 1,
								fail: 1
							}) {
							console.warn("[HMR] Cannot apply update. Need to do a full reload!");
							console.warn("[HMR] " + err.stack || err.message);
						} else {
							console.warn("[HMR] Update failed: " + err.stack || err.message);
						}
						return;
					}

					if(!upToDate()) {
						check();
					}

					__webpack_require__(76)(updatedModules, renewedModules);

					if(upToDate()) {
						console.log("[HMR] App is up to date.");
					}
				});
			});
		};
		var addEventListener = window.addEventListener ? function(eventName, listener) {
			window.addEventListener(eventName, listener, false);
		} : function(eventName, listener) {
			window.attachEvent("on" + eventName, listener);
		};
		addEventListener("message", function(event) {
			if(typeof event.data === "string" && event.data.indexOf("webpackHotUpdate") === 0) {
				lastData = event.data;
				if(!upToDate() && module.hot.status() === "idle") {
					console.log("[HMR] Checking for updates on the server...");
					check();
				}
			}
		});
		console.log("[HMR] Waiting for update signal from WDS...");
	} else {
		throw new Error("[HMR] Hot Module Replacement is disabled.");
	}


/***/ },
/* 76 */
/***/ function(module, exports) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	module.exports = function(updatedModules, renewedModules) {
		var unacceptedModules = updatedModules.filter(function(moduleId) {
			return renewedModules && renewedModules.indexOf(moduleId) < 0;
		});

		if(unacceptedModules.length > 0) {
			console.warn("[HMR] The following modules couldn't be hot updated: (They would need a full reload!)");
			unacceptedModules.forEach(function(moduleId) {
				console.warn("[HMR]  - " + moduleId);
			});
		}

		if(!renewedModules || renewedModules.length === 0) {
			console.log("[HMR] Nothing hot updated.");
		} else {
			console.log("[HMR] Updated modules:");
			renewedModules.forEach(function(moduleId) {
				console.log("[HMR]  - " + moduleId);
			});
		}
	};


/***/ },
/* 77 */
/***/ function(module, exports, __webpack_require__) {

	// import { sayHello } from "./greet";
	"use strict";
	// function showHello(divName: string, name: string) {
	//     const elt = document.getElementById(divName);
	//     elt.innerText = sayHello(name);
	// }
	// showHello("greeting", "bvvvvvvvvvvvvvvvv");
	var platform_browser_dynamic_1 = __webpack_require__(78);
	var app_module_1 = __webpack_require__(100);
	platform_browser_dynamic_1.platformBrowserDynamic().bootstrapModule(app_module_1.AppModule);


/***/ },
/* 78 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {/**
	 * @license Angular v2.2.3
	 * (c) 2010-2016 Google, Inc. https://angular.io/
	 * License: MIT
	 */
	(function (global, factory) {
	     true ? factory(exports, __webpack_require__(79), __webpack_require__(80), __webpack_require__(98)) :
	    typeof define === 'function' && define.amd ? define(['exports', '@angular/compiler', '@angular/core', '@angular/platform-browser'], factory) :
	    (factory((global.ng = global.ng || {}, global.ng.platformBrowserDynamic = global.ng.platformBrowserDynamic || {}),global.ng.compiler,global.ng.core,global.ng.platformBrowser));
	}(this, function (exports,_angular_compiler,_angular_core,_angular_platformBrowser) { 'use strict';

	    var INTERNAL_BROWSER_PLATFORM_PROVIDERS = _angular_platformBrowser.__platform_browser_private__.INTERNAL_BROWSER_PLATFORM_PROVIDERS;

	    var __extends = (this && this.__extends) || function (d, b) {
	        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	    var ResourceLoaderImpl = (function (_super) {
	        __extends(ResourceLoaderImpl, _super);
	        function ResourceLoaderImpl() {
	            _super.apply(this, arguments);
	        }
	        ResourceLoaderImpl.prototype.get = function (url) {
	            var resolve;
	            var reject;
	            var promise = new Promise(function (res, rej) {
	                resolve = res;
	                reject = rej;
	            });
	            var xhr = new XMLHttpRequest();
	            xhr.open('GET', url, true);
	            xhr.responseType = 'text';
	            xhr.onload = function () {
	                // responseText is the old-school way of retrieving response (supported by IE8 & 9)
	                // response/responseType properties were introduced in ResourceLoader Level2 spec (supported
	                // by IE10)
	                var response = xhr.response || xhr.responseText;
	                // normalize IE9 bug (http://bugs.jquery.com/ticket/1450)
	                var status = xhr.status === 1223 ? 204 : xhr.status;
	                // fix status code when it is 0 (0 status is undocumented).
	                // Occurs when accessing file resources or on Android 4.1 stock browser
	                // while retrieving files from application cache.
	                if (status === 0) {
	                    status = response ? 200 : 0;
	                }
	                if (200 <= status && status <= 300) {
	                    resolve(response);
	                }
	                else {
	                    reject("Failed to load " + url);
	                }
	            };
	            xhr.onerror = function () { reject("Failed to load " + url); };
	            xhr.send();
	            return promise;
	        };
	        ResourceLoaderImpl.decorators = [
	            { type: _angular_core.Injectable },
	        ];
	        /** @nocollapse */
	        ResourceLoaderImpl.ctorParameters = [];
	        return ResourceLoaderImpl;
	    }(_angular_compiler.ResourceLoader));

	    var INTERNAL_BROWSER_DYNAMIC_PLATFORM_PROVIDERS = [
	        INTERNAL_BROWSER_PLATFORM_PROVIDERS,
	        {
	            provide: _angular_core.COMPILER_OPTIONS,
	            useValue: { providers: [{ provide: _angular_compiler.ResourceLoader, useClass: ResourceLoaderImpl }] },
	            multi: true
	        },
	    ];

	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    var globalScope;
	    if (typeof window === 'undefined') {
	        if (typeof WorkerGlobalScope !== 'undefined' && self instanceof WorkerGlobalScope) {
	            // TODO: Replace any with WorkerGlobalScope from lib.webworker.d.ts #3492
	            globalScope = self;
	        }
	        else {
	            globalScope = global;
	        }
	    }
	    else {
	        globalScope = window;
	    }
	    // Need to declare a new variable for global here since TypeScript
	    // exports the original value of the symbol.
	    var _global = globalScope;
	    // TODO: remove calls to assert in production environment
	    // Note: Can't just export this and import in in other files
	    // as `assert` is a reserved keyword in Dart
	    _global.assert = function assert(condition) {
	        // TODO: to be fixed properly via #2830, noop for now
	    };

	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    var __extends$1 = (this && this.__extends) || function (d, b) {
	        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	    /**
	     * An implementation of ResourceLoader that uses a template cache to avoid doing an actual
	     * ResourceLoader.
	     *
	     * The template cache needs to be built and loaded into window.$templateCache
	     * via a separate mechanism.
	     */
	    var CachedResourceLoader = (function (_super) {
	        __extends$1(CachedResourceLoader, _super);
	        function CachedResourceLoader() {
	            _super.call(this);
	            this._cache = _global.$templateCache;
	            if (this._cache == null) {
	                throw new Error('CachedResourceLoader: Template cache was not found in $templateCache.');
	            }
	        }
	        CachedResourceLoader.prototype.get = function (url) {
	            if (this._cache.hasOwnProperty(url)) {
	                return Promise.resolve(this._cache[url]);
	            }
	            else {
	                return Promise.reject('CachedResourceLoader: Did not find cached template for ' + url);
	            }
	        };
	        return CachedResourceLoader;
	    }(_angular_compiler.ResourceLoader));

	    var __platform_browser_dynamic_private__ = {
	        INTERNAL_BROWSER_DYNAMIC_PLATFORM_PROVIDERS: INTERNAL_BROWSER_DYNAMIC_PLATFORM_PROVIDERS,
	        ResourceLoaderImpl: ResourceLoaderImpl
	    };

	    /**
	     * @experimental
	     */
	    var RESOURCE_CACHE_PROVIDER = [{ provide: _angular_compiler.ResourceLoader, useClass: CachedResourceLoader }];
	    /**
	     * @stable
	     */
	    var platformBrowserDynamic = _angular_core.createPlatformFactory(_angular_compiler.platformCoreDynamic, 'browserDynamic', INTERNAL_BROWSER_DYNAMIC_PLATFORM_PROVIDERS);

	    exports.RESOURCE_CACHE_PROVIDER = RESOURCE_CACHE_PROVIDER;
	    exports.platformBrowserDynamic = platformBrowserDynamic;
	    exports.__platform_browser_dynamic_private__ = __platform_browser_dynamic_private__;

	}));
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 79 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * @license Angular v2.2.3
	 * (c) 2010-2016 Google, Inc. https://angular.io/
	 * License: MIT
	 */
	(function (global, factory) {
	   true ? factory(exports, __webpack_require__(80)) :
	  typeof define === 'function' && define.amd ? define(['exports', '@angular/core'], factory) :
	  (factory((global.ng = global.ng || {}, global.ng.compiler = global.ng.compiler || {}),global.ng.core));
	}(this, function (exports,_angular_core) { 'use strict';

	  /**
	   * @license
	   * Copyright Google Inc. All Rights Reserved.
	   *
	   * Use of this source code is governed by an MIT-style license that can be
	   * found in the LICENSE file at https://angular.io/license
	   */
	  /**
	   * A segment of text within the template.
	   */
	  var TextAst = (function () {
	      function TextAst(value, ngContentIndex, sourceSpan) {
	          this.value = value;
	          this.ngContentIndex = ngContentIndex;
	          this.sourceSpan = sourceSpan;
	      }
	      TextAst.prototype.visit = function (visitor, context) { return visitor.visitText(this, context); };
	      return TextAst;
	  }());
	  /**
	   * A bound expression within the text of a template.
	   */
	  var BoundTextAst = (function () {
	      function BoundTextAst(value, ngContentIndex, sourceSpan) {
	          this.value = value;
	          this.ngContentIndex = ngContentIndex;
	          this.sourceSpan = sourceSpan;
	      }
	      BoundTextAst.prototype.visit = function (visitor, context) {
	          return visitor.visitBoundText(this, context);
	      };
	      return BoundTextAst;
	  }());
	  /**
	   * A plain attribute on an element.
	   */
	  var AttrAst = (function () {
	      function AttrAst(name, value, sourceSpan) {
	          this.name = name;
	          this.value = value;
	          this.sourceSpan = sourceSpan;
	      }
	      AttrAst.prototype.visit = function (visitor, context) { return visitor.visitAttr(this, context); };
	      return AttrAst;
	  }());
	  /**
	   * A binding for an element property (e.g. `[property]="expression"`) or an animation trigger (e.g.
	   * `[@trigger]="stateExp"`)
	   */
	  var BoundElementPropertyAst = (function () {
	      function BoundElementPropertyAst(name, type, securityContext, needsRuntimeSecurityContext, value, unit, sourceSpan) {
	          this.name = name;
	          this.type = type;
	          this.securityContext = securityContext;
	          this.needsRuntimeSecurityContext = needsRuntimeSecurityContext;
	          this.value = value;
	          this.unit = unit;
	          this.sourceSpan = sourceSpan;
	      }
	      BoundElementPropertyAst.prototype.visit = function (visitor, context) {
	          return visitor.visitElementProperty(this, context);
	      };
	      Object.defineProperty(BoundElementPropertyAst.prototype, "isAnimation", {
	          get: function () { return this.type === exports.PropertyBindingType.Animation; },
	          enumerable: true,
	          configurable: true
	      });
	      return BoundElementPropertyAst;
	  }());
	  /**
	   * A binding for an element event (e.g. `(event)="handler()"`) or an animation trigger event (e.g.
	   * `(@trigger.phase)="callback($event)"`).
	   */
	  var BoundEventAst = (function () {
	      function BoundEventAst(name, target, phase, handler, sourceSpan) {
	          this.name = name;
	          this.target = target;
	          this.phase = phase;
	          this.handler = handler;
	          this.sourceSpan = sourceSpan;
	      }
	      BoundEventAst.calcFullName = function (name, target, phase) {
	          if (target) {
	              return target + ":" + name;
	          }
	          else if (phase) {
	              return "@" + name + "." + phase;
	          }
	          else {
	              return name;
	          }
	      };
	      BoundEventAst.prototype.visit = function (visitor, context) {
	          return visitor.visitEvent(this, context);
	      };
	      Object.defineProperty(BoundEventAst.prototype, "fullName", {
	          get: function () { return BoundEventAst.calcFullName(this.name, this.target, this.phase); },
	          enumerable: true,
	          configurable: true
	      });
	      Object.defineProperty(BoundEventAst.prototype, "isAnimation", {
	          get: function () { return !!this.phase; },
	          enumerable: true,
	          configurable: true
	      });
	      return BoundEventAst;
	  }());
	  /**
	   * A reference declaration on an element (e.g. `let someName="expression"`).
	   */
	  var ReferenceAst = (function () {
	      function ReferenceAst(name, value, sourceSpan) {
	          this.name = name;
	          this.value = value;
	          this.sourceSpan = sourceSpan;
	      }
	      ReferenceAst.prototype.visit = function (visitor, context) {
	          return visitor.visitReference(this, context);
	      };
	      return ReferenceAst;
	  }());
	  /**
	   * A variable declaration on a <template> (e.g. `var-someName="someLocalName"`).
	   */
	  var VariableAst = (function () {
	      function VariableAst(name, value, sourceSpan) {
	          this.name = name;
	          this.value = value;
	          this.sourceSpan = sourceSpan;
	      }
	      VariableAst.prototype.visit = function (visitor, context) {
	          return visitor.visitVariable(this, context);
	      };
	      return VariableAst;
	  }());
	  /**
	   * An element declaration in a template.
	   */
	  var ElementAst = (function () {
	      function ElementAst(name, attrs, inputs, outputs, references, directives, providers, hasViewContainer, children, ngContentIndex, sourceSpan, endSourceSpan) {
	          this.name = name;
	          this.attrs = attrs;
	          this.inputs = inputs;
	          this.outputs = outputs;
	          this.references = references;
	          this.directives = directives;
	          this.providers = providers;
	          this.hasViewContainer = hasViewContainer;
	          this.children = children;
	          this.ngContentIndex = ngContentIndex;
	          this.sourceSpan = sourceSpan;
	          this.endSourceSpan = endSourceSpan;
	      }
	      ElementAst.prototype.visit = function (visitor, context) {
	          return visitor.visitElement(this, context);
	      };
	      return ElementAst;
	  }());
	  /**
	   * A `<template>` element included in an Angular template.
	   */
	  var EmbeddedTemplateAst = (function () {
	      function EmbeddedTemplateAst(attrs, outputs, references, variables, directives, providers, hasViewContainer, children, ngContentIndex, sourceSpan) {
	          this.attrs = attrs;
	          this.outputs = outputs;
	          this.references = references;
	          this.variables = variables;
	          this.directives = directives;
	          this.providers = providers;
	          this.hasViewContainer = hasViewContainer;
	          this.children = children;
	          this.ngContentIndex = ngContentIndex;
	          this.sourceSpan = sourceSpan;
	      }
	      EmbeddedTemplateAst.prototype.visit = function (visitor, context) {
	          return visitor.visitEmbeddedTemplate(this, context);
	      };
	      return EmbeddedTemplateAst;
	  }());
	  /**
	   * A directive property with a bound value (e.g. `*ngIf="condition").
	   */
	  var BoundDirectivePropertyAst = (function () {
	      function BoundDirectivePropertyAst(directiveName, templateName, value, sourceSpan) {
	          this.directiveName = directiveName;
	          this.templateName = templateName;
	          this.value = value;
	          this.sourceSpan = sourceSpan;
	      }
	      BoundDirectivePropertyAst.prototype.visit = function (visitor, context) {
	          return visitor.visitDirectiveProperty(this, context);
	      };
	      return BoundDirectivePropertyAst;
	  }());
	  /**
	   * A directive declared on an element.
	   */
	  var DirectiveAst = (function () {
	      function DirectiveAst(directive, inputs, hostProperties, hostEvents, sourceSpan) {
	          this.directive = directive;
	          this.inputs = inputs;
	          this.hostProperties = hostProperties;
	          this.hostEvents = hostEvents;
	          this.sourceSpan = sourceSpan;
	      }
	      DirectiveAst.prototype.visit = function (visitor, context) {
	          return visitor.visitDirective(this, context);
	      };
	      return DirectiveAst;
	  }());
	  /**
	   * A provider declared on an element
	   */
	  var ProviderAst = (function () {
	      function ProviderAst(token, multiProvider, eager, providers, providerType, lifecycleHooks, sourceSpan) {
	          this.token = token;
	          this.multiProvider = multiProvider;
	          this.eager = eager;
	          this.providers = providers;
	          this.providerType = providerType;
	          this.lifecycleHooks = lifecycleHooks;
	          this.sourceSpan = sourceSpan;
	      }
	      ProviderAst.prototype.visit = function (visitor, context) {
	          // No visit method in the visitor for now...
	          return null;
	      };
	      return ProviderAst;
	  }());
	  exports.ProviderAstType;
	  (function (ProviderAstType) {
	      ProviderAstType[ProviderAstType["PublicService"] = 0] = "PublicService";
	      ProviderAstType[ProviderAstType["PrivateService"] = 1] = "PrivateService";
	      ProviderAstType[ProviderAstType["Component"] = 2] = "Component";
	      ProviderAstType[ProviderAstType["Directive"] = 3] = "Directive";
	      ProviderAstType[ProviderAstType["Builtin"] = 4] = "Builtin";
	  })(exports.ProviderAstType || (exports.ProviderAstType = {}));
	  /**
	   * Position where content is to be projected (instance of `<ng-content>` in a template).
	   */
	  var NgContentAst = (function () {
	      function NgContentAst(index, ngContentIndex, sourceSpan) {
	          this.index = index;
	          this.ngContentIndex = ngContentIndex;
	          this.sourceSpan = sourceSpan;
	      }
	      NgContentAst.prototype.visit = function (visitor, context) {
	          return visitor.visitNgContent(this, context);
	      };
	      return NgContentAst;
	  }());
	  /**
	   * Enumeration of types of property bindings.
	   */
	  exports.PropertyBindingType;
	  (function (PropertyBindingType) {
	      /**
	       * A normal binding to a property (e.g. `[property]="expression"`).
	       */
	      PropertyBindingType[PropertyBindingType["Property"] = 0] = "Property";
	      /**
	       * A binding to an element attribute (e.g. `[attr.name]="expression"`).
	       */
	      PropertyBindingType[PropertyBindingType["Attribute"] = 1] = "Attribute";
	      /**
	       * A binding to a CSS class (e.g. `[class.name]="condition"`).
	       */
	      PropertyBindingType[PropertyBindingType["Class"] = 2] = "Class";
	      /**
	       * A binding to a style rule (e.g. `[style.rule]="expression"`).
	       */
	      PropertyBindingType[PropertyBindingType["Style"] = 3] = "Style";
	      /**
	       * A binding to an animation reference (e.g. `[animate.key]="expression"`).
	       */
	      PropertyBindingType[PropertyBindingType["Animation"] = 4] = "Animation";
	  })(exports.PropertyBindingType || (exports.PropertyBindingType = {}));
	  /**
	   * Visit every node in a list of {@link TemplateAst}s with the given {@link TemplateAstVisitor}.
	   */
	  function templateVisitAll(visitor, asts, context) {
	      if (context === void 0) { context = null; }
	      var result = [];
	      var visit = visitor.visit ?
	          function (ast) { return visitor.visit(ast, context) || ast.visit(visitor, context); } :
	          function (ast) { return ast.visit(visitor, context); };
	      asts.forEach(function (ast) {
	          var astResult = visit(ast);
	          if (astResult) {
	              result.push(astResult);
	          }
	      });
	      return result;
	  }

	  /**
	   * @license
	   * Copyright Google Inc. All Rights Reserved.
	   *
	   * Use of this source code is governed by an MIT-style license that can be
	   * found in the LICENSE file at https://angular.io/license
	   */
	  var $EOF = 0;
	  var $TAB = 9;
	  var $LF = 10;
	  var $VTAB = 11;
	  var $FF = 12;
	  var $CR = 13;
	  var $SPACE = 32;
	  var $BANG = 33;
	  var $DQ = 34;
	  var $HASH = 35;
	  var $$ = 36;
	  var $PERCENT = 37;
	  var $AMPERSAND = 38;
	  var $SQ = 39;
	  var $LPAREN = 40;
	  var $RPAREN = 41;
	  var $STAR = 42;
	  var $PLUS = 43;
	  var $COMMA = 44;
	  var $MINUS = 45;
	  var $PERIOD = 46;
	  var $SLASH = 47;
	  var $COLON = 58;
	  var $SEMICOLON = 59;
	  var $LT = 60;
	  var $EQ = 61;
	  var $GT = 62;
	  var $QUESTION = 63;
	  var $0 = 48;
	  var $9 = 57;
	  var $A = 65;
	  var $E = 69;
	  var $F = 70;
	  var $X = 88;
	  var $Z = 90;
	  var $LBRACKET = 91;
	  var $BACKSLASH = 92;
	  var $RBRACKET = 93;
	  var $CARET = 94;
	  var $_ = 95;
	  var $a = 97;
	  var $e = 101;
	  var $f = 102;
	  var $n = 110;
	  var $r = 114;
	  var $t = 116;
	  var $u = 117;
	  var $v = 118;
	  var $x = 120;
	  var $z = 122;
	  var $LBRACE = 123;
	  var $BAR = 124;
	  var $RBRACE = 125;
	  var $NBSP = 160;
	  var $BT = 96;
	  function isWhitespace(code) {
	      return (code >= $TAB && code <= $SPACE) || (code == $NBSP);
	  }
	  function isDigit(code) {
	      return $0 <= code && code <= $9;
	  }
	  function isAsciiLetter(code) {
	      return code >= $a && code <= $z || code >= $A && code <= $Z;
	  }
	  function isAsciiHexDigit(code) {
	      return code >= $a && code <= $f || code >= $A && code <= $F || isDigit(code);
	  }

	  function isPresent(obj) {
	      return obj != null;
	  }
	  function isBlank(obj) {
	      return obj == null;
	  }
	  var STRING_MAP_PROTO = Object.getPrototypeOf({});
	  function isStrictStringMap(obj) {
	      return typeof obj === 'object' && obj !== null && Object.getPrototypeOf(obj) === STRING_MAP_PROTO;
	  }
	  function stringify(token) {
	      if (typeof token === 'string') {
	          return token;
	      }
	      if (token == null) {
	          return '' + token;
	      }
	      if (token.overriddenName) {
	          return token.overriddenName;
	      }
	      if (token.name) {
	          return token.name;
	      }
	      var res = token.toString();
	      var newLineIndex = res.indexOf('\n');
	      return newLineIndex === -1 ? res : res.substring(0, newLineIndex);
	  }
	  var NumberWrapper = (function () {
	      function NumberWrapper() {
	      }
	      NumberWrapper.parseIntAutoRadix = function (text) {
	          var result = parseInt(text);
	          if (isNaN(result)) {
	              throw new Error('Invalid integer literal when parsing ' + text);
	          }
	          return result;
	      };
	      NumberWrapper.isNumeric = function (value) { return !isNaN(value - parseFloat(value)); };
	      return NumberWrapper;
	  }());
	  function isJsObject(o) {
	      return o !== null && (typeof o === 'function' || typeof o === 'object');
	  }
	  function isPrimitive(obj) {
	      return !isJsObject(obj);
	  }
	  function escapeRegExp(s) {
	      return s.replace(/([.*+?^=!:${}()|[\]\/\\])/g, '\\$1');
	  }

	  function assertArrayOfStrings(identifier, value) {
	      if (!_angular_core.isDevMode() || isBlank(value)) {
	          return;
	      }
	      if (!Array.isArray(value)) {
	          throw new Error("Expected '" + identifier + "' to be an array of strings.");
	      }
	      for (var i = 0; i < value.length; i += 1) {
	          if (typeof value[i] !== 'string') {
	              throw new Error("Expected '" + identifier + "' to be an array of strings.");
	          }
	      }
	  }
	  var INTERPOLATION_BLACKLIST_REGEXPS = [
	      /^\s*$/,
	      /[<>]/,
	      /^[{}]$/,
	      /&(#|[a-z])/i,
	      /^\/\//,
	  ];
	  function assertInterpolationSymbols(identifier, value) {
	      if (isPresent(value) && !(Array.isArray(value) && value.length == 2)) {
	          throw new Error("Expected '" + identifier + "' to be an array, [start, end].");
	      }
	      else if (_angular_core.isDevMode() && !isBlank(value)) {
	          var start_1 = value[0];
	          var end_1 = value[1];
	          // black list checking
	          INTERPOLATION_BLACKLIST_REGEXPS.forEach(function (regexp) {
	              if (regexp.test(start_1) || regexp.test(end_1)) {
	                  throw new Error("['" + start_1 + "', '" + end_1 + "'] contains unusable interpolation symbol.");
	              }
	          });
	      }
	  }

	  var InterpolationConfig = (function () {
	      function InterpolationConfig(start, end) {
	          this.start = start;
	          this.end = end;
	      }
	      InterpolationConfig.fromArray = function (markers) {
	          if (!markers) {
	              return DEFAULT_INTERPOLATION_CONFIG;
	          }
	          assertInterpolationSymbols('interpolation', markers);
	          return new InterpolationConfig(markers[0], markers[1]);
	      };
	      ;
	      return InterpolationConfig;
	  }());
	  var DEFAULT_INTERPOLATION_CONFIG = new InterpolationConfig('{{', '}}');

	  /**
	   * @license
	   * Copyright Google Inc. All Rights Reserved.
	   *
	   * Use of this source code is governed by an MIT-style license that can be
	   * found in the LICENSE file at https://angular.io/license
	   */
	  var __extends$1 = (this && this.__extends) || function (d, b) {
	      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	      function __() { this.constructor = d; }
	      d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	  };
	  var ParserError = (function () {
	      function ParserError(message, input, errLocation, ctxLocation) {
	          this.input = input;
	          this.errLocation = errLocation;
	          this.ctxLocation = ctxLocation;
	          this.message = "Parser Error: " + message + " " + errLocation + " [" + input + "] in " + ctxLocation;
	      }
	      return ParserError;
	  }());
	  var ParseSpan = (function () {
	      function ParseSpan(start, end) {
	          this.start = start;
	          this.end = end;
	      }
	      return ParseSpan;
	  }());
	  var AST = (function () {
	      function AST(span) {
	          this.span = span;
	      }
	      AST.prototype.visit = function (visitor, context) {
	          if (context === void 0) { context = null; }
	          return null;
	      };
	      AST.prototype.toString = function () { return 'AST'; };
	      return AST;
	  }());
	  /**
	   * Represents a quoted expression of the form:
	   *
	   * quote = prefix `:` uninterpretedExpression
	   * prefix = identifier
	   * uninterpretedExpression = arbitrary string
	   *
	   * A quoted expression is meant to be pre-processed by an AST transformer that
	   * converts it into another AST that no longer contains quoted expressions.
	   * It is meant to allow third-party developers to extend Angular template
	   * expression language. The `uninterpretedExpression` part of the quote is
	   * therefore not interpreted by the Angular's own expression parser.
	   */
	  var Quote = (function (_super) {
	      __extends$1(Quote, _super);
	      function Quote(span, prefix, uninterpretedExpression, location) {
	          _super.call(this, span);
	          this.prefix = prefix;
	          this.uninterpretedExpression = uninterpretedExpression;
	          this.location = location;
	      }
	      Quote.prototype.visit = function (visitor, context) {
	          if (context === void 0) { context = null; }
	          return visitor.visitQuote(this, context);
	      };
	      Quote.prototype.toString = function () { return 'Quote'; };
	      return Quote;
	  }(AST));
	  var EmptyExpr = (function (_super) {
	      __extends$1(EmptyExpr, _super);
	      function EmptyExpr() {
	          _super.apply(this, arguments);
	      }
	      EmptyExpr.prototype.visit = function (visitor, context) {
	          if (context === void 0) { context = null; }
	          // do nothing
	      };
	      return EmptyExpr;
	  }(AST));
	  var ImplicitReceiver = (function (_super) {
	      __extends$1(ImplicitReceiver, _super);
	      function ImplicitReceiver() {
	          _super.apply(this, arguments);
	      }
	      ImplicitReceiver.prototype.visit = function (visitor, context) {
	          if (context === void 0) { context = null; }
	          return visitor.visitImplicitReceiver(this, context);
	      };
	      return ImplicitReceiver;
	  }(AST));
	  /**
	   * Multiple expressions separated by a semicolon.
	   */
	  var Chain = (function (_super) {
	      __extends$1(Chain, _super);
	      function Chain(span, expressions) {
	          _super.call(this, span);
	          this.expressions = expressions;
	      }
	      Chain.prototype.visit = function (visitor, context) {
	          if (context === void 0) { context = null; }
	          return visitor.visitChain(this, context);
	      };
	      return Chain;
	  }(AST));
	  var Conditional = (function (_super) {
	      __extends$1(Conditional, _super);
	      function Conditional(span, condition, trueExp, falseExp) {
	          _super.call(this, span);
	          this.condition = condition;
	          this.trueExp = trueExp;
	          this.falseExp = falseExp;
	      }
	      Conditional.prototype.visit = function (visitor, context) {
	          if (context === void 0) { context = null; }
	          return visitor.visitConditional(this, context);
	      };
	      return Conditional;
	  }(AST));
	  var PropertyRead = (function (_super) {
	      __extends$1(PropertyRead, _super);
	      function PropertyRead(span, receiver, name) {
	          _super.call(this, span);
	          this.receiver = receiver;
	          this.name = name;
	      }
	      PropertyRead.prototype.visit = function (visitor, context) {
	          if (context === void 0) { context = null; }
	          return visitor.visitPropertyRead(this, context);
	      };
	      return PropertyRead;
	  }(AST));
	  var PropertyWrite = (function (_super) {
	      __extends$1(PropertyWrite, _super);
	      function PropertyWrite(span, receiver, name, value) {
	          _super.call(this, span);
	          this.receiver = receiver;
	          this.name = name;
	          this.value = value;
	      }
	      PropertyWrite.prototype.visit = function (visitor, context) {
	          if (context === void 0) { context = null; }
	          return visitor.visitPropertyWrite(this, context);
	      };
	      return PropertyWrite;
	  }(AST));
	  var SafePropertyRead = (function (_super) {
	      __extends$1(SafePropertyRead, _super);
	      function SafePropertyRead(span, receiver, name) {
	          _super.call(this, span);
	          this.receiver = receiver;
	          this.name = name;
	      }
	      SafePropertyRead.prototype.visit = function (visitor, context) {
	          if (context === void 0) { context = null; }
	          return visitor.visitSafePropertyRead(this, context);
	      };
	      return SafePropertyRead;
	  }(AST));
	  var KeyedRead = (function (_super) {
	      __extends$1(KeyedRead, _super);
	      function KeyedRead(span, obj, key) {
	          _super.call(this, span);
	          this.obj = obj;
	          this.key = key;
	      }
	      KeyedRead.prototype.visit = function (visitor, context) {
	          if (context === void 0) { context = null; }
	          return visitor.visitKeyedRead(this, context);
	      };
	      return KeyedRead;
	  }(AST));
	  var KeyedWrite = (function (_super) {
	      __extends$1(KeyedWrite, _super);
	      function KeyedWrite(span, obj, key, value) {
	          _super.call(this, span);
	          this.obj = obj;
	          this.key = key;
	          this.value = value;
	      }
	      KeyedWrite.prototype.visit = function (visitor, context) {
	          if (context === void 0) { context = null; }
	          return visitor.visitKeyedWrite(this, context);
	      };
	      return KeyedWrite;
	  }(AST));
	  var BindingPipe = (function (_super) {
	      __extends$1(BindingPipe, _super);
	      function BindingPipe(span, exp, name, args) {
	          _super.call(this, span);
	          this.exp = exp;
	          this.name = name;
	          this.args = args;
	      }
	      BindingPipe.prototype.visit = function (visitor, context) {
	          if (context === void 0) { context = null; }
	          return visitor.visitPipe(this, context);
	      };
	      return BindingPipe;
	  }(AST));
	  var LiteralPrimitive = (function (_super) {
	      __extends$1(LiteralPrimitive, _super);
	      function LiteralPrimitive(span, value) {
	          _super.call(this, span);
	          this.value = value;
	      }
	      LiteralPrimitive.prototype.visit = function (visitor, context) {
	          if (context === void 0) { context = null; }
	          return visitor.visitLiteralPrimitive(this, context);
	      };
	      return LiteralPrimitive;
	  }(AST));
	  var LiteralArray = (function (_super) {
	      __extends$1(LiteralArray, _super);
	      function LiteralArray(span, expressions) {
	          _super.call(this, span);
	          this.expressions = expressions;
	      }
	      LiteralArray.prototype.visit = function (visitor, context) {
	          if (context === void 0) { context = null; }
	          return visitor.visitLiteralArray(this, context);
	      };
	      return LiteralArray;
	  }(AST));
	  var LiteralMap = (function (_super) {
	      __extends$1(LiteralMap, _super);
	      function LiteralMap(span, keys, values) {
	          _super.call(this, span);
	          this.keys = keys;
	          this.values = values;
	      }
	      LiteralMap.prototype.visit = function (visitor, context) {
	          if (context === void 0) { context = null; }
	          return visitor.visitLiteralMap(this, context);
	      };
	      return LiteralMap;
	  }(AST));
	  var Interpolation = (function (_super) {
	      __extends$1(Interpolation, _super);
	      function Interpolation(span, strings, expressions) {
	          _super.call(this, span);
	          this.strings = strings;
	          this.expressions = expressions;
	      }
	      Interpolation.prototype.visit = function (visitor, context) {
	          if (context === void 0) { context = null; }
	          return visitor.visitInterpolation(this, context);
	      };
	      return Interpolation;
	  }(AST));
	  var Binary = (function (_super) {
	      __extends$1(Binary, _super);
	      function Binary(span, operation, left, right) {
	          _super.call(this, span);
	          this.operation = operation;
	          this.left = left;
	          this.right = right;
	      }
	      Binary.prototype.visit = function (visitor, context) {
	          if (context === void 0) { context = null; }
	          return visitor.visitBinary(this, context);
	      };
	      return Binary;
	  }(AST));
	  var PrefixNot = (function (_super) {
	      __extends$1(PrefixNot, _super);
	      function PrefixNot(span, expression) {
	          _super.call(this, span);
	          this.expression = expression;
	      }
	      PrefixNot.prototype.visit = function (visitor, context) {
	          if (context === void 0) { context = null; }
	          return visitor.visitPrefixNot(this, context);
	      };
	      return PrefixNot;
	  }(AST));
	  var MethodCall = (function (_super) {
	      __extends$1(MethodCall, _super);
	      function MethodCall(span, receiver, name, args) {
	          _super.call(this, span);
	          this.receiver = receiver;
	          this.name = name;
	          this.args = args;
	      }
	      MethodCall.prototype.visit = function (visitor, context) {
	          if (context === void 0) { context = null; }
	          return visitor.visitMethodCall(this, context);
	      };
	      return MethodCall;
	  }(AST));
	  var SafeMethodCall = (function (_super) {
	      __extends$1(SafeMethodCall, _super);
	      function SafeMethodCall(span, receiver, name, args) {
	          _super.call(this, span);
	          this.receiver = receiver;
	          this.name = name;
	          this.args = args;
	      }
	      SafeMethodCall.prototype.visit = function (visitor, context) {
	          if (context === void 0) { context = null; }
	          return visitor.visitSafeMethodCall(this, context);
	      };
	      return SafeMethodCall;
	  }(AST));
	  var FunctionCall = (function (_super) {
	      __extends$1(FunctionCall, _super);
	      function FunctionCall(span, target, args) {
	          _super.call(this, span);
	          this.target = target;
	          this.args = args;
	      }
	      FunctionCall.prototype.visit = function (visitor, context) {
	          if (context === void 0) { context = null; }
	          return visitor.visitFunctionCall(this, context);
	      };
	      return FunctionCall;
	  }(AST));
	  var ASTWithSource = (function (_super) {
	      __extends$1(ASTWithSource, _super);
	      function ASTWithSource(ast, source, location, errors) {
	          _super.call(this, new ParseSpan(0, isBlank(source) ? 0 : source.length));
	          this.ast = ast;
	          this.source = source;
	          this.location = location;
	          this.errors = errors;
	      }
	      ASTWithSource.prototype.visit = function (visitor, context) {
	          if (context === void 0) { context = null; }
	          return this.ast.visit(visitor, context);
	      };
	      ASTWithSource.prototype.toString = function () { return this.source + " in " + this.location; };
	      return ASTWithSource;
	  }(AST));
	  var TemplateBinding = (function () {
	      function TemplateBinding(span, key, keyIsVar, name, expression) {
	          this.span = span;
	          this.key = key;
	          this.keyIsVar = keyIsVar;
	          this.name = name;
	          this.expression = expression;
	      }
	      return TemplateBinding;
	  }());
	  var RecursiveAstVisitor = (function () {
	      function RecursiveAstVisitor() {
	      }
	      RecursiveAstVisitor.prototype.visitBinary = function (ast, context) {
	          ast.left.visit(this);
	          ast.right.visit(this);
	          return null;
	      };
	      RecursiveAstVisitor.prototype.visitChain = function (ast, context) { return this.visitAll(ast.expressions, context); };
	      RecursiveAstVisitor.prototype.visitConditional = function (ast, context) {
	          ast.condition.visit(this);
	          ast.trueExp.visit(this);
	          ast.falseExp.visit(this);
	          return null;
	      };
	      RecursiveAstVisitor.prototype.visitPipe = function (ast, context) {
	          ast.exp.visit(this);
	          this.visitAll(ast.args, context);
	          return null;
	      };
	      RecursiveAstVisitor.prototype.visitFunctionCall = function (ast, context) {
	          ast.target.visit(this);
	          this.visitAll(ast.args, context);
	          return null;
	      };
	      RecursiveAstVisitor.prototype.visitImplicitReceiver = function (ast, context) { return null; };
	      RecursiveAstVisitor.prototype.visitInterpolation = function (ast, context) {
	          return this.visitAll(ast.expressions, context);
	      };
	      RecursiveAstVisitor.prototype.visitKeyedRead = function (ast, context) {
	          ast.obj.visit(this);
	          ast.key.visit(this);
	          return null;
	      };
	      RecursiveAstVisitor.prototype.visitKeyedWrite = function (ast, context) {
	          ast.obj.visit(this);
	          ast.key.visit(this);
	          ast.value.visit(this);
	          return null;
	      };
	      RecursiveAstVisitor.prototype.visitLiteralArray = function (ast, context) {
	          return this.visitAll(ast.expressions, context);
	      };
	      RecursiveAstVisitor.prototype.visitLiteralMap = function (ast, context) { return this.visitAll(ast.values, context); };
	      RecursiveAstVisitor.prototype.visitLiteralPrimitive = function (ast, context) { return null; };
	      RecursiveAstVisitor.prototype.visitMethodCall = function (ast, context) {
	          ast.receiver.visit(this);
	          return this.visitAll(ast.args, context);
	      };
	      RecursiveAstVisitor.prototype.visitPrefixNot = function (ast, context) {
	          ast.expression.visit(this);
	          return null;
	      };
	      RecursiveAstVisitor.prototype.visitPropertyRead = function (ast, context) {
	          ast.receiver.visit(this);
	          return null;
	      };
	      RecursiveAstVisitor.prototype.visitPropertyWrite = function (ast, context) {
	          ast.receiver.visit(this);
	          ast.value.visit(this);
	          return null;
	      };
	      RecursiveAstVisitor.prototype.visitSafePropertyRead = function (ast, context) {
	          ast.receiver.visit(this);
	          return null;
	      };
	      RecursiveAstVisitor.prototype.visitSafeMethodCall = function (ast, context) {
	          ast.receiver.visit(this);
	          return this.visitAll(ast.args, context);
	      };
	      RecursiveAstVisitor.prototype.visitAll = function (asts, context) {
	          var _this = this;
	          asts.forEach(function (ast) { return ast.visit(_this, context); });
	          return null;
	      };
	      RecursiveAstVisitor.prototype.visitQuote = function (ast, context) { return null; };
	      return RecursiveAstVisitor;
	  }());

	  exports.TokenType;
	  (function (TokenType) {
	      TokenType[TokenType["Character"] = 0] = "Character";
	      TokenType[TokenType["Identifier"] = 1] = "Identifier";
	      TokenType[TokenType["Keyword"] = 2] = "Keyword";
	      TokenType[TokenType["String"] = 3] = "String";
	      TokenType[TokenType["Operator"] = 4] = "Operator";
	      TokenType[TokenType["Number"] = 5] = "Number";
	      TokenType[TokenType["Error"] = 6] = "Error";
	  })(exports.TokenType || (exports.TokenType = {}));
	  var KEYWORDS = ['var', 'let', 'null', 'undefined', 'true', 'false', 'if', 'else', 'this'];
	  var Lexer = (function () {
	      function Lexer() {
	      }
	      Lexer.prototype.tokenize = function (text) {
	          var scanner = new _Scanner(text);
	          var tokens = [];
	          var token = scanner.scanToken();
	          while (token != null) {
	              tokens.push(token);
	              token = scanner.scanToken();
	          }
	          return tokens;
	      };
	      Lexer.decorators = [
	          { type: _angular_core.Injectable },
	      ];
	      /** @nocollapse */
	      Lexer.ctorParameters = [];
	      return Lexer;
	  }());
	  var Token = (function () {
	      function Token(index, type, numValue, strValue) {
	          this.index = index;
	          this.type = type;
	          this.numValue = numValue;
	          this.strValue = strValue;
	      }
	      Token.prototype.isCharacter = function (code) {
	          return this.type == exports.TokenType.Character && this.numValue == code;
	      };
	      Token.prototype.isNumber = function () { return this.type == exports.TokenType.Number; };
	      Token.prototype.isString = function () { return this.type == exports.TokenType.String; };
	      Token.prototype.isOperator = function (operater) {
	          return this.type == exports.TokenType.Operator && this.strValue == operater;
	      };
	      Token.prototype.isIdentifier = function () { return this.type == exports.TokenType.Identifier; };
	      Token.prototype.isKeyword = function () { return this.type == exports.TokenType.Keyword; };
	      Token.prototype.isKeywordLet = function () { return this.type == exports.TokenType.Keyword && this.strValue == 'let'; };
	      Token.prototype.isKeywordNull = function () { return this.type == exports.TokenType.Keyword && this.strValue == 'null'; };
	      Token.prototype.isKeywordUndefined = function () {
	          return this.type == exports.TokenType.Keyword && this.strValue == 'undefined';
	      };
	      Token.prototype.isKeywordTrue = function () { return this.type == exports.TokenType.Keyword && this.strValue == 'true'; };
	      Token.prototype.isKeywordFalse = function () { return this.type == exports.TokenType.Keyword && this.strValue == 'false'; };
	      Token.prototype.isKeywordThis = function () { return this.type == exports.TokenType.Keyword && this.strValue == 'this'; };
	      Token.prototype.isError = function () { return this.type == exports.TokenType.Error; };
	      Token.prototype.toNumber = function () { return this.type == exports.TokenType.Number ? this.numValue : -1; };
	      Token.prototype.toString = function () {
	          switch (this.type) {
	              case exports.TokenType.Character:
	              case exports.TokenType.Identifier:
	              case exports.TokenType.Keyword:
	              case exports.TokenType.Operator:
	              case exports.TokenType.String:
	              case exports.TokenType.Error:
	                  return this.strValue;
	              case exports.TokenType.Number:
	                  return this.numValue.toString();
	              default:
	                  return null;
	          }
	      };
	      return Token;
	  }());
	  function newCharacterToken(index, code) {
	      return new Token(index, exports.TokenType.Character, code, String.fromCharCode(code));
	  }
	  function newIdentifierToken(index, text) {
	      return new Token(index, exports.TokenType.Identifier, 0, text);
	  }
	  function newKeywordToken(index, text) {
	      return new Token(index, exports.TokenType.Keyword, 0, text);
	  }
	  function newOperatorToken(index, text) {
	      return new Token(index, exports.TokenType.Operator, 0, text);
	  }
	  function newStringToken(index, text) {
	      return new Token(index, exports.TokenType.String, 0, text);
	  }
	  function newNumberToken(index, n) {
	      return new Token(index, exports.TokenType.Number, n, '');
	  }
	  function newErrorToken(index, message) {
	      return new Token(index, exports.TokenType.Error, 0, message);
	  }
	  var EOF = new Token(-1, exports.TokenType.Character, 0, '');
	  var _Scanner = (function () {
	      function _Scanner(input) {
	          this.input = input;
	          this.peek = 0;
	          this.index = -1;
	          this.length = input.length;
	          this.advance();
	      }
	      _Scanner.prototype.advance = function () {
	          this.peek = ++this.index >= this.length ? $EOF : this.input.charCodeAt(this.index);
	      };
	      _Scanner.prototype.scanToken = function () {
	          var input = this.input, length = this.length;
	          var peek = this.peek, index = this.index;
	          // Skip whitespace.
	          while (peek <= $SPACE) {
	              if (++index >= length) {
	                  peek = $EOF;
	                  break;
	              }
	              else {
	                  peek = input.charCodeAt(index);
	              }
	          }
	          this.peek = peek;
	          this.index = index;
	          if (index >= length) {
	              return null;
	          }
	          // Handle identifiers and numbers.
	          if (isIdentifierStart(peek))
	              return this.scanIdentifier();
	          if (isDigit(peek))
	              return this.scanNumber(index);
	          var start = index;
	          switch (peek) {
	              case $PERIOD:
	                  this.advance();
	                  return isDigit(this.peek) ? this.scanNumber(start) :
	                      newCharacterToken(start, $PERIOD);
	              case $LPAREN:
	              case $RPAREN:
	              case $LBRACE:
	              case $RBRACE:
	              case $LBRACKET:
	              case $RBRACKET:
	              case $COMMA:
	              case $COLON:
	              case $SEMICOLON:
	                  return this.scanCharacter(start, peek);
	              case $SQ:
	              case $DQ:
	                  return this.scanString();
	              case $HASH:
	              case $PLUS:
	              case $MINUS:
	              case $STAR:
	              case $SLASH:
	              case $PERCENT:
	              case $CARET:
	                  return this.scanOperator(start, String.fromCharCode(peek));
	              case $QUESTION:
	                  return this.scanComplexOperator(start, '?', $PERIOD, '.');
	              case $LT:
	              case $GT:
	                  return this.scanComplexOperator(start, String.fromCharCode(peek), $EQ, '=');
	              case $BANG:
	              case $EQ:
	                  return this.scanComplexOperator(start, String.fromCharCode(peek), $EQ, '=', $EQ, '=');
	              case $AMPERSAND:
	                  return this.scanComplexOperator(start, '&', $AMPERSAND, '&');
	              case $BAR:
	                  return this.scanComplexOperator(start, '|', $BAR, '|');
	              case $NBSP:
	                  while (isWhitespace(this.peek))
	                      this.advance();
	                  return this.scanToken();
	          }
	          this.advance();
	          return this.error("Unexpected character [" + String.fromCharCode(peek) + "]", 0);
	      };
	      _Scanner.prototype.scanCharacter = function (start, code) {
	          this.advance();
	          return newCharacterToken(start, code);
	      };
	      _Scanner.prototype.scanOperator = function (start, str) {
	          this.advance();
	          return newOperatorToken(start, str);
	      };
	      /**
	       * Tokenize a 2/3 char long operator
	       *
	       * @param start start index in the expression
	       * @param one first symbol (always part of the operator)
	       * @param twoCode code point for the second symbol
	       * @param two second symbol (part of the operator when the second code point matches)
	       * @param threeCode code point for the third symbol
	       * @param three third symbol (part of the operator when provided and matches source expression)
	       * @returns {Token}
	       */
	      _Scanner.prototype.scanComplexOperator = function (start, one, twoCode, two, threeCode, three) {
	          this.advance();
	          var str = one;
	          if (this.peek == twoCode) {
	              this.advance();
	              str += two;
	          }
	          if (isPresent(threeCode) && this.peek == threeCode) {
	              this.advance();
	              str += three;
	          }
	          return newOperatorToken(start, str);
	      };
	      _Scanner.prototype.scanIdentifier = function () {
	          var start = this.index;
	          this.advance();
	          while (isIdentifierPart(this.peek))
	              this.advance();
	          var str = this.input.substring(start, this.index);
	          return KEYWORDS.indexOf(str) > -1 ? newKeywordToken(start, str) :
	              newIdentifierToken(start, str);
	      };
	      _Scanner.prototype.scanNumber = function (start) {
	          var simple = (this.index === start);
	          this.advance(); // Skip initial digit.
	          while (true) {
	              if (isDigit(this.peek)) {
	              }
	              else if (this.peek == $PERIOD) {
	                  simple = false;
	              }
	              else if (isExponentStart(this.peek)) {
	                  this.advance();
	                  if (isExponentSign(this.peek))
	                      this.advance();
	                  if (!isDigit(this.peek))
	                      return this.error('Invalid exponent', -1);
	                  simple = false;
	              }
	              else {
	                  break;
	              }
	              this.advance();
	          }
	          var str = this.input.substring(start, this.index);
	          var value = simple ? NumberWrapper.parseIntAutoRadix(str) : parseFloat(str);
	          return newNumberToken(start, value);
	      };
	      _Scanner.prototype.scanString = function () {
	          var start = this.index;
	          var quote = this.peek;
	          this.advance(); // Skip initial quote.
	          var buffer = '';
	          var marker = this.index;
	          var input = this.input;
	          while (this.peek != quote) {
	              if (this.peek == $BACKSLASH) {
	                  buffer += input.substring(marker, this.index);
	                  this.advance();
	                  var unescapedCode = void 0;
	                  if (this.peek == $u) {
	                      // 4 character hex code for unicode character.
	                      var hex = input.substring(this.index + 1, this.index + 5);
	                      if (/^[0-9a-f]+$/i.test(hex)) {
	                          unescapedCode = parseInt(hex, 16);
	                      }
	                      else {
	                          return this.error("Invalid unicode escape [\\u" + hex + "]", 0);
	                      }
	                      for (var i = 0; i < 5; i++) {
	                          this.advance();
	                      }
	                  }
	                  else {
	                      unescapedCode = unescape(this.peek);
	                      this.advance();
	                  }
	                  buffer += String.fromCharCode(unescapedCode);
	                  marker = this.index;
	              }
	              else if (this.peek == $EOF) {
	                  return this.error('Unterminated quote', 0);
	              }
	              else {
	                  this.advance();
	              }
	          }
	          var last = input.substring(marker, this.index);
	          this.advance(); // Skip terminating quote.
	          return newStringToken(start, buffer + last);
	      };
	      _Scanner.prototype.error = function (message, offset) {
	          var position = this.index + offset;
	          return newErrorToken(position, "Lexer Error: " + message + " at column " + position + " in expression [" + this.input + "]");
	      };
	      return _Scanner;
	  }());
	  function isIdentifierStart(code) {
	      return ($a <= code && code <= $z) || ($A <= code && code <= $Z) ||
	          (code == $_) || (code == $$);
	  }
	  function isIdentifier(input) {
	      if (input.length == 0)
	          return false;
	      var scanner = new _Scanner(input);
	      if (!isIdentifierStart(scanner.peek))
	          return false;
	      scanner.advance();
	      while (scanner.peek !== $EOF) {
	          if (!isIdentifierPart(scanner.peek))
	              return false;
	          scanner.advance();
	      }
	      return true;
	  }
	  function isIdentifierPart(code) {
	      return isAsciiLetter(code) || isDigit(code) || (code == $_) ||
	          (code == $$);
	  }
	  function isExponentStart(code) {
	      return code == $e || code == $E;
	  }
	  function isExponentSign(code) {
	      return code == $MINUS || code == $PLUS;
	  }
	  function isQuote(code) {
	      return code === $SQ || code === $DQ || code === $BT;
	  }
	  function unescape(code) {
	      switch (code) {
	          case $n:
	              return $LF;
	          case $f:
	              return $FF;
	          case $r:
	              return $CR;
	          case $t:
	              return $TAB;
	          case $v:
	              return $VTAB;
	          default:
	              return code;
	      }
	  }

	  var SplitInterpolation = (function () {
	      function SplitInterpolation(strings, expressions, offsets) {
	          this.strings = strings;
	          this.expressions = expressions;
	          this.offsets = offsets;
	      }
	      return SplitInterpolation;
	  }());
	  var TemplateBindingParseResult = (function () {
	      function TemplateBindingParseResult(templateBindings, warnings, errors) {
	          this.templateBindings = templateBindings;
	          this.warnings = warnings;
	          this.errors = errors;
	      }
	      return TemplateBindingParseResult;
	  }());
	  function _createInterpolateRegExp(config) {
	      var pattern = escapeRegExp(config.start) + '([\\s\\S]*?)' + escapeRegExp(config.end);
	      return new RegExp(pattern, 'g');
	  }
	  var Parser = (function () {
	      function Parser(_lexer) {
	          this._lexer = _lexer;
	          this.errors = [];
	      }
	      Parser.prototype.parseAction = function (input, location, interpolationConfig) {
	          if (interpolationConfig === void 0) { interpolationConfig = DEFAULT_INTERPOLATION_CONFIG; }
	          this._checkNoInterpolation(input, location, interpolationConfig);
	          var sourceToLex = this._stripComments(input);
	          var tokens = this._lexer.tokenize(this._stripComments(input));
	          var ast = new _ParseAST(input, location, tokens, sourceToLex.length, true, this.errors, input.length - sourceToLex.length)
	              .parseChain();
	          return new ASTWithSource(ast, input, location, this.errors);
	      };
	      Parser.prototype.parseBinding = function (input, location, interpolationConfig) {
	          if (interpolationConfig === void 0) { interpolationConfig = DEFAULT_INTERPOLATION_CONFIG; }
	          var ast = this._parseBindingAst(input, location, interpolationConfig);
	          return new ASTWithSource(ast, input, location, this.errors);
	      };
	      Parser.prototype.parseSimpleBinding = function (input, location, interpolationConfig) {
	          if (interpolationConfig === void 0) { interpolationConfig = DEFAULT_INTERPOLATION_CONFIG; }
	          var ast = this._parseBindingAst(input, location, interpolationConfig);
	          var errors = SimpleExpressionChecker.check(ast);
	          if (errors.length > 0) {
	              this._reportError("Host binding expression cannot contain " + errors.join(' '), input, location);
	          }
	          return new ASTWithSource(ast, input, location, this.errors);
	      };
	      Parser.prototype._reportError = function (message, input, errLocation, ctxLocation) {
	          this.errors.push(new ParserError(message, input, errLocation, ctxLocation));
	      };
	      Parser.prototype._parseBindingAst = function (input, location, interpolationConfig) {
	          // Quotes expressions use 3rd-party expression language. We don't want to use
	          // our lexer or parser for that, so we check for that ahead of time.
	          var quote = this._parseQuote(input, location);
	          if (isPresent(quote)) {
	              return quote;
	          }
	          this._checkNoInterpolation(input, location, interpolationConfig);
	          var sourceToLex = this._stripComments(input);
	          var tokens = this._lexer.tokenize(sourceToLex);
	          return new _ParseAST(input, location, tokens, sourceToLex.length, false, this.errors, input.length - sourceToLex.length)
	              .parseChain();
	      };
	      Parser.prototype._parseQuote = function (input, location) {
	          if (isBlank(input))
	              return null;
	          var prefixSeparatorIndex = input.indexOf(':');
	          if (prefixSeparatorIndex == -1)
	              return null;
	          var prefix = input.substring(0, prefixSeparatorIndex).trim();
	          if (!isIdentifier(prefix))
	              return null;
	          var uninterpretedExpression = input.substring(prefixSeparatorIndex + 1);
	          return new Quote(new ParseSpan(0, input.length), prefix, uninterpretedExpression, location);
	      };
	      Parser.prototype.parseTemplateBindings = function (prefixToken, input, location) {
	          var tokens = this._lexer.tokenize(input);
	          if (prefixToken) {
	              // Prefix the tokens with the tokens from prefixToken but have them take no space (0 index).
	              var prefixTokens = this._lexer.tokenize(prefixToken).map(function (t) {
	                  t.index = 0;
	                  return t;
	              });
	              tokens.unshift.apply(tokens, prefixTokens);
	          }
	          return new _ParseAST(input, location, tokens, input.length, false, this.errors, 0)
	              .parseTemplateBindings();
	      };
	      Parser.prototype.parseInterpolation = function (input, location, interpolationConfig) {
	          if (interpolationConfig === void 0) { interpolationConfig = DEFAULT_INTERPOLATION_CONFIG; }
	          var split = this.splitInterpolation(input, location, interpolationConfig);
	          if (split == null)
	              return null;
	          var expressions = [];
	          for (var i = 0; i < split.expressions.length; ++i) {
	              var expressionText = split.expressions[i];
	              var sourceToLex = this._stripComments(expressionText);
	              var tokens = this._lexer.tokenize(this._stripComments(split.expressions[i]));
	              var ast = new _ParseAST(input, location, tokens, sourceToLex.length, false, this.errors, split.offsets[i] + (expressionText.length - sourceToLex.length))
	                  .parseChain();
	              expressions.push(ast);
	          }
	          return new ASTWithSource(new Interpolation(new ParseSpan(0, isBlank(input) ? 0 : input.length), split.strings, expressions), input, location, this.errors);
	      };
	      Parser.prototype.splitInterpolation = function (input, location, interpolationConfig) {
	          if (interpolationConfig === void 0) { interpolationConfig = DEFAULT_INTERPOLATION_CONFIG; }
	          var regexp = _createInterpolateRegExp(interpolationConfig);
	          var parts = input.split(regexp);
	          if (parts.length <= 1) {
	              return null;
	          }
	          var strings = [];
	          var expressions = [];
	          var offsets = [];
	          var offset = 0;
	          for (var i = 0; i < parts.length; i++) {
	              var part = parts[i];
	              if (i % 2 === 0) {
	                  // fixed string
	                  strings.push(part);
	                  offset += part.length;
	              }
	              else if (part.trim().length > 0) {
	                  offset += interpolationConfig.start.length;
	                  expressions.push(part);
	                  offsets.push(offset);
	                  offset += part.length + interpolationConfig.end.length;
	              }
	              else {
	                  this._reportError('Blank expressions are not allowed in interpolated strings', input, "at column " + this._findInterpolationErrorColumn(parts, i, interpolationConfig) + " in", location);
	                  expressions.push('$implict');
	                  offsets.push(offset);
	              }
	          }
	          return new SplitInterpolation(strings, expressions, offsets);
	      };
	      Parser.prototype.wrapLiteralPrimitive = function (input, location) {
	          return new ASTWithSource(new LiteralPrimitive(new ParseSpan(0, isBlank(input) ? 0 : input.length), input), input, location, this.errors);
	      };
	      Parser.prototype._stripComments = function (input) {
	          var i = this._commentStart(input);
	          return isPresent(i) ? input.substring(0, i).trim() : input;
	      };
	      Parser.prototype._commentStart = function (input) {
	          var outerQuote = null;
	          for (var i = 0; i < input.length - 1; i++) {
	              var char = input.charCodeAt(i);
	              var nextChar = input.charCodeAt(i + 1);
	              if (char === $SLASH && nextChar == $SLASH && isBlank(outerQuote))
	                  return i;
	              if (outerQuote === char) {
	                  outerQuote = null;
	              }
	              else if (isBlank(outerQuote) && isQuote(char)) {
	                  outerQuote = char;
	              }
	          }
	          return null;
	      };
	      Parser.prototype._checkNoInterpolation = function (input, location, interpolationConfig) {
	          var regexp = _createInterpolateRegExp(interpolationConfig);
	          var parts = input.split(regexp);
	          if (parts.length > 1) {
	              this._reportError("Got interpolation (" + interpolationConfig.start + interpolationConfig.end + ") where expression was expected", input, "at column " + this._findInterpolationErrorColumn(parts, 1, interpolationConfig) + " in", location);
	          }
	      };
	      Parser.prototype._findInterpolationErrorColumn = function (parts, partInErrIdx, interpolationConfig) {
	          var errLocation = '';
	          for (var j = 0; j < partInErrIdx; j++) {
	              errLocation += j % 2 === 0 ?
	                  parts[j] :
	                  "" + interpolationConfig.start + parts[j] + interpolationConfig.end;
	          }
	          return errLocation.length;
	      };
	      Parser.decorators = [
	          { type: _angular_core.Injectable },
	      ];
	      /** @nocollapse */
	      Parser.ctorParameters = [
	          { type: Lexer, },
	      ];
	      return Parser;
	  }());
	  var _ParseAST = (function () {
	      function _ParseAST(input, location, tokens, inputLength, parseAction, errors, offset) {
	          this.input = input;
	          this.location = location;
	          this.tokens = tokens;
	          this.inputLength = inputLength;
	          this.parseAction = parseAction;
	          this.errors = errors;
	          this.offset = offset;
	          this.rparensExpected = 0;
	          this.rbracketsExpected = 0;
	          this.rbracesExpected = 0;
	          this.index = 0;
	      }
	      _ParseAST.prototype.peek = function (offset) {
	          var i = this.index + offset;
	          return i < this.tokens.length ? this.tokens[i] : EOF;
	      };
	      Object.defineProperty(_ParseAST.prototype, "next", {
	          get: function () { return this.peek(0); },
	          enumerable: true,
	          configurable: true
	      });
	      Object.defineProperty(_ParseAST.prototype, "inputIndex", {
	          get: function () {
	              return (this.index < this.tokens.length) ? this.next.index + this.offset :
	                  this.inputLength + this.offset;
	          },
	          enumerable: true,
	          configurable: true
	      });
	      _ParseAST.prototype.span = function (start) { return new ParseSpan(start, this.inputIndex); };
	      _ParseAST.prototype.advance = function () { this.index++; };
	      _ParseAST.prototype.optionalCharacter = function (code) {
	          if (this.next.isCharacter(code)) {
	              this.advance();
	              return true;
	          }
	          else {
	              return false;
	          }
	      };
	      _ParseAST.prototype.peekKeywordLet = function () { return this.next.isKeywordLet(); };
	      _ParseAST.prototype.expectCharacter = function (code) {
	          if (this.optionalCharacter(code))
	              return;
	          this.error("Missing expected " + String.fromCharCode(code));
	      };
	      _ParseAST.prototype.optionalOperator = function (op) {
	          if (this.next.isOperator(op)) {
	              this.advance();
	              return true;
	          }
	          else {
	              return false;
	          }
	      };
	      _ParseAST.prototype.expectOperator = function (operator) {
	          if (this.optionalOperator(operator))
	              return;
	          this.error("Missing expected operator " + operator);
	      };
	      _ParseAST.prototype.expectIdentifierOrKeyword = function () {
	          var n = this.next;
	          if (!n.isIdentifier() && !n.isKeyword()) {
	              this.error("Unexpected token " + n + ", expected identifier or keyword");
	              return '';
	          }
	          this.advance();
	          return n.toString();
	      };
	      _ParseAST.prototype.expectIdentifierOrKeywordOrString = function () {
	          var n = this.next;
	          if (!n.isIdentifier() && !n.isKeyword() && !n.isString()) {
	              this.error("Unexpected token " + n + ", expected identifier, keyword, or string");
	              return '';
	          }
	          this.advance();
	          return n.toString();
	      };
	      _ParseAST.prototype.parseChain = function () {
	          var exprs = [];
	          var start = this.inputIndex;
	          while (this.index < this.tokens.length) {
	              var expr = this.parsePipe();
	              exprs.push(expr);
	              if (this.optionalCharacter($SEMICOLON)) {
	                  if (!this.parseAction) {
	                      this.error('Binding expression cannot contain chained expression');
	                  }
	                  while (this.optionalCharacter($SEMICOLON)) {
	                  } // read all semicolons
	              }
	              else if (this.index < this.tokens.length) {
	                  this.error("Unexpected token '" + this.next + "'");
	              }
	          }
	          if (exprs.length == 0)
	              return new EmptyExpr(this.span(start));
	          if (exprs.length == 1)
	              return exprs[0];
	          return new Chain(this.span(start), exprs);
	      };
	      _ParseAST.prototype.parsePipe = function () {
	          var result = this.parseExpression();
	          if (this.optionalOperator('|')) {
	              if (this.parseAction) {
	                  this.error('Cannot have a pipe in an action expression');
	              }
	              do {
	                  var name_1 = this.expectIdentifierOrKeyword();
	                  var args = [];
	                  while (this.optionalCharacter($COLON)) {
	                      args.push(this.parseExpression());
	                  }
	                  result = new BindingPipe(this.span(result.span.start - this.offset), result, name_1, args);
	              } while (this.optionalOperator('|'));
	          }
	          return result;
	      };
	      _ParseAST.prototype.parseExpression = function () { return this.parseConditional(); };
	      _ParseAST.prototype.parseConditional = function () {
	          var start = this.inputIndex;
	          var result = this.parseLogicalOr();
	          if (this.optionalOperator('?')) {
	              var yes = this.parsePipe();
	              var no = void 0;
	              if (!this.optionalCharacter($COLON)) {
	                  var end = this.inputIndex;
	                  var expression = this.input.substring(start, end);
	                  this.error("Conditional expression " + expression + " requires all 3 expressions");
	                  no = new EmptyExpr(this.span(start));
	              }
	              else {
	                  no = this.parsePipe();
	              }
	              return new Conditional(this.span(start), result, yes, no);
	          }
	          else {
	              return result;
	          }
	      };
	      _ParseAST.prototype.parseLogicalOr = function () {
	          // '||'
	          var result = this.parseLogicalAnd();
	          while (this.optionalOperator('||')) {
	              var right = this.parseLogicalAnd();
	              result = new Binary(this.span(result.span.start), '||', result, right);
	          }
	          return result;
	      };
	      _ParseAST.prototype.parseLogicalAnd = function () {
	          // '&&'
	          var result = this.parseEquality();
	          while (this.optionalOperator('&&')) {
	              var right = this.parseEquality();
	              result = new Binary(this.span(result.span.start), '&&', result, right);
	          }
	          return result;
	      };
	      _ParseAST.prototype.parseEquality = function () {
	          // '==','!=','===','!=='
	          var result = this.parseRelational();
	          while (this.next.type == exports.TokenType.Operator) {
	              var operator = this.next.strValue;
	              switch (operator) {
	                  case '==':
	                  case '===':
	                  case '!=':
	                  case '!==':
	                      this.advance();
	                      var right = this.parseRelational();
	                      result = new Binary(this.span(result.span.start), operator, result, right);
	                      continue;
	              }
	              break;
	          }
	          return result;
	      };
	      _ParseAST.prototype.parseRelational = function () {
	          // '<', '>', '<=', '>='
	          var result = this.parseAdditive();
	          while (this.next.type == exports.TokenType.Operator) {
	              var operator = this.next.strValue;
	              switch (operator) {
	                  case '<':
	                  case '>':
	                  case '<=':
	                  case '>=':
	                      this.advance();
	                      var right = this.parseAdditive();
	                      result = new Binary(this.span(result.span.start), operator, result, right);
	                      continue;
	              }
	              break;
	          }
	          return result;
	      };
	      _ParseAST.prototype.parseAdditive = function () {
	          // '+', '-'
	          var result = this.parseMultiplicative();
	          while (this.next.type == exports.TokenType.Operator) {
	              var operator = this.next.strValue;
	              switch (operator) {
	                  case '+':
	                  case '-':
	                      this.advance();
	                      var right = this.parseMultiplicative();
	                      result = new Binary(this.span(result.span.start), operator, result, right);
	                      continue;
	              }
	              break;
	          }
	          return result;
	      };
	      _ParseAST.prototype.parseMultiplicative = function () {
	          // '*', '%', '/'
	          var result = this.parsePrefix();
	          while (this.next.type == exports.TokenType.Operator) {
	              var operator = this.next.strValue;
	              switch (operator) {
	                  case '*':
	                  case '%':
	                  case '/':
	                      this.advance();
	                      var right = this.parsePrefix();
	                      result = new Binary(this.span(result.span.start), operator, result, right);
	                      continue;
	              }
	              break;
	          }
	          return result;
	      };
	      _ParseAST.prototype.parsePrefix = function () {
	          if (this.next.type == exports.TokenType.Operator) {
	              var start = this.inputIndex;
	              var operator = this.next.strValue;
	              var result = void 0;
	              switch (operator) {
	                  case '+':
	                      this.advance();
	                      return this.parsePrefix();
	                  case '-':
	                      this.advance();
	                      result = this.parsePrefix();
	                      return new Binary(this.span(start), operator, new LiteralPrimitive(new ParseSpan(start, start), 0), result);
	                  case '!':
	                      this.advance();
	                      result = this.parsePrefix();
	                      return new PrefixNot(this.span(start), result);
	              }
	          }
	          return this.parseCallChain();
	      };
	      _ParseAST.prototype.parseCallChain = function () {
	          var result = this.parsePrimary();
	          while (true) {
	              if (this.optionalCharacter($PERIOD)) {
	                  result = this.parseAccessMemberOrMethodCall(result, false);
	              }
	              else if (this.optionalOperator('?.')) {
	                  result = this.parseAccessMemberOrMethodCall(result, true);
	              }
	              else if (this.optionalCharacter($LBRACKET)) {
	                  this.rbracketsExpected++;
	                  var key = this.parsePipe();
	                  this.rbracketsExpected--;
	                  this.expectCharacter($RBRACKET);
	                  if (this.optionalOperator('=')) {
	                      var value = this.parseConditional();
	                      result = new KeyedWrite(this.span(result.span.start), result, key, value);
	                  }
	                  else {
	                      result = new KeyedRead(this.span(result.span.start), result, key);
	                  }
	              }
	              else if (this.optionalCharacter($LPAREN)) {
	                  this.rparensExpected++;
	                  var args = this.parseCallArguments();
	                  this.rparensExpected--;
	                  this.expectCharacter($RPAREN);
	                  result = new FunctionCall(this.span(result.span.start), result, args);
	              }
	              else {
	                  return result;
	              }
	          }
	      };
	      _ParseAST.prototype.parsePrimary = function () {
	          var start = this.inputIndex;
	          if (this.optionalCharacter($LPAREN)) {
	              this.rparensExpected++;
	              var result = this.parsePipe();
	              this.rparensExpected--;
	              this.expectCharacter($RPAREN);
	              return result;
	          }
	          else if (this.next.isKeywordNull()) {
	              this.advance();
	              return new LiteralPrimitive(this.span(start), null);
	          }
	          else if (this.next.isKeywordUndefined()) {
	              this.advance();
	              return new LiteralPrimitive(this.span(start), void 0);
	          }
	          else if (this.next.isKeywordTrue()) {
	              this.advance();
	              return new LiteralPrimitive(this.span(start), true);
	          }
	          else if (this.next.isKeywordFalse()) {
	              this.advance();
	              return new LiteralPrimitive(this.span(start), false);
	          }
	          else if (this.next.isKeywordThis()) {
	              this.advance();
	              return new ImplicitReceiver(this.span(start));
	          }
	          else if (this.optionalCharacter($LBRACKET)) {
	              this.rbracketsExpected++;
	              var elements = this.parseExpressionList($RBRACKET);
	              this.rbracketsExpected--;
	              this.expectCharacter($RBRACKET);
	              return new LiteralArray(this.span(start), elements);
	          }
	          else if (this.next.isCharacter($LBRACE)) {
	              return this.parseLiteralMap();
	          }
	          else if (this.next.isIdentifier()) {
	              return this.parseAccessMemberOrMethodCall(new ImplicitReceiver(this.span(start)), false);
	          }
	          else if (this.next.isNumber()) {
	              var value = this.next.toNumber();
	              this.advance();
	              return new LiteralPrimitive(this.span(start), value);
	          }
	          else if (this.next.isString()) {
	              var literalValue = this.next.toString();
	              this.advance();
	              return new LiteralPrimitive(this.span(start), literalValue);
	          }
	          else if (this.index >= this.tokens.length) {
	              this.error("Unexpected end of expression: " + this.input);
	              return new EmptyExpr(this.span(start));
	          }
	          else {
	              this.error("Unexpected token " + this.next);
	              return new EmptyExpr(this.span(start));
	          }
	      };
	      _ParseAST.prototype.parseExpressionList = function (terminator) {
	          var result = [];
	          if (!this.next.isCharacter(terminator)) {
	              do {
	                  result.push(this.parsePipe());
	              } while (this.optionalCharacter($COMMA));
	          }
	          return result;
	      };
	      _ParseAST.prototype.parseLiteralMap = function () {
	          var keys = [];
	          var values = [];
	          var start = this.inputIndex;
	          this.expectCharacter($LBRACE);
	          if (!this.optionalCharacter($RBRACE)) {
	              this.rbracesExpected++;
	              do {
	                  var key = this.expectIdentifierOrKeywordOrString();
	                  keys.push(key);
	                  this.expectCharacter($COLON);
	                  values.push(this.parsePipe());
	              } while (this.optionalCharacter($COMMA));
	              this.rbracesExpected--;
	              this.expectCharacter($RBRACE);
	          }
	          return new LiteralMap(this.span(start), keys, values);
	      };
	      _ParseAST.prototype.parseAccessMemberOrMethodCall = function (receiver, isSafe) {
	          if (isSafe === void 0) { isSafe = false; }
	          var start = receiver.span.start;
	          var id = this.expectIdentifierOrKeyword();
	          if (this.optionalCharacter($LPAREN)) {
	              this.rparensExpected++;
	              var args = this.parseCallArguments();
	              this.expectCharacter($RPAREN);
	              this.rparensExpected--;
	              var span = this.span(start);
	              return isSafe ? new SafeMethodCall(span, receiver, id, args) :
	                  new MethodCall(span, receiver, id, args);
	          }
	          else {
	              if (isSafe) {
	                  if (this.optionalOperator('=')) {
	                      this.error('The \'?.\' operator cannot be used in the assignment');
	                      return new EmptyExpr(this.span(start));
	                  }
	                  else {
	                      return new SafePropertyRead(this.span(start), receiver, id);
	                  }
	              }
	              else {
	                  if (this.optionalOperator('=')) {
	                      if (!this.parseAction) {
	                          this.error('Bindings cannot contain assignments');
	                          return new EmptyExpr(this.span(start));
	                      }
	                      var value = this.parseConditional();
	                      return new PropertyWrite(this.span(start), receiver, id, value);
	                  }
	                  else {
	                      return new PropertyRead(this.span(start), receiver, id);
	                  }
	              }
	          }
	      };
	      _ParseAST.prototype.parseCallArguments = function () {
	          if (this.next.isCharacter($RPAREN))
	              return [];
	          var positionals = [];
	          do {
	              positionals.push(this.parsePipe());
	          } while (this.optionalCharacter($COMMA));
	          return positionals;
	      };
	      /**
	       * An identifier, a keyword, a string with an optional `-` inbetween.
	       */
	      _ParseAST.prototype.expectTemplateBindingKey = function () {
	          var result = '';
	          var operatorFound = false;
	          do {
	              result += this.expectIdentifierOrKeywordOrString();
	              operatorFound = this.optionalOperator('-');
	              if (operatorFound) {
	                  result += '-';
	              }
	          } while (operatorFound);
	          return result.toString();
	      };
	      _ParseAST.prototype.parseTemplateBindings = function () {
	          var bindings = [];
	          var prefix = null;
	          var warnings = [];
	          while (this.index < this.tokens.length) {
	              var start = this.inputIndex;
	              var keyIsVar = this.peekKeywordLet();
	              if (keyIsVar) {
	                  this.advance();
	              }
	              var key = this.expectTemplateBindingKey();
	              if (!keyIsVar) {
	                  if (prefix == null) {
	                      prefix = key;
	                  }
	                  else {
	                      key = prefix + key[0].toUpperCase() + key.substring(1);
	                  }
	              }
	              this.optionalCharacter($COLON);
	              var name_2 = null;
	              var expression = null;
	              if (keyIsVar) {
	                  if (this.optionalOperator('=')) {
	                      name_2 = this.expectTemplateBindingKey();
	                  }
	                  else {
	                      name_2 = '\$implicit';
	                  }
	              }
	              else if (this.next !== EOF && !this.peekKeywordLet()) {
	                  var start_1 = this.inputIndex;
	                  var ast = this.parsePipe();
	                  var source = this.input.substring(start_1 - this.offset, this.inputIndex - this.offset);
	                  expression = new ASTWithSource(ast, source, this.location, this.errors);
	              }
	              bindings.push(new TemplateBinding(this.span(start), key, keyIsVar, name_2, expression));
	              if (!this.optionalCharacter($SEMICOLON)) {
	                  this.optionalCharacter($COMMA);
	              }
	          }
	          return new TemplateBindingParseResult(bindings, warnings, this.errors);
	      };
	      _ParseAST.prototype.error = function (message, index) {
	          if (index === void 0) { index = null; }
	          this.errors.push(new ParserError(message, this.input, this.locationText(index), this.location));
	          this.skip();
	      };
	      _ParseAST.prototype.locationText = function (index) {
	          if (index === void 0) { index = null; }
	          if (isBlank(index))
	              index = this.index;
	          return (index < this.tokens.length) ? "at column " + (this.tokens[index].index + 1) + " in" :
	              "at the end of the expression";
	      };
	      // Error recovery should skip tokens until it encounters a recovery point. skip() treats
	      // the end of input and a ';' as unconditionally a recovery point. It also treats ')',
	      // '}' and ']' as conditional recovery points if one of calling productions is expecting
	      // one of these symbols. This allows skip() to recover from errors such as '(a.) + 1' allowing
	      // more of the AST to be retained (it doesn't skip any tokens as the ')' is retained because
	      // of the '(' begins an '(' <expr> ')' production). The recovery points of grouping symbols
	      // must be conditional as they must be skipped if none of the calling productions are not
	      // expecting the closing token else we will never make progress in the case of an
	      // extraneous group closing symbol (such as a stray ')'). This is not the case for ';' because
	      // parseChain() is always the root production and it expects a ';'.
	      // If a production expects one of these token it increments the corresponding nesting count,
	      // and then decrements it just prior to checking if the token is in the input.
	      _ParseAST.prototype.skip = function () {
	          var n = this.next;
	          while (this.index < this.tokens.length && !n.isCharacter($SEMICOLON) &&
	              (this.rparensExpected <= 0 || !n.isCharacter($RPAREN)) &&
	              (this.rbracesExpected <= 0 || !n.isCharacter($RBRACE)) &&
	              (this.rbracketsExpected <= 0 || !n.isCharacter($RBRACKET))) {
	              if (this.next.isError()) {
	                  this.errors.push(new ParserError(this.next.toString(), this.input, this.locationText(), this.location));
	              }
	              this.advance();
	              n = this.next;
	          }
	      };
	      return _ParseAST;
	  }());
	  var SimpleExpressionChecker = (function () {
	      function SimpleExpressionChecker() {
	          this.errors = [];
	      }
	      SimpleExpressionChecker.check = function (ast) {
	          var s = new SimpleExpressionChecker();
	          ast.visit(s);
	          return s.errors;
	      };
	      SimpleExpressionChecker.prototype.visitImplicitReceiver = function (ast, context) { };
	      SimpleExpressionChecker.prototype.visitInterpolation = function (ast, context) { };
	      SimpleExpressionChecker.prototype.visitLiteralPrimitive = function (ast, context) { };
	      SimpleExpressionChecker.prototype.visitPropertyRead = function (ast, context) { };
	      SimpleExpressionChecker.prototype.visitPropertyWrite = function (ast, context) { };
	      SimpleExpressionChecker.prototype.visitSafePropertyRead = function (ast, context) { };
	      SimpleExpressionChecker.prototype.visitMethodCall = function (ast, context) { };
	      SimpleExpressionChecker.prototype.visitSafeMethodCall = function (ast, context) { };
	      SimpleExpressionChecker.prototype.visitFunctionCall = function (ast, context) { };
	      SimpleExpressionChecker.prototype.visitLiteralArray = function (ast, context) { this.visitAll(ast.expressions); };
	      SimpleExpressionChecker.prototype.visitLiteralMap = function (ast, context) { this.visitAll(ast.values); };
	      SimpleExpressionChecker.prototype.visitBinary = function (ast, context) { };
	      SimpleExpressionChecker.prototype.visitPrefixNot = function (ast, context) { };
	      SimpleExpressionChecker.prototype.visitConditional = function (ast, context) { };
	      SimpleExpressionChecker.prototype.visitPipe = function (ast, context) { this.errors.push('pipes'); };
	      SimpleExpressionChecker.prototype.visitKeyedRead = function (ast, context) { };
	      SimpleExpressionChecker.prototype.visitKeyedWrite = function (ast, context) { };
	      SimpleExpressionChecker.prototype.visitAll = function (asts) {
	          var _this = this;
	          return asts.map(function (node) { return node.visit(_this); });
	      };
	      SimpleExpressionChecker.prototype.visitChain = function (ast, context) { };
	      SimpleExpressionChecker.prototype.visitQuote = function (ast, context) { };
	      return SimpleExpressionChecker;
	  }());

	  var ParseLocation = (function () {
	      function ParseLocation(file, offset, line, col) {
	          this.file = file;
	          this.offset = offset;
	          this.line = line;
	          this.col = col;
	      }
	      ParseLocation.prototype.toString = function () {
	          return isPresent(this.offset) ? this.file.url + "@" + this.line + ":" + this.col : this.file.url;
	      };
	      return ParseLocation;
	  }());
	  var ParseSourceFile = (function () {
	      function ParseSourceFile(content, url) {
	          this.content = content;
	          this.url = url;
	      }
	      return ParseSourceFile;
	  }());
	  var ParseSourceSpan = (function () {
	      function ParseSourceSpan(start, end, details) {
	          if (details === void 0) { details = null; }
	          this.start = start;
	          this.end = end;
	          this.details = details;
	      }
	      ParseSourceSpan.prototype.toString = function () {
	          return this.start.file.content.substring(this.start.offset, this.end.offset);
	      };
	      return ParseSourceSpan;
	  }());
	  exports.ParseErrorLevel;
	  (function (ParseErrorLevel) {
	      ParseErrorLevel[ParseErrorLevel["WARNING"] = 0] = "WARNING";
	      ParseErrorLevel[ParseErrorLevel["FATAL"] = 1] = "FATAL";
	  })(exports.ParseErrorLevel || (exports.ParseErrorLevel = {}));
	  var ParseError = (function () {
	      function ParseError(span, msg, level) {
	          if (level === void 0) { level = exports.ParseErrorLevel.FATAL; }
	          this.span = span;
	          this.msg = msg;
	          this.level = level;
	      }
	      ParseError.prototype.toString = function () {
	          var source = this.span.start.file.content;
	          var ctxStart = this.span.start.offset;
	          var contextStr = '';
	          var details = '';
	          if (isPresent(ctxStart)) {
	              if (ctxStart > source.length - 1) {
	                  ctxStart = source.length - 1;
	              }
	              var ctxEnd = ctxStart;
	              var ctxLen = 0;
	              var ctxLines = 0;
	              while (ctxLen < 100 && ctxStart > 0) {
	                  ctxStart--;
	                  ctxLen++;
	                  if (source[ctxStart] == '\n') {
	                      if (++ctxLines == 3) {
	                          break;
	                      }
	                  }
	              }
	              ctxLen = 0;
	              ctxLines = 0;
	              while (ctxLen < 100 && ctxEnd < source.length - 1) {
	                  ctxEnd++;
	                  ctxLen++;
	                  if (source[ctxEnd] == '\n') {
	                      if (++ctxLines == 3) {
	                          break;
	                      }
	                  }
	              }
	              var context = source.substring(ctxStart, this.span.start.offset) + '[ERROR ->]' +
	                  source.substring(this.span.start.offset, ctxEnd + 1);
	              contextStr = " (\"" + context + "\")";
	          }
	          if (this.span.details) {
	              details = ", " + this.span.details;
	          }
	          return "" + this.msg + contextStr + ": " + this.span.start + details;
	      };
	      return ParseError;
	  }());

	  /**
	   * @license
	   * Copyright Google Inc. All Rights Reserved.
	   *
	   * Use of this source code is governed by an MIT-style license that can be
	   * found in the LICENSE file at https://angular.io/license
	   */
	  var Text = (function () {
	      function Text(value, sourceSpan) {
	          this.value = value;
	          this.sourceSpan = sourceSpan;
	      }
	      Text.prototype.visit = function (visitor, context) { return visitor.visitText(this, context); };
	      return Text;
	  }());
	  var Expansion = (function () {
	      function Expansion(switchValue, type, cases, sourceSpan, switchValueSourceSpan) {
	          this.switchValue = switchValue;
	          this.type = type;
	          this.cases = cases;
	          this.sourceSpan = sourceSpan;
	          this.switchValueSourceSpan = switchValueSourceSpan;
	      }
	      Expansion.prototype.visit = function (visitor, context) { return visitor.visitExpansion(this, context); };
	      return Expansion;
	  }());
	  var ExpansionCase = (function () {
	      function ExpansionCase(value, expression, sourceSpan, valueSourceSpan, expSourceSpan) {
	          this.value = value;
	          this.expression = expression;
	          this.sourceSpan = sourceSpan;
	          this.valueSourceSpan = valueSourceSpan;
	          this.expSourceSpan = expSourceSpan;
	      }
	      ExpansionCase.prototype.visit = function (visitor, context) { return visitor.visitExpansionCase(this, context); };
	      return ExpansionCase;
	  }());
	  var Attribute$1 = (function () {
	      function Attribute(name, value, sourceSpan, valueSpan) {
	          this.name = name;
	          this.value = value;
	          this.sourceSpan = sourceSpan;
	          this.valueSpan = valueSpan;
	      }
	      Attribute.prototype.visit = function (visitor, context) { return visitor.visitAttribute(this, context); };
	      return Attribute;
	  }());
	  var Element = (function () {
	      function Element(name, attrs, children, sourceSpan, startSourceSpan, endSourceSpan) {
	          this.name = name;
	          this.attrs = attrs;
	          this.children = children;
	          this.sourceSpan = sourceSpan;
	          this.startSourceSpan = startSourceSpan;
	          this.endSourceSpan = endSourceSpan;
	      }
	      Element.prototype.visit = function (visitor, context) { return visitor.visitElement(this, context); };
	      return Element;
	  }());
	  var Comment = (function () {
	      function Comment(value, sourceSpan) {
	          this.value = value;
	          this.sourceSpan = sourceSpan;
	      }
	      Comment.prototype.visit = function (visitor, context) { return visitor.visitComment(this, context); };
	      return Comment;
	  }());
	  function visitAll(visitor, nodes, context) {
	      if (context === void 0) { context = null; }
	      var result = [];
	      var visit = visitor.visit ?
	          function (ast) { return visitor.visit(ast, context) || ast.visit(visitor, context); } :
	          function (ast) { return ast.visit(visitor, context); };
	      nodes.forEach(function (ast) {
	          var astResult = visit(ast);
	          if (astResult) {
	              result.push(astResult);
	          }
	      });
	      return result;
	  }

	  /**
	   * @license
	   * Copyright Google Inc. All Rights Reserved.
	   *
	   * Use of this source code is governed by an MIT-style license that can be
	   * found in the LICENSE file at https://angular.io/license
	   */
	  var TagContentType;
	  (function (TagContentType) {
	      TagContentType[TagContentType["RAW_TEXT"] = 0] = "RAW_TEXT";
	      TagContentType[TagContentType["ESCAPABLE_RAW_TEXT"] = 1] = "ESCAPABLE_RAW_TEXT";
	      TagContentType[TagContentType["PARSABLE_DATA"] = 2] = "PARSABLE_DATA";
	  })(TagContentType || (TagContentType = {}));
	  function splitNsName(elementName) {
	      if (elementName[0] != ':') {
	          return [null, elementName];
	      }
	      var colonIndex = elementName.indexOf(':', 1);
	      if (colonIndex == -1) {
	          throw new Error("Unsupported format \"" + elementName + "\" expecting \":namespace:name\"");
	      }
	      return [elementName.slice(1, colonIndex), elementName.slice(colonIndex + 1)];
	  }
	  function getNsPrefix(fullName) {
	      return fullName === null ? null : splitNsName(fullName)[0];
	  }
	  function mergeNsAndName(prefix, localName) {
	      return prefix ? ":" + prefix + ":" + localName : localName;
	  }
	  // see http://www.w3.org/TR/html51/syntax.html#named-character-references
	  // see https://html.spec.whatwg.org/multipage/entities.json
	  // This list is not exhaustive to keep the compiler footprint low.
	  // The `&#123;` / `&#x1ab;` syntax should be used when the named character reference does not exist.
	  var NAMED_ENTITIES = {
	      'Aacute': '\u00C1',
	      'aacute': '\u00E1',
	      'Acirc': '\u00C2',
	      'acirc': '\u00E2',
	      'acute': '\u00B4',
	      'AElig': '\u00C6',
	      'aelig': '\u00E6',
	      'Agrave': '\u00C0',
	      'agrave': '\u00E0',
	      'alefsym': '\u2135',
	      'Alpha': '\u0391',
	      'alpha': '\u03B1',
	      'amp': '&',
	      'and': '\u2227',
	      'ang': '\u2220',
	      'apos': '\u0027',
	      'Aring': '\u00C5',
	      'aring': '\u00E5',
	      'asymp': '\u2248',
	      'Atilde': '\u00C3',
	      'atilde': '\u00E3',
	      'Auml': '\u00C4',
	      'auml': '\u00E4',
	      'bdquo': '\u201E',
	      'Beta': '\u0392',
	      'beta': '\u03B2',
	      'brvbar': '\u00A6',
	      'bull': '\u2022',
	      'cap': '\u2229',
	      'Ccedil': '\u00C7',
	      'ccedil': '\u00E7',
	      'cedil': '\u00B8',
	      'cent': '\u00A2',
	      'Chi': '\u03A7',
	      'chi': '\u03C7',
	      'circ': '\u02C6',
	      'clubs': '\u2663',
	      'cong': '\u2245',
	      'copy': '\u00A9',
	      'crarr': '\u21B5',
	      'cup': '\u222A',
	      'curren': '\u00A4',
	      'dagger': '\u2020',
	      'Dagger': '\u2021',
	      'darr': '\u2193',
	      'dArr': '\u21D3',
	      'deg': '\u00B0',
	      'Delta': '\u0394',
	      'delta': '\u03B4',
	      'diams': '\u2666',
	      'divide': '\u00F7',
	      'Eacute': '\u00C9',
	      'eacute': '\u00E9',
	      'Ecirc': '\u00CA',
	      'ecirc': '\u00EA',
	      'Egrave': '\u00C8',
	      'egrave': '\u00E8',
	      'empty': '\u2205',
	      'emsp': '\u2003',
	      'ensp': '\u2002',
	      'Epsilon': '\u0395',
	      'epsilon': '\u03B5',
	      'equiv': '\u2261',
	      'Eta': '\u0397',
	      'eta': '\u03B7',
	      'ETH': '\u00D0',
	      'eth': '\u00F0',
	      'Euml': '\u00CB',
	      'euml': '\u00EB',
	      'euro': '\u20AC',
	      'exist': '\u2203',
	      'fnof': '\u0192',
	      'forall': '\u2200',
	      'frac12': '\u00BD',
	      'frac14': '\u00BC',
	      'frac34': '\u00BE',
	      'frasl': '\u2044',
	      'Gamma': '\u0393',
	      'gamma': '\u03B3',
	      'ge': '\u2265',
	      'gt': '>',
	      'harr': '\u2194',
	      'hArr': '\u21D4',
	      'hearts': '\u2665',
	      'hellip': '\u2026',
	      'Iacute': '\u00CD',
	      'iacute': '\u00ED',
	      'Icirc': '\u00CE',
	      'icirc': '\u00EE',
	      'iexcl': '\u00A1',
	      'Igrave': '\u00CC',
	      'igrave': '\u00EC',
	      'image': '\u2111',
	      'infin': '\u221E',
	      'int': '\u222B',
	      'Iota': '\u0399',
	      'iota': '\u03B9',
	      'iquest': '\u00BF',
	      'isin': '\u2208',
	      'Iuml': '\u00CF',
	      'iuml': '\u00EF',
	      'Kappa': '\u039A',
	      'kappa': '\u03BA',
	      'Lambda': '\u039B',
	      'lambda': '\u03BB',
	      'lang': '\u27E8',
	      'laquo': '\u00AB',
	      'larr': '\u2190',
	      'lArr': '\u21D0',
	      'lceil': '\u2308',
	      'ldquo': '\u201C',
	      'le': '\u2264',
	      'lfloor': '\u230A',
	      'lowast': '\u2217',
	      'loz': '\u25CA',
	      'lrm': '\u200E',
	      'lsaquo': '\u2039',
	      'lsquo': '\u2018',
	      'lt': '<',
	      'macr': '\u00AF',
	      'mdash': '\u2014',
	      'micro': '\u00B5',
	      'middot': '\u00B7',
	      'minus': '\u2212',
	      'Mu': '\u039C',
	      'mu': '\u03BC',
	      'nabla': '\u2207',
	      'nbsp': '\u00A0',
	      'ndash': '\u2013',
	      'ne': '\u2260',
	      'ni': '\u220B',
	      'not': '\u00AC',
	      'notin': '\u2209',
	      'nsub': '\u2284',
	      'Ntilde': '\u00D1',
	      'ntilde': '\u00F1',
	      'Nu': '\u039D',
	      'nu': '\u03BD',
	      'Oacute': '\u00D3',
	      'oacute': '\u00F3',
	      'Ocirc': '\u00D4',
	      'ocirc': '\u00F4',
	      'OElig': '\u0152',
	      'oelig': '\u0153',
	      'Ograve': '\u00D2',
	      'ograve': '\u00F2',
	      'oline': '\u203E',
	      'Omega': '\u03A9',
	      'omega': '\u03C9',
	      'Omicron': '\u039F',
	      'omicron': '\u03BF',
	      'oplus': '\u2295',
	      'or': '\u2228',
	      'ordf': '\u00AA',
	      'ordm': '\u00BA',
	      'Oslash': '\u00D8',
	      'oslash': '\u00F8',
	      'Otilde': '\u00D5',
	      'otilde': '\u00F5',
	      'otimes': '\u2297',
	      'Ouml': '\u00D6',
	      'ouml': '\u00F6',
	      'para': '\u00B6',
	      'permil': '\u2030',
	      'perp': '\u22A5',
	      'Phi': '\u03A6',
	      'phi': '\u03C6',
	      'Pi': '\u03A0',
	      'pi': '\u03C0',
	      'piv': '\u03D6',
	      'plusmn': '\u00B1',
	      'pound': '\u00A3',
	      'prime': '\u2032',
	      'Prime': '\u2033',
	      'prod': '\u220F',
	      'prop': '\u221D',
	      'Psi': '\u03A8',
	      'psi': '\u03C8',
	      'quot': '\u0022',
	      'radic': '\u221A',
	      'rang': '\u27E9',
	      'raquo': '\u00BB',
	      'rarr': '\u2192',
	      'rArr': '\u21D2',
	      'rceil': '\u2309',
	      'rdquo': '\u201D',
	      'real': '\u211C',
	      'reg': '\u00AE',
	      'rfloor': '\u230B',
	      'Rho': '\u03A1',
	      'rho': '\u03C1',
	      'rlm': '\u200F',
	      'rsaquo': '\u203A',
	      'rsquo': '\u2019',
	      'sbquo': '\u201A',
	      'Scaron': '\u0160',
	      'scaron': '\u0161',
	      'sdot': '\u22C5',
	      'sect': '\u00A7',
	      'shy': '\u00AD',
	      'Sigma': '\u03A3',
	      'sigma': '\u03C3',
	      'sigmaf': '\u03C2',
	      'sim': '\u223C',
	      'spades': '\u2660',
	      'sub': '\u2282',
	      'sube': '\u2286',
	      'sum': '\u2211',
	      'sup': '\u2283',
	      'sup1': '\u00B9',
	      'sup2': '\u00B2',
	      'sup3': '\u00B3',
	      'supe': '\u2287',
	      'szlig': '\u00DF',
	      'Tau': '\u03A4',
	      'tau': '\u03C4',
	      'there4': '\u2234',
	      'Theta': '\u0398',
	      'theta': '\u03B8',
	      'thetasym': '\u03D1',
	      'thinsp': '\u2009',
	      'THORN': '\u00DE',
	      'thorn': '\u00FE',
	      'tilde': '\u02DC',
	      'times': '\u00D7',
	      'trade': '\u2122',
	      'Uacute': '\u00DA',
	      'uacute': '\u00FA',
	      'uarr': '\u2191',
	      'uArr': '\u21D1',
	      'Ucirc': '\u00DB',
	      'ucirc': '\u00FB',
	      'Ugrave': '\u00D9',
	      'ugrave': '\u00F9',
	      'uml': '\u00A8',
	      'upsih': '\u03D2',
	      'Upsilon': '\u03A5',
	      'upsilon': '\u03C5',
	      'Uuml': '\u00DC',
	      'uuml': '\u00FC',
	      'weierp': '\u2118',
	      'Xi': '\u039E',
	      'xi': '\u03BE',
	      'Yacute': '\u00DD',
	      'yacute': '\u00FD',
	      'yen': '\u00A5',
	      'yuml': '\u00FF',
	      'Yuml': '\u0178',
	      'Zeta': '\u0396',
	      'zeta': '\u03B6',
	      'zwj': '\u200D',
	      'zwnj': '\u200C',
	  };

	  /**
	   * @license
	   * Copyright Google Inc. All Rights Reserved.
	   *
	   * Use of this source code is governed by an MIT-style license that can be
	   * found in the LICENSE file at https://angular.io/license
	   */
	  var __extends$3 = (this && this.__extends) || function (d, b) {
	      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	      function __() { this.constructor = d; }
	      d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	  };
	  var TokenType$1;
	  (function (TokenType) {
	      TokenType[TokenType["TAG_OPEN_START"] = 0] = "TAG_OPEN_START";
	      TokenType[TokenType["TAG_OPEN_END"] = 1] = "TAG_OPEN_END";
	      TokenType[TokenType["TAG_OPEN_END_VOID"] = 2] = "TAG_OPEN_END_VOID";
	      TokenType[TokenType["TAG_CLOSE"] = 3] = "TAG_CLOSE";
	      TokenType[TokenType["TEXT"] = 4] = "TEXT";
	      TokenType[TokenType["ESCAPABLE_RAW_TEXT"] = 5] = "ESCAPABLE_RAW_TEXT";
	      TokenType[TokenType["RAW_TEXT"] = 6] = "RAW_TEXT";
	      TokenType[TokenType["COMMENT_START"] = 7] = "COMMENT_START";
	      TokenType[TokenType["COMMENT_END"] = 8] = "COMMENT_END";
	      TokenType[TokenType["CDATA_START"] = 9] = "CDATA_START";
	      TokenType[TokenType["CDATA_END"] = 10] = "CDATA_END";
	      TokenType[TokenType["ATTR_NAME"] = 11] = "ATTR_NAME";
	      TokenType[TokenType["ATTR_VALUE"] = 12] = "ATTR_VALUE";
	      TokenType[TokenType["DOC_TYPE"] = 13] = "DOC_TYPE";
	      TokenType[TokenType["EXPANSION_FORM_START"] = 14] = "EXPANSION_FORM_START";
	      TokenType[TokenType["EXPANSION_CASE_VALUE"] = 15] = "EXPANSION_CASE_VALUE";
	      TokenType[TokenType["EXPANSION_CASE_EXP_START"] = 16] = "EXPANSION_CASE_EXP_START";
	      TokenType[TokenType["EXPANSION_CASE_EXP_END"] = 17] = "EXPANSION_CASE_EXP_END";
	      TokenType[TokenType["EXPANSION_FORM_END"] = 18] = "EXPANSION_FORM_END";
	      TokenType[TokenType["EOF"] = 19] = "EOF";
	  })(TokenType$1 || (TokenType$1 = {}));
	  var Token$1 = (function () {
	      function Token(type, parts, sourceSpan) {
	          this.type = type;
	          this.parts = parts;
	          this.sourceSpan = sourceSpan;
	      }
	      return Token;
	  }());
	  var TokenError = (function (_super) {
	      __extends$3(TokenError, _super);
	      function TokenError(errorMsg, tokenType, span) {
	          _super.call(this, span, errorMsg);
	          this.tokenType = tokenType;
	      }
	      return TokenError;
	  }(ParseError));
	  var TokenizeResult = (function () {
	      function TokenizeResult(tokens, errors) {
	          this.tokens = tokens;
	          this.errors = errors;
	      }
	      return TokenizeResult;
	  }());
	  function tokenize(source, url, getTagDefinition, tokenizeExpansionForms, interpolationConfig) {
	      if (tokenizeExpansionForms === void 0) { tokenizeExpansionForms = false; }
	      if (interpolationConfig === void 0) { interpolationConfig = DEFAULT_INTERPOLATION_CONFIG; }
	      return new _Tokenizer(new ParseSourceFile(source, url), getTagDefinition, tokenizeExpansionForms, interpolationConfig)
	          .tokenize();
	  }
	  var _CR_OR_CRLF_REGEXP = /\r\n?/g;
	  function _unexpectedCharacterErrorMsg(charCode) {
	      var char = charCode === $EOF ? 'EOF' : String.fromCharCode(charCode);
	      return "Unexpected character \"" + char + "\"";
	  }
	  function _unknownEntityErrorMsg(entitySrc) {
	      return "Unknown entity \"" + entitySrc + "\" - use the \"&#<decimal>;\" or  \"&#x<hex>;\" syntax";
	  }
	  var _ControlFlowError = (function () {
	      function _ControlFlowError(error) {
	          this.error = error;
	      }
	      return _ControlFlowError;
	  }());
	  // See http://www.w3.org/TR/html51/syntax.html#writing
	  var _Tokenizer = (function () {
	      /**
	       * @param _file The html source
	       * @param _getTagDefinition
	       * @param _tokenizeIcu Whether to tokenize ICU messages (considered as text nodes when false)
	       * @param _interpolationConfig
	       */
	      function _Tokenizer(_file, _getTagDefinition, _tokenizeIcu, _interpolationConfig) {
	          if (_interpolationConfig === void 0) { _interpolationConfig = DEFAULT_INTERPOLATION_CONFIG; }
	          this._file = _file;
	          this._getTagDefinition = _getTagDefinition;
	          this._tokenizeIcu = _tokenizeIcu;
	          this._interpolationConfig = _interpolationConfig;
	          // Note: this is always lowercase!
	          this._peek = -1;
	          this._nextPeek = -1;
	          this._index = -1;
	          this._line = 0;
	          this._column = -1;
	          this._expansionCaseStack = [];
	          this._inInterpolation = false;
	          this.tokens = [];
	          this.errors = [];
	          this._input = _file.content;
	          this._length = _file.content.length;
	          this._advance();
	      }
	      _Tokenizer.prototype._processCarriageReturns = function (content) {
	          // http://www.w3.org/TR/html5/syntax.html#preprocessing-the-input-stream
	          // In order to keep the original position in the source, we can not
	          // pre-process it.
	          // Instead CRs are processed right before instantiating the tokens.
	          return content.replace(_CR_OR_CRLF_REGEXP, '\n');
	      };
	      _Tokenizer.prototype.tokenize = function () {
	          while (this._peek !== $EOF) {
	              var start = this._getLocation();
	              try {
	                  if (this._attemptCharCode($LT)) {
	                      if (this._attemptCharCode($BANG)) {
	                          if (this._attemptCharCode($LBRACKET)) {
	                              this._consumeCdata(start);
	                          }
	                          else if (this._attemptCharCode($MINUS)) {
	                              this._consumeComment(start);
	                          }
	                          else {
	                              this._consumeDocType(start);
	                          }
	                      }
	                      else if (this._attemptCharCode($SLASH)) {
	                          this._consumeTagClose(start);
	                      }
	                      else {
	                          this._consumeTagOpen(start);
	                      }
	                  }
	                  else if (!this._tokenizeIcu || !this._tokenizeExpansionForm()) {
	                      this._consumeText();
	                  }
	              }
	              catch (e) {
	                  if (e instanceof _ControlFlowError) {
	                      this.errors.push(e.error);
	                  }
	                  else {
	                      throw e;
	                  }
	              }
	          }
	          this._beginToken(TokenType$1.EOF);
	          this._endToken([]);
	          return new TokenizeResult(mergeTextTokens(this.tokens), this.errors);
	      };
	      /**
	       * @returns {boolean} whether an ICU token has been created
	       * @internal
	       */
	      _Tokenizer.prototype._tokenizeExpansionForm = function () {
	          if (isExpansionFormStart(this._input, this._index, this._interpolationConfig)) {
	              this._consumeExpansionFormStart();
	              return true;
	          }
	          if (isExpansionCaseStart(this._peek) && this._isInExpansionForm()) {
	              this._consumeExpansionCaseStart();
	              return true;
	          }
	          if (this._peek === $RBRACE) {
	              if (this._isInExpansionCase()) {
	                  this._consumeExpansionCaseEnd();
	                  return true;
	              }
	              if (this._isInExpansionForm()) {
	                  this._consumeExpansionFormEnd();
	                  return true;
	              }
	          }
	          return false;
	      };
	      _Tokenizer.prototype._getLocation = function () {
	          return new ParseLocation(this._file, this._index, this._line, this._column);
	      };
	      _Tokenizer.prototype._getSpan = function (start, end) {
	          if (start === void 0) { start = this._getLocation(); }
	          if (end === void 0) { end = this._getLocation(); }
	          return new ParseSourceSpan(start, end);
	      };
	      _Tokenizer.prototype._beginToken = function (type, start) {
	          if (start === void 0) { start = this._getLocation(); }
	          this._currentTokenStart = start;
	          this._currentTokenType = type;
	      };
	      _Tokenizer.prototype._endToken = function (parts, end) {
	          if (end === void 0) { end = this._getLocation(); }
	          var token = new Token$1(this._currentTokenType, parts, new ParseSourceSpan(this._currentTokenStart, end));
	          this.tokens.push(token);
	          this._currentTokenStart = null;
	          this._currentTokenType = null;
	          return token;
	      };
	      _Tokenizer.prototype._createError = function (msg, span) {
	          if (this._isInExpansionForm()) {
	              msg += " (Do you have an unescaped \"{\" in your template? Use \"{{ '{' }}\") to escape it.)";
	          }
	          var error = new TokenError(msg, this._currentTokenType, span);
	          this._currentTokenStart = null;
	          this._currentTokenType = null;
	          return new _ControlFlowError(error);
	      };
	      _Tokenizer.prototype._advance = function () {
	          if (this._index >= this._length) {
	              throw this._createError(_unexpectedCharacterErrorMsg($EOF), this._getSpan());
	          }
	          if (this._peek === $LF) {
	              this._line++;
	              this._column = 0;
	          }
	          else if (this._peek !== $LF && this._peek !== $CR) {
	              this._column++;
	          }
	          this._index++;
	          this._peek = this._index >= this._length ? $EOF : this._input.charCodeAt(this._index);
	          this._nextPeek =
	              this._index + 1 >= this._length ? $EOF : this._input.charCodeAt(this._index + 1);
	      };
	      _Tokenizer.prototype._attemptCharCode = function (charCode) {
	          if (this._peek === charCode) {
	              this._advance();
	              return true;
	          }
	          return false;
	      };
	      _Tokenizer.prototype._attemptCharCodeCaseInsensitive = function (charCode) {
	          if (compareCharCodeCaseInsensitive(this._peek, charCode)) {
	              this._advance();
	              return true;
	          }
	          return false;
	      };
	      _Tokenizer.prototype._requireCharCode = function (charCode) {
	          var location = this._getLocation();
	          if (!this._attemptCharCode(charCode)) {
	              throw this._createError(_unexpectedCharacterErrorMsg(this._peek), this._getSpan(location, location));
	          }
	      };
	      _Tokenizer.prototype._attemptStr = function (chars) {
	          var len = chars.length;
	          if (this._index + len > this._length) {
	              return false;
	          }
	          var initialPosition = this._savePosition();
	          for (var i = 0; i < len; i++) {
	              if (!this._attemptCharCode(chars.charCodeAt(i))) {
	                  // If attempting to parse the string fails, we want to reset the parser
	                  // to where it was before the attempt
	                  this._restorePosition(initialPosition);
	                  return false;
	              }
	          }
	          return true;
	      };
	      _Tokenizer.prototype._attemptStrCaseInsensitive = function (chars) {
	          for (var i = 0; i < chars.length; i++) {
	              if (!this._attemptCharCodeCaseInsensitive(chars.charCodeAt(i))) {
	                  return false;
	              }
	          }
	          return true;
	      };
	      _Tokenizer.prototype._requireStr = function (chars) {
	          var location = this._getLocation();
	          if (!this._attemptStr(chars)) {
	              throw this._createError(_unexpectedCharacterErrorMsg(this._peek), this._getSpan(location));
	          }
	      };
	      _Tokenizer.prototype._attemptCharCodeUntilFn = function (predicate) {
	          while (!predicate(this._peek)) {
	              this._advance();
	          }
	      };
	      _Tokenizer.prototype._requireCharCodeUntilFn = function (predicate, len) {
	          var start = this._getLocation();
	          this._attemptCharCodeUntilFn(predicate);
	          if (this._index - start.offset < len) {
	              throw this._createError(_unexpectedCharacterErrorMsg(this._peek), this._getSpan(start, start));
	          }
	      };
	      _Tokenizer.prototype._attemptUntilChar = function (char) {
	          while (this._peek !== char) {
	              this._advance();
	          }
	      };
	      _Tokenizer.prototype._readChar = function (decodeEntities) {
	          if (decodeEntities && this._peek === $AMPERSAND) {
	              return this._decodeEntity();
	          }
	          else {
	              var index = this._index;
	              this._advance();
	              return this._input[index];
	          }
	      };
	      _Tokenizer.prototype._decodeEntity = function () {
	          var start = this._getLocation();
	          this._advance();
	          if (this._attemptCharCode($HASH)) {
	              var isHex = this._attemptCharCode($x) || this._attemptCharCode($X);
	              var numberStart = this._getLocation().offset;
	              this._attemptCharCodeUntilFn(isDigitEntityEnd);
	              if (this._peek != $SEMICOLON) {
	                  throw this._createError(_unexpectedCharacterErrorMsg(this._peek), this._getSpan());
	              }
	              this._advance();
	              var strNum = this._input.substring(numberStart, this._index - 1);
	              try {
	                  var charCode = parseInt(strNum, isHex ? 16 : 10);
	                  return String.fromCharCode(charCode);
	              }
	              catch (e) {
	                  var entity = this._input.substring(start.offset + 1, this._index - 1);
	                  throw this._createError(_unknownEntityErrorMsg(entity), this._getSpan(start));
	              }
	          }
	          else {
	              var startPosition = this._savePosition();
	              this._attemptCharCodeUntilFn(isNamedEntityEnd);
	              if (this._peek != $SEMICOLON) {
	                  this._restorePosition(startPosition);
	                  return '&';
	              }
	              this._advance();
	              var name_1 = this._input.substring(start.offset + 1, this._index - 1);
	              var char = NAMED_ENTITIES[name_1];
	              if (!char) {
	                  throw this._createError(_unknownEntityErrorMsg(name_1), this._getSpan(start));
	              }
	              return char;
	          }
	      };
	      _Tokenizer.prototype._consumeRawText = function (decodeEntities, firstCharOfEnd, attemptEndRest) {
	          var tagCloseStart;
	          var textStart = this._getLocation();
	          this._beginToken(decodeEntities ? TokenType$1.ESCAPABLE_RAW_TEXT : TokenType$1.RAW_TEXT, textStart);
	          var parts = [];
	          while (true) {
	              tagCloseStart = this._getLocation();
	              if (this._attemptCharCode(firstCharOfEnd) && attemptEndRest()) {
	                  break;
	              }
	              if (this._index > tagCloseStart.offset) {
	                  // add the characters consumed by the previous if statement to the output
	                  parts.push(this._input.substring(tagCloseStart.offset, this._index));
	              }
	              while (this._peek !== firstCharOfEnd) {
	                  parts.push(this._readChar(decodeEntities));
	              }
	          }
	          return this._endToken([this._processCarriageReturns(parts.join(''))], tagCloseStart);
	      };
	      _Tokenizer.prototype._consumeComment = function (start) {
	          var _this = this;
	          this._beginToken(TokenType$1.COMMENT_START, start);
	          this._requireCharCode($MINUS);
	          this._endToken([]);
	          var textToken = this._consumeRawText(false, $MINUS, function () { return _this._attemptStr('->'); });
	          this._beginToken(TokenType$1.COMMENT_END, textToken.sourceSpan.end);
	          this._endToken([]);
	      };
	      _Tokenizer.prototype._consumeCdata = function (start) {
	          var _this = this;
	          this._beginToken(TokenType$1.CDATA_START, start);
	          this._requireStr('CDATA[');
	          this._endToken([]);
	          var textToken = this._consumeRawText(false, $RBRACKET, function () { return _this._attemptStr(']>'); });
	          this._beginToken(TokenType$1.CDATA_END, textToken.sourceSpan.end);
	          this._endToken([]);
	      };
	      _Tokenizer.prototype._consumeDocType = function (start) {
	          this._beginToken(TokenType$1.DOC_TYPE, start);
	          this._attemptUntilChar($GT);
	          this._advance();
	          this._endToken([this._input.substring(start.offset + 2, this._index - 1)]);
	      };
	      _Tokenizer.prototype._consumePrefixAndName = function () {
	          var nameOrPrefixStart = this._index;
	          var prefix = null;
	          while (this._peek !== $COLON && !isPrefixEnd(this._peek)) {
	              this._advance();
	          }
	          var nameStart;
	          if (this._peek === $COLON) {
	              this._advance();
	              prefix = this._input.substring(nameOrPrefixStart, this._index - 1);
	              nameStart = this._index;
	          }
	          else {
	              nameStart = nameOrPrefixStart;
	          }
	          this._requireCharCodeUntilFn(isNameEnd, this._index === nameStart ? 1 : 0);
	          var name = this._input.substring(nameStart, this._index);
	          return [prefix, name];
	      };
	      _Tokenizer.prototype._consumeTagOpen = function (start) {
	          var savedPos = this._savePosition();
	          var tagName;
	          var lowercaseTagName;
	          try {
	              if (!isAsciiLetter(this._peek)) {
	                  throw this._createError(_unexpectedCharacterErrorMsg(this._peek), this._getSpan());
	              }
	              var nameStart = this._index;
	              this._consumeTagOpenStart(start);
	              tagName = this._input.substring(nameStart, this._index);
	              lowercaseTagName = tagName.toLowerCase();
	              this._attemptCharCodeUntilFn(isNotWhitespace);
	              while (this._peek !== $SLASH && this._peek !== $GT) {
	                  this._consumeAttributeName();
	                  this._attemptCharCodeUntilFn(isNotWhitespace);
	                  if (this._attemptCharCode($EQ)) {
	                      this._attemptCharCodeUntilFn(isNotWhitespace);
	                      this._consumeAttributeValue();
	                  }
	                  this._attemptCharCodeUntilFn(isNotWhitespace);
	              }
	              this._consumeTagOpenEnd();
	          }
	          catch (e) {
	              if (e instanceof _ControlFlowError) {
	                  // When the start tag is invalid, assume we want a "<"
	                  this._restorePosition(savedPos);
	                  // Back to back text tokens are merged at the end
	                  this._beginToken(TokenType$1.TEXT, start);
	                  this._endToken(['<']);
	                  return;
	              }
	              throw e;
	          }
	          var contentTokenType = this._getTagDefinition(tagName).contentType;
	          if (contentTokenType === TagContentType.RAW_TEXT) {
	              this._consumeRawTextWithTagClose(lowercaseTagName, false);
	          }
	          else if (contentTokenType === TagContentType.ESCAPABLE_RAW_TEXT) {
	              this._consumeRawTextWithTagClose(lowercaseTagName, true);
	          }
	      };
	      _Tokenizer.prototype._consumeRawTextWithTagClose = function (lowercaseTagName, decodeEntities) {
	          var _this = this;
	          var textToken = this._consumeRawText(decodeEntities, $LT, function () {
	              if (!_this._attemptCharCode($SLASH))
	                  return false;
	              _this._attemptCharCodeUntilFn(isNotWhitespace);
	              if (!_this._attemptStrCaseInsensitive(lowercaseTagName))
	                  return false;
	              _this._attemptCharCodeUntilFn(isNotWhitespace);
	              return _this._attemptCharCode($GT);
	          });
	          this._beginToken(TokenType$1.TAG_CLOSE, textToken.sourceSpan.end);
	          this._endToken([null, lowercaseTagName]);
	      };
	      _Tokenizer.prototype._consumeTagOpenStart = function (start) {
	          this._beginToken(TokenType$1.TAG_OPEN_START, start);
	          var parts = this._consumePrefixAndName();
	          this._endToken(parts);
	      };
	      _Tokenizer.prototype._consumeAttributeName = function () {
	          this._beginToken(TokenType$1.ATTR_NAME);
	          var prefixAndName = this._consumePrefixAndName();
	          this._endToken(prefixAndName);
	      };
	      _Tokenizer.prototype._consumeAttributeValue = function () {
	          this._beginToken(TokenType$1.ATTR_VALUE);
	          var value;
	          if (this._peek === $SQ || this._peek === $DQ) {
	              var quoteChar = this._peek;
	              this._advance();
	              var parts = [];
	              while (this._peek !== quoteChar) {
	                  parts.push(this._readChar(true));
	              }
	              value = parts.join('');
	              this._advance();
	          }
	          else {
	              var valueStart = this._index;
	              this._requireCharCodeUntilFn(isNameEnd, 1);
	              value = this._input.substring(valueStart, this._index);
	          }
	          this._endToken([this._processCarriageReturns(value)]);
	      };
	      _Tokenizer.prototype._consumeTagOpenEnd = function () {
	          var tokenType = this._attemptCharCode($SLASH) ? TokenType$1.TAG_OPEN_END_VOID : TokenType$1.TAG_OPEN_END;
	          this._beginToken(tokenType);
	          this._requireCharCode($GT);
	          this._endToken([]);
	      };
	      _Tokenizer.prototype._consumeTagClose = function (start) {
	          this._beginToken(TokenType$1.TAG_CLOSE, start);
	          this._attemptCharCodeUntilFn(isNotWhitespace);
	          var prefixAndName = this._consumePrefixAndName();
	          this._attemptCharCodeUntilFn(isNotWhitespace);
	          this._requireCharCode($GT);
	          this._endToken(prefixAndName);
	      };
	      _Tokenizer.prototype._consumeExpansionFormStart = function () {
	          this._beginToken(TokenType$1.EXPANSION_FORM_START, this._getLocation());
	          this._requireCharCode($LBRACE);
	          this._endToken([]);
	          this._expansionCaseStack.push(TokenType$1.EXPANSION_FORM_START);
	          this._beginToken(TokenType$1.RAW_TEXT, this._getLocation());
	          var condition = this._readUntil($COMMA);
	          this._endToken([condition], this._getLocation());
	          this._requireCharCode($COMMA);
	          this._attemptCharCodeUntilFn(isNotWhitespace);
	          this._beginToken(TokenType$1.RAW_TEXT, this._getLocation());
	          var type = this._readUntil($COMMA);
	          this._endToken([type], this._getLocation());
	          this._requireCharCode($COMMA);
	          this._attemptCharCodeUntilFn(isNotWhitespace);
	      };
	      _Tokenizer.prototype._consumeExpansionCaseStart = function () {
	          this._beginToken(TokenType$1.EXPANSION_CASE_VALUE, this._getLocation());
	          var value = this._readUntil($LBRACE).trim();
	          this._endToken([value], this._getLocation());
	          this._attemptCharCodeUntilFn(isNotWhitespace);
	          this._beginToken(TokenType$1.EXPANSION_CASE_EXP_START, this._getLocation());
	          this._requireCharCode($LBRACE);
	          this._endToken([], this._getLocation());
	          this._attemptCharCodeUntilFn(isNotWhitespace);
	          this._expansionCaseStack.push(TokenType$1.EXPANSION_CASE_EXP_START);
	      };
	      _Tokenizer.prototype._consumeExpansionCaseEnd = function () {
	          this._beginToken(TokenType$1.EXPANSION_CASE_EXP_END, this._getLocation());
	          this._requireCharCode($RBRACE);
	          this._endToken([], this._getLocation());
	          this._attemptCharCodeUntilFn(isNotWhitespace);
	          this._expansionCaseStack.pop();
	      };
	      _Tokenizer.prototype._consumeExpansionFormEnd = function () {
	          this._beginToken(TokenType$1.EXPANSION_FORM_END, this._getLocation());
	          this._requireCharCode($RBRACE);
	          this._endToken([]);
	          this._expansionCaseStack.pop();
	      };
	      _Tokenizer.prototype._consumeText = function () {
	          var start = this._getLocation();
	          this._beginToken(TokenType$1.TEXT, start);
	          var parts = [];
	          do {
	              if (this._interpolationConfig && this._attemptStr(this._interpolationConfig.start)) {
	                  parts.push(this._interpolationConfig.start);
	                  this._inInterpolation = true;
	              }
	              else if (this._interpolationConfig && this._attemptStr(this._interpolationConfig.end) &&
	                  this._inInterpolation) {
	                  parts.push(this._interpolationConfig.end);
	                  this._inInterpolation = false;
	              }
	              else {
	                  parts.push(this._readChar(true));
	              }
	          } while (!this._isTextEnd());
	          this._endToken([this._processCarriageReturns(parts.join(''))]);
	      };
	      _Tokenizer.prototype._isTextEnd = function () {
	          if (this._peek === $LT || this._peek === $EOF) {
	              return true;
	          }
	          if (this._tokenizeIcu && !this._inInterpolation) {
	              if (isExpansionFormStart(this._input, this._index, this._interpolationConfig)) {
	                  // start of an expansion form
	                  return true;
	              }
	              if (this._peek === $RBRACE && this._isInExpansionCase()) {
	                  // end of and expansion case
	                  return true;
	              }
	          }
	          return false;
	      };
	      _Tokenizer.prototype._savePosition = function () {
	          return [this._peek, this._index, this._column, this._line, this.tokens.length];
	      };
	      _Tokenizer.prototype._readUntil = function (char) {
	          var start = this._index;
	          this._attemptUntilChar(char);
	          return this._input.substring(start, this._index);
	      };
	      _Tokenizer.prototype._restorePosition = function (position) {
	          this._peek = position[0];
	          this._index = position[1];
	          this._column = position[2];
	          this._line = position[3];
	          var nbTokens = position[4];
	          if (nbTokens < this.tokens.length) {
	              // remove any extra tokens
	              this.tokens = this.tokens.slice(0, nbTokens);
	          }
	      };
	      _Tokenizer.prototype._isInExpansionCase = function () {
	          return this._expansionCaseStack.length > 0 &&
	              this._expansionCaseStack[this._expansionCaseStack.length - 1] ===
	                  TokenType$1.EXPANSION_CASE_EXP_START;
	      };
	      _Tokenizer.prototype._isInExpansionForm = function () {
	          return this._expansionCaseStack.length > 0 &&
	              this._expansionCaseStack[this._expansionCaseStack.length - 1] ===
	                  TokenType$1.EXPANSION_FORM_START;
	      };
	      return _Tokenizer;
	  }());
	  function isNotWhitespace(code) {
	      return !isWhitespace(code) || code === $EOF;
	  }
	  function isNameEnd(code) {
	      return isWhitespace(code) || code === $GT || code === $SLASH ||
	          code === $SQ || code === $DQ || code === $EQ;
	  }
	  function isPrefixEnd(code) {
	      return (code < $a || $z < code) && (code < $A || $Z < code) &&
	          (code < $0 || code > $9);
	  }
	  function isDigitEntityEnd(code) {
	      return code == $SEMICOLON || code == $EOF || !isAsciiHexDigit(code);
	  }
	  function isNamedEntityEnd(code) {
	      return code == $SEMICOLON || code == $EOF || !isAsciiLetter(code);
	  }
	  function isExpansionFormStart(input, offset, interpolationConfig) {
	      var isInterpolationStart = interpolationConfig ? input.indexOf(interpolationConfig.start, offset) == offset : false;
	      return input.charCodeAt(offset) == $LBRACE && !isInterpolationStart;
	  }
	  function isExpansionCaseStart(peek) {
	      return peek === $EQ || isAsciiLetter(peek);
	  }
	  function compareCharCodeCaseInsensitive(code1, code2) {
	      return toUpperCaseCharCode(code1) == toUpperCaseCharCode(code2);
	  }
	  function toUpperCaseCharCode(code) {
	      return code >= $a && code <= $z ? code - $a + $A : code;
	  }
	  function mergeTextTokens(srcTokens) {
	      var dstTokens = [];
	      var lastDstToken;
	      for (var i = 0; i < srcTokens.length; i++) {
	          var token = srcTokens[i];
	          if (lastDstToken && lastDstToken.type == TokenType$1.TEXT && token.type == TokenType$1.TEXT) {
	              lastDstToken.parts[0] += token.parts[0];
	              lastDstToken.sourceSpan.end = token.sourceSpan.end;
	          }
	          else {
	              lastDstToken = token;
	              dstTokens.push(lastDstToken);
	          }
	      }
	      return dstTokens;
	  }

	  /**
	   * @license
	   * Copyright Google Inc. All Rights Reserved.
	   *
	   * Use of this source code is governed by an MIT-style license that can be
	   * found in the LICENSE file at https://angular.io/license
	   */
	  var __extends$2 = (this && this.__extends) || function (d, b) {
	      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	      function __() { this.constructor = d; }
	      d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	  };
	  var TreeError = (function (_super) {
	      __extends$2(TreeError, _super);
	      function TreeError(elementName, span, msg) {
	          _super.call(this, span, msg);
	          this.elementName = elementName;
	      }
	      TreeError.create = function (elementName, span, msg) {
	          return new TreeError(elementName, span, msg);
	      };
	      return TreeError;
	  }(ParseError));
	  var ParseTreeResult = (function () {
	      function ParseTreeResult(rootNodes, errors) {
	          this.rootNodes = rootNodes;
	          this.errors = errors;
	      }
	      return ParseTreeResult;
	  }());
	  var Parser$1 = (function () {
	      function Parser(getTagDefinition) {
	          this.getTagDefinition = getTagDefinition;
	      }
	      Parser.prototype.parse = function (source, url, parseExpansionForms, interpolationConfig) {
	          if (parseExpansionForms === void 0) { parseExpansionForms = false; }
	          if (interpolationConfig === void 0) { interpolationConfig = DEFAULT_INTERPOLATION_CONFIG; }
	          var tokensAndErrors = tokenize(source, url, this.getTagDefinition, parseExpansionForms, interpolationConfig);
	          var treeAndErrors = new _TreeBuilder(tokensAndErrors.tokens, this.getTagDefinition).build();
	          return new ParseTreeResult(treeAndErrors.rootNodes, tokensAndErrors.errors.concat(treeAndErrors.errors));
	      };
	      return Parser;
	  }());
	  var _TreeBuilder = (function () {
	      function _TreeBuilder(tokens, getTagDefinition) {
	          this.tokens = tokens;
	          this.getTagDefinition = getTagDefinition;
	          this._index = -1;
	          this._rootNodes = [];
	          this._errors = [];
	          this._elementStack = [];
	          this._advance();
	      }
	      _TreeBuilder.prototype.build = function () {
	          while (this._peek.type !== TokenType$1.EOF) {
	              if (this._peek.type === TokenType$1.TAG_OPEN_START) {
	                  this._consumeStartTag(this._advance());
	              }
	              else if (this._peek.type === TokenType$1.TAG_CLOSE) {
	                  this._consumeEndTag(this._advance());
	              }
	              else if (this._peek.type === TokenType$1.CDATA_START) {
	                  this._closeVoidElement();
	                  this._consumeCdata(this._advance());
	              }
	              else if (this._peek.type === TokenType$1.COMMENT_START) {
	                  this._closeVoidElement();
	                  this._consumeComment(this._advance());
	              }
	              else if (this._peek.type === TokenType$1.TEXT || this._peek.type === TokenType$1.RAW_TEXT ||
	                  this._peek.type === TokenType$1.ESCAPABLE_RAW_TEXT) {
	                  this._closeVoidElement();
	                  this._consumeText(this._advance());
	              }
	              else if (this._peek.type === TokenType$1.EXPANSION_FORM_START) {
	                  this._consumeExpansion(this._advance());
	              }
	              else {
	                  // Skip all other tokens...
	                  this._advance();
	              }
	          }
	          return new ParseTreeResult(this._rootNodes, this._errors);
	      };
	      _TreeBuilder.prototype._advance = function () {
	          var prev = this._peek;
	          if (this._index < this.tokens.length - 1) {
	              // Note: there is always an EOF token at the end
	              this._index++;
	          }
	          this._peek = this.tokens[this._index];
	          return prev;
	      };
	      _TreeBuilder.prototype._advanceIf = function (type) {
	          if (this._peek.type === type) {
	              return this._advance();
	          }
	          return null;
	      };
	      _TreeBuilder.prototype._consumeCdata = function (startToken) {
	          this._consumeText(this._advance());
	          this._advanceIf(TokenType$1.CDATA_END);
	      };
	      _TreeBuilder.prototype._consumeComment = function (token) {
	          var text = this._advanceIf(TokenType$1.RAW_TEXT);
	          this._advanceIf(TokenType$1.COMMENT_END);
	          var value = isPresent(text) ? text.parts[0].trim() : null;
	          this._addToParent(new Comment(value, token.sourceSpan));
	      };
	      _TreeBuilder.prototype._consumeExpansion = function (token) {
	          var switchValue = this._advance();
	          var type = this._advance();
	          var cases = [];
	          // read =
	          while (this._peek.type === TokenType$1.EXPANSION_CASE_VALUE) {
	              var expCase = this._parseExpansionCase();
	              if (!expCase)
	                  return; // error
	              cases.push(expCase);
	          }
	          // read the final }
	          if (this._peek.type !== TokenType$1.EXPANSION_FORM_END) {
	              this._errors.push(TreeError.create(null, this._peek.sourceSpan, "Invalid ICU message. Missing '}'."));
	              return;
	          }
	          var sourceSpan = new ParseSourceSpan(token.sourceSpan.start, this._peek.sourceSpan.end);
	          this._addToParent(new Expansion(switchValue.parts[0], type.parts[0], cases, sourceSpan, switchValue.sourceSpan));
	          this._advance();
	      };
	      _TreeBuilder.prototype._parseExpansionCase = function () {
	          var value = this._advance();
	          // read {
	          if (this._peek.type !== TokenType$1.EXPANSION_CASE_EXP_START) {
	              this._errors.push(TreeError.create(null, this._peek.sourceSpan, "Invalid ICU message. Missing '{'."));
	              return null;
	          }
	          // read until }
	          var start = this._advance();
	          var exp = this._collectExpansionExpTokens(start);
	          if (!exp)
	              return null;
	          var end = this._advance();
	          exp.push(new Token$1(TokenType$1.EOF, [], end.sourceSpan));
	          // parse everything in between { and }
	          var parsedExp = new _TreeBuilder(exp, this.getTagDefinition).build();
	          if (parsedExp.errors.length > 0) {
	              this._errors = this._errors.concat(parsedExp.errors);
	              return null;
	          }
	          var sourceSpan = new ParseSourceSpan(value.sourceSpan.start, end.sourceSpan.end);
	          var expSourceSpan = new ParseSourceSpan(start.sourceSpan.start, end.sourceSpan.end);
	          return new ExpansionCase(value.parts[0], parsedExp.rootNodes, sourceSpan, value.sourceSpan, expSourceSpan);
	      };
	      _TreeBuilder.prototype._collectExpansionExpTokens = function (start) {
	          var exp = [];
	          var expansionFormStack = [TokenType$1.EXPANSION_CASE_EXP_START];
	          while (true) {
	              if (this._peek.type === TokenType$1.EXPANSION_FORM_START ||
	                  this._peek.type === TokenType$1.EXPANSION_CASE_EXP_START) {
	                  expansionFormStack.push(this._peek.type);
	              }
	              if (this._peek.type === TokenType$1.EXPANSION_CASE_EXP_END) {
	                  if (lastOnStack(expansionFormStack, TokenType$1.EXPANSION_CASE_EXP_START)) {
	                      expansionFormStack.pop();
	                      if (expansionFormStack.length == 0)
	                          return exp;
	                  }
	                  else {
	                      this._errors.push(TreeError.create(null, start.sourceSpan, "Invalid ICU message. Missing '}'."));
	                      return null;
	                  }
	              }
	              if (this._peek.type === TokenType$1.EXPANSION_FORM_END) {
	                  if (lastOnStack(expansionFormStack, TokenType$1.EXPANSION_FORM_START)) {
	                      expansionFormStack.pop();
	                  }
	                  else {
	                      this._errors.push(TreeError.create(null, start.sourceSpan, "Invalid ICU message. Missing '}'."));
	                      return null;
	                  }
	              }
	              if (this._peek.type === TokenType$1.EOF) {
	                  this._errors.push(TreeError.create(null, start.sourceSpan, "Invalid ICU message. Missing '}'."));
	                  return null;
	              }
	              exp.push(this._advance());
	          }
	      };
	      _TreeBuilder.prototype._consumeText = function (token) {
	          var text = token.parts[0];
	          if (text.length > 0 && text[0] == '\n') {
	              var parent_1 = this._getParentElement();
	              if (isPresent(parent_1) && parent_1.children.length == 0 &&
	                  this.getTagDefinition(parent_1.name).ignoreFirstLf) {
	                  text = text.substring(1);
	              }
	          }
	          if (text.length > 0) {
	              this._addToParent(new Text(text, token.sourceSpan));
	          }
	      };
	      _TreeBuilder.prototype._closeVoidElement = function () {
	          if (this._elementStack.length > 0) {
	              var el = this._elementStack[this._elementStack.length - 1];
	              if (this.getTagDefinition(el.name).isVoid) {
	                  this._elementStack.pop();
	              }
	          }
	      };
	      _TreeBuilder.prototype._consumeStartTag = function (startTagToken) {
	          var prefix = startTagToken.parts[0];
	          var name = startTagToken.parts[1];
	          var attrs = [];
	          while (this._peek.type === TokenType$1.ATTR_NAME) {
	              attrs.push(this._consumeAttr(this._advance()));
	          }
	          var fullName = this._getElementFullName(prefix, name, this._getParentElement());
	          var selfClosing = false;
	          // Note: There could have been a tokenizer error
	          // so that we don't get a token for the end tag...
	          if (this._peek.type === TokenType$1.TAG_OPEN_END_VOID) {
	              this._advance();
	              selfClosing = true;
	              var tagDef = this.getTagDefinition(fullName);
	              if (!(tagDef.canSelfClose || getNsPrefix(fullName) !== null || tagDef.isVoid)) {
	                  this._errors.push(TreeError.create(fullName, startTagToken.sourceSpan, "Only void and foreign elements can be self closed \"" + startTagToken.parts[1] + "\""));
	              }
	          }
	          else if (this._peek.type === TokenType$1.TAG_OPEN_END) {
	              this._advance();
	              selfClosing = false;
	          }
	          var end = this._peek.sourceSpan.start;
	          var span = new ParseSourceSpan(startTagToken.sourceSpan.start, end);
	          var el = new Element(fullName, attrs, [], span, span, null);
	          this._pushElement(el);
	          if (selfClosing) {
	              this._popElement(fullName);
	              el.endSourceSpan = span;
	          }
	      };
	      _TreeBuilder.prototype._pushElement = function (el) {
	          if (this._elementStack.length > 0) {
	              var parentEl = this._elementStack[this._elementStack.length - 1];
	              if (this.getTagDefinition(parentEl.name).isClosedByChild(el.name)) {
	                  this._elementStack.pop();
	              }
	          }
	          var tagDef = this.getTagDefinition(el.name);
	          var _a = this._getParentElementSkippingContainers(), parent = _a.parent, container = _a.container;
	          if (isPresent(parent) && tagDef.requireExtraParent(parent.name)) {
	              var newParent = new Element(tagDef.parentToAdd, [], [], el.sourceSpan, el.startSourceSpan, el.endSourceSpan);
	              this._insertBeforeContainer(parent, container, newParent);
	          }
	          this._addToParent(el);
	          this._elementStack.push(el);
	      };
	      _TreeBuilder.prototype._consumeEndTag = function (endTagToken) {
	          var fullName = this._getElementFullName(endTagToken.parts[0], endTagToken.parts[1], this._getParentElement());
	          if (this._getParentElement()) {
	              this._getParentElement().endSourceSpan = endTagToken.sourceSpan;
	          }
	          if (this.getTagDefinition(fullName).isVoid) {
	              this._errors.push(TreeError.create(fullName, endTagToken.sourceSpan, "Void elements do not have end tags \"" + endTagToken.parts[1] + "\""));
	          }
	          else if (!this._popElement(fullName)) {
	              this._errors.push(TreeError.create(fullName, endTagToken.sourceSpan, "Unexpected closing tag \"" + endTagToken.parts[1] + "\""));
	          }
	      };
	      _TreeBuilder.prototype._popElement = function (fullName) {
	          for (var stackIndex = this._elementStack.length - 1; stackIndex >= 0; stackIndex--) {
	              var el = this._elementStack[stackIndex];
	              if (el.name == fullName) {
	                  this._elementStack.splice(stackIndex, this._elementStack.length - stackIndex);
	                  return true;
	              }
	              if (!this.getTagDefinition(el.name).closedByParent) {
	                  return false;
	              }
	          }
	          return false;
	      };
	      _TreeBuilder.prototype._consumeAttr = function (attrName) {
	          var fullName = mergeNsAndName(attrName.parts[0], attrName.parts[1]);
	          var end = attrName.sourceSpan.end;
	          var value = '';
	          var valueSpan;
	          if (this._peek.type === TokenType$1.ATTR_VALUE) {
	              var valueToken = this._advance();
	              value = valueToken.parts[0];
	              end = valueToken.sourceSpan.end;
	              valueSpan = valueToken.sourceSpan;
	          }
	          return new Attribute$1(fullName, value, new ParseSourceSpan(attrName.sourceSpan.start, end), valueSpan);
	      };
	      _TreeBuilder.prototype._getParentElement = function () {
	          return this._elementStack.length > 0 ? this._elementStack[this._elementStack.length - 1] : null;
	      };
	      /**
	       * Returns the parent in the DOM and the container.
	       *
	       * `<ng-container>` elements are skipped as they are not rendered as DOM element.
	       */
	      _TreeBuilder.prototype._getParentElementSkippingContainers = function () {
	          var container = null;
	          for (var i = this._elementStack.length - 1; i >= 0; i--) {
	              if (this._elementStack[i].name !== 'ng-container') {
	                  return { parent: this._elementStack[i], container: container };
	              }
	              container = this._elementStack[i];
	          }
	          return { parent: this._elementStack[this._elementStack.length - 1], container: container };
	      };
	      _TreeBuilder.prototype._addToParent = function (node) {
	          var parent = this._getParentElement();
	          if (isPresent(parent)) {
	              parent.children.push(node);
	          }
	          else {
	              this._rootNodes.push(node);
	          }
	      };
	      /**
	       * Insert a node between the parent and the container.
	       * When no container is given, the node is appended as a child of the parent.
	       * Also updates the element stack accordingly.
	       *
	       * @internal
	       */
	      _TreeBuilder.prototype._insertBeforeContainer = function (parent, container, node) {
	          if (!container) {
	              this._addToParent(node);
	              this._elementStack.push(node);
	          }
	          else {
	              if (parent) {
	                  // replace the container with the new node in the children
	                  var index = parent.children.indexOf(container);
	                  parent.children[index] = node;
	              }
	              else {
	                  this._rootNodes.push(node);
	              }
	              node.children.push(container);
	              this._elementStack.splice(this._elementStack.indexOf(container), 0, node);
	          }
	      };
	      _TreeBuilder.prototype._getElementFullName = function (prefix, localName, parentElement) {
	          if (isBlank(prefix)) {
	              prefix = this.getTagDefinition(localName).implicitNamespacePrefix;
	              if (isBlank(prefix) && isPresent(parentElement)) {
	                  prefix = getNsPrefix(parentElement.name);
	              }
	          }
	          return mergeNsAndName(prefix, localName);
	      };
	      return _TreeBuilder;
	  }());
	  function lastOnStack(stack, element) {
	      return stack.length > 0 && stack[stack.length - 1] === element;
	  }

	  /**
	   * @license
	   * Copyright Google Inc. All Rights Reserved.
	   *
	   * Use of this source code is governed by an MIT-style license that can be
	   * found in the LICENSE file at https://angular.io/license
	   */
	  function digestMessage(message) {
	      return sha1(serializeNodes(message.nodes).join('') + ("[" + message.meaning + "]"));
	  }
	  /**
	   * Serialize the i18n ast to something xml-like in order to generate an UID.
	   *
	   * The visitor is also used in the i18n parser tests
	   *
	   * @internal
	   */
	  var _SerializerVisitor = (function () {
	      function _SerializerVisitor() {
	      }
	      _SerializerVisitor.prototype.visitText = function (text, context) { return text.value; };
	      _SerializerVisitor.prototype.visitContainer = function (container, context) {
	          var _this = this;
	          return "[" + container.children.map(function (child) { return child.visit(_this); }).join(', ') + "]";
	      };
	      _SerializerVisitor.prototype.visitIcu = function (icu, context) {
	          var _this = this;
	          var strCases = Object.keys(icu.cases).map(function (k) { return (k + " {" + icu.cases[k].visit(_this) + "}"); });
	          return "{" + icu.expression + ", " + icu.type + ", " + strCases.join(', ') + "}";
	      };
	      _SerializerVisitor.prototype.visitTagPlaceholder = function (ph, context) {
	          var _this = this;
	          return ph.isVoid ?
	              "<ph tag name=\"" + ph.startName + "\"/>" :
	              "<ph tag name=\"" + ph.startName + "\">" + ph.children.map(function (child) { return child.visit(_this); }).join(', ') + "</ph name=\"" + ph.closeName + "\">";
	      };
	      _SerializerVisitor.prototype.visitPlaceholder = function (ph, context) {
	          return "<ph name=\"" + ph.name + "\">" + ph.value + "</ph>";
	      };
	      _SerializerVisitor.prototype.visitIcuPlaceholder = function (ph, context) {
	          return "<ph icu name=\"" + ph.name + "\">" + ph.value.visit(this) + "</ph>";
	      };
	      return _SerializerVisitor;
	  }());
	  var serializerVisitor = new _SerializerVisitor();
	  function serializeNodes(nodes) {
	      return nodes.map(function (a) { return a.visit(serializerVisitor, null); });
	  }
	  /**
	   * Compute the SHA1 of the given string
	   *
	   * see http://csrc.nist.gov/publications/fips/fips180-4/fips-180-4.pdf
	   *
	   * WARNING: this function has not been designed not tested with security in mind.
	   *          DO NOT USE IT IN A SECURITY SENSITIVE CONTEXT.
	   */
	  function sha1(str) {
	      var utf8 = utf8Encode(str);
	      var words32 = stringToWords32(utf8);
	      var len = utf8.length * 8;
	      var w = new Array(80);
	      var _a = [0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476, 0xc3d2e1f0], a = _a[0], b = _a[1], c = _a[2], d = _a[3], e = _a[4];
	      words32[len >> 5] |= 0x80 << (24 - len % 32);
	      words32[((len + 64 >> 9) << 4) + 15] = len;
	      for (var i = 0; i < words32.length; i += 16) {
	          var _b = [a, b, c, d, e], h0 = _b[0], h1 = _b[1], h2 = _b[2], h3 = _b[3], h4 = _b[4];
	          for (var j = 0; j < 80; j++) {
	              if (j < 16) {
	                  w[j] = words32[i + j];
	              }
	              else {
	                  w[j] = rol32(w[j - 3] ^ w[j - 8] ^ w[j - 14] ^ w[j - 16], 1);
	              }
	              var _c = fk(j, b, c, d), f = _c[0], k = _c[1];
	              var temp = [rol32(a, 5), f, e, k, w[j]].reduce(add32);
	              _d = [d, c, rol32(b, 30), a, temp], e = _d[0], d = _d[1], c = _d[2], b = _d[3], a = _d[4];
	          }
	          _e = [add32(a, h0), add32(b, h1), add32(c, h2), add32(d, h3), add32(e, h4)], a = _e[0], b = _e[1], c = _e[2], d = _e[3], e = _e[4];
	      }
	      var sha1 = words32ToString([a, b, c, d, e]);
	      var hex = '';
	      for (var i = 0; i < sha1.length; i++) {
	          var b_1 = sha1.charCodeAt(i);
	          hex += (b_1 >>> 4 & 0x0f).toString(16) + (b_1 & 0x0f).toString(16);
	      }
	      return hex.toLowerCase();
	      var _d, _e;
	  }
	  function utf8Encode(str) {
	      var encoded = '';
	      for (var index = 0; index < str.length; index++) {
	          var codePoint = decodeSurrogatePairs(str, index);
	          if (codePoint <= 0x7f) {
	              encoded += String.fromCharCode(codePoint);
	          }
	          else if (codePoint <= 0x7ff) {
	              encoded += String.fromCharCode(0xc0 | codePoint >>> 6, 0x80 | codePoint & 0x3f);
	          }
	          else if (codePoint <= 0xffff) {
	              encoded += String.fromCharCode(0xe0 | codePoint >>> 12, 0x80 | codePoint >>> 6 & 0x3f, 0x80 | codePoint & 0x3f);
	          }
	          else if (codePoint <= 0x1fffff) {
	              encoded += String.fromCharCode(0xf0 | codePoint >>> 18, 0x80 | codePoint >>> 12 & 0x3f, 0x80 | codePoint >>> 6 & 0x3f, 0x80 | codePoint & 0x3f);
	          }
	      }
	      return encoded;
	  }
	  // see https://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae
	  function decodeSurrogatePairs(str, index) {
	      if (index < 0 || index >= str.length) {
	          throw new Error("index=" + index + " is out of range in \"" + str + "\"");
	      }
	      var high = str.charCodeAt(index);
	      var low;
	      if (high >= 0xd800 && high <= 0xdfff && str.length > index + 1) {
	          low = str.charCodeAt(index + 1);
	          if (low >= 0xdc00 && low <= 0xdfff) {
	              return (high - 0xd800) * 0x400 + low - 0xdc00 + 0x10000;
	          }
	      }
	      return high;
	  }
	  function stringToWords32(str) {
	      var words32 = Array(str.length >>> 2);
	      for (var i = 0; i < words32.length; i++) {
	          words32[i] = 0;
	      }
	      for (var i = 0; i < str.length; i++) {
	          words32[i >>> 2] |= (str.charCodeAt(i) & 0xff) << 8 * (3 - i & 0x3);
	      }
	      return words32;
	  }
	  function words32ToString(words32) {
	      var str = '';
	      for (var i = 0; i < words32.length * 4; i++) {
	          str += String.fromCharCode((words32[i >>> 2] >>> 8 * (3 - i & 0x3)) & 0xff);
	      }
	      return str;
	  }
	  function fk(index, b, c, d) {
	      if (index < 20) {
	          return [(b & c) | (~b & d), 0x5a827999];
	      }
	      if (index < 40) {
	          return [b ^ c ^ d, 0x6ed9eba1];
	      }
	      if (index < 60) {
	          return [(b & c) | (b & d) | (c & d), 0x8f1bbcdc];
	      }
	      return [b ^ c ^ d, 0xca62c1d6];
	  }
	  function add32(a, b) {
	      var low = (a & 0xffff) + (b & 0xffff);
	      var high = (a >> 16) + (b >> 16) + (low >> 16);
	      return (high << 16) | (low & 0xffff);
	  }
	  function rol32(a, count) {
	      return (a << count) | (a >>> (32 - count));
	  }

	  /**
	   * @license
	   * Copyright Google Inc. All Rights Reserved.
	   *
	   * Use of this source code is governed by an MIT-style license that can be
	   * found in the LICENSE file at https://angular.io/license
	   */
	  var Message = (function () {
	      /**
	       * @param nodes message AST
	       * @param placeholders maps placeholder names to static content
	       * @param placeholderToMsgIds maps placeholder names to translatable message IDs (used for ICU
	       *                            messages)
	       * @param meaning
	       * @param description
	       */
	      function Message(nodes, placeholders, placeholderToMsgIds, meaning, description) {
	          this.nodes = nodes;
	          this.placeholders = placeholders;
	          this.placeholderToMsgIds = placeholderToMsgIds;
	          this.meaning = meaning;
	          this.description = description;
	      }
	      return Message;
	  }());
	  var Text$1 = (function () {
	      function Text(value, sourceSpan) {
	          this.value = value;
	          this.sourceSpan = sourceSpan;
	      }
	      Text.prototype.visit = function (visitor, context) { return visitor.visitText(this, context); };
	      return Text;
	  }());
	  var Container = (function () {
	      function Container(children, sourceSpan) {
	          this.children = children;
	          this.sourceSpan = sourceSpan;
	      }
	      Container.prototype.visit = function (visitor, context) { return visitor.visitContainer(this, context); };
	      return Container;
	  }());
	  var Icu = (function () {
	      function Icu(expression, type, cases, sourceSpan) {
	          this.expression = expression;
	          this.type = type;
	          this.cases = cases;
	          this.sourceSpan = sourceSpan;
	      }
	      Icu.prototype.visit = function (visitor, context) { return visitor.visitIcu(this, context); };
	      return Icu;
	  }());
	  var TagPlaceholder = (function () {
	      function TagPlaceholder(tag, attrs, startName, closeName, children, isVoid, sourceSpan) {
	          this.tag = tag;
	          this.attrs = attrs;
	          this.startName = startName;
	          this.closeName = closeName;
	          this.children = children;
	          this.isVoid = isVoid;
	          this.sourceSpan = sourceSpan;
	      }
	      TagPlaceholder.prototype.visit = function (visitor, context) { return visitor.visitTagPlaceholder(this, context); };
	      return TagPlaceholder;
	  }());
	  var Placeholder = (function () {
	      function Placeholder(value, name, sourceSpan) {
	          if (name === void 0) { name = ''; }
	          this.value = value;
	          this.name = name;
	          this.sourceSpan = sourceSpan;
	      }
	      Placeholder.prototype.visit = function (visitor, context) { return visitor.visitPlaceholder(this, context); };
	      return Placeholder;
	  }());
	  var IcuPlaceholder = (function () {
	      function IcuPlaceholder(value, name, sourceSpan) {
	          if (name === void 0) { name = ''; }
	          this.value = value;
	          this.name = name;
	          this.sourceSpan = sourceSpan;
	      }
	      IcuPlaceholder.prototype.visit = function (visitor, context) { return visitor.visitIcuPlaceholder(this, context); };
	      return IcuPlaceholder;
	  }());

	  var HtmlTagDefinition = (function () {
	      function HtmlTagDefinition(_a) {
	          var _this = this;
	          var _b = _a === void 0 ? {} : _a, closedByChildren = _b.closedByChildren, requiredParents = _b.requiredParents, implicitNamespacePrefix = _b.implicitNamespacePrefix, _c = _b.contentType, contentType = _c === void 0 ? TagContentType.PARSABLE_DATA : _c, _d = _b.closedByParent, closedByParent = _d === void 0 ? false : _d, _e = _b.isVoid, isVoid = _e === void 0 ? false : _e, _f = _b.ignoreFirstLf, ignoreFirstLf = _f === void 0 ? false : _f;
	          this.closedByChildren = {};
	          this.closedByParent = false;
	          this.canSelfClose = false;
	          if (closedByChildren && closedByChildren.length > 0) {
	              closedByChildren.forEach(function (tagName) { return _this.closedByChildren[tagName] = true; });
	          }
	          this.isVoid = isVoid;
	          this.closedByParent = closedByParent || isVoid;
	          if (requiredParents && requiredParents.length > 0) {
	              this.requiredParents = {};
	              // The first parent is the list is automatically when none of the listed parents are present
	              this.parentToAdd = requiredParents[0];
	              requiredParents.forEach(function (tagName) { return _this.requiredParents[tagName] = true; });
	          }
	          this.implicitNamespacePrefix = implicitNamespacePrefix;
	          this.contentType = contentType;
	          this.ignoreFirstLf = ignoreFirstLf;
	      }
	      HtmlTagDefinition.prototype.requireExtraParent = function (currentParent) {
	          if (!this.requiredParents) {
	              return false;
	          }
	          if (!currentParent) {
	              return true;
	          }
	          var lcParent = currentParent.toLowerCase();
	          return this.requiredParents[lcParent] != true && lcParent != 'template';
	      };
	      HtmlTagDefinition.prototype.isClosedByChild = function (name) {
	          return this.isVoid || name.toLowerCase() in this.closedByChildren;
	      };
	      return HtmlTagDefinition;
	  }());
	  // see http://www.w3.org/TR/html51/syntax.html#optional-tags
	  // This implementation does not fully conform to the HTML5 spec.
	  var TAG_DEFINITIONS = {
	      'base': new HtmlTagDefinition({ isVoid: true }),
	      'meta': new HtmlTagDefinition({ isVoid: true }),
	      'area': new HtmlTagDefinition({ isVoid: true }),
	      'embed': new HtmlTagDefinition({ isVoid: true }),
	      'link': new HtmlTagDefinition({ isVoid: true }),
	      'img': new HtmlTagDefinition({ isVoid: true }),
	      'input': new HtmlTagDefinition({ isVoid: true }),
	      'param': new HtmlTagDefinition({ isVoid: true }),
	      'hr': new HtmlTagDefinition({ isVoid: true }),
	      'br': new HtmlTagDefinition({ isVoid: true }),
	      'source': new HtmlTagDefinition({ isVoid: true }),
	      'track': new HtmlTagDefinition({ isVoid: true }),
	      'wbr': new HtmlTagDefinition({ isVoid: true }),
	      'p': new HtmlTagDefinition({
	          closedByChildren: [
	              'address', 'article', 'aside', 'blockquote', 'div', 'dl', 'fieldset', 'footer', 'form',
	              'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'header', 'hgroup', 'hr',
	              'main', 'nav', 'ol', 'p', 'pre', 'section', 'table', 'ul'
	          ],
	          closedByParent: true
	      }),
	      'thead': new HtmlTagDefinition({ closedByChildren: ['tbody', 'tfoot'] }),
	      'tbody': new HtmlTagDefinition({ closedByChildren: ['tbody', 'tfoot'], closedByParent: true }),
	      'tfoot': new HtmlTagDefinition({ closedByChildren: ['tbody'], closedByParent: true }),
	      'tr': new HtmlTagDefinition({
	          closedByChildren: ['tr'],
	          requiredParents: ['tbody', 'tfoot', 'thead'],
	          closedByParent: true
	      }),
	      'td': new HtmlTagDefinition({ closedByChildren: ['td', 'th'], closedByParent: true }),
	      'th': new HtmlTagDefinition({ closedByChildren: ['td', 'th'], closedByParent: true }),
	      'col': new HtmlTagDefinition({ requiredParents: ['colgroup'], isVoid: true }),
	      'svg': new HtmlTagDefinition({ implicitNamespacePrefix: 'svg' }),
	      'math': new HtmlTagDefinition({ implicitNamespacePrefix: 'math' }),
	      'li': new HtmlTagDefinition({ closedByChildren: ['li'], closedByParent: true }),
	      'dt': new HtmlTagDefinition({ closedByChildren: ['dt', 'dd'] }),
	      'dd': new HtmlTagDefinition({ closedByChildren: ['dt', 'dd'], closedByParent: true }),
	      'rb': new HtmlTagDefinition({ closedByChildren: ['rb', 'rt', 'rtc', 'rp'], closedByParent: true }),
	      'rt': new HtmlTagDefinition({ closedByChildren: ['rb', 'rt', 'rtc', 'rp'], closedByParent: true }),
	      'rtc': new HtmlTagDefinition({ closedByChildren: ['rb', 'rtc', 'rp'], closedByParent: true }),
	      'rp': new HtmlTagDefinition({ closedByChildren: ['rb', 'rt', 'rtc', 'rp'], closedByParent: true }),
	      'optgroup': new HtmlTagDefinition({ closedByChildren: ['optgroup'], closedByParent: true }),
	      'option': new HtmlTagDefinition({ closedByChildren: ['option', 'optgroup'], closedByParent: true }),
	      'pre': new HtmlTagDefinition({ ignoreFirstLf: true }),
	      'listing': new HtmlTagDefinition({ ignoreFirstLf: true }),
	      'style': new HtmlTagDefinition({ contentType: TagContentType.RAW_TEXT }),
	      'script': new HtmlTagDefinition({ contentType: TagContentType.RAW_TEXT }),
	      'title': new HtmlTagDefinition({ contentType: TagContentType.ESCAPABLE_RAW_TEXT }),
	      'textarea': new HtmlTagDefinition({ contentType: TagContentType.ESCAPABLE_RAW_TEXT, ignoreFirstLf: true }),
	  };
	  var _DEFAULT_TAG_DEFINITION = new HtmlTagDefinition();
	  function getHtmlTagDefinition(tagName) {
	      return TAG_DEFINITIONS[tagName.toLowerCase()] || _DEFAULT_TAG_DEFINITION;
	  }

	  /**
	   * @license
	   * Copyright Google Inc. All Rights Reserved.
	   *
	   * Use of this source code is governed by an MIT-style license that can be
	   * found in the LICENSE file at https://angular.io/license
	   */
	  var TAG_TO_PLACEHOLDER_NAMES = {
	      'A': 'LINK',
	      'B': 'BOLD_TEXT',
	      'BR': 'LINE_BREAK',
	      'EM': 'EMPHASISED_TEXT',
	      'H1': 'HEADING_LEVEL1',
	      'H2': 'HEADING_LEVEL2',
	      'H3': 'HEADING_LEVEL3',
	      'H4': 'HEADING_LEVEL4',
	      'H5': 'HEADING_LEVEL5',
	      'H6': 'HEADING_LEVEL6',
	      'HR': 'HORIZONTAL_RULE',
	      'I': 'ITALIC_TEXT',
	      'LI': 'LIST_ITEM',
	      'LINK': 'MEDIA_LINK',
	      'OL': 'ORDERED_LIST',
	      'P': 'PARAGRAPH',
	      'Q': 'QUOTATION',
	      'S': 'STRIKETHROUGH_TEXT',
	      'SMALL': 'SMALL_TEXT',
	      'SUB': 'SUBSTRIPT',
	      'SUP': 'SUPERSCRIPT',
	      'TBODY': 'TABLE_BODY',
	      'TD': 'TABLE_CELL',
	      'TFOOT': 'TABLE_FOOTER',
	      'TH': 'TABLE_HEADER_CELL',
	      'THEAD': 'TABLE_HEADER',
	      'TR': 'TABLE_ROW',
	      'TT': 'MONOSPACED_TEXT',
	      'U': 'UNDERLINED_TEXT',
	      'UL': 'UNORDERED_LIST',
	  };
	  /**
	   * Creates unique names for placeholder with different content
	   *
	   * @internal
	   */
	  var PlaceholderRegistry = (function () {
	      function PlaceholderRegistry() {
	          // Count the occurrence of the base name top generate a unique name
	          this._placeHolderNameCounts = {};
	          // Maps signature to placeholder names
	          this._signatureToName = {};
	      }
	      PlaceholderRegistry.prototype.getStartTagPlaceholderName = function (tag, attrs, isVoid) {
	          var signature = this._hashTag(tag, attrs, isVoid);
	          if (this._signatureToName[signature]) {
	              return this._signatureToName[signature];
	          }
	          var upperTag = tag.toUpperCase();
	          var baseName = TAG_TO_PLACEHOLDER_NAMES[upperTag] || "TAG_" + upperTag;
	          var name = this._generateUniqueName(isVoid ? baseName : "START_" + baseName);
	          this._signatureToName[signature] = name;
	          return name;
	      };
	      PlaceholderRegistry.prototype.getCloseTagPlaceholderName = function (tag) {
	          var signature = this._hashClosingTag(tag);
	          if (this._signatureToName[signature]) {
	              return this._signatureToName[signature];
	          }
	          var upperTag = tag.toUpperCase();
	          var baseName = TAG_TO_PLACEHOLDER_NAMES[upperTag] || "TAG_" + upperTag;
	          var name = this._generateUniqueName("CLOSE_" + baseName);
	          this._signatureToName[signature] = name;
	          return name;
	      };
	      PlaceholderRegistry.prototype.getPlaceholderName = function (name, content) {
	          var upperName = name.toUpperCase();
	          var signature = "PH: " + upperName + "=" + content;
	          if (this._signatureToName[signature]) {
	              return this._signatureToName[signature];
	          }
	          var uniqueName = this._generateUniqueName(upperName);
	          this._signatureToName[signature] = uniqueName;
	          return uniqueName;
	      };
	      // Generate a hash for a tag - does not take attribute order into account
	      PlaceholderRegistry.prototype._hashTag = function (tag, attrs, isVoid) {
	          var start = "<" + tag;
	          var strAttrs = Object.keys(attrs).sort().map(function (name) { return (" " + name + "=" + attrs[name]); }).join('');
	          var end = isVoid ? '/>' : "></" + tag + ">";
	          return start + strAttrs + end;
	      };
	      PlaceholderRegistry.prototype._hashClosingTag = function (tag) { return this._hashTag("/" + tag, {}, false); };
	      PlaceholderRegistry.prototype._generateUniqueName = function (base) {
	          var name = base;
	          var next = this._placeHolderNameCounts[name];
	          if (!next) {
	              next = 1;
	          }
	          else {
	              name += "_" + next;
	              next++;
	          }
	          this._placeHolderNameCounts[base] = next;
	          return name;
	      };
	      return PlaceholderRegistry;
	  }());

	  var _expParser = new Parser(new Lexer());
	  /**
	   * Returns a function converting html nodes to an i18n Message given an interpolationConfig
	   */
	  function createI18nMessageFactory(interpolationConfig) {
	      var visitor = new _I18nVisitor(_expParser, interpolationConfig);
	      return function (nodes, meaning, description) {
	          return visitor.toI18nMessage(nodes, meaning, description);
	      };
	  }
	  var _I18nVisitor = (function () {
	      function _I18nVisitor(_expressionParser, _interpolationConfig) {
	          this._expressionParser = _expressionParser;
	          this._interpolationConfig = _interpolationConfig;
	      }
	      _I18nVisitor.prototype.toI18nMessage = function (nodes, meaning, description) {
	          this._isIcu = nodes.length == 1 && nodes[0] instanceof Expansion;
	          this._icuDepth = 0;
	          this._placeholderRegistry = new PlaceholderRegistry();
	          this._placeholderToContent = {};
	          this._placeholderToIds = {};
	          var i18nodes = visitAll(this, nodes, {});
	          return new Message(i18nodes, this._placeholderToContent, this._placeholderToIds, meaning, description);
	      };
	      _I18nVisitor.prototype.visitElement = function (el, context) {
	          var children = visitAll(this, el.children);
	          var attrs = {};
	          el.attrs.forEach(function (attr) {
	              // Do not visit the attributes, translatable ones are top-level ASTs
	              attrs[attr.name] = attr.value;
	          });
	          var isVoid = getHtmlTagDefinition(el.name).isVoid;
	          var startPhName = this._placeholderRegistry.getStartTagPlaceholderName(el.name, attrs, isVoid);
	          this._placeholderToContent[startPhName] = el.sourceSpan.toString();
	          var closePhName = '';
	          if (!isVoid) {
	              closePhName = this._placeholderRegistry.getCloseTagPlaceholderName(el.name);
	              this._placeholderToContent[closePhName] = "</" + el.name + ">";
	          }
	          return new TagPlaceholder(el.name, attrs, startPhName, closePhName, children, isVoid, el.sourceSpan);
	      };
	      _I18nVisitor.prototype.visitAttribute = function (attribute, context) {
	          return this._visitTextWithInterpolation(attribute.value, attribute.sourceSpan);
	      };
	      _I18nVisitor.prototype.visitText = function (text, context) {
	          return this._visitTextWithInterpolation(text.value, text.sourceSpan);
	      };
	      _I18nVisitor.prototype.visitComment = function (comment, context) { return null; };
	      _I18nVisitor.prototype.visitExpansion = function (icu, context) {
	          var _this = this;
	          this._icuDepth++;
	          var i18nIcuCases = {};
	          var i18nIcu = new Icu(icu.switchValue, icu.type, i18nIcuCases, icu.sourceSpan);
	          icu.cases.forEach(function (caze) {
	              i18nIcuCases[caze.value] = new Container(caze.expression.map(function (node) { return node.visit(_this, {}); }), caze.expSourceSpan);
	          });
	          this._icuDepth--;
	          if (this._isIcu || this._icuDepth > 0) {
	              // If the message (vs a part of the message) is an ICU message returns it
	              return i18nIcu;
	          }
	          // Else returns a placeholder
	          // ICU placeholders should not be replaced with their original content but with the their
	          // translations. We need to create a new visitor (they are not re-entrant) to compute the
	          // message id.
	          // TODO(vicb): add a html.Node -> i18n.Message cache to avoid having to re-create the msg
	          var phName = this._placeholderRegistry.getPlaceholderName('ICU', icu.sourceSpan.toString());
	          var visitor = new _I18nVisitor(this._expressionParser, this._interpolationConfig);
	          this._placeholderToIds[phName] = digestMessage(visitor.toI18nMessage([icu], '', ''));
	          return new IcuPlaceholder(i18nIcu, phName, icu.sourceSpan);
	      };
	      _I18nVisitor.prototype.visitExpansionCase = function (icuCase, context) {
	          throw new Error('Unreachable code');
	      };
	      _I18nVisitor.prototype._visitTextWithInterpolation = function (text, sourceSpan) {
	          var splitInterpolation = this._expressionParser.splitInterpolation(text, sourceSpan.start.toString(), this._interpolationConfig);
	          if (!splitInterpolation) {
	              // No expression, return a single text
	              return new Text$1(text, sourceSpan);
	          }
	          // Return a group of text + expressions
	          var nodes = [];
	          var container = new Container(nodes, sourceSpan);
	          var _a = this._interpolationConfig, sDelimiter = _a.start, eDelimiter = _a.end;
	          for (var i = 0; i < splitInterpolation.strings.length - 1; i++) {
	              var expression = splitInterpolation.expressions[i];
	              var baseName = _extractPlaceholderName(expression) || 'INTERPOLATION';
	              var phName = this._placeholderRegistry.getPlaceholderName(baseName, expression);
	              if (splitInterpolation.strings[i].length) {
	                  // No need to add empty strings
	                  nodes.push(new Text$1(splitInterpolation.strings[i], sourceSpan));
	              }
	              nodes.push(new Placeholder(expression, phName, sourceSpan));
	              this._placeholderToContent[phName] = sDelimiter + expression + eDelimiter;
	          }
	          // The last index contains no expression
	          var lastStringIdx = splitInterpolation.strings.length - 1;
	          if (splitInterpolation.strings[lastStringIdx].length) {
	              nodes.push(new Text$1(splitInterpolation.strings[lastStringIdx], sourceSpan));
	          }
	          return container;
	      };
	      return _I18nVisitor;
	  }());
	  var _CUSTOM_PH_EXP = /\/\/[\s\S]*i18n[\s\S]*\([\s\S]*ph[\s\S]*=[\s\S]*"([\s\S]*?)"[\s\S]*\)/g;
	  function _extractPlaceholderName(input) {
	      return input.split(_CUSTOM_PH_EXP)[1];
	  }

	  /**
	   * @license
	   * Copyright Google Inc. All Rights Reserved.
	   *
	   * Use of this source code is governed by an MIT-style license that can be
	   * found in the LICENSE file at https://angular.io/license
	   */
	  var __extends$4 = (this && this.__extends) || function (d, b) {
	      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	      function __() { this.constructor = d; }
	      d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	  };
	  /**
	   * An i18n error.
	   */
	  var I18nError = (function (_super) {
	      __extends$4(I18nError, _super);
	      function I18nError(span, msg) {
	          _super.call(this, span, msg);
	      }
	      return I18nError;
	  }(ParseError));

	  var _I18N_ATTR = 'i18n';
	  var _I18N_ATTR_PREFIX = 'i18n-';
	  var _I18N_COMMENT_PREFIX_REGEXP = /^i18n:?/;
	  /**
	   * Extract translatable messages from an html AST
	   */
	  function extractMessages(nodes, interpolationConfig, implicitTags, implicitAttrs) {
	      var visitor = new _Visitor(implicitTags, implicitAttrs);
	      return visitor.extract(nodes, interpolationConfig);
	  }
	  function mergeTranslations(nodes, translations, interpolationConfig, implicitTags, implicitAttrs) {
	      var visitor = new _Visitor(implicitTags, implicitAttrs);
	      return visitor.merge(nodes, translations, interpolationConfig);
	  }
	  var ExtractionResult = (function () {
	      function ExtractionResult(messages, errors) {
	          this.messages = messages;
	          this.errors = errors;
	      }
	      return ExtractionResult;
	  }());
	  var _VisitorMode;
	  (function (_VisitorMode) {
	      _VisitorMode[_VisitorMode["Extract"] = 0] = "Extract";
	      _VisitorMode[_VisitorMode["Merge"] = 1] = "Merge";
	  })(_VisitorMode || (_VisitorMode = {}));
	  /**
	   * This Visitor is used:
	   * 1. to extract all the translatable strings from an html AST (see `extract()`),
	   * 2. to replace the translatable strings with the actual translations (see `merge()`)
	   *
	   * @internal
	   */
	  var _Visitor = (function () {
	      function _Visitor(_implicitTags, _implicitAttrs) {
	          this._implicitTags = _implicitTags;
	          this._implicitAttrs = _implicitAttrs;
	      }
	      /**
	       * Extracts the messages from the tree
	       */
	      _Visitor.prototype.extract = function (nodes, interpolationConfig) {
	          var _this = this;
	          this._init(_VisitorMode.Extract, interpolationConfig);
	          nodes.forEach(function (node) { return node.visit(_this, null); });
	          if (this._inI18nBlock) {
	              this._reportError(nodes[nodes.length - 1], 'Unclosed block');
	          }
	          return new ExtractionResult(this._messages, this._errors);
	      };
	      /**
	       * Returns a tree where all translatable nodes are translated
	       */
	      _Visitor.prototype.merge = function (nodes, translations, interpolationConfig) {
	          this._init(_VisitorMode.Merge, interpolationConfig);
	          this._translations = translations;
	          // Construct a single fake root element
	          var wrapper = new Element('wrapper', [], nodes, null, null, null);
	          var translatedNode = wrapper.visit(this, null);
	          if (this._inI18nBlock) {
	              this._reportError(nodes[nodes.length - 1], 'Unclosed block');
	          }
	          return new ParseTreeResult(translatedNode.children, this._errors);
	      };
	      _Visitor.prototype.visitExpansionCase = function (icuCase, context) {
	          // Parse cases for translatable html attributes
	          var expression = visitAll(this, icuCase.expression, context);
	          if (this._mode === _VisitorMode.Merge) {
	              return new ExpansionCase(icuCase.value, expression, icuCase.sourceSpan, icuCase.valueSourceSpan, icuCase.expSourceSpan);
	          }
	      };
	      _Visitor.prototype.visitExpansion = function (icu, context) {
	          this._mayBeAddBlockChildren(icu);
	          var wasInIcu = this._inIcu;
	          if (!this._inIcu) {
	              // nested ICU messages should not be extracted but top-level translated as a whole
	              if (this._isInTranslatableSection) {
	                  this._addMessage([icu]);
	              }
	              this._inIcu = true;
	          }
	          var cases = visitAll(this, icu.cases, context);
	          if (this._mode === _VisitorMode.Merge) {
	              icu = new Expansion(icu.switchValue, icu.type, cases, icu.sourceSpan, icu.switchValueSourceSpan);
	          }
	          this._inIcu = wasInIcu;
	          return icu;
	      };
	      _Visitor.prototype.visitComment = function (comment, context) {
	          var isOpening = _isOpeningComment(comment);
	          if (isOpening && this._isInTranslatableSection) {
	              this._reportError(comment, 'Could not start a block inside a translatable section');
	              return;
	          }
	          var isClosing = _isClosingComment(comment);
	          if (isClosing && !this._inI18nBlock) {
	              this._reportError(comment, 'Trying to close an unopened block');
	              return;
	          }
	          if (!this._inI18nNode && !this._inIcu) {
	              if (!this._inI18nBlock) {
	                  if (isOpening) {
	                      this._inI18nBlock = true;
	                      this._blockStartDepth = this._depth;
	                      this._blockChildren = [];
	                      this._blockMeaningAndDesc = comment.value.replace(_I18N_COMMENT_PREFIX_REGEXP, '').trim();
	                      this._openTranslatableSection(comment);
	                  }
	              }
	              else {
	                  if (isClosing) {
	                      if (this._depth == this._blockStartDepth) {
	                          this._closeTranslatableSection(comment, this._blockChildren);
	                          this._inI18nBlock = false;
	                          var message = this._addMessage(this._blockChildren, this._blockMeaningAndDesc);
	                          // merge attributes in sections
	                          var nodes = this._translateMessage(comment, message);
	                          return visitAll(this, nodes);
	                      }
	                      else {
	                          this._reportError(comment, 'I18N blocks should not cross element boundaries');
	                          return;
	                      }
	                  }
	              }
	          }
	      };
	      _Visitor.prototype.visitText = function (text, context) {
	          if (this._isInTranslatableSection) {
	              this._mayBeAddBlockChildren(text);
	          }
	          return text;
	      };
	      _Visitor.prototype.visitElement = function (el, context) {
	          var _this = this;
	          this._mayBeAddBlockChildren(el);
	          this._depth++;
	          var wasInI18nNode = this._inI18nNode;
	          var wasInImplicitNode = this._inImplicitNode;
	          var childNodes;
	          // Extract only top level nodes with the (implicit) "i18n" attribute if not in a block or an ICU
	          // message
	          var i18nAttr = _getI18nAttr(el);
	          var isImplicit = this._implicitTags.some(function (tag) { return el.name === tag; }) &&
	              !this._inIcu && !this._isInTranslatableSection;
	          var isTopLevelImplicit = !wasInImplicitNode && isImplicit;
	          this._inImplicitNode = this._inImplicitNode || isImplicit;
	          if (!this._isInTranslatableSection && !this._inIcu) {
	              if (i18nAttr) {
	                  // explicit translation
	                  this._inI18nNode = true;
	                  var message = this._addMessage(el.children, i18nAttr.value);
	                  childNodes = this._translateMessage(el, message);
	              }
	              else if (isTopLevelImplicit) {
	                  // implicit translation
	                  this._inI18nNode = true;
	                  var message = this._addMessage(el.children);
	                  childNodes = this._translateMessage(el, message);
	              }
	              if (this._mode == _VisitorMode.Extract) {
	                  var isTranslatable = i18nAttr || isTopLevelImplicit;
	                  if (isTranslatable) {
	                      this._openTranslatableSection(el);
	                  }
	                  visitAll(this, el.children);
	                  if (isTranslatable) {
	                      this._closeTranslatableSection(el, el.children);
	                  }
	              }
	              if (this._mode === _VisitorMode.Merge && !i18nAttr && !isTopLevelImplicit) {
	                  childNodes = [];
	                  el.children.forEach(function (child) {
	                      var visited = child.visit(_this, context);
	                      if (visited && !_this._isInTranslatableSection) {
	                          // Do not add the children from translatable sections (= i18n blocks here)
	                          // They will be added when the section is close (i.e. on `<!-- /i18n -->`)
	                          childNodes = childNodes.concat(visited);
	                      }
	                  });
	              }
	          }
	          else {
	              if (i18nAttr || isTopLevelImplicit) {
	                  this._reportError(el, 'Could not mark an element as translatable inside a translatable section');
	              }
	              if (this._mode == _VisitorMode.Extract) {
	                  // Descend into child nodes for extraction
	                  visitAll(this, el.children);
	              }
	              if (this._mode == _VisitorMode.Merge) {
	                  // Translate attributes in ICU messages
	                  childNodes = [];
	                  el.children.forEach(function (child) {
	                      var visited = child.visit(_this, context);
	                      if (visited && !_this._isInTranslatableSection) {
	                          // Do not add the children from translatable sections (= i18n blocks here)
	                          // They will be added when the section is close (i.e. on `<!-- /i18n -->`)
	                          childNodes = childNodes.concat(visited);
	                      }
	                  });
	              }
	          }
	          this._visitAttributesOf(el);
	          this._depth--;
	          this._inI18nNode = wasInI18nNode;
	          this._inImplicitNode = wasInImplicitNode;
	          if (this._mode === _VisitorMode.Merge) {
	              // There are no childNodes in translatable sections - those nodes will be replace anyway
	              var translatedAttrs = this._translateAttributes(el);
	              return new Element(el.name, translatedAttrs, childNodes, el.sourceSpan, el.startSourceSpan, el.endSourceSpan);
	          }
	      };
	      _Visitor.prototype.visitAttribute = function (attribute, context) {
	          throw new Error('unreachable code');
	      };
	      _Visitor.prototype._init = function (mode, interpolationConfig) {
	          this._mode = mode;
	          this._inI18nBlock = false;
	          this._inI18nNode = false;
	          this._depth = 0;
	          this._inIcu = false;
	          this._msgCountAtSectionStart = void 0;
	          this._errors = [];
	          this._messages = [];
	          this._inImplicitNode = false;
	          this._createI18nMessage = createI18nMessageFactory(interpolationConfig);
	      };
	      // looks for translatable attributes
	      _Visitor.prototype._visitAttributesOf = function (el) {
	          var _this = this;
	          var explicitAttrNameToValue = {};
	          var implicitAttrNames = this._implicitAttrs[el.name] || [];
	          el.attrs.filter(function (attr) { return attr.name.startsWith(_I18N_ATTR_PREFIX); })
	              .forEach(function (attr) { return explicitAttrNameToValue[attr.name.slice(_I18N_ATTR_PREFIX.length)] =
	              attr.value; });
	          el.attrs.forEach(function (attr) {
	              if (attr.name in explicitAttrNameToValue) {
	                  _this._addMessage([attr], explicitAttrNameToValue[attr.name]);
	              }
	              else if (implicitAttrNames.some(function (name) { return attr.name === name; })) {
	                  _this._addMessage([attr]);
	              }
	          });
	      };
	      // add a translatable message
	      _Visitor.prototype._addMessage = function (ast, meaningAndDesc) {
	          if (ast.length == 0 ||
	              ast.length == 1 && ast[0] instanceof Attribute$1 && !ast[0].value) {
	              // Do not create empty messages
	              return;
	          }
	          var _a = _splitMeaningAndDesc(meaningAndDesc), meaning = _a[0], description = _a[1];
	          var message = this._createI18nMessage(ast, meaning, description);
	          this._messages.push(message);
	          return message;
	      };
	      // Translates the given message given the `TranslationBundle`
	      // no-op when called in extraction mode (returns [])
	      _Visitor.prototype._translateMessage = function (el, message) {
	          if (message && this._mode === _VisitorMode.Merge) {
	              var id = digestMessage(message);
	              var nodes = this._translations.get(id);
	              if (nodes) {
	                  return nodes;
	              }
	              this._reportError(el, "Translation unavailable for message id=\"" + id + "\"");
	          }
	          return [];
	      };
	      // translate the attributes of an element and remove i18n specific attributes
	      _Visitor.prototype._translateAttributes = function (el) {
	          var _this = this;
	          var attributes = el.attrs;
	          var i18nAttributeMeanings = {};
	          attributes.forEach(function (attr) {
	              if (attr.name.startsWith(_I18N_ATTR_PREFIX)) {
	                  i18nAttributeMeanings[attr.name.slice(_I18N_ATTR_PREFIX.length)] =
	                      _splitMeaningAndDesc(attr.value)[0];
	              }
	          });
	          var translatedAttributes = [];
	          attributes.forEach(function (attr) {
	              if (attr.name === _I18N_ATTR || attr.name.startsWith(_I18N_ATTR_PREFIX)) {
	                  // strip i18n specific attributes
	                  return;
	              }
	              if (attr.value && attr.value != '' && i18nAttributeMeanings.hasOwnProperty(attr.name)) {
	                  var meaning = i18nAttributeMeanings[attr.name];
	                  var message = _this._createI18nMessage([attr], meaning, '');
	                  var id = digestMessage(message);
	                  var nodes = _this._translations.get(id);
	                  if (nodes) {
	                      if (nodes[0] instanceof Text) {
	                          var value = nodes[0].value;
	                          translatedAttributes.push(new Attribute$1(attr.name, value, attr.sourceSpan));
	                      }
	                      else {
	                          _this._reportError(el, "Unexpected translation for attribute \"" + attr.name + "\" (id=\"" + id + "\")");
	                      }
	                  }
	                  else {
	                      _this._reportError(el, "Translation unavailable for attribute \"" + attr.name + "\" (id=\"" + id + "\")");
	                  }
	              }
	              else {
	                  translatedAttributes.push(attr);
	              }
	          });
	          return translatedAttributes;
	      };
	      /**
	       * Add the node as a child of the block when:
	       * - we are in a block,
	       * - we are not inside a ICU message (those are handled separately),
	       * - the node is a "direct child" of the block
	       */
	      _Visitor.prototype._mayBeAddBlockChildren = function (node) {
	          if (this._inI18nBlock && !this._inIcu && this._depth == this._blockStartDepth) {
	              this._blockChildren.push(node);
	          }
	      };
	      /**
	       * Marks the start of a section, see `_endSection`
	       */
	      _Visitor.prototype._openTranslatableSection = function (node) {
	          if (this._isInTranslatableSection) {
	              this._reportError(node, 'Unexpected section start');
	          }
	          else {
	              this._msgCountAtSectionStart = this._messages.length;
	          }
	      };
	      Object.defineProperty(_Visitor.prototype, "_isInTranslatableSection", {
	          /**
	           * A translatable section could be:
	           * - a translatable element,
	           * - nodes between `<!-- i18n -->` and `<!-- /i18n -->` comments
	           */
	          get: function () {
	              return this._msgCountAtSectionStart !== void 0;
	          },
	          enumerable: true,
	          configurable: true
	      });
	      /**
	       * Terminates a section.
	       *
	       * If a section has only one significant children (comments not significant) then we should not
	       * keep the message from this children:
	       *
	       * `<p i18n="meaning|description">{ICU message}</p>` would produce two messages:
	       * - one for the <p> content with meaning and description,
	       * - another one for the ICU message.
	       *
	       * In this case the last message is discarded as it contains less information (the AST is
	       * otherwise identical).
	       *
	       * Note that we should still keep messages extracted from attributes inside the section (ie in the
	       * ICU message here)
	       */
	      _Visitor.prototype._closeTranslatableSection = function (node, directChildren) {
	          if (!this._isInTranslatableSection) {
	              this._reportError(node, 'Unexpected section end');
	              return;
	          }
	          var startIndex = this._msgCountAtSectionStart;
	          var significantChildren = directChildren.reduce(function (count, node) { return count + (node instanceof Comment ? 0 : 1); }, 0);
	          if (significantChildren == 1) {
	              for (var i = this._messages.length - 1; i >= startIndex; i--) {
	                  var ast = this._messages[i].nodes;
	                  if (!(ast.length == 1 && ast[0] instanceof Text$1)) {
	                      this._messages.splice(i, 1);
	                      break;
	                  }
	              }
	          }
	          this._msgCountAtSectionStart = void 0;
	      };
	      _Visitor.prototype._reportError = function (node, msg) {
	          this._errors.push(new I18nError(node.sourceSpan, msg));
	      };
	      return _Visitor;
	  }());
	  function _isOpeningComment(n) {
	      return n instanceof Comment && n.value && n.value.startsWith('i18n');
	  }
	  function _isClosingComment(n) {
	      return n instanceof Comment && n.value && n.value === '/i18n';
	  }
	  function _getI18nAttr(p) {
	      return p.attrs.find(function (attr) { return attr.name === _I18N_ATTR; }) || null;
	  }
	  function _splitMeaningAndDesc(i18n) {
	      if (!i18n)
	          return ['', ''];
	      var pipeIndex = i18n.indexOf('|');
	      return pipeIndex == -1 ? ['', i18n] : [i18n.slice(0, pipeIndex), i18n.slice(pipeIndex + 1)];
	  }

	  /**
	   * A container for message extracted from the templates.
	   */
	  var MessageBundle = (function () {
	      function MessageBundle(_htmlParser, _implicitTags, _implicitAttrs) {
	          this._htmlParser = _htmlParser;
	          this._implicitTags = _implicitTags;
	          this._implicitAttrs = _implicitAttrs;
	          this._messageMap = {};
	      }
	      MessageBundle.prototype.updateFromTemplate = function (html, url, interpolationConfig) {
	          var _this = this;
	          var htmlParserResult = this._htmlParser.parse(html, url, true, interpolationConfig);
	          if (htmlParserResult.errors.length) {
	              return htmlParserResult.errors;
	          }
	          var i18nParserResult = extractMessages(htmlParserResult.rootNodes, interpolationConfig, this._implicitTags, this._implicitAttrs);
	          if (i18nParserResult.errors.length) {
	              return i18nParserResult.errors;
	          }
	          i18nParserResult.messages.forEach(function (message) { _this._messageMap[digestMessage(message)] = message; });
	      };
	      MessageBundle.prototype.getMessageMap = function () { return this._messageMap; };
	      MessageBundle.prototype.write = function (serializer) { return serializer.write(this._messageMap); };
	      return MessageBundle;
	  }());

	  var XmlTagDefinition = (function () {
	      function XmlTagDefinition() {
	          this.closedByParent = false;
	          this.contentType = TagContentType.PARSABLE_DATA;
	          this.isVoid = false;
	          this.ignoreFirstLf = false;
	          this.canSelfClose = true;
	      }
	      XmlTagDefinition.prototype.requireExtraParent = function (currentParent) { return false; };
	      XmlTagDefinition.prototype.isClosedByChild = function (name) { return false; };
	      return XmlTagDefinition;
	  }());
	  var _TAG_DEFINITION = new XmlTagDefinition();
	  function getXmlTagDefinition(tagName) {
	      return _TAG_DEFINITION;
	  }

	  /**
	   * @license
	   * Copyright Google Inc. All Rights Reserved.
	   *
	   * Use of this source code is governed by an MIT-style license that can be
	   * found in the LICENSE file at https://angular.io/license
	   */
	  var __extends$5 = (this && this.__extends) || function (d, b) {
	      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	      function __() { this.constructor = d; }
	      d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	  };
	  var XmlParser = (function (_super) {
	      __extends$5(XmlParser, _super);
	      function XmlParser() {
	          _super.call(this, getXmlTagDefinition);
	      }
	      XmlParser.prototype.parse = function (source, url, parseExpansionForms) {
	          if (parseExpansionForms === void 0) { parseExpansionForms = false; }
	          return _super.prototype.parse.call(this, source, url, parseExpansionForms, null);
	      };
	      return XmlParser;
	  }(Parser$1));

	  /**
	   * @license
	   * Copyright Google Inc. All Rights Reserved.
	   *
	   * Use of this source code is governed by an MIT-style license that can be
	   * found in the LICENSE file at https://angular.io/license
	   */
	  // Generate a map of placeholder to content indexed by message ids
	  function extractPlaceholders(messageBundle) {
	      var messageMap = messageBundle.getMessageMap();
	      var placeholders = {};
	      Object.keys(messageMap).forEach(function (msgId) {
	          placeholders[msgId] = messageMap[msgId].placeholders;
	      });
	      return placeholders;
	  }
	  // Generate a map of placeholder to message ids indexed by message ids
	  function extractPlaceholderToIds(messageBundle) {
	      var messageMap = messageBundle.getMessageMap();
	      var placeholderToIds = {};
	      Object.keys(messageMap).forEach(function (msgId) {
	          placeholderToIds[msgId] = messageMap[msgId].placeholderToMsgIds;
	      });
	      return placeholderToIds;
	  }

	  /**
	   * @license
	   * Copyright Google Inc. All Rights Reserved.
	   *
	   * Use of this source code is governed by an MIT-style license that can be
	   * found in the LICENSE file at https://angular.io/license
	   */
	  var __extends$6 = (this && this.__extends) || function (d, b) {
	      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	      function __() { this.constructor = d; }
	      d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	  };
	  var _Visitor$1 = (function () {
	      function _Visitor() {
	      }
	      _Visitor.prototype.visitTag = function (tag) {
	          var _this = this;
	          var strAttrs = this._serializeAttributes(tag.attrs);
	          if (tag.children.length == 0) {
	              return "<" + tag.name + strAttrs + "/>";
	          }
	          var strChildren = tag.children.map(function (node) { return node.visit(_this); });
	          return "<" + tag.name + strAttrs + ">" + strChildren.join('') + "</" + tag.name + ">";
	      };
	      _Visitor.prototype.visitText = function (text) { return text.value; };
	      _Visitor.prototype.visitDeclaration = function (decl) {
	          return "<?xml" + this._serializeAttributes(decl.attrs) + " ?>";
	      };
	      _Visitor.prototype._serializeAttributes = function (attrs) {
	          var strAttrs = Object.keys(attrs).map(function (name) { return (name + "=\"" + attrs[name] + "\""); }).join(' ');
	          return strAttrs.length > 0 ? ' ' + strAttrs : '';
	      };
	      _Visitor.prototype.visitDoctype = function (doctype) {
	          return "<!DOCTYPE " + doctype.rootTag + " [\n" + doctype.dtd + "\n]>";
	      };
	      return _Visitor;
	  }());
	  var _visitor = new _Visitor$1();
	  function serialize(nodes) {
	      return nodes.map(function (node) { return node.visit(_visitor); }).join('');
	  }
	  var Declaration = (function () {
	      function Declaration(unescapedAttrs) {
	          var _this = this;
	          this.attrs = {};
	          Object.keys(unescapedAttrs).forEach(function (k) {
	              _this.attrs[k] = _escapeXml(unescapedAttrs[k]);
	          });
	      }
	      Declaration.prototype.visit = function (visitor) { return visitor.visitDeclaration(this); };
	      return Declaration;
	  }());
	  var Doctype = (function () {
	      function Doctype(rootTag, dtd) {
	          this.rootTag = rootTag;
	          this.dtd = dtd;
	      }
	      ;
	      Doctype.prototype.visit = function (visitor) { return visitor.visitDoctype(this); };
	      return Doctype;
	  }());
	  var Tag = (function () {
	      function Tag(name, unescapedAttrs, children) {
	          var _this = this;
	          if (unescapedAttrs === void 0) { unescapedAttrs = {}; }
	          if (children === void 0) { children = []; }
	          this.name = name;
	          this.children = children;
	          this.attrs = {};
	          Object.keys(unescapedAttrs).forEach(function (k) {
	              _this.attrs[k] = _escapeXml(unescapedAttrs[k]);
	          });
	      }
	      Tag.prototype.visit = function (visitor) { return visitor.visitTag(this); };
	      return Tag;
	  }());
	  var Text$2 = (function () {
	      function Text(unescapedValue) {
	          this.value = _escapeXml(unescapedValue);
	      }
	      ;
	      Text.prototype.visit = function (visitor) { return visitor.visitText(this); };
	      return Text;
	  }());
	  var CR = (function (_super) {
	      __extends$6(CR, _super);
	      function CR(ws) {
	          if (ws === void 0) { ws = 0; }
	          _super.call(this, "\n" + new Array(ws + 1).join(' '));
	      }
	      return CR;
	  }(Text$2));
	  var _ESCAPED_CHARS = [
	      [/&/g, '&amp;'],
	      [/"/g, '&quot;'],
	      [/'/g, '&apos;'],
	      [/</g, '&lt;'],
	      [/>/g, '&gt;'],
	  ];
	  function _escapeXml(text) {
	      return _ESCAPED_CHARS.reduce(function (text, entry) { return text.replace(entry[0], entry[1]); }, text);
	  }

	  var _VERSION = '1.2';
	  var _XMLNS = 'urn:oasis:names:tc:xliff:document:1.2';
	  // TODO(vicb): make this a param (s/_/-/)
	  var _SOURCE_LANG = 'en';
	  var _PLACEHOLDER_TAG = 'x';
	  var _SOURCE_TAG = 'source';
	  var _TARGET_TAG = 'target';
	  var _UNIT_TAG = 'trans-unit';
	  // http://docs.oasis-open.org/xliff/v1.2/os/xliff-core.html
	  // http://docs.oasis-open.org/xliff/v1.2/xliff-profile-html/xliff-profile-html-1.2.html
	  var Xliff = (function () {
	      function Xliff(_htmlParser, _interpolationConfig) {
	          this._htmlParser = _htmlParser;
	          this._interpolationConfig = _interpolationConfig;
	      }
	      Xliff.prototype.write = function (messageMap) {
	          var visitor = new _WriteVisitor();
	          var transUnits = [];
	          Object.keys(messageMap).forEach(function (id) {
	              var message = messageMap[id];
	              var transUnit = new Tag(_UNIT_TAG, { id: id, datatype: 'html' });
	              transUnit.children.push(new CR(8), new Tag(_SOURCE_TAG, {}, visitor.serialize(message.nodes)), new CR(8), new Tag(_TARGET_TAG));
	              if (message.description) {
	                  transUnit.children.push(new CR(8), new Tag('note', { priority: '1', from: 'description' }, [new Text$2(message.description)]));
	              }
	              if (message.meaning) {
	                  transUnit.children.push(new CR(8), new Tag('note', { priority: '1', from: 'meaning' }, [new Text$2(message.meaning)]));
	              }
	              transUnit.children.push(new CR(6));
	              transUnits.push(new CR(6), transUnit);
	          });
	          var body = new Tag('body', {}, transUnits.concat([new CR(4)]));
	          var file = new Tag('file', { 'source-language': _SOURCE_LANG, datatype: 'plaintext', original: 'ng2.template' }, [new CR(4), body, new CR(2)]);
	          var xliff = new Tag('xliff', { version: _VERSION, xmlns: _XMLNS }, [new CR(2), file, new CR()]);
	          return serialize([
	              new Declaration({ version: '1.0', encoding: 'UTF-8' }), new CR(), xliff, new CR()
	          ]);
	      };
	      Xliff.prototype.load = function (content, url, messageBundle) {
	          var _this = this;
	          // Parse the xtb file into xml nodes
	          var result = new XmlParser().parse(content, url);
	          if (result.errors.length) {
	              throw new Error("xtb parse errors:\n" + result.errors.join('\n'));
	          }
	          // Replace the placeholders, messages are now string
	          var _a = new _LoadVisitor().parse(result.rootNodes, messageBundle), messages = _a.messages, errors = _a.errors;
	          if (errors.length) {
	              throw new Error("xtb parse errors:\n" + errors.join('\n'));
	          }
	          // Convert the string messages to html ast
	          // TODO(vicb): map error message back to the original message in xtb
	          var messageMap = {};
	          var parseErrors = [];
	          Object.keys(messages).forEach(function (id) {
	              var res = _this._htmlParser.parse(messages[id], url, true, _this._interpolationConfig);
	              parseErrors.push.apply(parseErrors, res.errors);
	              messageMap[id] = res.rootNodes;
	          });
	          if (parseErrors.length) {
	              throw new Error("xtb parse errors:\n" + parseErrors.join('\n'));
	          }
	          return messageMap;
	      };
	      return Xliff;
	  }());
	  var _WriteVisitor = (function () {
	      function _WriteVisitor() {
	      }
	      _WriteVisitor.prototype.visitText = function (text, context) { return [new Text$2(text.value)]; };
	      _WriteVisitor.prototype.visitContainer = function (container, context) {
	          var _this = this;
	          var nodes = [];
	          container.children.forEach(function (node) { return nodes.push.apply(nodes, node.visit(_this)); });
	          return nodes;
	      };
	      _WriteVisitor.prototype.visitIcu = function (icu, context) {
	          if (this._isInIcu) {
	              // nested ICU is not supported
	              throw new Error('xliff does not support nested ICU messages');
	          }
	          this._isInIcu = true;
	          // TODO(vicb): support ICU messages
	          // https://lists.oasis-open.org/archives/xliff/201201/msg00028.html
	          // http://docs.oasis-open.org/xliff/v1.2/xliff-profile-po/xliff-profile-po-1.2-cd02.html
	          var nodes = [];
	          this._isInIcu = false;
	          return nodes;
	      };
	      _WriteVisitor.prototype.visitTagPlaceholder = function (ph, context) {
	          var ctype = getCtypeForTag(ph.tag);
	          var startTagPh = new Tag(_PLACEHOLDER_TAG, { id: ph.startName, ctype: ctype });
	          if (ph.isVoid) {
	              // void tags have no children nor closing tags
	              return [startTagPh];
	          }
	          var closeTagPh = new Tag(_PLACEHOLDER_TAG, { id: ph.closeName, ctype: ctype });
	          return [startTagPh].concat(this.serialize(ph.children), [closeTagPh]);
	      };
	      _WriteVisitor.prototype.visitPlaceholder = function (ph, context) {
	          return [new Tag(_PLACEHOLDER_TAG, { id: ph.name })];
	      };
	      _WriteVisitor.prototype.visitIcuPlaceholder = function (ph, context) {
	          return [new Tag(_PLACEHOLDER_TAG, { id: ph.name })];
	      };
	      _WriteVisitor.prototype.serialize = function (nodes) {
	          var _this = this;
	          this._isInIcu = false;
	          return (_a = []).concat.apply(_a, nodes.map(function (node) { return node.visit(_this); }));
	          var _a;
	      };
	      return _WriteVisitor;
	  }());
	  // TODO(vicb): add error management (structure)
	  // TODO(vicb): factorize (xtb) ?
	  var _LoadVisitor = (function () {
	      function _LoadVisitor() {
	      }
	      _LoadVisitor.prototype.parse = function (nodes, messageBundle) {
	          var _this = this;
	          this._messageNodes = [];
	          this._translatedMessages = {};
	          this._msgId = '';
	          this._target = [];
	          this._errors = [];
	          // Find all messages
	          visitAll(this, nodes, null);
	          var messageMap = messageBundle.getMessageMap();
	          var placeholders = extractPlaceholders(messageBundle);
	          var placeholderToIds = extractPlaceholderToIds(messageBundle);
	          this._messageNodes
	              .filter(function (message) {
	              // Remove any messages that is not present in the source message bundle.
	              return messageMap.hasOwnProperty(message[0]);
	          })
	              .sort(function (a, b) {
	              // Because there could be no ICU placeholders inside an ICU message,
	              // we do not need to take into account the `placeholderToMsgIds` of the referenced
	              // messages, those would always be empty
	              // TODO(vicb): overkill - create 2 buckets and [...woDeps, ...wDeps].process()
	              if (Object.keys(messageMap[a[0]].placeholderToMsgIds).length == 0) {
	                  return -1;
	              }
	              if (Object.keys(messageMap[b[0]].placeholderToMsgIds).length == 0) {
	                  return 1;
	              }
	              return 0;
	          })
	              .forEach(function (message) {
	              var id = message[0];
	              _this._placeholders = placeholders[id] || {};
	              _this._placeholderToIds = placeholderToIds[id] || {};
	              // TODO(vicb): make sure there is no `_TRANSLATIONS_TAG` nor `_TRANSLATION_TAG`
	              _this._translatedMessages[id] = visitAll(_this, message[1]).join('');
	          });
	          return { messages: this._translatedMessages, errors: this._errors };
	      };
	      _LoadVisitor.prototype.visitElement = function (element, context) {
	          switch (element.name) {
	              case _UNIT_TAG:
	                  this._target = null;
	                  var msgId = element.attrs.find(function (attr) { return attr.name === 'id'; });
	                  if (!msgId) {
	                      this._addError(element, "<" + _UNIT_TAG + "> misses the \"id\" attribute");
	                  }
	                  else {
	                      this._msgId = msgId.value;
	                  }
	                  visitAll(this, element.children, null);
	                  if (this._msgId !== null) {
	                      this._messageNodes.push([this._msgId, this._target]);
	                  }
	                  break;
	              case _SOURCE_TAG:
	                  // ignore source message
	                  break;
	              case _TARGET_TAG:
	                  this._target = element.children;
	                  break;
	              case _PLACEHOLDER_TAG:
	                  var idAttr = element.attrs.find(function (attr) { return attr.name === 'id'; });
	                  if (!idAttr) {
	                      this._addError(element, "<" + _PLACEHOLDER_TAG + "> misses the \"id\" attribute");
	                  }
	                  else {
	                      var id = idAttr.value;
	                      if (this._placeholders.hasOwnProperty(id)) {
	                          return this._placeholders[id];
	                      }
	                      if (this._placeholderToIds.hasOwnProperty(id) &&
	                          this._translatedMessages.hasOwnProperty(this._placeholderToIds[id])) {
	                          return this._translatedMessages[this._placeholderToIds[id]];
	                      }
	                      // TODO(vicb): better error message for when
	                      // !this._translatedMessages.hasOwnProperty(this._placeholderToIds[id])
	                      this._addError(element, "The placeholder \"" + id + "\" does not exists in the source message");
	                  }
	                  break;
	              default:
	                  visitAll(this, element.children, null);
	          }
	      };
	      _LoadVisitor.prototype.visitAttribute = function (attribute, context) {
	          throw new Error('unreachable code');
	      };
	      _LoadVisitor.prototype.visitText = function (text, context) { return text.value; };
	      _LoadVisitor.prototype.visitComment = function (comment, context) { return ''; };
	      _LoadVisitor.prototype.visitExpansion = function (expansion, context) {
	          throw new Error('unreachable code');
	      };
	      _LoadVisitor.prototype.visitExpansionCase = function (expansionCase, context) {
	          throw new Error('unreachable code');
	      };
	      _LoadVisitor.prototype._addError = function (node, message) {
	          this._errors.push(new I18nError(node.sourceSpan, message));
	      };
	      return _LoadVisitor;
	  }());
	  function getCtypeForTag(tag) {
	      switch (tag.toLowerCase()) {
	          case 'br':
	              return 'lb';
	          case 'img':
	              return 'image';
	          default:
	              return "x-" + tag;
	      }
	  }

	  var _MESSAGES_TAG = 'messagebundle';
	  var _MESSAGE_TAG = 'msg';
	  var _PLACEHOLDER_TAG$1 = 'ph';
	  var _EXEMPLE_TAG = 'ex';
	  var _DOCTYPE = "<!ELEMENT messagebundle (msg)*>\n<!ATTLIST messagebundle class CDATA #IMPLIED>\n\n<!ELEMENT msg (#PCDATA|ph|source)*>\n<!ATTLIST msg id CDATA #IMPLIED>\n<!ATTLIST msg seq CDATA #IMPLIED>\n<!ATTLIST msg name CDATA #IMPLIED>\n<!ATTLIST msg desc CDATA #IMPLIED>\n<!ATTLIST msg meaning CDATA #IMPLIED>\n<!ATTLIST msg obsolete (obsolete) #IMPLIED>\n<!ATTLIST msg xml:space (default|preserve) \"default\">\n<!ATTLIST msg is_hidden CDATA #IMPLIED>\n\n<!ELEMENT source (#PCDATA)>\n\n<!ELEMENT ph (#PCDATA|ex)*>\n<!ATTLIST ph name CDATA #REQUIRED>\n\n<!ELEMENT ex (#PCDATA)>";
	  var Xmb = (function () {
	      function Xmb() {
	      }
	      Xmb.prototype.write = function (messageMap) {
	          var visitor = new _Visitor$2();
	          var rootNode = new Tag(_MESSAGES_TAG);
	          Object.keys(messageMap).forEach(function (id) {
	              var message = messageMap[id];
	              var attrs = { id: id };
	              if (message.description) {
	                  attrs['desc'] = message.description;
	              }
	              if (message.meaning) {
	                  attrs['meaning'] = message.meaning;
	              }
	              rootNode.children.push(new CR(2), new Tag(_MESSAGE_TAG, attrs, visitor.serialize(message.nodes)));
	          });
	          rootNode.children.push(new CR());
	          return serialize([
	              new Declaration({ version: '1.0', encoding: 'UTF-8' }),
	              new CR(),
	              new Doctype(_MESSAGES_TAG, _DOCTYPE),
	              new CR(),
	              rootNode,
	              new CR(),
	          ]);
	      };
	      Xmb.prototype.load = function (content, url, messageBundle) {
	          throw new Error('Unsupported');
	      };
	      return Xmb;
	  }());
	  var _Visitor$2 = (function () {
	      function _Visitor() {
	      }
	      _Visitor.prototype.visitText = function (text, context) { return [new Text$2(text.value)]; };
	      _Visitor.prototype.visitContainer = function (container, context) {
	          var _this = this;
	          var nodes = [];
	          container.children.forEach(function (node) { return nodes.push.apply(nodes, node.visit(_this)); });
	          return nodes;
	      };
	      _Visitor.prototype.visitIcu = function (icu, context) {
	          var _this = this;
	          var nodes = [new Text$2("{" + icu.expression + ", " + icu.type + ", ")];
	          Object.keys(icu.cases).forEach(function (c) {
	              nodes.push.apply(nodes, [new Text$2(c + " {")].concat(icu.cases[c].visit(_this), [new Text$2("} ")]));
	          });
	          nodes.push(new Text$2("}"));
	          return nodes;
	      };
	      _Visitor.prototype.visitTagPlaceholder = function (ph, context) {
	          var startEx = new Tag(_EXEMPLE_TAG, {}, [new Text$2("<" + ph.tag + ">")]);
	          var startTagPh = new Tag(_PLACEHOLDER_TAG$1, { name: ph.startName }, [startEx]);
	          if (ph.isVoid) {
	              // void tags have no children nor closing tags
	              return [startTagPh];
	          }
	          var closeEx = new Tag(_EXEMPLE_TAG, {}, [new Text$2("</" + ph.tag + ">")]);
	          var closeTagPh = new Tag(_PLACEHOLDER_TAG$1, { name: ph.closeName }, [closeEx]);
	          return [startTagPh].concat(this.serialize(ph.children), [closeTagPh]);
	      };
	      _Visitor.prototype.visitPlaceholder = function (ph, context) {
	          return [new Tag(_PLACEHOLDER_TAG$1, { name: ph.name })];
	      };
	      _Visitor.prototype.visitIcuPlaceholder = function (ph, context) {
	          return [new Tag(_PLACEHOLDER_TAG$1, { name: ph.name })];
	      };
	      _Visitor.prototype.serialize = function (nodes) {
	          var _this = this;
	          return (_a = []).concat.apply(_a, nodes.map(function (node) { return node.visit(_this); }));
	          var _a;
	      };
	      return _Visitor;
	  }());

	  var _TRANSLATIONS_TAG = 'translationbundle';
	  var _TRANSLATION_TAG = 'translation';
	  var _PLACEHOLDER_TAG$2 = 'ph';
	  var Xtb = (function () {
	      function Xtb(_htmlParser, _interpolationConfig) {
	          this._htmlParser = _htmlParser;
	          this._interpolationConfig = _interpolationConfig;
	      }
	      Xtb.prototype.write = function (messageMap) { throw new Error('Unsupported'); };
	      Xtb.prototype.load = function (content, url, messageBundle) {
	          var _this = this;
	          // Parse the xtb file into xml nodes
	          var result = new XmlParser().parse(content, url);
	          if (result.errors.length) {
	              throw new Error("xtb parse errors:\n" + result.errors.join('\n'));
	          }
	          // Replace the placeholders, messages are now string
	          var _a = new _Visitor$3().parse(result.rootNodes, messageBundle), messages = _a.messages, errors = _a.errors;
	          if (errors.length) {
	              throw new Error("xtb parse errors:\n" + errors.join('\n'));
	          }
	          // Convert the string messages to html ast
	          // TODO(vicb): map error message back to the original message in xtb
	          var messageMap = {};
	          var parseErrors = [];
	          Object.keys(messages).forEach(function (id) {
	              var res = _this._htmlParser.parse(messages[id], url, true, _this._interpolationConfig);
	              parseErrors.push.apply(parseErrors, res.errors);
	              messageMap[id] = res.rootNodes;
	          });
	          if (parseErrors.length) {
	              throw new Error("xtb parse errors:\n" + parseErrors.join('\n'));
	          }
	          return messageMap;
	      };
	      return Xtb;
	  }());
	  var _Visitor$3 = (function () {
	      function _Visitor() {
	      }
	      _Visitor.prototype.parse = function (nodes, messageBundle) {
	          var _this = this;
	          this._messageNodes = [];
	          this._translatedMessages = {};
	          this._bundleDepth = 0;
	          this._translationDepth = 0;
	          this._errors = [];
	          // Find all messages
	          visitAll(this, nodes, null);
	          var messageMap = messageBundle.getMessageMap();
	          var placeholders = extractPlaceholders(messageBundle);
	          var placeholderToIds = extractPlaceholderToIds(messageBundle);
	          this._messageNodes
	              .filter(function (message) {
	              // Remove any messages that is not present in the source message bundle.
	              return messageMap.hasOwnProperty(message[0]);
	          })
	              .sort(function (a, b) {
	              // Because there could be no ICU placeholders inside an ICU message,
	              // we do not need to take into account the `placeholderToMsgIds` of the referenced
	              // messages, those would always be empty
	              // TODO(vicb): overkill - create 2 buckets and [...woDeps, ...wDeps].process()
	              if (Object.keys(messageMap[a[0]].placeholderToMsgIds).length == 0) {
	                  return -1;
	              }
	              if (Object.keys(messageMap[b[0]].placeholderToMsgIds).length == 0) {
	                  return 1;
	              }
	              return 0;
	          })
	              .forEach(function (message) {
	              var id = message[0];
	              _this._placeholders = placeholders[id] || {};
	              _this._placeholderToIds = placeholderToIds[id] || {};
	              // TODO(vicb): make sure there is no `_TRANSLATIONS_TAG` nor `_TRANSLATION_TAG`
	              _this._translatedMessages[id] = visitAll(_this, message[1]).join('');
	          });
	          return { messages: this._translatedMessages, errors: this._errors };
	      };
	      _Visitor.prototype.visitElement = function (element, context) {
	          switch (element.name) {
	              case _TRANSLATIONS_TAG:
	                  this._bundleDepth++;
	                  if (this._bundleDepth > 1) {
	                      this._addError(element, "<" + _TRANSLATIONS_TAG + "> elements can not be nested");
	                  }
	                  visitAll(this, element.children, null);
	                  this._bundleDepth--;
	                  break;
	              case _TRANSLATION_TAG:
	                  this._translationDepth++;
	                  if (this._translationDepth > 1) {
	                      this._addError(element, "<" + _TRANSLATION_TAG + "> elements can not be nested");
	                  }
	                  var idAttr = element.attrs.find(function (attr) { return attr.name === 'id'; });
	                  if (!idAttr) {
	                      this._addError(element, "<" + _TRANSLATION_TAG + "> misses the \"id\" attribute");
	                  }
	                  else {
	                      // ICU placeholders are reference to other messages.
	                      // The referenced message might not have been decoded yet.
	                      // We need to have all messages available to make sure deps are decoded first.
	                      // TODO(vicb): report an error on duplicate id
	                      this._messageNodes.push([idAttr.value, element.children]);
	                  }
	                  this._translationDepth--;
	                  break;
	              case _PLACEHOLDER_TAG$2:
	                  var nameAttr = element.attrs.find(function (attr) { return attr.name === 'name'; });
	                  if (!nameAttr) {
	                      this._addError(element, "<" + _PLACEHOLDER_TAG$2 + "> misses the \"name\" attribute");
	                  }
	                  else {
	                      var name_1 = nameAttr.value;
	                      if (this._placeholders.hasOwnProperty(name_1)) {
	                          return this._placeholders[name_1];
	                      }
	                      if (this._placeholderToIds.hasOwnProperty(name_1) &&
	                          this._translatedMessages.hasOwnProperty(this._placeholderToIds[name_1])) {
	                          return this._translatedMessages[this._placeholderToIds[name_1]];
	                      }
	                      // TODO(vicb): better error message for when
	                      // !this._translatedMessages.hasOwnProperty(this._placeholderToIds[name])
	                      this._addError(element, "The placeholder \"" + name_1 + "\" does not exists in the source message");
	                  }
	                  break;
	              default:
	                  this._addError(element, 'Unexpected tag');
	          }
	      };
	      _Visitor.prototype.visitAttribute = function (attribute, context) {
	          throw new Error('unreachable code');
	      };
	      _Visitor.prototype.visitText = function (text, context) { return text.value; };
	      _Visitor.prototype.visitComment = function (comment, context) { return ''; };
	      _Visitor.prototype.visitExpansion = function (expansion, context) {
	          var _this = this;
	          var strCases = expansion.cases.map(function (c) { return c.visit(_this, null); });
	          return "{" + expansion.switchValue + ", " + expansion.type + ", strCases.join(' ')}";
	      };
	      _Visitor.prototype.visitExpansionCase = function (expansionCase, context) {
	          return expansionCase.value + " {" + visitAll(this, expansionCase.expression, null) + "}";
	      };
	      _Visitor.prototype._addError = function (node, message) {
	          this._errors.push(new I18nError(node.sourceSpan, message));
	      };
	      return _Visitor;
	  }());

	  /**
	   * @license
	   * Copyright Google Inc. All Rights Reserved.
	   *
	   * Use of this source code is governed by an MIT-style license that can be
	   * found in the LICENSE file at https://angular.io/license
	   */
	  /**
	   * A container for translated messages
	   */
	  var TranslationBundle = (function () {
	      function TranslationBundle(_messageMap) {
	          if (_messageMap === void 0) { _messageMap = {}; }
	          this._messageMap = _messageMap;
	      }
	      TranslationBundle.load = function (content, url, messageBundle, serializer) {
	          return new TranslationBundle(serializer.load(content, url, messageBundle));
	      };
	      TranslationBundle.prototype.get = function (id) { return this._messageMap[id]; };
	      TranslationBundle.prototype.has = function (id) { return id in this._messageMap; };
	      return TranslationBundle;
	  }());

	  var I18NHtmlParser = (function () {
	      // TODO(vicb): transB.load() should not need a msgB & add transB.resolve(msgB,
	      // interpolationConfig)
	      // TODO(vicb): remove the interpolationConfig from the Xtb serializer
	      function I18NHtmlParser(_htmlParser, _translations, _translationsFormat) {
	          this._htmlParser = _htmlParser;
	          this._translations = _translations;
	          this._translationsFormat = _translationsFormat;
	      }
	      I18NHtmlParser.prototype.parse = function (source, url, parseExpansionForms, interpolationConfig) {
	          if (parseExpansionForms === void 0) { parseExpansionForms = false; }
	          if (interpolationConfig === void 0) { interpolationConfig = DEFAULT_INTERPOLATION_CONFIG; }
	          var parseResult = this._htmlParser.parse(source, url, parseExpansionForms, interpolationConfig);
	          if (!this._translations || this._translations === '') {
	              // Do not enable i18n when no translation bundle is provided
	              return parseResult;
	          }
	          // TODO(vicb): add support for implicit tags / attributes
	          var messageBundle = new MessageBundle(this._htmlParser, [], {});
	          var errors = messageBundle.updateFromTemplate(source, url, interpolationConfig);
	          if (errors && errors.length) {
	              return new ParseTreeResult(parseResult.rootNodes, parseResult.errors.concat(errors));
	          }
	          var serializer = this._createSerializer(interpolationConfig);
	          var translationBundle = TranslationBundle.load(this._translations, url, messageBundle, serializer);
	          return mergeTranslations(parseResult.rootNodes, translationBundle, interpolationConfig, [], {});
	      };
	      I18NHtmlParser.prototype._createSerializer = function (interpolationConfig) {
	          var format = (this._translationsFormat || 'xlf').toLowerCase();
	          switch (format) {
	              case 'xmb':
	                  return new Xmb();
	              case 'xtb':
	                  return new Xtb(this._htmlParser, interpolationConfig);
	              case 'xliff':
	              case 'xlf':
	              default:
	                  return new Xliff(this._htmlParser, interpolationConfig);
	          }
	      };
	      return I18NHtmlParser;
	  }());

	  /**
	   * Wraps Javascript Objects
	   */
	  var StringMapWrapper = (function () {
	      function StringMapWrapper() {
	      }
	      StringMapWrapper.merge = function (m1, m2) {
	          var m = {};
	          for (var _i = 0, _a = Object.keys(m1); _i < _a.length; _i++) {
	              var k = _a[_i];
	              m[k] = m1[k];
	          }
	          for (var _b = 0, _c = Object.keys(m2); _b < _c.length; _b++) {
	              var k = _c[_b];
	              m[k] = m2[k];
	          }
	          return m;
	      };
	      StringMapWrapper.equals = function (m1, m2) {
	          var k1 = Object.keys(m1);
	          var k2 = Object.keys(m2);
	          if (k1.length != k2.length) {
	              return false;
	          }
	          for (var i = 0; i < k1.length; i++) {
	              var key = k1[i];
	              if (m1[key] !== m2[key]) {
	                  return false;
	              }
	          }
	          return true;
	      };
	      return StringMapWrapper;
	  }());
	  var ListWrapper = (function () {
	      function ListWrapper() {
	      }
	      ListWrapper.removeAll = function (list, items) {
	          for (var i = 0; i < items.length; ++i) {
	              var index = list.indexOf(items[i]);
	              if (index > -1) {
	                  list.splice(index, 1);
	              }
	          }
	      };
	      ListWrapper.remove = function (list, el) {
	          var index = list.indexOf(el);
	          if (index > -1) {
	              list.splice(index, 1);
	              return true;
	          }
	          return false;
	      };
	      ListWrapper.equals = function (a, b) {
	          if (a.length != b.length)
	              return false;
	          for (var i = 0; i < a.length; ++i) {
	              if (a[i] !== b[i])
	                  return false;
	          }
	          return true;
	      };
	      ListWrapper.flatten = function (list) {
	          return list.reduce(function (flat, item) {
	              var flatItem = Array.isArray(item) ? ListWrapper.flatten(item) : item;
	              return flat.concat(flatItem);
	          }, []);
	      };
	      return ListWrapper;
	  }());

	  var _SELECTOR_REGEXP = new RegExp('(\\:not\\()|' +
	      '([-\\w]+)|' +
	      '(?:\\.([-\\w]+))|' +
	      '(?:\\[([-\\w*]+)(?:=([^\\]]*))?\\])|' +
	      '(\\))|' +
	      '(\\s*,\\s*)', // ","
	  'g');
	  /**
	   * A css selector contains an element name,
	   * css classes and attribute/value pairs with the purpose
	   * of selecting subsets out of them.
	   */
	  var CssSelector = (function () {
	      function CssSelector() {
	          this.element = null;
	          this.classNames = [];
	          this.attrs = [];
	          this.notSelectors = [];
	      }
	      CssSelector.parse = function (selector) {
	          var results = [];
	          var _addResult = function (res, cssSel) {
	              if (cssSel.notSelectors.length > 0 && !cssSel.element && cssSel.classNames.length == 0 &&
	                  cssSel.attrs.length == 0) {
	                  cssSel.element = '*';
	              }
	              res.push(cssSel);
	          };
	          var cssSelector = new CssSelector();
	          var match;
	          var current = cssSelector;
	          var inNot = false;
	          _SELECTOR_REGEXP.lastIndex = 0;
	          while (match = _SELECTOR_REGEXP.exec(selector)) {
	              if (match[1]) {
	                  if (inNot) {
	                      throw new Error('Nesting :not is not allowed in a selector');
	                  }
	                  inNot = true;
	                  current = new CssSelector();
	                  cssSelector.notSelectors.push(current);
	              }
	              if (match[2]) {
	                  current.setElement(match[2]);
	              }
	              if (match[3]) {
	                  current.addClassName(match[3]);
	              }
	              if (match[4]) {
	                  current.addAttribute(match[4], match[5]);
	              }
	              if (match[6]) {
	                  inNot = false;
	                  current = cssSelector;
	              }
	              if (match[7]) {
	                  if (inNot) {
	                      throw new Error('Multiple selectors in :not are not supported');
	                  }
	                  _addResult(results, cssSelector);
	                  cssSelector = current = new CssSelector();
	              }
	          }
	          _addResult(results, cssSelector);
	          return results;
	      };
	      CssSelector.prototype.isElementSelector = function () {
	          return this.hasElementSelector() && this.classNames.length == 0 && this.attrs.length == 0 &&
	              this.notSelectors.length === 0;
	      };
	      CssSelector.prototype.hasElementSelector = function () { return !!this.element; };
	      CssSelector.prototype.setElement = function (element) {
	          if (element === void 0) { element = null; }
	          this.element = element;
	      };
	      /** Gets a template string for an element that matches the selector. */
	      CssSelector.prototype.getMatchingElementTemplate = function () {
	          var tagName = this.element || 'div';
	          var classAttr = this.classNames.length > 0 ? " class=\"" + this.classNames.join(' ') + "\"" : '';
	          var attrs = '';
	          for (var i = 0; i < this.attrs.length; i += 2) {
	              var attrName = this.attrs[i];
	              var attrValue = this.attrs[i + 1] !== '' ? "=\"" + this.attrs[i + 1] + "\"" : '';
	              attrs += " " + attrName + attrValue;
	          }
	          return getHtmlTagDefinition(tagName).isVoid ? "<" + tagName + classAttr + attrs + "/>" :
	              "<" + tagName + classAttr + attrs + "></" + tagName + ">";
	      };
	      CssSelector.prototype.addAttribute = function (name, value) {
	          if (value === void 0) { value = ''; }
	          this.attrs.push(name, value && value.toLowerCase() || '');
	      };
	      CssSelector.prototype.addClassName = function (name) { this.classNames.push(name.toLowerCase()); };
	      CssSelector.prototype.toString = function () {
	          var res = this.element || '';
	          if (this.classNames) {
	              this.classNames.forEach(function (klass) { return res += "." + klass; });
	          }
	          if (this.attrs) {
	              for (var i = 0; i < this.attrs.length; i += 2) {
	                  var name_1 = this.attrs[i];
	                  var value = this.attrs[i + 1];
	                  res += "[" + name_1 + (value ? '=' + value : '') + "]";
	              }
	          }
	          this.notSelectors.forEach(function (notSelector) { return res += ":not(" + notSelector + ")"; });
	          return res;
	      };
	      return CssSelector;
	  }());
	  /**
	   * Reads a list of CssSelectors and allows to calculate which ones
	   * are contained in a given CssSelector.
	   */
	  var SelectorMatcher = (function () {
	      function SelectorMatcher() {
	          this._elementMap = new Map();
	          this._elementPartialMap = new Map();
	          this._classMap = new Map();
	          this._classPartialMap = new Map();
	          this._attrValueMap = new Map();
	          this._attrValuePartialMap = new Map();
	          this._listContexts = [];
	      }
	      SelectorMatcher.createNotMatcher = function (notSelectors) {
	          var notMatcher = new SelectorMatcher();
	          notMatcher.addSelectables(notSelectors, null);
	          return notMatcher;
	      };
	      SelectorMatcher.prototype.addSelectables = function (cssSelectors, callbackCtxt) {
	          var listContext = null;
	          if (cssSelectors.length > 1) {
	              listContext = new SelectorListContext(cssSelectors);
	              this._listContexts.push(listContext);
	          }
	          for (var i = 0; i < cssSelectors.length; i++) {
	              this._addSelectable(cssSelectors[i], callbackCtxt, listContext);
	          }
	      };
	      /**
	       * Add an object that can be found later on by calling `match`.
	       * @param cssSelector A css selector
	       * @param callbackCtxt An opaque object that will be given to the callback of the `match` function
	       */
	      SelectorMatcher.prototype._addSelectable = function (cssSelector, callbackCtxt, listContext) {
	          var matcher = this;
	          var element = cssSelector.element;
	          var classNames = cssSelector.classNames;
	          var attrs = cssSelector.attrs;
	          var selectable = new SelectorContext(cssSelector, callbackCtxt, listContext);
	          if (element) {
	              var isTerminal = attrs.length === 0 && classNames.length === 0;
	              if (isTerminal) {
	                  this._addTerminal(matcher._elementMap, element, selectable);
	              }
	              else {
	                  matcher = this._addPartial(matcher._elementPartialMap, element);
	              }
	          }
	          if (classNames) {
	              for (var i = 0; i < classNames.length; i++) {
	                  var isTerminal = attrs.length === 0 && i === classNames.length - 1;
	                  var className = classNames[i];
	                  if (isTerminal) {
	                      this._addTerminal(matcher._classMap, className, selectable);
	                  }
	                  else {
	                      matcher = this._addPartial(matcher._classPartialMap, className);
	                  }
	              }
	          }
	          if (attrs) {
	              for (var i = 0; i < attrs.length; i += 2) {
	                  var isTerminal = i === attrs.length - 2;
	                  var name_2 = attrs[i];
	                  var value = attrs[i + 1];
	                  if (isTerminal) {
	                      var terminalMap = matcher._attrValueMap;
	                      var terminalValuesMap = terminalMap.get(name_2);
	                      if (!terminalValuesMap) {
	                          terminalValuesMap = new Map();
	                          terminalMap.set(name_2, terminalValuesMap);
	                      }
	                      this._addTerminal(terminalValuesMap, value, selectable);
	                  }
	                  else {
	                      var partialMap = matcher._attrValuePartialMap;
	                      var partialValuesMap = partialMap.get(name_2);
	                      if (!partialValuesMap) {
	                          partialValuesMap = new Map();
	                          partialMap.set(name_2, partialValuesMap);
	                      }
	                      matcher = this._addPartial(partialValuesMap, value);
	                  }
	              }
	          }
	      };
	      SelectorMatcher.prototype._addTerminal = function (map, name, selectable) {
	          var terminalList = map.get(name);
	          if (!terminalList) {
	              terminalList = [];
	              map.set(name, terminalList);
	          }
	          terminalList.push(selectable);
	      };
	      SelectorMatcher.prototype._addPartial = function (map, name) {
	          var matcher = map.get(name);
	          if (!matcher) {
	              matcher = new SelectorMatcher();
	              map.set(name, matcher);
	          }
	          return matcher;
	      };
	      /**
	       * Find the objects that have been added via `addSelectable`
	       * whose css selector is contained in the given css selector.
	       * @param cssSelector A css selector
	       * @param matchedCallback This callback will be called with the object handed into `addSelectable`
	       * @return boolean true if a match was found
	      */
	      SelectorMatcher.prototype.match = function (cssSelector, matchedCallback) {
	          var result = false;
	          var element = cssSelector.element;
	          var classNames = cssSelector.classNames;
	          var attrs = cssSelector.attrs;
	          for (var i = 0; i < this._listContexts.length; i++) {
	              this._listContexts[i].alreadyMatched = false;
	          }
	          result = this._matchTerminal(this._elementMap, element, cssSelector, matchedCallback) || result;
	          result = this._matchPartial(this._elementPartialMap, element, cssSelector, matchedCallback) ||
	              result;
	          if (classNames) {
	              for (var i = 0; i < classNames.length; i++) {
	                  var className = classNames[i];
	                  result =
	                      this._matchTerminal(this._classMap, className, cssSelector, matchedCallback) || result;
	                  result =
	                      this._matchPartial(this._classPartialMap, className, cssSelector, matchedCallback) ||
	                          result;
	              }
	          }
	          if (attrs) {
	              for (var i = 0; i < attrs.length; i += 2) {
	                  var name_3 = attrs[i];
	                  var value = attrs[i + 1];
	                  var terminalValuesMap = this._attrValueMap.get(name_3);
	                  if (value) {
	                      result =
	                          this._matchTerminal(terminalValuesMap, '', cssSelector, matchedCallback) || result;
	                  }
	                  result =
	                      this._matchTerminal(terminalValuesMap, value, cssSelector, matchedCallback) || result;
	                  var partialValuesMap = this._attrValuePartialMap.get(name_3);
	                  if (value) {
	                      result = this._matchPartial(partialValuesMap, '', cssSelector, matchedCallback) || result;
	                  }
	                  result =
	                      this._matchPartial(partialValuesMap, value, cssSelector, matchedCallback) || result;
	              }
	          }
	          return result;
	      };
	      /** @internal */
	      SelectorMatcher.prototype._matchTerminal = function (map, name, cssSelector, matchedCallback) {
	          if (!map || typeof name !== 'string') {
	              return false;
	          }
	          var selectables = map.get(name);
	          var starSelectables = map.get('*');
	          if (starSelectables) {
	              selectables = selectables.concat(starSelectables);
	          }
	          if (!selectables) {
	              return false;
	          }
	          var selectable;
	          var result = false;
	          for (var i = 0; i < selectables.length; i++) {
	              selectable = selectables[i];
	              result = selectable.finalize(cssSelector, matchedCallback) || result;
	          }
	          return result;
	      };
	      /** @internal */
	      SelectorMatcher.prototype._matchPartial = function (map, name, cssSelector, matchedCallback) {
	          if (!map || typeof name !== 'string') {
	              return false;
	          }
	          var nestedSelector = map.get(name);
	          if (!nestedSelector) {
	              return false;
	          }
	          // TODO(perf): get rid of recursion and measure again
	          // TODO(perf): don't pass the whole selector into the recursion,
	          // but only the not processed parts
	          return nestedSelector.match(cssSelector, matchedCallback);
	      };
	      return SelectorMatcher;
	  }());
	  var SelectorListContext = (function () {
	      function SelectorListContext(selectors) {
	          this.selectors = selectors;
	          this.alreadyMatched = false;
	      }
	      return SelectorListContext;
	  }());
	  // Store context to pass back selector and context when a selector is matched
	  var SelectorContext = (function () {
	      function SelectorContext(selector, cbContext, listContext) {
	          this.selector = selector;
	          this.cbContext = cbContext;
	          this.listContext = listContext;
	          this.notSelectors = selector.notSelectors;
	      }
	      SelectorContext.prototype.finalize = function (cssSelector, callback) {
	          var result = true;
	          if (this.notSelectors.length > 0 && (!this.listContext || !this.listContext.alreadyMatched)) {
	              var notMatcher = SelectorMatcher.createNotMatcher(this.notSelectors);
	              result = !notMatcher.match(cssSelector, null);
	          }
	          if (result && callback && (!this.listContext || !this.listContext.alreadyMatched)) {
	              if (this.listContext) {
	                  this.listContext.alreadyMatched = true;
	              }
	              callback(this.selector, this.cbContext);
	          }
	          return result;
	      };
	      return SelectorContext;
	  }());

	  var MODULE_SUFFIX = '';
	  var DASH_CASE_REGEXP = /-+([a-z0-9])/g;
	  function dashCaseToCamelCase(input) {
	      return input.replace(DASH_CASE_REGEXP, function () {
	          var m = [];
	          for (var _i = 0; _i < arguments.length; _i++) {
	              m[_i - 0] = arguments[_i];
	          }
	          return m[1].toUpperCase();
	      });
	  }
	  function splitAtColon(input, defaultValues) {
	      return _splitAt(input, ':', defaultValues);
	  }
	  function splitAtPeriod(input, defaultValues) {
	      return _splitAt(input, '.', defaultValues);
	  }
	  function _splitAt(input, character, defaultValues) {
	      var characterIndex = input.indexOf(character);
	      if (characterIndex == -1)
	          return defaultValues;
	      return [input.slice(0, characterIndex).trim(), input.slice(characterIndex + 1).trim()];
	  }
	  function sanitizeIdentifier(name) {
	      return name.replace(/\W/g, '_');
	  }
	  function visitValue(value, visitor, context) {
	      if (Array.isArray(value)) {
	          return visitor.visitArray(value, context);
	      }
	      if (isStrictStringMap(value)) {
	          return visitor.visitStringMap(value, context);
	      }
	      if (isBlank(value) || isPrimitive(value)) {
	          return visitor.visitPrimitive(value, context);
	      }
	      return visitor.visitOther(value, context);
	  }
	  var ValueTransformer = (function () {
	      function ValueTransformer() {
	      }
	      ValueTransformer.prototype.visitArray = function (arr, context) {
	          var _this = this;
	          return arr.map(function (value) { return visitValue(value, _this, context); });
	      };
	      ValueTransformer.prototype.visitStringMap = function (map, context) {
	          var _this = this;
	          var result = {};
	          Object.keys(map).forEach(function (key) { result[key] = visitValue(map[key], _this, context); });
	          return result;
	      };
	      ValueTransformer.prototype.visitPrimitive = function (value, context) { return value; };
	      ValueTransformer.prototype.visitOther = function (value, context) { return value; };
	      return ValueTransformer;
	  }());
	  var SyncAsyncResult = (function () {
	      function SyncAsyncResult(syncResult, asyncResult) {
	          if (asyncResult === void 0) { asyncResult = null; }
	          this.syncResult = syncResult;
	          this.asyncResult = asyncResult;
	          if (!asyncResult) {
	              this.asyncResult = Promise.resolve(syncResult);
	          }
	      }
	      return SyncAsyncResult;
	  }());

	  /**
	   * @license
	   * Copyright Google Inc. All Rights Reserved.
	   *
	   * Use of this source code is governed by an MIT-style license that can be
	   * found in the LICENSE file at https://angular.io/license
	   */
	  var __extends$7 = (this && this.__extends) || function (d, b) {
	      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	      function __() { this.constructor = d; }
	      d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	  };
	  function unimplemented() {
	      throw new Error('unimplemented');
	  }
	  // group 0: "[prop] or (event) or @trigger"
	  // group 1: "prop" from "[prop]"
	  // group 2: "event" from "(event)"
	  // group 3: "@trigger" from "@trigger"
	  var HOST_REG_EXP = /^(?:(?:\[([^\]]+)\])|(?:\(([^\)]+)\)))|(\@[-\w]+)$/;
	  var CompileMetadataWithIdentifier = (function () {
	      function CompileMetadataWithIdentifier() {
	      }
	      Object.defineProperty(CompileMetadataWithIdentifier.prototype, "identifier", {
	          get: function () { return unimplemented(); },
	          enumerable: true,
	          configurable: true
	      });
	      return CompileMetadataWithIdentifier;
	  }());
	  var CompileAnimationEntryMetadata = (function () {
	      function CompileAnimationEntryMetadata(name, definitions) {
	          if (name === void 0) { name = null; }
	          if (definitions === void 0) { definitions = null; }
	          this.name = name;
	          this.definitions = definitions;
	      }
	      return CompileAnimationEntryMetadata;
	  }());
	  var CompileAnimationStateMetadata = (function () {
	      function CompileAnimationStateMetadata() {
	      }
	      return CompileAnimationStateMetadata;
	  }());
	  var CompileAnimationStateDeclarationMetadata = (function (_super) {
	      __extends$7(CompileAnimationStateDeclarationMetadata, _super);
	      function CompileAnimationStateDeclarationMetadata(stateNameExpr, styles) {
	          _super.call(this);
	          this.stateNameExpr = stateNameExpr;
	          this.styles = styles;
	      }
	      return CompileAnimationStateDeclarationMetadata;
	  }(CompileAnimationStateMetadata));
	  var CompileAnimationStateTransitionMetadata = (function (_super) {
	      __extends$7(CompileAnimationStateTransitionMetadata, _super);
	      function CompileAnimationStateTransitionMetadata(stateChangeExpr, steps) {
	          _super.call(this);
	          this.stateChangeExpr = stateChangeExpr;
	          this.steps = steps;
	      }
	      return CompileAnimationStateTransitionMetadata;
	  }(CompileAnimationStateMetadata));
	  var CompileAnimationMetadata = (function () {
	      function CompileAnimationMetadata() {
	      }
	      return CompileAnimationMetadata;
	  }());
	  var CompileAnimationKeyframesSequenceMetadata = (function (_super) {
	      __extends$7(CompileAnimationKeyframesSequenceMetadata, _super);
	      function CompileAnimationKeyframesSequenceMetadata(steps) {
	          if (steps === void 0) { steps = []; }
	          _super.call(this);
	          this.steps = steps;
	      }
	      return CompileAnimationKeyframesSequenceMetadata;
	  }(CompileAnimationMetadata));
	  var CompileAnimationStyleMetadata = (function (_super) {
	      __extends$7(CompileAnimationStyleMetadata, _super);
	      function CompileAnimationStyleMetadata(offset, styles) {
	          if (styles === void 0) { styles = null; }
	          _super.call(this);
	          this.offset = offset;
	          this.styles = styles;
	      }
	      return CompileAnimationStyleMetadata;
	  }(CompileAnimationMetadata));
	  var CompileAnimationAnimateMetadata = (function (_super) {
	      __extends$7(CompileAnimationAnimateMetadata, _super);
	      function CompileAnimationAnimateMetadata(timings, styles) {
	          if (timings === void 0) { timings = 0; }
	          if (styles === void 0) { styles = null; }
	          _super.call(this);
	          this.timings = timings;
	          this.styles = styles;
	      }
	      return CompileAnimationAnimateMetadata;
	  }(CompileAnimationMetadata));
	  var CompileAnimationWithStepsMetadata = (function (_super) {
	      __extends$7(CompileAnimationWithStepsMetadata, _super);
	      function CompileAnimationWithStepsMetadata(steps) {
	          if (steps === void 0) { steps = null; }
	          _super.call(this);
	          this.steps = steps;
	      }
	      return CompileAnimationWithStepsMetadata;
	  }(CompileAnimationMetadata));
	  var CompileAnimationSequenceMetadata = (function (_super) {
	      __extends$7(CompileAnimationSequenceMetadata, _super);
	      function CompileAnimationSequenceMetadata(steps) {
	          if (steps === void 0) { steps = null; }
	          _super.call(this, steps);
	      }
	      return CompileAnimationSequenceMetadata;
	  }(CompileAnimationWithStepsMetadata));
	  var CompileAnimationGroupMetadata = (function (_super) {
	      __extends$7(CompileAnimationGroupMetadata, _super);
	      function CompileAnimationGroupMetadata(steps) {
	          if (steps === void 0) { steps = null; }
	          _super.call(this, steps);
	      }
	      return CompileAnimationGroupMetadata;
	  }(CompileAnimationWithStepsMetadata));
	  var CompileIdentifierMetadata = (function () {
	      function CompileIdentifierMetadata(_a) {
	          var _b = _a === void 0 ? {} : _a, reference = _b.reference, name = _b.name, moduleUrl = _b.moduleUrl, prefix = _b.prefix, value = _b.value;
	          this.reference = reference;
	          this.name = name;
	          this.prefix = prefix;
	          this.moduleUrl = moduleUrl;
	          this.value = value;
	      }
	      Object.defineProperty(CompileIdentifierMetadata.prototype, "identifier", {
	          get: function () { return this; },
	          enumerable: true,
	          configurable: true
	      });
	      return CompileIdentifierMetadata;
	  }());
	  var CompileDiDependencyMetadata = (function () {
	      function CompileDiDependencyMetadata(_a) {
	          var _b = _a === void 0 ? {} : _a, isAttribute = _b.isAttribute, isSelf = _b.isSelf, isHost = _b.isHost, isSkipSelf = _b.isSkipSelf, isOptional = _b.isOptional, isValue = _b.isValue, token = _b.token, value = _b.value;
	          this.isAttribute = !!isAttribute;
	          this.isSelf = !!isSelf;
	          this.isHost = !!isHost;
	          this.isSkipSelf = !!isSkipSelf;
	          this.isOptional = !!isOptional;
	          this.isValue = !!isValue;
	          this.token = token;
	          this.value = value;
	      }
	      return CompileDiDependencyMetadata;
	  }());
	  var CompileProviderMetadata = (function () {
	      function CompileProviderMetadata(_a) {
	          var token = _a.token, useClass = _a.useClass, useValue = _a.useValue, useExisting = _a.useExisting, useFactory = _a.useFactory, deps = _a.deps, multi = _a.multi;
	          this.token = token;
	          this.useClass = useClass;
	          this.useValue = useValue;
	          this.useExisting = useExisting;
	          this.useFactory = useFactory;
	          this.deps = deps || null;
	          this.multi = !!multi;
	      }
	      return CompileProviderMetadata;
	  }());
	  var CompileFactoryMetadata = (function (_super) {
	      __extends$7(CompileFactoryMetadata, _super);
	      function CompileFactoryMetadata(_a) {
	          var reference = _a.reference, name = _a.name, moduleUrl = _a.moduleUrl, prefix = _a.prefix, diDeps = _a.diDeps, value = _a.value;
	          _super.call(this, { reference: reference, name: name, prefix: prefix, moduleUrl: moduleUrl, value: value });
	          this.diDeps = _normalizeArray(diDeps);
	      }
	      return CompileFactoryMetadata;
	  }(CompileIdentifierMetadata));
	  var CompileTokenMetadata = (function () {
	      function CompileTokenMetadata(_a) {
	          var value = _a.value, identifier = _a.identifier, identifierIsInstance = _a.identifierIsInstance;
	          this.value = value;
	          this.identifier = identifier;
	          this.identifierIsInstance = !!identifierIsInstance;
	      }
	      Object.defineProperty(CompileTokenMetadata.prototype, "reference", {
	          get: function () {
	              if (isPresent(this.identifier)) {
	                  return this.identifier.reference;
	              }
	              else {
	                  return this.value;
	              }
	          },
	          enumerable: true,
	          configurable: true
	      });
	      Object.defineProperty(CompileTokenMetadata.prototype, "name", {
	          get: function () {
	              return isPresent(this.value) ? sanitizeIdentifier(this.value) : this.identifier.name;
	          },
	          enumerable: true,
	          configurable: true
	      });
	      return CompileTokenMetadata;
	  }());
	  /**
	   * Metadata regarding compilation of a type.
	   */
	  var CompileTypeMetadata = (function (_super) {
	      __extends$7(CompileTypeMetadata, _super);
	      function CompileTypeMetadata(_a) {
	          var _b = _a === void 0 ? {} : _a, reference = _b.reference, name = _b.name, moduleUrl = _b.moduleUrl, prefix = _b.prefix, isHost = _b.isHost, value = _b.value, diDeps = _b.diDeps, lifecycleHooks = _b.lifecycleHooks;
	          _super.call(this, { reference: reference, name: name, moduleUrl: moduleUrl, prefix: prefix, value: value });
	          this.isHost = !!isHost;
	          this.diDeps = _normalizeArray(diDeps);
	          this.lifecycleHooks = _normalizeArray(lifecycleHooks);
	      }
	      return CompileTypeMetadata;
	  }(CompileIdentifierMetadata));
	  var CompileQueryMetadata = (function () {
	      function CompileQueryMetadata(_a) {
	          var _b = _a === void 0 ? {} : _a, selectors = _b.selectors, descendants = _b.descendants, first = _b.first, propertyName = _b.propertyName, read = _b.read;
	          this.selectors = selectors;
	          this.descendants = !!descendants;
	          this.first = !!first;
	          this.propertyName = propertyName;
	          this.read = read;
	      }
	      return CompileQueryMetadata;
	  }());
	  /**
	   * Metadata about a stylesheet
	   */
	  var CompileStylesheetMetadata = (function () {
	      function CompileStylesheetMetadata(_a) {
	          var _b = _a === void 0 ? {} : _a, moduleUrl = _b.moduleUrl, styles = _b.styles, styleUrls = _b.styleUrls;
	          this.moduleUrl = moduleUrl;
	          this.styles = _normalizeArray(styles);
	          this.styleUrls = _normalizeArray(styleUrls);
	      }
	      return CompileStylesheetMetadata;
	  }());
	  /**
	   * Metadata regarding compilation of a template.
	   */
	  var CompileTemplateMetadata = (function () {
	      function CompileTemplateMetadata(_a) {
	          var _b = _a === void 0 ? {} : _a, encapsulation = _b.encapsulation, template = _b.template, templateUrl = _b.templateUrl, styles = _b.styles, styleUrls = _b.styleUrls, externalStylesheets = _b.externalStylesheets, animations = _b.animations, ngContentSelectors = _b.ngContentSelectors, interpolation = _b.interpolation;
	          this.encapsulation = encapsulation;
	          this.template = template;
	          this.templateUrl = templateUrl;
	          this.styles = _normalizeArray(styles);
	          this.styleUrls = _normalizeArray(styleUrls);
	          this.externalStylesheets = _normalizeArray(externalStylesheets);
	          this.animations = animations ? ListWrapper.flatten(animations) : [];
	          this.ngContentSelectors = ngContentSelectors || [];
	          if (interpolation && interpolation.length != 2) {
	              throw new Error("'interpolation' should have a start and an end symbol.");
	          }
	          this.interpolation = interpolation;
	      }
	      CompileTemplateMetadata.prototype.toSummary = function () {
	          return {
	              isSummary: true,
	              animations: this.animations.map(function (anim) { return anim.name; }),
	              ngContentSelectors: this.ngContentSelectors,
	              encapsulation: this.encapsulation
	          };
	      };
	      return CompileTemplateMetadata;
	  }());
	  /**
	   * Metadata regarding compilation of a directive.
	   */
	  var CompileDirectiveMetadata = (function () {
	      function CompileDirectiveMetadata(_a) {
	          var _b = _a === void 0 ? {} : _a, type = _b.type, isComponent = _b.isComponent, selector = _b.selector, exportAs = _b.exportAs, changeDetection = _b.changeDetection, inputs = _b.inputs, outputs = _b.outputs, hostListeners = _b.hostListeners, hostProperties = _b.hostProperties, hostAttributes = _b.hostAttributes, providers = _b.providers, viewProviders = _b.viewProviders, queries = _b.queries, viewQueries = _b.viewQueries, entryComponents = _b.entryComponents, template = _b.template;
	          this.type = type;
	          this.isComponent = isComponent;
	          this.selector = selector;
	          this.exportAs = exportAs;
	          this.changeDetection = changeDetection;
	          this.inputs = inputs;
	          this.outputs = outputs;
	          this.hostListeners = hostListeners;
	          this.hostProperties = hostProperties;
	          this.hostAttributes = hostAttributes;
	          this.providers = _normalizeArray(providers);
	          this.viewProviders = _normalizeArray(viewProviders);
	          this.queries = _normalizeArray(queries);
	          this.viewQueries = _normalizeArray(viewQueries);
	          this.entryComponents = _normalizeArray(entryComponents);
	          this.template = template;
	      }
	      CompileDirectiveMetadata.create = function (_a) {
	          var _b = _a === void 0 ? {} : _a, type = _b.type, isComponent = _b.isComponent, selector = _b.selector, exportAs = _b.exportAs, changeDetection = _b.changeDetection, inputs = _b.inputs, outputs = _b.outputs, host = _b.host, providers = _b.providers, viewProviders = _b.viewProviders, queries = _b.queries, viewQueries = _b.viewQueries, entryComponents = _b.entryComponents, template = _b.template;
	          var hostListeners = {};
	          var hostProperties = {};
	          var hostAttributes = {};
	          if (isPresent(host)) {
	              Object.keys(host).forEach(function (key) {
	                  var value = host[key];
	                  var matches = key.match(HOST_REG_EXP);
	                  if (matches === null) {
	                      hostAttributes[key] = value;
	                  }
	                  else if (isPresent(matches[1])) {
	                      hostProperties[matches[1]] = value;
	                  }
	                  else if (isPresent(matches[2])) {
	                      hostListeners[matches[2]] = value;
	                  }
	              });
	          }
	          var inputsMap = {};
	          if (isPresent(inputs)) {
	              inputs.forEach(function (bindConfig) {
	                  // canonical syntax: `dirProp: elProp`
	                  // if there is no `:`, use dirProp = elProp
	                  var parts = splitAtColon(bindConfig, [bindConfig, bindConfig]);
	                  inputsMap[parts[0]] = parts[1];
	              });
	          }
	          var outputsMap = {};
	          if (isPresent(outputs)) {
	              outputs.forEach(function (bindConfig) {
	                  // canonical syntax: `dirProp: elProp`
	                  // if there is no `:`, use dirProp = elProp
	                  var parts = splitAtColon(bindConfig, [bindConfig, bindConfig]);
	                  outputsMap[parts[0]] = parts[1];
	              });
	          }
	          return new CompileDirectiveMetadata({
	              type: type,
	              isComponent: !!isComponent, selector: selector, exportAs: exportAs, changeDetection: changeDetection,
	              inputs: inputsMap,
	              outputs: outputsMap,
	              hostListeners: hostListeners,
	              hostProperties: hostProperties,
	              hostAttributes: hostAttributes,
	              providers: providers,
	              viewProviders: viewProviders,
	              queries: queries,
	              viewQueries: viewQueries,
	              entryComponents: entryComponents,
	              template: template,
	          });
	      };
	      Object.defineProperty(CompileDirectiveMetadata.prototype, "identifier", {
	          get: function () { return this.type; },
	          enumerable: true,
	          configurable: true
	      });
	      CompileDirectiveMetadata.prototype.toSummary = function () {
	          return {
	              isSummary: true,
	              type: this.type,
	              isComponent: this.isComponent,
	              selector: this.selector,
	              exportAs: this.exportAs,
	              inputs: this.inputs,
	              outputs: this.outputs,
	              hostListeners: this.hostListeners,
	              hostProperties: this.hostProperties,
	              hostAttributes: this.hostAttributes,
	              providers: this.providers,
	              viewProviders: this.viewProviders,
	              queries: this.queries,
	              entryComponents: this.entryComponents,
	              changeDetection: this.changeDetection,
	              template: this.template && this.template.toSummary()
	          };
	      };
	      return CompileDirectiveMetadata;
	  }());
	  /**
	   * Construct {@link CompileDirectiveMetadata} from {@link ComponentTypeMetadata} and a selector.
	   */
	  function createHostComponentMeta(compMeta) {
	      var template = CssSelector.parse(compMeta.selector)[0].getMatchingElementTemplate();
	      return CompileDirectiveMetadata.create({
	          type: new CompileTypeMetadata({
	              reference: Object,
	              name: compMeta.type.name + "_Host",
	              moduleUrl: compMeta.type.moduleUrl,
	              isHost: true
	          }),
	          template: new CompileTemplateMetadata({
	              encapsulation: _angular_core.ViewEncapsulation.None,
	              template: template,
	              templateUrl: '',
	              styles: [],
	              styleUrls: [],
	              ngContentSelectors: [],
	              animations: []
	          }),
	          changeDetection: _angular_core.ChangeDetectionStrategy.Default,
	          inputs: [],
	          outputs: [],
	          host: {},
	          isComponent: true,
	          selector: '*',
	          providers: [],
	          viewProviders: [],
	          queries: [],
	          viewQueries: []
	      });
	  }
	  var CompilePipeMetadata = (function () {
	      function CompilePipeMetadata(_a) {
	          var _b = _a === void 0 ? {} : _a, type = _b.type, name = _b.name, pure = _b.pure;
	          this.type = type;
	          this.name = name;
	          this.pure = !!pure;
	      }
	      Object.defineProperty(CompilePipeMetadata.prototype, "identifier", {
	          get: function () { return this.type; },
	          enumerable: true,
	          configurable: true
	      });
	      CompilePipeMetadata.prototype.toSummary = function () {
	          return { isSummary: true, type: this.type, name: this.name, pure: this.pure };
	      };
	      return CompilePipeMetadata;
	  }());
	  /**
	   * Metadata regarding compilation of a module.
	   */
	  var CompileNgModuleMetadata = (function () {
	      function CompileNgModuleMetadata(_a) {
	          var _b = _a === void 0 ? {} : _a, type = _b.type, providers = _b.providers, declaredDirectives = _b.declaredDirectives, exportedDirectives = _b.exportedDirectives, declaredPipes = _b.declaredPipes, exportedPipes = _b.exportedPipes, entryComponents = _b.entryComponents, bootstrapComponents = _b.bootstrapComponents, importedModules = _b.importedModules, exportedModules = _b.exportedModules, schemas = _b.schemas, transitiveModule = _b.transitiveModule, id = _b.id;
	          this.type = type;
	          this.declaredDirectives = _normalizeArray(declaredDirectives);
	          this.exportedDirectives = _normalizeArray(exportedDirectives);
	          this.declaredPipes = _normalizeArray(declaredPipes);
	          this.exportedPipes = _normalizeArray(exportedPipes);
	          this.providers = _normalizeArray(providers);
	          this.entryComponents = _normalizeArray(entryComponents);
	          this.bootstrapComponents = _normalizeArray(bootstrapComponents);
	          this.importedModules = _normalizeArray(importedModules);
	          this.exportedModules = _normalizeArray(exportedModules);
	          this.schemas = _normalizeArray(schemas);
	          this.id = id;
	          this.transitiveModule = transitiveModule;
	      }
	      Object.defineProperty(CompileNgModuleMetadata.prototype, "identifier", {
	          get: function () { return this.type; },
	          enumerable: true,
	          configurable: true
	      });
	      CompileNgModuleMetadata.prototype.toSummary = function () {
	          return {
	              isSummary: true,
	              type: this.type,
	              entryComponents: this.entryComponents,
	              providers: this.providers,
	              importedModules: this.importedModules,
	              exportedModules: this.exportedModules,
	              exportedDirectives: this.exportedDirectives,
	              exportedPipes: this.exportedPipes,
	              directiveLoaders: this.transitiveModule.directiveLoaders
	          };
	      };
	      CompileNgModuleMetadata.prototype.toInjectorSummary = function () {
	          return {
	              isSummary: true,
	              type: this.type,
	              entryComponents: this.entryComponents,
	              providers: this.providers,
	              importedModules: this.importedModules,
	              exportedModules: this.exportedModules
	          };
	      };
	      CompileNgModuleMetadata.prototype.toDirectiveSummary = function () {
	          return {
	              isSummary: true,
	              type: this.type,
	              exportedDirectives: this.exportedDirectives,
	              exportedPipes: this.exportedPipes,
	              exportedModules: this.exportedModules,
	              directiveLoaders: this.transitiveModule.directiveLoaders
	          };
	      };
	      return CompileNgModuleMetadata;
	  }());
	  var TransitiveCompileNgModuleMetadata = (function () {
	      function TransitiveCompileNgModuleMetadata(modules, providers, entryComponents, directives, pipes, directiveLoaders) {
	          var _this = this;
	          this.modules = modules;
	          this.providers = providers;
	          this.entryComponents = entryComponents;
	          this.directives = directives;
	          this.pipes = pipes;
	          this.directiveLoaders = directiveLoaders;
	          this.directivesSet = new Set();
	          this.pipesSet = new Set();
	          directives.forEach(function (dir) { return _this.directivesSet.add(dir.reference); });
	          pipes.forEach(function (pipe) { return _this.pipesSet.add(pipe.reference); });
	      }
	      return TransitiveCompileNgModuleMetadata;
	  }());
	  function removeIdentifierDuplicates(items) {
	      var map = new Map();
	      items.forEach(function (item) {
	          if (!map.get(item.identifier.reference)) {
	              map.set(item.identifier.reference, item);
	          }
	      });
	      return Array.from(map.values());
	  }
	  function _normalizeArray(obj) {
	      return obj || [];
	  }
	  function isStaticSymbol(value) {
	      return typeof value === 'object' && value !== null && value['name'] && value['filePath'];
	  }
	  var ProviderMeta = (function () {
	      function ProviderMeta(token, _a) {
	          var useClass = _a.useClass, useValue = _a.useValue, useExisting = _a.useExisting, useFactory = _a.useFactory, deps = _a.deps, multi = _a.multi;
	          this.token = token;
	          this.useClass = useClass;
	          this.useValue = useValue;
	          this.useExisting = useExisting;
	          this.useFactory = useFactory;
	          this.dependencies = deps;
	          this.multi = !!multi;
	      }
	      return ProviderMeta;
	  }());

	  var isDefaultChangeDetectionStrategy = _angular_core.__core_private__.isDefaultChangeDetectionStrategy;
	  var ChangeDetectorStatus = _angular_core.__core_private__.ChangeDetectorStatus;
	  var LifecycleHooks = _angular_core.__core_private__.LifecycleHooks;
	  var LIFECYCLE_HOOKS_VALUES = _angular_core.__core_private__.LIFECYCLE_HOOKS_VALUES;
	  var ReflectorReader = _angular_core.__core_private__.ReflectorReader;
	  var ViewContainer = _angular_core.__core_private__.ViewContainer;
	  var CodegenComponentFactoryResolver = _angular_core.__core_private__.CodegenComponentFactoryResolver;
	  var ComponentRef_ = _angular_core.__core_private__.ComponentRef_;
	  var AppView = _angular_core.__core_private__.AppView;
	  var DebugAppView = _angular_core.__core_private__.DebugAppView;
	  var NgModuleInjector = _angular_core.__core_private__.NgModuleInjector;
	  var registerModuleFactory = _angular_core.__core_private__.registerModuleFactory;
	  var ViewType = _angular_core.__core_private__.ViewType;
	  var view_utils = _angular_core.__core_private__.view_utils;
	  var DebugContext = _angular_core.__core_private__.DebugContext;
	  var StaticNodeDebugInfo = _angular_core.__core_private__.StaticNodeDebugInfo;
	  var devModeEqual = _angular_core.__core_private__.devModeEqual;
	  var UNINITIALIZED = _angular_core.__core_private__.UNINITIALIZED;
	  var ValueUnwrapper = _angular_core.__core_private__.ValueUnwrapper;
	  var TemplateRef_ = _angular_core.__core_private__.TemplateRef_;
	  var Console = _angular_core.__core_private__.Console;
	  var reflector = _angular_core.__core_private__.reflector;
	  var Reflector = _angular_core.__core_private__.Reflector;
	  var ReflectionCapabilities = _angular_core.__core_private__.ReflectionCapabilities;
	  var NoOpAnimationPlayer = _angular_core.__core_private__.NoOpAnimationPlayer;
	  var AnimationSequencePlayer = _angular_core.__core_private__.AnimationSequencePlayer;
	  var AnimationGroupPlayer = _angular_core.__core_private__.AnimationGroupPlayer;
	  var AnimationKeyframe = _angular_core.__core_private__.AnimationKeyframe;
	  var AnimationStyles = _angular_core.__core_private__.AnimationStyles;
	  var ANY_STATE = _angular_core.__core_private__.ANY_STATE;
	  var DEFAULT_STATE = _angular_core.__core_private__.DEFAULT_STATE;
	  var EMPTY_ANIMATION_STATE = _angular_core.__core_private__.EMPTY_STATE;
	  var FILL_STYLE_FLAG = _angular_core.__core_private__.FILL_STYLE_FLAG;
	  var prepareFinalAnimationStyles = _angular_core.__core_private__.prepareFinalAnimationStyles;
	  var balanceAnimationKeyframes = _angular_core.__core_private__.balanceAnimationKeyframes;
	  var clearStyles = _angular_core.__core_private__.clearStyles;
	  var collectAndResolveStyles = _angular_core.__core_private__.collectAndResolveStyles;
	  var renderStyles = _angular_core.__core_private__.renderStyles;
	  var ComponentStillLoadingError = _angular_core.__core_private__.ComponentStillLoadingError;
	  var AnimationTransition = _angular_core.__core_private__.AnimationTransition;

	  var APP_VIEW_MODULE_URL = assetUrl('core', 'linker/view');
	  var VIEW_UTILS_MODULE_URL = assetUrl('core', 'linker/view_utils');
	  var CD_MODULE_URL = assetUrl('core', 'change_detection/change_detection');
	  var ANIMATION_STYLE_UTIL_ASSET_URL = assetUrl('core', 'animation/animation_style_util');
	  var Identifiers = (function () {
	      function Identifiers() {
	      }
	      Identifiers.ANALYZE_FOR_ENTRY_COMPONENTS = {
	          name: 'ANALYZE_FOR_ENTRY_COMPONENTS',
	          moduleUrl: assetUrl('core', 'metadata/di'),
	          runtime: _angular_core.ANALYZE_FOR_ENTRY_COMPONENTS
	      };
	      Identifiers.ViewUtils = {
	          name: 'ViewUtils',
	          moduleUrl: assetUrl('core', 'linker/view_utils'),
	          runtime: view_utils.ViewUtils
	      };
	      Identifiers.AppView = { name: 'AppView', moduleUrl: APP_VIEW_MODULE_URL, runtime: AppView };
	      Identifiers.DebugAppView = {
	          name: 'DebugAppView',
	          moduleUrl: APP_VIEW_MODULE_URL,
	          runtime: DebugAppView
	      };
	      Identifiers.ViewContainer = {
	          name: 'ViewContainer',
	          moduleUrl: assetUrl('core', 'linker/view_container'),
	          runtime: ViewContainer
	      };
	      Identifiers.ElementRef = {
	          name: 'ElementRef',
	          moduleUrl: assetUrl('core', 'linker/element_ref'),
	          runtime: _angular_core.ElementRef
	      };
	      Identifiers.ViewContainerRef = {
	          name: 'ViewContainerRef',
	          moduleUrl: assetUrl('core', 'linker/view_container_ref'),
	          runtime: _angular_core.ViewContainerRef
	      };
	      Identifiers.ChangeDetectorRef = {
	          name: 'ChangeDetectorRef',
	          moduleUrl: assetUrl('core', 'change_detection/change_detector_ref'),
	          runtime: _angular_core.ChangeDetectorRef
	      };
	      Identifiers.RenderComponentType = {
	          name: 'RenderComponentType',
	          moduleUrl: assetUrl('core', 'render/api'),
	          runtime: _angular_core.RenderComponentType
	      };
	      Identifiers.QueryList = {
	          name: 'QueryList',
	          moduleUrl: assetUrl('core', 'linker/query_list'),
	          runtime: _angular_core.QueryList
	      };
	      Identifiers.TemplateRef = {
	          name: 'TemplateRef',
	          moduleUrl: assetUrl('core', 'linker/template_ref'),
	          runtime: _angular_core.TemplateRef
	      };
	      Identifiers.TemplateRef_ = {
	          name: 'TemplateRef_',
	          moduleUrl: assetUrl('core', 'linker/template_ref'),
	          runtime: TemplateRef_
	      };
	      Identifiers.CodegenComponentFactoryResolver = {
	          name: 'CodegenComponentFactoryResolver',
	          moduleUrl: assetUrl('core', 'linker/component_factory_resolver'),
	          runtime: CodegenComponentFactoryResolver
	      };
	      Identifiers.ComponentFactoryResolver = {
	          name: 'ComponentFactoryResolver',
	          moduleUrl: assetUrl('core', 'linker/component_factory_resolver'),
	          runtime: _angular_core.ComponentFactoryResolver
	      };
	      Identifiers.ComponentFactory = {
	          name: 'ComponentFactory',
	          runtime: _angular_core.ComponentFactory,
	          moduleUrl: assetUrl('core', 'linker/component_factory')
	      };
	      Identifiers.ComponentRef_ = {
	          name: 'ComponentRef_',
	          runtime: ComponentRef_,
	          moduleUrl: assetUrl('core', 'linker/component_factory')
	      };
	      Identifiers.ComponentRef = {
	          name: 'ComponentRef',
	          runtime: _angular_core.ComponentRef,
	          moduleUrl: assetUrl('core', 'linker/component_factory')
	      };
	      Identifiers.NgModuleFactory = {
	          name: 'NgModuleFactory',
	          runtime: _angular_core.NgModuleFactory,
	          moduleUrl: assetUrl('core', 'linker/ng_module_factory')
	      };
	      Identifiers.NgModuleInjector = {
	          name: 'NgModuleInjector',
	          runtime: NgModuleInjector,
	          moduleUrl: assetUrl('core', 'linker/ng_module_factory')
	      };
	      Identifiers.RegisterModuleFactoryFn = {
	          name: 'registerModuleFactory',
	          runtime: registerModuleFactory,
	          moduleUrl: assetUrl('core', 'linker/ng_module_factory_loader')
	      };
	      Identifiers.ValueUnwrapper = { name: 'ValueUnwrapper', moduleUrl: CD_MODULE_URL, runtime: ValueUnwrapper };
	      Identifiers.Injector = {
	          name: 'Injector',
	          moduleUrl: assetUrl('core', 'di/injector'),
	          runtime: _angular_core.Injector
	      };
	      Identifiers.ViewEncapsulation = {
	          name: 'ViewEncapsulation',
	          moduleUrl: assetUrl('core', 'metadata/view'),
	          runtime: _angular_core.ViewEncapsulation
	      };
	      Identifiers.ViewType = {
	          name: 'ViewType',
	          moduleUrl: assetUrl('core', 'linker/view_type'),
	          runtime: ViewType
	      };
	      Identifiers.ChangeDetectionStrategy = {
	          name: 'ChangeDetectionStrategy',
	          moduleUrl: CD_MODULE_URL,
	          runtime: _angular_core.ChangeDetectionStrategy
	      };
	      Identifiers.StaticNodeDebugInfo = {
	          name: 'StaticNodeDebugInfo',
	          moduleUrl: assetUrl('core', 'linker/debug_context'),
	          runtime: StaticNodeDebugInfo
	      };
	      Identifiers.DebugContext = {
	          name: 'DebugContext',
	          moduleUrl: assetUrl('core', 'linker/debug_context'),
	          runtime: DebugContext
	      };
	      Identifiers.Renderer = {
	          name: 'Renderer',
	          moduleUrl: assetUrl('core', 'render/api'),
	          runtime: _angular_core.Renderer
	      };
	      Identifiers.SimpleChange = { name: 'SimpleChange', moduleUrl: CD_MODULE_URL, runtime: _angular_core.SimpleChange };
	      Identifiers.UNINITIALIZED = { name: 'UNINITIALIZED', moduleUrl: CD_MODULE_URL, runtime: UNINITIALIZED };
	      Identifiers.ChangeDetectorStatus = {
	          name: 'ChangeDetectorStatus',
	          moduleUrl: CD_MODULE_URL,
	          runtime: ChangeDetectorStatus
	      };
	      Identifiers.checkBinding = {
	          name: 'checkBinding',
	          moduleUrl: VIEW_UTILS_MODULE_URL,
	          runtime: view_utils.checkBinding
	      };
	      Identifiers.devModeEqual = { name: 'devModeEqual', moduleUrl: CD_MODULE_URL, runtime: devModeEqual };
	      Identifiers.inlineInterpolate = {
	          name: 'inlineInterpolate',
	          moduleUrl: VIEW_UTILS_MODULE_URL,
	          runtime: view_utils.inlineInterpolate
	      };
	      Identifiers.interpolate = {
	          name: 'interpolate',
	          moduleUrl: VIEW_UTILS_MODULE_URL,
	          runtime: view_utils.interpolate
	      };
	      Identifiers.castByValue = {
	          name: 'castByValue',
	          moduleUrl: VIEW_UTILS_MODULE_URL,
	          runtime: view_utils.castByValue
	      };
	      Identifiers.EMPTY_ARRAY = {
	          name: 'EMPTY_ARRAY',
	          moduleUrl: VIEW_UTILS_MODULE_URL,
	          runtime: view_utils.EMPTY_ARRAY
	      };
	      Identifiers.EMPTY_MAP = {
	          name: 'EMPTY_MAP',
	          moduleUrl: VIEW_UTILS_MODULE_URL,
	          runtime: view_utils.EMPTY_MAP
	      };
	      Identifiers.createRenderElement = {
	          name: 'createRenderElement',
	          moduleUrl: VIEW_UTILS_MODULE_URL,
	          runtime: view_utils.createRenderElement
	      };
	      Identifiers.selectOrCreateRenderHostElement = {
	          name: 'selectOrCreateRenderHostElement',
	          moduleUrl: VIEW_UTILS_MODULE_URL,
	          runtime: view_utils.selectOrCreateRenderHostElement
	      };
	      Identifiers.pureProxies = [
	          null,
	          { name: 'pureProxy1', moduleUrl: VIEW_UTILS_MODULE_URL, runtime: view_utils.pureProxy1 },
	          { name: 'pureProxy2', moduleUrl: VIEW_UTILS_MODULE_URL, runtime: view_utils.pureProxy2 },
	          { name: 'pureProxy3', moduleUrl: VIEW_UTILS_MODULE_URL, runtime: view_utils.pureProxy3 },
	          { name: 'pureProxy4', moduleUrl: VIEW_UTILS_MODULE_URL, runtime: view_utils.pureProxy4 },
	          { name: 'pureProxy5', moduleUrl: VIEW_UTILS_MODULE_URL, runtime: view_utils.pureProxy5 },
	          { name: 'pureProxy6', moduleUrl: VIEW_UTILS_MODULE_URL, runtime: view_utils.pureProxy6 },
	          { name: 'pureProxy7', moduleUrl: VIEW_UTILS_MODULE_URL, runtime: view_utils.pureProxy7 },
	          { name: 'pureProxy8', moduleUrl: VIEW_UTILS_MODULE_URL, runtime: view_utils.pureProxy8 },
	          { name: 'pureProxy9', moduleUrl: VIEW_UTILS_MODULE_URL, runtime: view_utils.pureProxy9 },
	          { name: 'pureProxy10', moduleUrl: VIEW_UTILS_MODULE_URL, runtime: view_utils.pureProxy10 },
	      ];
	      Identifiers.SecurityContext = {
	          name: 'SecurityContext',
	          moduleUrl: assetUrl('core', 'security'),
	          runtime: _angular_core.SecurityContext,
	      };
	      Identifiers.AnimationKeyframe = {
	          name: 'AnimationKeyframe',
	          moduleUrl: assetUrl('core', 'animation/animation_keyframe'),
	          runtime: AnimationKeyframe
	      };
	      Identifiers.AnimationStyles = {
	          name: 'AnimationStyles',
	          moduleUrl: assetUrl('core', 'animation/animation_styles'),
	          runtime: AnimationStyles
	      };
	      Identifiers.NoOpAnimationPlayer = {
	          name: 'NoOpAnimationPlayer',
	          moduleUrl: assetUrl('core', 'animation/animation_player'),
	          runtime: NoOpAnimationPlayer
	      };
	      Identifiers.AnimationGroupPlayer = {
	          name: 'AnimationGroupPlayer',
	          moduleUrl: assetUrl('core', 'animation/animation_group_player'),
	          runtime: AnimationGroupPlayer
	      };
	      Identifiers.AnimationSequencePlayer = {
	          name: 'AnimationSequencePlayer',
	          moduleUrl: assetUrl('core', 'animation/animation_sequence_player'),
	          runtime: AnimationSequencePlayer
	      };
	      Identifiers.prepareFinalAnimationStyles = {
	          name: 'prepareFinalAnimationStyles',
	          moduleUrl: ANIMATION_STYLE_UTIL_ASSET_URL,
	          runtime: prepareFinalAnimationStyles
	      };
	      Identifiers.balanceAnimationKeyframes = {
	          name: 'balanceAnimationKeyframes',
	          moduleUrl: ANIMATION_STYLE_UTIL_ASSET_URL,
	          runtime: balanceAnimationKeyframes
	      };
	      Identifiers.clearStyles = {
	          name: 'clearStyles',
	          moduleUrl: ANIMATION_STYLE_UTIL_ASSET_URL,
	          runtime: clearStyles
	      };
	      Identifiers.renderStyles = {
	          name: 'renderStyles',
	          moduleUrl: ANIMATION_STYLE_UTIL_ASSET_URL,
	          runtime: renderStyles
	      };
	      Identifiers.collectAndResolveStyles = {
	          name: 'collectAndResolveStyles',
	          moduleUrl: ANIMATION_STYLE_UTIL_ASSET_URL,
	          runtime: collectAndResolveStyles
	      };
	      Identifiers.LOCALE_ID = {
	          name: 'LOCALE_ID',
	          moduleUrl: assetUrl('core', 'i18n/tokens'),
	          runtime: _angular_core.LOCALE_ID
	      };
	      Identifiers.TRANSLATIONS_FORMAT = {
	          name: 'TRANSLATIONS_FORMAT',
	          moduleUrl: assetUrl('core', 'i18n/tokens'),
	          runtime: _angular_core.TRANSLATIONS_FORMAT
	      };
	      Identifiers.setBindingDebugInfo = {
	          name: 'setBindingDebugInfo',
	          moduleUrl: VIEW_UTILS_MODULE_URL,
	          runtime: view_utils.setBindingDebugInfo
	      };
	      Identifiers.setBindingDebugInfoForChanges = {
	          name: 'setBindingDebugInfoForChanges',
	          moduleUrl: VIEW_UTILS_MODULE_URL,
	          runtime: view_utils.setBindingDebugInfoForChanges
	      };
	      Identifiers.AnimationTransition = {
	          name: 'AnimationTransition',
	          moduleUrl: assetUrl('core', 'animation/animation_transition'),
	          runtime: AnimationTransition
	      };
	      // This is just the interface!
	      Identifiers.InlineArray = { name: 'InlineArray', moduleUrl: VIEW_UTILS_MODULE_URL, runtime: null };
	      Identifiers.inlineArrays = [
	          { name: 'InlineArray2', moduleUrl: VIEW_UTILS_MODULE_URL, runtime: view_utils.InlineArray2 },
	          { name: 'InlineArray2', moduleUrl: VIEW_UTILS_MODULE_URL, runtime: view_utils.InlineArray2 },
	          { name: 'InlineArray4', moduleUrl: VIEW_UTILS_MODULE_URL, runtime: view_utils.InlineArray4 },
	          { name: 'InlineArray8', moduleUrl: VIEW_UTILS_MODULE_URL, runtime: view_utils.InlineArray8 },
	          { name: 'InlineArray16', moduleUrl: VIEW_UTILS_MODULE_URL, runtime: view_utils.InlineArray16 },
	      ];
	      Identifiers.EMPTY_INLINE_ARRAY = {
	          name: 'EMPTY_INLINE_ARRAY',
	          moduleUrl: VIEW_UTILS_MODULE_URL,
	          runtime: view_utils.EMPTY_INLINE_ARRAY
	      };
	      Identifiers.InlineArrayDynamic = {
	          name: 'InlineArrayDynamic',
	          moduleUrl: VIEW_UTILS_MODULE_URL,
	          runtime: view_utils.InlineArrayDynamic
	      };
	      Identifiers.subscribeToRenderElement = {
	          name: 'subscribeToRenderElement',
	          moduleUrl: VIEW_UTILS_MODULE_URL,
	          runtime: view_utils.subscribeToRenderElement
	      };
	      Identifiers.createRenderComponentType = {
	          name: 'createRenderComponentType',
	          moduleUrl: VIEW_UTILS_MODULE_URL,
	          runtime: view_utils.createRenderComponentType
	      };
	      Identifiers.noop = { name: 'noop', moduleUrl: VIEW_UTILS_MODULE_URL, runtime: view_utils.noop };
	      return Identifiers;
	  }());
	  function assetUrl(pkg, path, type) {
	      if (path === void 0) { path = null; }
	      if (type === void 0) { type = 'src'; }
	      if (path == null) {
	          return "asset:@angular/lib/" + pkg + "/index";
	      }
	      else {
	          return "asset:@angular/lib/" + pkg + "/src/" + path;
	      }
	  }
	  function resolveIdentifier(identifier) {
	      return new CompileIdentifierMetadata({
	          name: identifier.name,
	          moduleUrl: identifier.moduleUrl,
	          reference: reflector.resolveIdentifier(identifier.name, identifier.moduleUrl, identifier.runtime)
	      });
	  }
	  function identifierToken(identifier) {
	      return new CompileTokenMetadata({ identifier: identifier });
	  }
	  function resolveIdentifierToken(identifier) {
	      return identifierToken(resolveIdentifier(identifier));
	  }
	  function resolveEnumIdentifier(enumType, name) {
	      var resolvedEnum = reflector.resolveEnum(enumType.reference, name);
	      return new CompileIdentifierMetadata({ name: enumType.name + "." + name, moduleUrl: enumType.moduleUrl, reference: resolvedEnum });
	  }

	  /**
	   * @license
	   * Copyright Google Inc. All Rights Reserved.
	   *
	   * Use of this source code is governed by an MIT-style license that can be
	   * found in the LICENSE file at https://angular.io/license
	   */
	  var __extends$8 = (this && this.__extends) || function (d, b) {
	      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	      function __() { this.constructor = d; }
	      d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	  };
	  var HtmlParser = (function (_super) {
	      __extends$8(HtmlParser, _super);
	      function HtmlParser() {
	          _super.call(this, getHtmlTagDefinition);
	      }
	      HtmlParser.prototype.parse = function (source, url, parseExpansionForms, interpolationConfig) {
	          if (parseExpansionForms === void 0) { parseExpansionForms = false; }
	          if (interpolationConfig === void 0) { interpolationConfig = DEFAULT_INTERPOLATION_CONFIG; }
	          return _super.prototype.parse.call(this, source, url, parseExpansionForms, interpolationConfig);
	      };
	      HtmlParser.decorators = [
	          { type: _angular_core.Injectable },
	      ];
	      /** @nocollapse */
	      HtmlParser.ctorParameters = [];
	      return HtmlParser;
	  }(Parser$1));

	  /**
	   * @license
	   * Copyright Google Inc. All Rights Reserved.
	   *
	   * Use of this source code is governed by an MIT-style license that can be
	   * found in the LICENSE file at https://angular.io/license
	   */
	  var __extends$9 = (this && this.__extends) || function (d, b) {
	      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	      function __() { this.constructor = d; }
	      d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	  };
	  // http://cldr.unicode.org/index/cldr-spec/plural-rules
	  var PLURAL_CASES = ['zero', 'one', 'two', 'few', 'many', 'other'];
	  /**
	   * Expands special forms into elements.
	   *
	   * For example,
	   *
	   * ```
	   * { messages.length, plural,
	   *   =0 {zero}
	   *   =1 {one}
	   *   other {more than one}
	   * }
	   * ```
	   *
	   * will be expanded into
	   *
	   * ```
	   * <ng-container [ngPlural]="messages.length">
	   *   <template ngPluralCase="=0">zero</ng-container>
	   *   <template ngPluralCase="=1">one</ng-container>
	   *   <template ngPluralCase="other">more than one</ng-container>
	   * </ng-container>
	   * ```
	   */
	  function expandNodes(nodes) {
	      var expander = new _Expander();
	      return new ExpansionResult(visitAll(expander, nodes), expander.isExpanded, expander.errors);
	  }
	  var ExpansionResult = (function () {
	      function ExpansionResult(nodes, expanded, errors) {
	          this.nodes = nodes;
	          this.expanded = expanded;
	          this.errors = errors;
	      }
	      return ExpansionResult;
	  }());
	  var ExpansionError = (function (_super) {
	      __extends$9(ExpansionError, _super);
	      function ExpansionError(span, errorMsg) {
	          _super.call(this, span, errorMsg);
	      }
	      return ExpansionError;
	  }(ParseError));
	  /**
	   * Expand expansion forms (plural, select) to directives
	   *
	   * @internal
	   */
	  var _Expander = (function () {
	      function _Expander() {
	          this.isExpanded = false;
	          this.errors = [];
	      }
	      _Expander.prototype.visitElement = function (element, context) {
	          return new Element(element.name, element.attrs, visitAll(this, element.children), element.sourceSpan, element.startSourceSpan, element.endSourceSpan);
	      };
	      _Expander.prototype.visitAttribute = function (attribute, context) { return attribute; };
	      _Expander.prototype.visitText = function (text, context) { return text; };
	      _Expander.prototype.visitComment = function (comment, context) { return comment; };
	      _Expander.prototype.visitExpansion = function (icu, context) {
	          this.isExpanded = true;
	          return icu.type == 'plural' ? _expandPluralForm(icu, this.errors) :
	              _expandDefaultForm(icu, this.errors);
	      };
	      _Expander.prototype.visitExpansionCase = function (icuCase, context) {
	          throw new Error('Should not be reached');
	      };
	      return _Expander;
	  }());
	  function _expandPluralForm(ast, errors) {
	      var children = ast.cases.map(function (c) {
	          if (PLURAL_CASES.indexOf(c.value) == -1 && !c.value.match(/^=\d+$/)) {
	              errors.push(new ExpansionError(c.valueSourceSpan, "Plural cases should be \"=<number>\" or one of " + PLURAL_CASES.join(", ")));
	          }
	          var expansionResult = expandNodes(c.expression);
	          errors.push.apply(errors, expansionResult.errors);
	          return new Element("template", [new Attribute$1('ngPluralCase', "" + c.value, c.valueSourceSpan)], expansionResult.nodes, c.sourceSpan, c.sourceSpan, c.sourceSpan);
	      });
	      var switchAttr = new Attribute$1('[ngPlural]', ast.switchValue, ast.switchValueSourceSpan);
	      return new Element('ng-container', [switchAttr], children, ast.sourceSpan, ast.sourceSpan, ast.sourceSpan);
	  }
	  function _expandDefaultForm(ast, errors) {
	      var children = ast.cases.map(function (c) {
	          var expansionResult = expandNodes(c.expression);
	          errors.push.apply(errors, expansionResult.errors);
	          if (c.value === 'other') {
	              // other is the default case when no values match
	              return new Element("template", [new Attribute$1('ngSwitchDefault', '', c.valueSourceSpan)], expansionResult.nodes, c.sourceSpan, c.sourceSpan, c.sourceSpan);
	          }
	          return new Element("template", [new Attribute$1('ngSwitchCase', "" + c.value, c.valueSourceSpan)], expansionResult.nodes, c.sourceSpan, c.sourceSpan, c.sourceSpan);
	      });
	      var switchAttr = new Attribute$1('[ngSwitch]', ast.switchValue, ast.switchValueSourceSpan);
	      return new Element('ng-container', [switchAttr], children, ast.sourceSpan, ast.sourceSpan, ast.sourceSpan);
	  }

	  /**
	   * @license
	   * Copyright Google Inc. All Rights Reserved.
	   *
	   * Use of this source code is governed by an MIT-style license that can be
	   * found in the LICENSE file at https://angular.io/license
	   */
	  var __extends$10 = (this && this.__extends) || function (d, b) {
	      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	      function __() { this.constructor = d; }
	      d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	  };
	  var ProviderError = (function (_super) {
	      __extends$10(ProviderError, _super);
	      function ProviderError(message, span) {
	          _super.call(this, span, message);
	      }
	      return ProviderError;
	  }(ParseError));
	  var ProviderViewContext = (function () {
	      function ProviderViewContext(component, sourceSpan) {
	          var _this = this;
	          this.component = component;
	          this.sourceSpan = sourceSpan;
	          this.errors = [];
	          this.viewQueries = _getViewQueries(component);
	          this.viewProviders = new Map();
	          _normalizeProviders(component.viewProviders, sourceSpan, this.errors).forEach(function (provider) {
	              if (isBlank(_this.viewProviders.get(provider.token.reference))) {
	                  _this.viewProviders.set(provider.token.reference, true);
	              }
	          });
	      }
	      return ProviderViewContext;
	  }());
	  var ProviderElementContext = (function () {
	      function ProviderElementContext(viewContext, _parent, _isViewRoot, _directiveAsts, attrs, refs, _sourceSpan) {
	          var _this = this;
	          this.viewContext = viewContext;
	          this._parent = _parent;
	          this._isViewRoot = _isViewRoot;
	          this._directiveAsts = _directiveAsts;
	          this._sourceSpan = _sourceSpan;
	          this._transformedProviders = new Map();
	          this._seenProviders = new Map();
	          this._hasViewContainer = false;
	          this._attrs = {};
	          attrs.forEach(function (attrAst) { return _this._attrs[attrAst.name] = attrAst.value; });
	          var directivesMeta = _directiveAsts.map(function (directiveAst) { return directiveAst.directive; });
	          this._allProviders =
	              _resolveProvidersFromDirectives(directivesMeta, _sourceSpan, viewContext.errors);
	          this._contentQueries = _getContentQueries(directivesMeta);
	          var queriedTokens = new Map();
	          Array.from(this._allProviders.values()).forEach(function (provider) {
	              _this._addQueryReadsTo(provider.token, queriedTokens);
	          });
	          refs.forEach(function (refAst) {
	              _this._addQueryReadsTo(new CompileTokenMetadata({ value: refAst.name }), queriedTokens);
	          });
	          if (isPresent(queriedTokens.get(resolveIdentifierToken(Identifiers.ViewContainerRef).reference))) {
	              this._hasViewContainer = true;
	          }
	          // create the providers that we know are eager first
	          Array.from(this._allProviders.values()).forEach(function (provider) {
	              var eager = provider.eager || isPresent(queriedTokens.get(provider.token.reference));
	              if (eager) {
	                  _this._getOrCreateLocalProvider(provider.providerType, provider.token, true);
	              }
	          });
	      }
	      ProviderElementContext.prototype.afterElement = function () {
	          var _this = this;
	          // collect lazy providers
	          Array.from(this._allProviders.values()).forEach(function (provider) {
	              _this._getOrCreateLocalProvider(provider.providerType, provider.token, false);
	          });
	      };
	      Object.defineProperty(ProviderElementContext.prototype, "transformProviders", {
	          get: function () {
	              return Array.from(this._transformedProviders.values());
	          },
	          enumerable: true,
	          configurable: true
	      });
	      Object.defineProperty(ProviderElementContext.prototype, "transformedDirectiveAsts", {
	          get: function () {
	              var sortedProviderTypes = this.transformProviders.map(function (provider) { return provider.token.identifier; });
	              var sortedDirectives = this._directiveAsts.slice();
	              sortedDirectives.sort(function (dir1, dir2) { return sortedProviderTypes.indexOf(dir1.directive.type) -
	                  sortedProviderTypes.indexOf(dir2.directive.type); });
	              return sortedDirectives;
	          },
	          enumerable: true,
	          configurable: true
	      });
	      Object.defineProperty(ProviderElementContext.prototype, "transformedHasViewContainer", {
	          get: function () { return this._hasViewContainer; },
	          enumerable: true,
	          configurable: true
	      });
	      ProviderElementContext.prototype._addQueryReadsTo = function (token, queryReadTokens) {
	          this._getQueriesFor(token).forEach(function (query) {
	              var queryReadToken = query.read || token;
	              if (isBlank(queryReadTokens.get(queryReadToken.reference))) {
	                  queryReadTokens.set(queryReadToken.reference, true);
	              }
	          });
	      };
	      ProviderElementContext.prototype._getQueriesFor = function (token) {
	          var result = [];
	          var currentEl = this;
	          var distance = 0;
	          var queries;
	          while (currentEl !== null) {
	              queries = currentEl._contentQueries.get(token.reference);
	              if (isPresent(queries)) {
	                  result.push.apply(result, queries.filter(function (query) { return query.descendants || distance <= 1; }));
	              }
	              if (currentEl._directiveAsts.length > 0) {
	                  distance++;
	              }
	              currentEl = currentEl._parent;
	          }
	          queries = this.viewContext.viewQueries.get(token.reference);
	          if (isPresent(queries)) {
	              result.push.apply(result, queries);
	          }
	          return result;
	      };
	      ProviderElementContext.prototype._getOrCreateLocalProvider = function (requestingProviderType, token, eager) {
	          var _this = this;
	          var resolvedProvider = this._allProviders.get(token.reference);
	          if (!resolvedProvider || ((requestingProviderType === exports.ProviderAstType.Directive ||
	              requestingProviderType === exports.ProviderAstType.PublicService) &&
	              resolvedProvider.providerType === exports.ProviderAstType.PrivateService) ||
	              ((requestingProviderType === exports.ProviderAstType.PrivateService ||
	                  requestingProviderType === exports.ProviderAstType.PublicService) &&
	                  resolvedProvider.providerType === exports.ProviderAstType.Builtin)) {
	              return null;
	          }
	          var transformedProviderAst = this._transformedProviders.get(token.reference);
	          if (isPresent(transformedProviderAst)) {
	              return transformedProviderAst;
	          }
	          if (isPresent(this._seenProviders.get(token.reference))) {
	              this.viewContext.errors.push(new ProviderError("Cannot instantiate cyclic dependency! " + token.name, this._sourceSpan));
	              return null;
	          }
	          this._seenProviders.set(token.reference, true);
	          var transformedProviders = resolvedProvider.providers.map(function (provider) {
	              var transformedUseValue = provider.useValue;
	              var transformedUseExisting = provider.useExisting;
	              var transformedDeps;
	              if (isPresent(provider.useExisting)) {
	                  var existingDiDep = _this._getDependency(resolvedProvider.providerType, new CompileDiDependencyMetadata({ token: provider.useExisting }), eager);
	                  if (isPresent(existingDiDep.token)) {
	                      transformedUseExisting = existingDiDep.token;
	                  }
	                  else {
	                      transformedUseExisting = null;
	                      transformedUseValue = existingDiDep.value;
	                  }
	              }
	              else if (isPresent(provider.useFactory)) {
	                  var deps = provider.deps || provider.useFactory.diDeps;
	                  transformedDeps =
	                      deps.map(function (dep) { return _this._getDependency(resolvedProvider.providerType, dep, eager); });
	              }
	              else if (isPresent(provider.useClass)) {
	                  var deps = provider.deps || provider.useClass.diDeps;
	                  transformedDeps =
	                      deps.map(function (dep) { return _this._getDependency(resolvedProvider.providerType, dep, eager); });
	              }
	              return _transformProvider(provider, {
	                  useExisting: transformedUseExisting,
	                  useValue: transformedUseValue,
	                  deps: transformedDeps
	              });
	          });
	          transformedProviderAst =
	              _transformProviderAst(resolvedProvider, { eager: eager, providers: transformedProviders });
	          this._transformedProviders.set(token.reference, transformedProviderAst);
	          return transformedProviderAst;
	      };
	      ProviderElementContext.prototype._getLocalDependency = function (requestingProviderType, dep, eager) {
	          if (eager === void 0) { eager = null; }
	          if (dep.isAttribute) {
	              var attrValue = this._attrs[dep.token.value];
	              return new CompileDiDependencyMetadata({ isValue: true, value: attrValue == null ? null : attrValue });
	          }
	          if (isPresent(dep.token)) {
	              // access builtints
	              if ((requestingProviderType === exports.ProviderAstType.Directive ||
	                  requestingProviderType === exports.ProviderAstType.Component)) {
	                  if (dep.token.reference === resolveIdentifierToken(Identifiers.Renderer).reference ||
	                      dep.token.reference === resolveIdentifierToken(Identifiers.ElementRef).reference ||
	                      dep.token.reference ===
	                          resolveIdentifierToken(Identifiers.ChangeDetectorRef).reference ||
	                      dep.token.reference === resolveIdentifierToken(Identifiers.TemplateRef).reference) {
	                      return dep;
	                  }
	                  if (dep.token.reference ===
	                      resolveIdentifierToken(Identifiers.ViewContainerRef).reference) {
	                      this._hasViewContainer = true;
	                  }
	              }
	              // access the injector
	              if (dep.token.reference === resolveIdentifierToken(Identifiers.Injector).reference) {
	                  return dep;
	              }
	              // access providers
	              if (isPresent(this._getOrCreateLocalProvider(requestingProviderType, dep.token, eager))) {
	                  return dep;
	              }
	          }
	          return null;
	      };
	      ProviderElementContext.prototype._getDependency = function (requestingProviderType, dep, eager) {
	          if (eager === void 0) { eager = null; }
	          var currElement = this;
	          var currEager = eager;
	          var result = null;
	          if (!dep.isSkipSelf) {
	              result = this._getLocalDependency(requestingProviderType, dep, eager);
	          }
	          if (dep.isSelf) {
	              if (!result && dep.isOptional) {
	                  result = new CompileDiDependencyMetadata({ isValue: true, value: null });
	              }
	          }
	          else {
	              // check parent elements
	              while (!result && isPresent(currElement._parent)) {
	                  var prevElement = currElement;
	                  currElement = currElement._parent;
	                  if (prevElement._isViewRoot) {
	                      currEager = false;
	                  }
	                  result = currElement._getLocalDependency(exports.ProviderAstType.PublicService, dep, currEager);
	              }
	              // check @Host restriction
	              if (!result) {
	                  if (!dep.isHost || this.viewContext.component.type.isHost ||
	                      this.viewContext.component.type.reference === dep.token.reference ||
	                      isPresent(this.viewContext.viewProviders.get(dep.token.reference))) {
	                      result = dep;
	                  }
	                  else {
	                      result = dep.isOptional ?
	                          result = new CompileDiDependencyMetadata({ isValue: true, value: null }) :
	                          null;
	                  }
	              }
	          }
	          if (!result) {
	              this.viewContext.errors.push(new ProviderError("No provider for " + dep.token.name, this._sourceSpan));
	          }
	          return result;
	      };
	      return ProviderElementContext;
	  }());
	  var NgModuleProviderAnalyzer = (function () {
	      function NgModuleProviderAnalyzer(ngModule, extraProviders, sourceSpan) {
	          var _this = this;
	          this._transformedProviders = new Map();
	          this._seenProviders = new Map();
	          this._errors = [];
	          this._allProviders = new Map();
	          var ngModuleTypes = ngModule.transitiveModule.modules.map(function (moduleMeta) { return moduleMeta.type; });
	          ngModuleTypes.forEach(function (ngModuleType) {
	              var ngModuleProvider = new CompileProviderMetadata({ token: new CompileTokenMetadata({ identifier: ngModuleType }), useClass: ngModuleType });
	              _resolveProviders([ngModuleProvider], exports.ProviderAstType.PublicService, true, sourceSpan, _this._errors, _this._allProviders);
	          });
	          _resolveProviders(_normalizeProviders(ngModule.transitiveModule.providers.concat(extraProviders), sourceSpan, this._errors), exports.ProviderAstType.PublicService, false, sourceSpan, this._errors, this._allProviders);
	      }
	      NgModuleProviderAnalyzer.prototype.parse = function () {
	          var _this = this;
	          Array.from(this._allProviders.values()).forEach(function (provider) {
	              _this._getOrCreateLocalProvider(provider.token, provider.eager);
	          });
	          if (this._errors.length > 0) {
	              var errorString = this._errors.join('\n');
	              throw new Error("Provider parse errors:\n" + errorString);
	          }
	          return Array.from(this._transformedProviders.values());
	      };
	      NgModuleProviderAnalyzer.prototype._getOrCreateLocalProvider = function (token, eager) {
	          var _this = this;
	          var resolvedProvider = this._allProviders.get(token.reference);
	          if (!resolvedProvider) {
	              return null;
	          }
	          var transformedProviderAst = this._transformedProviders.get(token.reference);
	          if (isPresent(transformedProviderAst)) {
	              return transformedProviderAst;
	          }
	          if (isPresent(this._seenProviders.get(token.reference))) {
	              this._errors.push(new ProviderError("Cannot instantiate cyclic dependency! " + token.name, resolvedProvider.sourceSpan));
	              return null;
	          }
	          this._seenProviders.set(token.reference, true);
	          var transformedProviders = resolvedProvider.providers.map(function (provider) {
	              var transformedUseValue = provider.useValue;
	              var transformedUseExisting = provider.useExisting;
	              var transformedDeps;
	              if (isPresent(provider.useExisting)) {
	                  var existingDiDep = _this._getDependency(new CompileDiDependencyMetadata({ token: provider.useExisting }), eager, resolvedProvider.sourceSpan);
	                  if (isPresent(existingDiDep.token)) {
	                      transformedUseExisting = existingDiDep.token;
	                  }
	                  else {
	                      transformedUseExisting = null;
	                      transformedUseValue = existingDiDep.value;
	                  }
	              }
	              else if (isPresent(provider.useFactory)) {
	                  var deps = provider.deps || provider.useFactory.diDeps;
	                  transformedDeps =
	                      deps.map(function (dep) { return _this._getDependency(dep, eager, resolvedProvider.sourceSpan); });
	              }
	              else if (isPresent(provider.useClass)) {
	                  var deps = provider.deps || provider.useClass.diDeps;
	                  transformedDeps =
	                      deps.map(function (dep) { return _this._getDependency(dep, eager, resolvedProvider.sourceSpan); });
	              }
	              return _transformProvider(provider, {
	                  useExisting: transformedUseExisting,
	                  useValue: transformedUseValue,
	                  deps: transformedDeps
	              });
	          });
	          transformedProviderAst =
	              _transformProviderAst(resolvedProvider, { eager: eager, providers: transformedProviders });
	          this._transformedProviders.set(token.reference, transformedProviderAst);
	          return transformedProviderAst;
	      };
	      NgModuleProviderAnalyzer.prototype._getDependency = function (dep, eager, requestorSourceSpan) {
	          if (eager === void 0) { eager = null; }
	          var foundLocal = false;
	          if (!dep.isSkipSelf && isPresent(dep.token)) {
	              // access the injector
	              if (dep.token.reference === resolveIdentifierToken(Identifiers.Injector).reference ||
	                  dep.token.reference ===
	                      resolveIdentifierToken(Identifiers.ComponentFactoryResolver).reference) {
	                  foundLocal = true;
	              }
	              else if (isPresent(this._getOrCreateLocalProvider(dep.token, eager))) {
	                  foundLocal = true;
	              }
	          }
	          var result = dep;
	          if (dep.isSelf && !foundLocal) {
	              if (dep.isOptional) {
	                  result = new CompileDiDependencyMetadata({ isValue: true, value: null });
	              }
	              else {
	                  this._errors.push(new ProviderError("No provider for " + dep.token.name, requestorSourceSpan));
	              }
	          }
	          return result;
	      };
	      return NgModuleProviderAnalyzer;
	  }());
	  function _transformProvider(provider, _a) {
	      var useExisting = _a.useExisting, useValue = _a.useValue, deps = _a.deps;
	      return new CompileProviderMetadata({
	          token: provider.token,
	          useClass: provider.useClass,
	          useExisting: useExisting,
	          useFactory: provider.useFactory,
	          useValue: useValue,
	          deps: deps,
	          multi: provider.multi
	      });
	  }
	  function _transformProviderAst(provider, _a) {
	      var eager = _a.eager, providers = _a.providers;
	      return new ProviderAst(provider.token, provider.multiProvider, provider.eager || eager, providers, provider.providerType, provider.lifecycleHooks, provider.sourceSpan);
	  }
	  function _normalizeProviders(providers, sourceSpan, targetErrors, targetProviders) {
	      if (targetProviders === void 0) { targetProviders = null; }
	      if (!targetProviders) {
	          targetProviders = [];
	      }
	      if (isPresent(providers)) {
	          providers.forEach(function (provider) {
	              if (Array.isArray(provider)) {
	                  _normalizeProviders(provider, sourceSpan, targetErrors, targetProviders);
	              }
	              else {
	                  var normalizeProvider = void 0;
	                  if (provider instanceof CompileProviderMetadata) {
	                      normalizeProvider = provider;
	                  }
	                  else if (provider instanceof CompileTypeMetadata) {
	                      normalizeProvider = new CompileProviderMetadata({ token: new CompileTokenMetadata({ identifier: provider }), useClass: provider });
	                  }
	                  else {
	                      targetErrors.push(new ProviderError("Unknown provider type " + provider, sourceSpan));
	                  }
	                  if (isPresent(normalizeProvider)) {
	                      targetProviders.push(normalizeProvider);
	                  }
	              }
	          });
	      }
	      return targetProviders;
	  }
	  function _resolveProvidersFromDirectives(directives, sourceSpan, targetErrors) {
	      var providersByToken = new Map();
	      directives.forEach(function (directive) {
	          var dirProvider = new CompileProviderMetadata({ token: new CompileTokenMetadata({ identifier: directive.type }), useClass: directive.type });
	          _resolveProviders([dirProvider], directive.isComponent ? exports.ProviderAstType.Component : exports.ProviderAstType.Directive, true, sourceSpan, targetErrors, providersByToken);
	      });
	      // Note: directives need to be able to overwrite providers of a component!
	      var directivesWithComponentFirst = directives.filter(function (dir) { return dir.isComponent; }).concat(directives.filter(function (dir) { return !dir.isComponent; }));
	      directivesWithComponentFirst.forEach(function (directive) {
	          _resolveProviders(_normalizeProviders(directive.providers, sourceSpan, targetErrors), exports.ProviderAstType.PublicService, false, sourceSpan, targetErrors, providersByToken);
	          _resolveProviders(_normalizeProviders(directive.viewProviders, sourceSpan, targetErrors), exports.ProviderAstType.PrivateService, false, sourceSpan, targetErrors, providersByToken);
	      });
	      return providersByToken;
	  }
	  function _resolveProviders(providers, providerType, eager, sourceSpan, targetErrors, targetProvidersByToken) {
	      providers.forEach(function (provider) {
	          var resolvedProvider = targetProvidersByToken.get(provider.token.reference);
	          if (isPresent(resolvedProvider) && resolvedProvider.multiProvider !== provider.multi) {
	              targetErrors.push(new ProviderError("Mixing multi and non multi provider is not possible for token " + resolvedProvider.token.name, sourceSpan));
	          }
	          if (!resolvedProvider) {
	              var lifecycleHooks = provider.token.identifier && provider.token.identifier instanceof CompileTypeMetadata ?
	                  provider.token.identifier.lifecycleHooks :
	                  [];
	              resolvedProvider = new ProviderAst(provider.token, provider.multi, eager || lifecycleHooks.length > 0, [provider], providerType, lifecycleHooks, sourceSpan);
	              targetProvidersByToken.set(provider.token.reference, resolvedProvider);
	          }
	          else {
	              if (!provider.multi) {
	                  resolvedProvider.providers.length = 0;
	              }
	              resolvedProvider.providers.push(provider);
	          }
	      });
	  }
	  function _getViewQueries(component) {
	      var viewQueries = new Map();
	      if (isPresent(component.viewQueries)) {
	          component.viewQueries.forEach(function (query) { return _addQueryToTokenMap(viewQueries, query); });
	      }
	      return viewQueries;
	  }
	  function _getContentQueries(directives) {
	      var contentQueries = new Map();
	      directives.forEach(function (directive) {
	          if (isPresent(directive.queries)) {
	              directive.queries.forEach(function (query) { return _addQueryToTokenMap(contentQueries, query); });
	          }
	      });
	      return contentQueries;
	  }
	  function _addQueryToTokenMap(map, query) {
	      query.selectors.forEach(function (token) {
	          var entry = map.get(token.reference);
	          if (!entry) {
	              entry = [];
	              map.set(token.reference, entry);
	          }
	          entry.push(query);
	      });
	  }

	  /**
	   * @license
	   * Copyright Google Inc. All Rights Reserved.
	   *
	   * Use of this source code is governed by an MIT-style license that can be
	   * found in the LICENSE file at https://angular.io/license
	   */
	  var ElementSchemaRegistry = (function () {
	      function ElementSchemaRegistry() {
	      }
	      return ElementSchemaRegistry;
	  }());

	  var StyleWithImports = (function () {
	      function StyleWithImports(style, styleUrls) {
	          this.style = style;
	          this.styleUrls = styleUrls;
	      }
	      return StyleWithImports;
	  }());
	  function isStyleUrlResolvable(url) {
	      if (isBlank(url) || url.length === 0 || url[0] == '/')
	          return false;
	      var schemeMatch = url.match(_urlWithSchemaRe);
	      return schemeMatch === null || schemeMatch[1] == 'package' || schemeMatch[1] == 'asset';
	  }
	  /**
	   * Rewrites stylesheets by resolving and removing the @import urls that
	   * are either relative or don't have a `package:` scheme
	   */
	  function extractStyleUrls(resolver, baseUrl, cssText) {
	      var foundUrls = [];
	      var modifiedCssText = cssText.replace(_cssImportRe, function () {
	          var m = [];
	          for (var _i = 0; _i < arguments.length; _i++) {
	              m[_i - 0] = arguments[_i];
	          }
	          var url = m[1] || m[2];
	          if (!isStyleUrlResolvable(url)) {
	              // Do not attempt to resolve non-package absolute URLs with URI scheme
	              return m[0];
	          }
	          foundUrls.push(resolver.resolve(baseUrl, url));
	          return '';
	      });
	      return new StyleWithImports(modifiedCssText, foundUrls);
	  }
	  var _cssImportRe = /@import\s+(?:url\()?\s*(?:(?:['"]([^'"]*))|([^;\)\s]*))[^;]*;?/g;
	  var _urlWithSchemaRe = /^([^:/?#]+):/;

	  /**
	   * @license
	   * Copyright Google Inc. All Rights Reserved.
	   *
	   * Use of this source code is governed by an MIT-style license that can be
	   * found in the LICENSE file at https://angular.io/license
	   */
	  var __extends$11 = (this && this.__extends) || function (d, b) {
	      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	      function __() { this.constructor = d; }
	      d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	  };
	  var PROPERTY_PARTS_SEPARATOR = '.';
	  var ATTRIBUTE_PREFIX = 'attr';
	  var CLASS_PREFIX = 'class';
	  var STYLE_PREFIX = 'style';
	  var ANIMATE_PROP_PREFIX = 'animate-';
	  var BoundPropertyType;
	  (function (BoundPropertyType) {
	      BoundPropertyType[BoundPropertyType["DEFAULT"] = 0] = "DEFAULT";
	      BoundPropertyType[BoundPropertyType["LITERAL_ATTR"] = 1] = "LITERAL_ATTR";
	      BoundPropertyType[BoundPropertyType["ANIMATION"] = 2] = "ANIMATION";
	  })(BoundPropertyType || (BoundPropertyType = {}));
	  /**
	   * Represents a parsed property.
	   */
	  var BoundProperty = (function () {
	      function BoundProperty(name, expression, type, sourceSpan) {
	          this.name = name;
	          this.expression = expression;
	          this.type = type;
	          this.sourceSpan = sourceSpan;
	      }
	      Object.defineProperty(BoundProperty.prototype, "isLiteral", {
	          get: function () { return this.type === BoundPropertyType.LITERAL_ATTR; },
	          enumerable: true,
	          configurable: true
	      });
	      Object.defineProperty(BoundProperty.prototype, "isAnimation", {
	          get: function () { return this.type === BoundPropertyType.ANIMATION; },
	          enumerable: true,
	          configurable: true
	      });
	      return BoundProperty;
	  }());
	  /**
	   * Parses bindings in templates and in the directive host area.
	   */
	  var BindingParser = (function () {
	      function BindingParser(_exprParser, _interpolationConfig, _schemaRegistry, pipes, _targetErrors) {
	          var _this = this;
	          this._exprParser = _exprParser;
	          this._interpolationConfig = _interpolationConfig;
	          this._schemaRegistry = _schemaRegistry;
	          this._targetErrors = _targetErrors;
	          this.pipesByName = new Map();
	          pipes.forEach(function (pipe) { return _this.pipesByName.set(pipe.name, pipe); });
	      }
	      BindingParser.prototype.createDirectiveHostPropertyAsts = function (dirMeta, sourceSpan) {
	          var _this = this;
	          if (dirMeta.hostProperties) {
	              var boundProps_1 = [];
	              Object.keys(dirMeta.hostProperties).forEach(function (propName) {
	                  var expression = dirMeta.hostProperties[propName];
	                  if (typeof expression === 'string') {
	                      _this.parsePropertyBinding(propName, expression, true, sourceSpan, [], boundProps_1);
	                  }
	                  else {
	                      _this._reportError("Value of the host property binding \"" + propName + "\" needs to be a string representing an expression but got \"" + expression + "\" (" + typeof expression + ")", sourceSpan);
	                  }
	              });
	              return boundProps_1.map(function (prop) { return _this.createElementPropertyAst(dirMeta.selector, prop); });
	          }
	      };
	      BindingParser.prototype.createDirectiveHostEventAsts = function (dirMeta, sourceSpan) {
	          var _this = this;
	          if (dirMeta.hostListeners) {
	              var targetEventAsts_1 = [];
	              Object.keys(dirMeta.hostListeners).forEach(function (propName) {
	                  var expression = dirMeta.hostListeners[propName];
	                  if (typeof expression === 'string') {
	                      _this.parseEvent(propName, expression, sourceSpan, [], targetEventAsts_1);
	                  }
	                  else {
	                      _this._reportError("Value of the host listener \"" + propName + "\" needs to be a string representing an expression but got \"" + expression + "\" (" + typeof expression + ")", sourceSpan);
	                  }
	              });
	              return targetEventAsts_1;
	          }
	      };
	      BindingParser.prototype.parseInterpolation = function (value, sourceSpan) {
	          var sourceInfo = sourceSpan.start.toString();
	          try {
	              var ast = this._exprParser.parseInterpolation(value, sourceInfo, this._interpolationConfig);
	              if (ast)
	                  this._reportExpressionParserErrors(ast.errors, sourceSpan);
	              this._checkPipes(ast, sourceSpan);
	              return ast;
	          }
	          catch (e) {
	              this._reportError("" + e, sourceSpan);
	              return this._exprParser.wrapLiteralPrimitive('ERROR', sourceInfo);
	          }
	      };
	      BindingParser.prototype.parseInlineTemplateBinding = function (name, prefixToken, value, sourceSpan, targetMatchableAttrs, targetProps, targetVars) {
	          var bindings = this._parseTemplateBindings(prefixToken, value, sourceSpan);
	          for (var i = 0; i < bindings.length; i++) {
	              var binding = bindings[i];
	              if (binding.keyIsVar) {
	                  targetVars.push(new VariableAst(binding.key, binding.name, sourceSpan));
	              }
	              else if (isPresent(binding.expression)) {
	                  this._parsePropertyAst(binding.key, binding.expression, sourceSpan, targetMatchableAttrs, targetProps);
	              }
	              else {
	                  targetMatchableAttrs.push([binding.key, '']);
	                  this.parseLiteralAttr(binding.key, null, sourceSpan, targetMatchableAttrs, targetProps);
	              }
	          }
	      };
	      BindingParser.prototype._parseTemplateBindings = function (prefixToken, value, sourceSpan) {
	          var _this = this;
	          var sourceInfo = sourceSpan.start.toString();
	          try {
	              var bindingsResult = this._exprParser.parseTemplateBindings(prefixToken, value, sourceInfo);
	              this._reportExpressionParserErrors(bindingsResult.errors, sourceSpan);
	              bindingsResult.templateBindings.forEach(function (binding) {
	                  if (isPresent(binding.expression)) {
	                      _this._checkPipes(binding.expression, sourceSpan);
	                  }
	              });
	              bindingsResult.warnings.forEach(function (warning) { _this._reportError(warning, sourceSpan, exports.ParseErrorLevel.WARNING); });
	              return bindingsResult.templateBindings;
	          }
	          catch (e) {
	              this._reportError("" + e, sourceSpan);
	              return [];
	          }
	      };
	      BindingParser.prototype.parseLiteralAttr = function (name, value, sourceSpan, targetMatchableAttrs, targetProps) {
	          if (_isAnimationLabel(name)) {
	              name = name.substring(1);
	              if (value) {
	                  this._reportError("Assigning animation triggers via @prop=\"exp\" attributes with an expression is invalid." +
	                      " Use property bindings (e.g. [@prop]=\"exp\") or use an attribute without a value (e.g. @prop) instead.", sourceSpan, exports.ParseErrorLevel.FATAL);
	              }
	              this._parseAnimation(name, value, sourceSpan, targetMatchableAttrs, targetProps);
	          }
	          else {
	              targetProps.push(new BoundProperty(name, this._exprParser.wrapLiteralPrimitive(value, ''), BoundPropertyType.LITERAL_ATTR, sourceSpan));
	          }
	      };
	      BindingParser.prototype.parsePropertyBinding = function (name, expression, isHost, sourceSpan, targetMatchableAttrs, targetProps) {
	          var isAnimationProp = false;
	          if (name.startsWith(ANIMATE_PROP_PREFIX)) {
	              isAnimationProp = true;
	              name = name.substring(ANIMATE_PROP_PREFIX.length);
	          }
	          else if (_isAnimationLabel(name)) {
	              isAnimationProp = true;
	              name = name.substring(1);
	          }
	          if (isAnimationProp) {
	              this._parseAnimation(name, expression, sourceSpan, targetMatchableAttrs, targetProps);
	          }
	          else {
	              this._parsePropertyAst(name, this._parseBinding(expression, isHost, sourceSpan), sourceSpan, targetMatchableAttrs, targetProps);
	          }
	      };
	      BindingParser.prototype.parsePropertyInterpolation = function (name, value, sourceSpan, targetMatchableAttrs, targetProps) {
	          var expr = this.parseInterpolation(value, sourceSpan);
	          if (isPresent(expr)) {
	              this._parsePropertyAst(name, expr, sourceSpan, targetMatchableAttrs, targetProps);
	              return true;
	          }
	          return false;
	      };
	      BindingParser.prototype._parsePropertyAst = function (name, ast, sourceSpan, targetMatchableAttrs, targetProps) {
	          targetMatchableAttrs.push([name, ast.source]);
	          targetProps.push(new BoundProperty(name, ast, BoundPropertyType.DEFAULT, sourceSpan));
	      };
	      BindingParser.prototype._parseAnimation = function (name, expression, sourceSpan, targetMatchableAttrs, targetProps) {
	          // This will occur when a @trigger is not paired with an expression.
	          // For animations it is valid to not have an expression since */void
	          // states will be applied by angular when the element is attached/detached
	          var ast = this._parseBinding(expression || 'null', false, sourceSpan);
	          targetMatchableAttrs.push([name, ast.source]);
	          targetProps.push(new BoundProperty(name, ast, BoundPropertyType.ANIMATION, sourceSpan));
	      };
	      BindingParser.prototype._parseBinding = function (value, isHostBinding, sourceSpan) {
	          var sourceInfo = sourceSpan.start.toString();
	          try {
	              var ast = isHostBinding ?
	                  this._exprParser.parseSimpleBinding(value, sourceInfo, this._interpolationConfig) :
	                  this._exprParser.parseBinding(value, sourceInfo, this._interpolationConfig);
	              if (ast)
	                  this._reportExpressionParserErrors(ast.errors, sourceSpan);
	              this._checkPipes(ast, sourceSpan);
	              return ast;
	          }
	          catch (e) {
	              this._reportError("" + e, sourceSpan);
	              return this._exprParser.wrapLiteralPrimitive('ERROR', sourceInfo);
	          }
	      };
	      BindingParser.prototype.createElementPropertyAst = function (elementSelector, boundProp) {
	          if (boundProp.isAnimation) {
	              return new BoundElementPropertyAst(boundProp.name, exports.PropertyBindingType.Animation, _angular_core.SecurityContext.NONE, false, boundProp.expression, null, boundProp.sourceSpan);
	          }
	          var unit = null;
	          var bindingType;
	          var boundPropertyName;
	          var parts = boundProp.name.split(PROPERTY_PARTS_SEPARATOR);
	          var securityContexts;
	          if (parts.length === 1) {
	              var partValue = parts[0];
	              boundPropertyName = this._schemaRegistry.getMappedPropName(partValue);
	              securityContexts = calcPossibleSecurityContexts(this._schemaRegistry, elementSelector, boundPropertyName, false);
	              bindingType = exports.PropertyBindingType.Property;
	              this._validatePropertyOrAttributeName(boundPropertyName, boundProp.sourceSpan, false);
	          }
	          else {
	              if (parts[0] == ATTRIBUTE_PREFIX) {
	                  boundPropertyName = parts[1];
	                  this._validatePropertyOrAttributeName(boundPropertyName, boundProp.sourceSpan, true);
	                  securityContexts = calcPossibleSecurityContexts(this._schemaRegistry, elementSelector, boundPropertyName, true);
	                  var nsSeparatorIdx = boundPropertyName.indexOf(':');
	                  if (nsSeparatorIdx > -1) {
	                      var ns = boundPropertyName.substring(0, nsSeparatorIdx);
	                      var name_1 = boundPropertyName.substring(nsSeparatorIdx + 1);
	                      boundPropertyName = mergeNsAndName(ns, name_1);
	                  }
	                  bindingType = exports.PropertyBindingType.Attribute;
	              }
	              else if (parts[0] == CLASS_PREFIX) {
	                  boundPropertyName = parts[1];
	                  bindingType = exports.PropertyBindingType.Class;
	                  securityContexts = [_angular_core.SecurityContext.NONE];
	              }
	              else if (parts[0] == STYLE_PREFIX) {
	                  unit = parts.length > 2 ? parts[2] : null;
	                  boundPropertyName = parts[1];
	                  bindingType = exports.PropertyBindingType.Style;
	                  securityContexts = [_angular_core.SecurityContext.STYLE];
	              }
	              else {
	                  this._reportError("Invalid property name '" + boundProp.name + "'", boundProp.sourceSpan);
	                  bindingType = null;
	                  securityContexts = [];
	              }
	          }
	          return new BoundElementPropertyAst(boundPropertyName, bindingType, securityContexts.length === 1 ? securityContexts[0] : null, securityContexts.length > 1, boundProp.expression, unit, boundProp.sourceSpan);
	      };
	      BindingParser.prototype.parseEvent = function (name, expression, sourceSpan, targetMatchableAttrs, targetEvents) {
	          if (_isAnimationLabel(name)) {
	              name = name.substr(1);
	              this._parseAnimationEvent(name, expression, sourceSpan, targetEvents);
	          }
	          else {
	              this._parseEvent(name, expression, sourceSpan, targetMatchableAttrs, targetEvents);
	          }
	      };
	      BindingParser.prototype._parseAnimationEvent = function (name, expression, sourceSpan, targetEvents) {
	          var matches = splitAtPeriod(name, [name, '']);
	          var eventName = matches[0];
	          var phase = matches[1].toLowerCase();
	          if (phase) {
	              switch (phase) {
	                  case 'start':
	                  case 'done':
	                      var ast = this._parseAction(expression, sourceSpan);
	                      targetEvents.push(new BoundEventAst(eventName, null, phase, ast, sourceSpan));
	                      break;
	                  default:
	                      this._reportError("The provided animation output phase value \"" + phase + "\" for \"@" + eventName + "\" is not supported (use start or done)", sourceSpan);
	                      break;
	              }
	          }
	          else {
	              this._reportError("The animation trigger output event (@" + eventName + ") is missing its phase value name (start or done are currently supported)", sourceSpan);
	          }
	      };
	      BindingParser.prototype._parseEvent = function (name, expression, sourceSpan, targetMatchableAttrs, targetEvents) {
	          // long format: 'target: eventName'
	          var _a = splitAtColon(name, [null, name]), target = _a[0], eventName = _a[1];
	          var ast = this._parseAction(expression, sourceSpan);
	          targetMatchableAttrs.push([name, ast.source]);
	          targetEvents.push(new BoundEventAst(eventName, target, null, ast, sourceSpan));
	          // Don't detect directives for event names for now,
	          // so don't add the event name to the matchableAttrs
	      };
	      BindingParser.prototype._parseAction = function (value, sourceSpan) {
	          var sourceInfo = sourceSpan.start.toString();
	          try {
	              var ast = this._exprParser.parseAction(value, sourceInfo, this._interpolationConfig);
	              if (ast) {
	                  this._reportExpressionParserErrors(ast.errors, sourceSpan);
	              }
	              if (!ast || ast.ast instanceof EmptyExpr) {
	                  this._reportError("Empty expressions are not allowed", sourceSpan);
	                  return this._exprParser.wrapLiteralPrimitive('ERROR', sourceInfo);
	              }
	              this._checkPipes(ast, sourceSpan);
	              return ast;
	          }
	          catch (e) {
	              this._reportError("" + e, sourceSpan);
	              return this._exprParser.wrapLiteralPrimitive('ERROR', sourceInfo);
	          }
	      };
	      BindingParser.prototype._reportError = function (message, sourceSpan, level) {
	          if (level === void 0) { level = exports.ParseErrorLevel.FATAL; }
	          this._targetErrors.push(new ParseError(sourceSpan, message, level));
	      };
	      BindingParser.prototype._reportExpressionParserErrors = function (errors, sourceSpan) {
	          for (var _i = 0, errors_1 = errors; _i < errors_1.length; _i++) {
	              var error = errors_1[_i];
	              this._reportError(error.message, sourceSpan);
	          }
	      };
	      BindingParser.prototype._checkPipes = function (ast, sourceSpan) {
	          var _this = this;
	          if (isPresent(ast)) {
	              var collector = new PipeCollector();
	              ast.visit(collector);
	              collector.pipes.forEach(function (pipeName) {
	                  if (!_this.pipesByName.has(pipeName)) {
	                      _this._reportError("The pipe '" + pipeName + "' could not be found", sourceSpan);
	                  }
	              });
	          }
	      };
	      /**
	       * @param propName the name of the property / attribute
	       * @param sourceSpan
	       * @param isAttr true when binding to an attribute
	       * @private
	       */
	      BindingParser.prototype._validatePropertyOrAttributeName = function (propName, sourceSpan, isAttr) {
	          var report = isAttr ? this._schemaRegistry.validateAttribute(propName) :
	              this._schemaRegistry.validateProperty(propName);
	          if (report.error) {
	              this._reportError(report.msg, sourceSpan, exports.ParseErrorLevel.FATAL);
	          }
	      };
	      return BindingParser;
	  }());
	  var PipeCollector = (function (_super) {
	      __extends$11(PipeCollector, _super);
	      function PipeCollector() {
	          _super.apply(this, arguments);
	          this.pipes = new Set();
	      }
	      PipeCollector.prototype.visitPipe = function (ast, context) {
	          this.pipes.add(ast.name);
	          ast.exp.visit(this);
	          this.visitAll(ast.args, context);
	          return null;
	      };
	      return PipeCollector;
	  }(RecursiveAstVisitor));
	  function _isAnimationLabel(name) {
	      return name[0] == '@';
	  }
	  function calcPossibleSecurityContexts(registry, selector, propName, isAttribute) {
	      var ctxs = [];
	      CssSelector.parse(selector).forEach(function (selector) {
	          var elementNames = selector.element ? [selector.element] : registry.allKnownElementNames();
	          var notElementNames = new Set(selector.notSelectors.filter(function (selector) { return selector.isElementSelector(); })
	              .map(function (selector) { return selector.element; }));
	          var possibleElementNames = elementNames.filter(function (elementName) { return !notElementNames.has(elementName); });
	          ctxs.push.apply(ctxs, possibleElementNames.map(function (elementName) { return registry.securityContext(elementName, propName, isAttribute); }));
	      });
	      return ctxs.length === 0 ? [_angular_core.SecurityContext.NONE] : Array.from(new Set(ctxs)).sort();
	  }

	  var NG_CONTENT_SELECT_ATTR = 'select';
	  var NG_CONTENT_ELEMENT = 'ng-content';
	  var LINK_ELEMENT = 'link';
	  var LINK_STYLE_REL_ATTR = 'rel';
	  var LINK_STYLE_HREF_ATTR = 'href';
	  var LINK_STYLE_REL_VALUE = 'stylesheet';
	  var STYLE_ELEMENT = 'style';
	  var SCRIPT_ELEMENT = 'script';
	  var NG_NON_BINDABLE_ATTR = 'ngNonBindable';
	  var NG_PROJECT_AS = 'ngProjectAs';
	  function preparseElement(ast) {
	      var selectAttr = null;
	      var hrefAttr = null;
	      var relAttr = null;
	      var nonBindable = false;
	      var projectAs = null;
	      ast.attrs.forEach(function (attr) {
	          var lcAttrName = attr.name.toLowerCase();
	          if (lcAttrName == NG_CONTENT_SELECT_ATTR) {
	              selectAttr = attr.value;
	          }
	          else if (lcAttrName == LINK_STYLE_HREF_ATTR) {
	              hrefAttr = attr.value;
	          }
	          else if (lcAttrName == LINK_STYLE_REL_ATTR) {
	              relAttr = attr.value;
	          }
	          else if (attr.name == NG_NON_BINDABLE_ATTR) {
	              nonBindable = true;
	          }
	          else if (attr.name == NG_PROJECT_AS) {
	              if (attr.value.length > 0) {
	                  projectAs = attr.value;
	              }
	          }
	      });
	      selectAttr = normalizeNgContentSelect(selectAttr);
	      var nodeName = ast.name.toLowerCase();
	      var type = PreparsedElementType.OTHER;
	      if (splitNsName(nodeName)[1] == NG_CONTENT_ELEMENT) {
	          type = PreparsedElementType.NG_CONTENT;
	      }
	      else if (nodeName == STYLE_ELEMENT) {
	          type = PreparsedElementType.STYLE;
	      }
	      else if (nodeName == SCRIPT_ELEMENT) {
	          type = PreparsedElementType.SCRIPT;
	      }
	      else if (nodeName == LINK_ELEMENT && relAttr == LINK_STYLE_REL_VALUE) {
	          type = PreparsedElementType.STYLESHEET;
	      }
	      return new PreparsedElement(type, selectAttr, hrefAttr, nonBindable, projectAs);
	  }
	  var PreparsedElementType;
	  (function (PreparsedElementType) {
	      PreparsedElementType[PreparsedElementType["NG_CONTENT"] = 0] = "NG_CONTENT";
	      PreparsedElementType[PreparsedElementType["STYLE"] = 1] = "STYLE";
	      PreparsedElementType[PreparsedElementType["STYLESHEET"] = 2] = "STYLESHEET";
	      PreparsedElementType[PreparsedElementType["SCRIPT"] = 3] = "SCRIPT";
	      PreparsedElementType[PreparsedElementType["OTHER"] = 4] = "OTHER";
	  })(PreparsedElementType || (PreparsedElementType = {}));
	  var PreparsedElement = (function () {
	      function PreparsedElement(type, selectAttr, hrefAttr, nonBindable, projectAs) {
	          this.type = type;
	          this.selectAttr = selectAttr;
	          this.hrefAttr = hrefAttr;
	          this.nonBindable = nonBindable;
	          this.projectAs = projectAs;
	      }
	      return PreparsedElement;
	  }());
	  function normalizeNgContentSelect(selectAttr) {
	      if (selectAttr === null || selectAttr.length === 0) {
	          return '*';
	      }
	      return selectAttr;
	  }

	  /**
	   * @license
	   * Copyright Google Inc. All Rights Reserved.
	   *
	   * Use of this source code is governed by an MIT-style license that can be
	   * found in the LICENSE file at https://angular.io/license
	   */
	  var __extends = (this && this.__extends) || function (d, b) {
	      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	      function __() { this.constructor = d; }
	      d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	  };
	  // Group 1 = "bind-"
	  // Group 2 = "let-"
	  // Group 3 = "ref-/#"
	  // Group 4 = "on-"
	  // Group 5 = "bindon-"
	  // Group 6 = "@"
	  // Group 7 = the identifier after "bind-", "let-", "ref-/#", "on-", "bindon-" or "@"
	  // Group 8 = identifier inside [()]
	  // Group 9 = identifier inside []
	  // Group 10 = identifier inside ()
	  var BIND_NAME_REGEXP = /^(?:(?:(?:(bind-)|(let-)|(ref-|#)|(on-)|(bindon-)|(@))(.+))|\[\(([^\)]+)\)\]|\[([^\]]+)\]|\(([^\)]+)\))$/;
	  var KW_BIND_IDX = 1;
	  var KW_LET_IDX = 2;
	  var KW_REF_IDX = 3;
	  var KW_ON_IDX = 4;
	  var KW_BINDON_IDX = 5;
	  var KW_AT_IDX = 6;
	  var IDENT_KW_IDX = 7;
	  var IDENT_BANANA_BOX_IDX = 8;
	  var IDENT_PROPERTY_IDX = 9;
	  var IDENT_EVENT_IDX = 10;
	  var TEMPLATE_ELEMENT = 'template';
	  var TEMPLATE_ATTR = 'template';
	  var TEMPLATE_ATTR_PREFIX = '*';
	  var CLASS_ATTR = 'class';
	  var TEXT_CSS_SELECTOR = CssSelector.parse('*')[0];
	  /**
	   * Provides an array of {@link TemplateAstVisitor}s which will be used to transform
	   * parsed templates before compilation is invoked, allowing custom expression syntax
	   * and other advanced transformations.
	   *
	   * This is currently an internal-only feature and not meant for general use.
	   */
	  var TEMPLATE_TRANSFORMS = new _angular_core.OpaqueToken('TemplateTransforms');
	  var TemplateParseError = (function (_super) {
	      __extends(TemplateParseError, _super);
	      function TemplateParseError(message, span, level) {
	          _super.call(this, span, message, level);
	      }
	      return TemplateParseError;
	  }(ParseError));
	  var TemplateParseResult = (function () {
	      function TemplateParseResult(templateAst, errors) {
	          this.templateAst = templateAst;
	          this.errors = errors;
	      }
	      return TemplateParseResult;
	  }());
	  var TemplateParser = (function () {
	      function TemplateParser(_exprParser, _schemaRegistry, _htmlParser, _console, transforms) {
	          this._exprParser = _exprParser;
	          this._schemaRegistry = _schemaRegistry;
	          this._htmlParser = _htmlParser;
	          this._console = _console;
	          this.transforms = transforms;
	      }
	      TemplateParser.prototype.parse = function (component, template, directives, pipes, schemas, templateUrl) {
	          var result = this.tryParse(component, template, directives, pipes, schemas, templateUrl);
	          var warnings = result.errors.filter(function (error) { return error.level === exports.ParseErrorLevel.WARNING; });
	          var errors = result.errors.filter(function (error) { return error.level === exports.ParseErrorLevel.FATAL; });
	          if (warnings.length > 0) {
	              this._console.warn("Template parse warnings:\n" + warnings.join('\n'));
	          }
	          if (errors.length > 0) {
	              var errorString = errors.join('\n');
	              throw new Error("Template parse errors:\n" + errorString);
	          }
	          return result.templateAst;
	      };
	      TemplateParser.prototype.tryParse = function (component, template, directives, pipes, schemas, templateUrl) {
	          return this.tryParseHtml(this.expandHtml(this._htmlParser.parse(template, templateUrl, true, this.getInterpolationConfig(component))), component, template, directives, pipes, schemas, templateUrl);
	      };
	      TemplateParser.prototype.tryParseHtml = function (htmlAstWithErrors, component, template, directives, pipes, schemas, templateUrl) {
	          var result;
	          var errors = htmlAstWithErrors.errors;
	          if (htmlAstWithErrors.rootNodes.length > 0) {
	              var uniqDirectives = removeSummaryDuplicates(directives);
	              var uniqPipes = removeSummaryDuplicates(pipes);
	              var providerViewContext = new ProviderViewContext(component, htmlAstWithErrors.rootNodes[0].sourceSpan);
	              var interpolationConfig = void 0;
	              if (component.template && component.template.interpolation) {
	                  interpolationConfig = {
	                      start: component.template.interpolation[0],
	                      end: component.template.interpolation[1]
	                  };
	              }
	              var bindingParser = new BindingParser(this._exprParser, interpolationConfig, this._schemaRegistry, uniqPipes, errors);
	              var parseVisitor = new TemplateParseVisitor(providerViewContext, uniqDirectives, bindingParser, this._schemaRegistry, schemas, errors);
	              result = visitAll(parseVisitor, htmlAstWithErrors.rootNodes, EMPTY_ELEMENT_CONTEXT);
	              errors.push.apply(errors, providerViewContext.errors);
	          }
	          else {
	              result = [];
	          }
	          this._assertNoReferenceDuplicationOnTemplate(result, errors);
	          if (errors.length > 0) {
	              return new TemplateParseResult(result, errors);
	          }
	          if (isPresent(this.transforms)) {
	              this.transforms.forEach(function (transform) { result = templateVisitAll(transform, result); });
	          }
	          return new TemplateParseResult(result, errors);
	      };
	      TemplateParser.prototype.expandHtml = function (htmlAstWithErrors, forced) {
	          if (forced === void 0) { forced = false; }
	          var errors = htmlAstWithErrors.errors;
	          if (errors.length == 0 || forced) {
	              // Transform ICU messages to angular directives
	              var expandedHtmlAst = expandNodes(htmlAstWithErrors.rootNodes);
	              errors.push.apply(errors, expandedHtmlAst.errors);
	              htmlAstWithErrors = new ParseTreeResult(expandedHtmlAst.nodes, errors);
	          }
	          return htmlAstWithErrors;
	      };
	      TemplateParser.prototype.getInterpolationConfig = function (component) {
	          if (component.template) {
	              return InterpolationConfig.fromArray(component.template.interpolation);
	          }
	      };
	      /** @internal */
	      TemplateParser.prototype._assertNoReferenceDuplicationOnTemplate = function (result, errors) {
	          var existingReferences = [];
	          result.filter(function (element) { return !!element.references; })
	              .forEach(function (element) { return element.references.forEach(function (reference) {
	              var name = reference.name;
	              if (existingReferences.indexOf(name) < 0) {
	                  existingReferences.push(name);
	              }
	              else {
	                  var error = new TemplateParseError("Reference \"#" + name + "\" is defined several times", reference.sourceSpan, exports.ParseErrorLevel.FATAL);
	                  errors.push(error);
	              }
	          }); });
	      };
	      TemplateParser.decorators = [
	          { type: _angular_core.Injectable },
	      ];
	      /** @nocollapse */
	      TemplateParser.ctorParameters = [
	          { type: Parser, },
	          { type: ElementSchemaRegistry, },
	          { type: I18NHtmlParser, },
	          { type: Console, },
	          { type: Array, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Inject, args: [TEMPLATE_TRANSFORMS,] },] },
	      ];
	      return TemplateParser;
	  }());
	  var TemplateParseVisitor = (function () {
	      function TemplateParseVisitor(providerViewContext, directives, _bindingParser, _schemaRegistry, _schemas, _targetErrors) {
	          var _this = this;
	          this.providerViewContext = providerViewContext;
	          this._bindingParser = _bindingParser;
	          this._schemaRegistry = _schemaRegistry;
	          this._schemas = _schemas;
	          this._targetErrors = _targetErrors;
	          this.selectorMatcher = new SelectorMatcher();
	          this.directivesIndex = new Map();
	          this.ngContentCount = 0;
	          directives.forEach(function (directive, index) {
	              var selector = CssSelector.parse(directive.selector);
	              _this.selectorMatcher.addSelectables(selector, directive);
	              _this.directivesIndex.set(directive, index);
	          });
	      }
	      TemplateParseVisitor.prototype.visitExpansion = function (expansion, context) { return null; };
	      TemplateParseVisitor.prototype.visitExpansionCase = function (expansionCase, context) { return null; };
	      TemplateParseVisitor.prototype.visitText = function (text, parent) {
	          var ngContentIndex = parent.findNgContentIndex(TEXT_CSS_SELECTOR);
	          var expr = this._bindingParser.parseInterpolation(text.value, text.sourceSpan);
	          if (isPresent(expr)) {
	              return new BoundTextAst(expr, ngContentIndex, text.sourceSpan);
	          }
	          else {
	              return new TextAst(text.value, ngContentIndex, text.sourceSpan);
	          }
	      };
	      TemplateParseVisitor.prototype.visitAttribute = function (attribute, context) {
	          return new AttrAst(attribute.name, attribute.value, attribute.sourceSpan);
	      };
	      TemplateParseVisitor.prototype.visitComment = function (comment, context) { return null; };
	      TemplateParseVisitor.prototype.visitElement = function (element, parent) {
	          var _this = this;
	          var nodeName = element.name;
	          var preparsedElement = preparseElement(element);
	          if (preparsedElement.type === PreparsedElementType.SCRIPT ||
	              preparsedElement.type === PreparsedElementType.STYLE) {
	              // Skipping <script> for security reasons
	              // Skipping <style> as we already processed them
	              // in the StyleCompiler
	              return null;
	          }
	          if (preparsedElement.type === PreparsedElementType.STYLESHEET &&
	              isStyleUrlResolvable(preparsedElement.hrefAttr)) {
	              // Skipping stylesheets with either relative urls or package scheme as we already processed
	              // them in the StyleCompiler
	              return null;
	          }
	          var matchableAttrs = [];
	          var elementOrDirectiveProps = [];
	          var elementOrDirectiveRefs = [];
	          var elementVars = [];
	          var events = [];
	          var templateElementOrDirectiveProps = [];
	          var templateMatchableAttrs = [];
	          var templateElementVars = [];
	          var hasInlineTemplates = false;
	          var attrs = [];
	          var lcElName = splitNsName(nodeName.toLowerCase())[1];
	          var isTemplateElement = lcElName == TEMPLATE_ELEMENT;
	          element.attrs.forEach(function (attr) {
	              var hasBinding = _this._parseAttr(isTemplateElement, attr, matchableAttrs, elementOrDirectiveProps, events, elementOrDirectiveRefs, elementVars);
	              var templateBindingsSource = undefined;
	              var prefixToken = undefined;
	              if (_this._normalizeAttributeName(attr.name) == TEMPLATE_ATTR) {
	                  templateBindingsSource = attr.value;
	              }
	              else if (attr.name.startsWith(TEMPLATE_ATTR_PREFIX)) {
	                  templateBindingsSource = attr.value;
	                  prefixToken = attr.name.substring(TEMPLATE_ATTR_PREFIX.length); // remove the star
	              }
	              var hasTemplateBinding = isPresent(templateBindingsSource);
	              if (hasTemplateBinding) {
	                  if (hasInlineTemplates) {
	                      _this._reportError("Can't have multiple template bindings on one element. Use only one attribute named 'template' or prefixed with *", attr.sourceSpan);
	                  }
	                  hasInlineTemplates = true;
	                  _this._bindingParser.parseInlineTemplateBinding(attr.name, prefixToken, templateBindingsSource, attr.sourceSpan, templateMatchableAttrs, templateElementOrDirectiveProps, templateElementVars);
	              }
	              if (!hasBinding && !hasTemplateBinding) {
	                  // don't include the bindings as attributes as well in the AST
	                  attrs.push(_this.visitAttribute(attr, null));
	                  matchableAttrs.push([attr.name, attr.value]);
	              }
	          });
	          var elementCssSelector = createElementCssSelector(nodeName, matchableAttrs);
	          var _a = this._parseDirectives(this.selectorMatcher, elementCssSelector), directiveMetas = _a.directives, matchElement = _a.matchElement;
	          var references = [];
	          var directiveAsts = this._createDirectiveAsts(isTemplateElement, element.name, directiveMetas, elementOrDirectiveProps, elementOrDirectiveRefs, element.sourceSpan, references);
	          var elementProps = this._createElementPropertyAsts(element.name, elementOrDirectiveProps, directiveAsts);
	          var isViewRoot = parent.isTemplateElement || hasInlineTemplates;
	          var providerContext = new ProviderElementContext(this.providerViewContext, parent.providerContext, isViewRoot, directiveAsts, attrs, references, element.sourceSpan);
	          var children = visitAll(preparsedElement.nonBindable ? NON_BINDABLE_VISITOR : this, element.children, ElementContext.create(isTemplateElement, directiveAsts, isTemplateElement ? parent.providerContext : providerContext));
	          providerContext.afterElement();
	          // Override the actual selector when the `ngProjectAs` attribute is provided
	          var projectionSelector = isPresent(preparsedElement.projectAs) ?
	              CssSelector.parse(preparsedElement.projectAs)[0] :
	              elementCssSelector;
	          var ngContentIndex = parent.findNgContentIndex(projectionSelector);
	          var parsedElement;
	          if (preparsedElement.type === PreparsedElementType.NG_CONTENT) {
	              if (element.children && !element.children.every(_isEmptyTextNode)) {
	                  this._reportError("<ng-content> element cannot have content.", element.sourceSpan);
	              }
	              parsedElement = new NgContentAst(this.ngContentCount++, hasInlineTemplates ? null : ngContentIndex, element.sourceSpan);
	          }
	          else if (isTemplateElement) {
	              this._assertAllEventsPublishedByDirectives(directiveAsts, events);
	              this._assertNoComponentsNorElementBindingsOnTemplate(directiveAsts, elementProps, element.sourceSpan);
	              parsedElement = new EmbeddedTemplateAst(attrs, events, references, elementVars, providerContext.transformedDirectiveAsts, providerContext.transformProviders, providerContext.transformedHasViewContainer, children, hasInlineTemplates ? null : ngContentIndex, element.sourceSpan);
	          }
	          else {
	              this._assertElementExists(matchElement, element);
	              this._assertOnlyOneComponent(directiveAsts, element.sourceSpan);
	              var ngContentIndex_1 = hasInlineTemplates ? null : parent.findNgContentIndex(projectionSelector);
	              parsedElement = new ElementAst(nodeName, attrs, elementProps, events, references, providerContext.transformedDirectiveAsts, providerContext.transformProviders, providerContext.transformedHasViewContainer, children, hasInlineTemplates ? null : ngContentIndex_1, element.sourceSpan, element.endSourceSpan);
	              this._findComponentDirectives(directiveAsts)
	                  .forEach(function (componentDirectiveAst) { return _this._validateElementAnimationInputOutputs(componentDirectiveAst.hostProperties, componentDirectiveAst.hostEvents, componentDirectiveAst.directive.template); });
	              var componentTemplate = providerContext.viewContext.component.template;
	              this._validateElementAnimationInputOutputs(elementProps, events, componentTemplate.toSummary());
	          }
	          if (hasInlineTemplates) {
	              var templateCssSelector = createElementCssSelector(TEMPLATE_ELEMENT, templateMatchableAttrs);
	              var templateDirectiveMetas = this._parseDirectives(this.selectorMatcher, templateCssSelector).directives;
	              var templateDirectiveAsts = this._createDirectiveAsts(true, element.name, templateDirectiveMetas, templateElementOrDirectiveProps, [], element.sourceSpan, []);
	              var templateElementProps = this._createElementPropertyAsts(element.name, templateElementOrDirectiveProps, templateDirectiveAsts);
	              this._assertNoComponentsNorElementBindingsOnTemplate(templateDirectiveAsts, templateElementProps, element.sourceSpan);
	              var templateProviderContext = new ProviderElementContext(this.providerViewContext, parent.providerContext, parent.isTemplateElement, templateDirectiveAsts, [], [], element.sourceSpan);
	              templateProviderContext.afterElement();
	              parsedElement = new EmbeddedTemplateAst([], [], [], templateElementVars, templateProviderContext.transformedDirectiveAsts, templateProviderContext.transformProviders, templateProviderContext.transformedHasViewContainer, [parsedElement], ngContentIndex, element.sourceSpan);
	          }
	          return parsedElement;
	      };
	      TemplateParseVisitor.prototype._validateElementAnimationInputOutputs = function (inputs, outputs, template) {
	          var _this = this;
	          var triggerLookup = new Set();
	          template.animations.forEach(function (entry) { triggerLookup.add(entry); });
	          var animationInputs = inputs.filter(function (input) { return input.isAnimation; });
	          animationInputs.forEach(function (input) {
	              var name = input.name;
	              if (!triggerLookup.has(name)) {
	                  _this._reportError("Couldn't find an animation entry for \"" + name + "\"", input.sourceSpan);
	              }
	          });
	          outputs.forEach(function (output) {
	              if (output.isAnimation) {
	                  var found = animationInputs.find(function (input) { return input.name == output.name; });
	                  if (!found) {
	                      _this._reportError("Unable to listen on (@" + output.name + "." + output.phase + ") because the animation trigger [@" + output.name + "] isn't being used on the same element", output.sourceSpan);
	                  }
	              }
	          });
	      };
	      TemplateParseVisitor.prototype._parseAttr = function (isTemplateElement, attr, targetMatchableAttrs, targetProps, targetEvents, targetRefs, targetVars) {
	          var name = this._normalizeAttributeName(attr.name);
	          var value = attr.value;
	          var srcSpan = attr.sourceSpan;
	          var bindParts = name.match(BIND_NAME_REGEXP);
	          var hasBinding = false;
	          if (bindParts !== null) {
	              hasBinding = true;
	              if (isPresent(bindParts[KW_BIND_IDX])) {
	                  this._bindingParser.parsePropertyBinding(bindParts[IDENT_KW_IDX], value, false, srcSpan, targetMatchableAttrs, targetProps);
	              }
	              else if (bindParts[KW_LET_IDX]) {
	                  if (isTemplateElement) {
	                      var identifier = bindParts[IDENT_KW_IDX];
	                      this._parseVariable(identifier, value, srcSpan, targetVars);
	                  }
	                  else {
	                      this._reportError("\"let-\" is only supported on template elements.", srcSpan);
	                  }
	              }
	              else if (bindParts[KW_REF_IDX]) {
	                  var identifier = bindParts[IDENT_KW_IDX];
	                  this._parseReference(identifier, value, srcSpan, targetRefs);
	              }
	              else if (bindParts[KW_ON_IDX]) {
	                  this._bindingParser.parseEvent(bindParts[IDENT_KW_IDX], value, srcSpan, targetMatchableAttrs, targetEvents);
	              }
	              else if (bindParts[KW_BINDON_IDX]) {
	                  this._bindingParser.parsePropertyBinding(bindParts[IDENT_KW_IDX], value, false, srcSpan, targetMatchableAttrs, targetProps);
	                  this._parseAssignmentEvent(bindParts[IDENT_KW_IDX], value, srcSpan, targetMatchableAttrs, targetEvents);
	              }
	              else if (bindParts[KW_AT_IDX]) {
	                  this._bindingParser.parseLiteralAttr(name, value, srcSpan, targetMatchableAttrs, targetProps);
	              }
	              else if (bindParts[IDENT_BANANA_BOX_IDX]) {
	                  this._bindingParser.parsePropertyBinding(bindParts[IDENT_BANANA_BOX_IDX], value, false, srcSpan, targetMatchableAttrs, targetProps);
	                  this._parseAssignmentEvent(bindParts[IDENT_BANANA_BOX_IDX], value, srcSpan, targetMatchableAttrs, targetEvents);
	              }
	              else if (bindParts[IDENT_PROPERTY_IDX]) {
	                  this._bindingParser.parsePropertyBinding(bindParts[IDENT_PROPERTY_IDX], value, false, srcSpan, targetMatchableAttrs, targetProps);
	              }
	              else if (bindParts[IDENT_EVENT_IDX]) {
	                  this._bindingParser.parseEvent(bindParts[IDENT_EVENT_IDX], value, srcSpan, targetMatchableAttrs, targetEvents);
	              }
	          }
	          else {
	              hasBinding = this._bindingParser.parsePropertyInterpolation(name, value, srcSpan, targetMatchableAttrs, targetProps);
	          }
	          if (!hasBinding) {
	              this._bindingParser.parseLiteralAttr(name, value, srcSpan, targetMatchableAttrs, targetProps);
	          }
	          return hasBinding;
	      };
	      TemplateParseVisitor.prototype._normalizeAttributeName = function (attrName) {
	          return /^data-/i.test(attrName) ? attrName.substring(5) : attrName;
	      };
	      TemplateParseVisitor.prototype._parseVariable = function (identifier, value, sourceSpan, targetVars) {
	          if (identifier.indexOf('-') > -1) {
	              this._reportError("\"-\" is not allowed in variable names", sourceSpan);
	          }
	          targetVars.push(new VariableAst(identifier, value, sourceSpan));
	      };
	      TemplateParseVisitor.prototype._parseReference = function (identifier, value, sourceSpan, targetRefs) {
	          if (identifier.indexOf('-') > -1) {
	              this._reportError("\"-\" is not allowed in reference names", sourceSpan);
	          }
	          targetRefs.push(new ElementOrDirectiveRef(identifier, value, sourceSpan));
	      };
	      TemplateParseVisitor.prototype._parseAssignmentEvent = function (name, expression, sourceSpan, targetMatchableAttrs, targetEvents) {
	          this._bindingParser.parseEvent(name + "Change", expression + "=$event", sourceSpan, targetMatchableAttrs, targetEvents);
	      };
	      TemplateParseVisitor.prototype._parseDirectives = function (selectorMatcher, elementCssSelector) {
	          var _this = this;
	          // Need to sort the directives so that we get consistent results throughout,
	          // as selectorMatcher uses Maps inside.
	          // Also deduplicate directives as they might match more than one time!
	          var directives = new Array(this.directivesIndex.size);
	          // Whether any directive selector matches on the element name
	          var matchElement = false;
	          selectorMatcher.match(elementCssSelector, function (selector, directive) {
	              directives[_this.directivesIndex.get(directive)] = directive;
	              matchElement = matchElement || selector.hasElementSelector();
	          });
	          return {
	              directives: directives.filter(function (dir) { return !!dir; }),
	              matchElement: matchElement,
	          };
	      };
	      TemplateParseVisitor.prototype._createDirectiveAsts = function (isTemplateElement, elementName, directives, props, elementOrDirectiveRefs, elementSourceSpan, targetReferences) {
	          var _this = this;
	          var matchedReferences = new Set();
	          var component = null;
	          var directiveAsts = directives.map(function (directive) {
	              var sourceSpan = new ParseSourceSpan(elementSourceSpan.start, elementSourceSpan.end, "Directive " + directive.type.name);
	              if (directive.isComponent) {
	                  component = directive;
	              }
	              var directiveProperties = [];
	              var hostProperties = _this._bindingParser.createDirectiveHostPropertyAsts(directive, sourceSpan);
	              // Note: We need to check the host properties here as well,
	              // as we don't know the element name in the DirectiveWrapperCompiler yet.
	              _this._checkPropertiesInSchema(elementName, hostProperties);
	              var hostEvents = _this._bindingParser.createDirectiveHostEventAsts(directive, sourceSpan);
	              _this._createDirectivePropertyAsts(directive.inputs, props, directiveProperties);
	              elementOrDirectiveRefs.forEach(function (elOrDirRef) {
	                  if ((elOrDirRef.value.length === 0 && directive.isComponent) ||
	                      (directive.exportAs == elOrDirRef.value)) {
	                      targetReferences.push(new ReferenceAst(elOrDirRef.name, identifierToken(directive.type), elOrDirRef.sourceSpan));
	                      matchedReferences.add(elOrDirRef.name);
	                  }
	              });
	              return new DirectiveAst(directive, directiveProperties, hostProperties, hostEvents, sourceSpan);
	          });
	          elementOrDirectiveRefs.forEach(function (elOrDirRef) {
	              if (elOrDirRef.value.length > 0) {
	                  if (!matchedReferences.has(elOrDirRef.name)) {
	                      _this._reportError("There is no directive with \"exportAs\" set to \"" + elOrDirRef.value + "\"", elOrDirRef.sourceSpan);
	                  }
	              }
	              else if (!component) {
	                  var refToken = null;
	                  if (isTemplateElement) {
	                      refToken = resolveIdentifierToken(Identifiers.TemplateRef);
	                  }
	                  targetReferences.push(new ReferenceAst(elOrDirRef.name, refToken, elOrDirRef.sourceSpan));
	              }
	          }); // fix syntax highlighting issue: `
	          return directiveAsts;
	      };
	      TemplateParseVisitor.prototype._createDirectivePropertyAsts = function (directiveProperties, boundProps, targetBoundDirectiveProps) {
	          if (directiveProperties) {
	              var boundPropsByName_1 = new Map();
	              boundProps.forEach(function (boundProp) {
	                  var prevValue = boundPropsByName_1.get(boundProp.name);
	                  if (!prevValue || prevValue.isLiteral) {
	                      // give [a]="b" a higher precedence than a="b" on the same element
	                      boundPropsByName_1.set(boundProp.name, boundProp);
	                  }
	              });
	              Object.keys(directiveProperties).forEach(function (dirProp) {
	                  var elProp = directiveProperties[dirProp];
	                  var boundProp = boundPropsByName_1.get(elProp);
	                  // Bindings are optional, so this binding only needs to be set up if an expression is given.
	                  if (boundProp) {
	                      targetBoundDirectiveProps.push(new BoundDirectivePropertyAst(dirProp, boundProp.name, boundProp.expression, boundProp.sourceSpan));
	                  }
	              });
	          }
	      };
	      TemplateParseVisitor.prototype._createElementPropertyAsts = function (elementName, props, directives) {
	          var _this = this;
	          var boundElementProps = [];
	          var boundDirectivePropsIndex = new Map();
	          directives.forEach(function (directive) {
	              directive.inputs.forEach(function (prop) {
	                  boundDirectivePropsIndex.set(prop.templateName, prop);
	              });
	          });
	          props.forEach(function (prop) {
	              if (!prop.isLiteral && !boundDirectivePropsIndex.get(prop.name)) {
	                  boundElementProps.push(_this._bindingParser.createElementPropertyAst(elementName, prop));
	              }
	          });
	          this._checkPropertiesInSchema(elementName, boundElementProps);
	          return boundElementProps;
	      };
	      TemplateParseVisitor.prototype._findComponentDirectives = function (directives) {
	          return directives.filter(function (directive) { return directive.directive.isComponent; });
	      };
	      TemplateParseVisitor.prototype._findComponentDirectiveNames = function (directives) {
	          return this._findComponentDirectives(directives)
	              .map(function (directive) { return directive.directive.type.name; });
	      };
	      TemplateParseVisitor.prototype._assertOnlyOneComponent = function (directives, sourceSpan) {
	          var componentTypeNames = this._findComponentDirectiveNames(directives);
	          if (componentTypeNames.length > 1) {
	              this._reportError("More than one component matched on this element.\n" +
	                  "Make sure that only one component's selector can match a given element.\n" +
	                  ("Conflicting components: " + componentTypeNames.join(',')), sourceSpan);
	          }
	      };
	      /**
	       * Make sure that non-angular tags conform to the schemas.
	       *
	       * Note: An element is considered an angular tag when at least one directive selector matches the
	       * tag name.
	       *
	       * @param matchElement Whether any directive has matched on the tag name
	       * @param element the html element
	       */
	      TemplateParseVisitor.prototype._assertElementExists = function (matchElement, element) {
	          var elName = element.name.replace(/^:xhtml:/, '');
	          if (!matchElement && !this._schemaRegistry.hasElement(elName, this._schemas)) {
	              var errorMsg = ("'" + elName + "' is not a known element:\n") +
	                  ("1. If '" + elName + "' is an Angular component, then verify that it is part of this module.\n") +
	                  ("2. If '" + elName + "' is a Web Component then add \"CUSTOM_ELEMENTS_SCHEMA\" to the '@NgModule.schemas' of this component to suppress this message.");
	              this._reportError(errorMsg, element.sourceSpan);
	          }
	      };
	      TemplateParseVisitor.prototype._assertNoComponentsNorElementBindingsOnTemplate = function (directives, elementProps, sourceSpan) {
	          var _this = this;
	          var componentTypeNames = this._findComponentDirectiveNames(directives);
	          if (componentTypeNames.length > 0) {
	              this._reportError("Components on an embedded template: " + componentTypeNames.join(','), sourceSpan);
	          }
	          elementProps.forEach(function (prop) {
	              _this._reportError("Property binding " + prop.name + " not used by any directive on an embedded template. Make sure that the property name is spelled correctly and all directives are listed in the \"directives\" section.", sourceSpan);
	          });
	      };
	      TemplateParseVisitor.prototype._assertAllEventsPublishedByDirectives = function (directives, events) {
	          var _this = this;
	          var allDirectiveEvents = new Set();
	          directives.forEach(function (directive) {
	              Object.keys(directive.directive.outputs).forEach(function (k) {
	                  var eventName = directive.directive.outputs[k];
	                  allDirectiveEvents.add(eventName);
	              });
	          });
	          events.forEach(function (event) {
	              if (isPresent(event.target) || !allDirectiveEvents.has(event.name)) {
	                  _this._reportError("Event binding " + event.fullName + " not emitted by any directive on an embedded template. Make sure that the event name is spelled correctly and all directives are listed in the \"directives\" section.", event.sourceSpan);
	              }
	          });
	      };
	      TemplateParseVisitor.prototype._checkPropertiesInSchema = function (elementName, boundProps) {
	          var _this = this;
	          boundProps.forEach(function (boundProp) {
	              if (boundProp.type === exports.PropertyBindingType.Property &&
	                  !_this._schemaRegistry.hasProperty(elementName, boundProp.name, _this._schemas)) {
	                  var errorMsg = "Can't bind to '" + boundProp.name + "' since it isn't a known property of '" + elementName + "'.";
	                  if (elementName.indexOf('-') > -1) {
	                      errorMsg +=
	                          ("\n1. If '" + elementName + "' is an Angular component and it has '" + boundProp.name + "' input, then verify that it is part of this module.") +
	                              ("\n2. If '" + elementName + "' is a Web Component then add \"CUSTOM_ELEMENTS_SCHEMA\" to the '@NgModule.schemas' of this component to suppress this message.\n");
	                  }
	                  _this._reportError(errorMsg, boundProp.sourceSpan);
	              }
	          });
	      };
	      TemplateParseVisitor.prototype._reportError = function (message, sourceSpan, level) {
	          if (level === void 0) { level = exports.ParseErrorLevel.FATAL; }
	          this._targetErrors.push(new ParseError(sourceSpan, message, level));
	      };
	      return TemplateParseVisitor;
	  }());
	  var NonBindableVisitor = (function () {
	      function NonBindableVisitor() {
	      }
	      NonBindableVisitor.prototype.visitElement = function (ast, parent) {
	          var preparsedElement = preparseElement(ast);
	          if (preparsedElement.type === PreparsedElementType.SCRIPT ||
	              preparsedElement.type === PreparsedElementType.STYLE ||
	              preparsedElement.type === PreparsedElementType.STYLESHEET) {
	              // Skipping <script> for security reasons
	              // Skipping <style> and stylesheets as we already processed them
	              // in the StyleCompiler
	              return null;
	          }
	          var attrNameAndValues = ast.attrs.map(function (attrAst) { return [attrAst.name, attrAst.value]; });
	          var selector = createElementCssSelector(ast.name, attrNameAndValues);
	          var ngContentIndex = parent.findNgContentIndex(selector);
	          var children = visitAll(this, ast.children, EMPTY_ELEMENT_CONTEXT);
	          return new ElementAst(ast.name, visitAll(this, ast.attrs), [], [], [], [], [], false, children, ngContentIndex, ast.sourceSpan, ast.endSourceSpan);
	      };
	      NonBindableVisitor.prototype.visitComment = function (comment, context) { return null; };
	      NonBindableVisitor.prototype.visitAttribute = function (attribute, context) {
	          return new AttrAst(attribute.name, attribute.value, attribute.sourceSpan);
	      };
	      NonBindableVisitor.prototype.visitText = function (text, parent) {
	          var ngContentIndex = parent.findNgContentIndex(TEXT_CSS_SELECTOR);
	          return new TextAst(text.value, ngContentIndex, text.sourceSpan);
	      };
	      NonBindableVisitor.prototype.visitExpansion = function (expansion, context) { return expansion; };
	      NonBindableVisitor.prototype.visitExpansionCase = function (expansionCase, context) { return expansionCase; };
	      return NonBindableVisitor;
	  }());
	  var ElementOrDirectiveRef = (function () {
	      function ElementOrDirectiveRef(name, value, sourceSpan) {
	          this.name = name;
	          this.value = value;
	          this.sourceSpan = sourceSpan;
	      }
	      return ElementOrDirectiveRef;
	  }());
	  function splitClasses(classAttrValue) {
	      return classAttrValue.trim().split(/\s+/g);
	  }
	  var ElementContext = (function () {
	      function ElementContext(isTemplateElement, _ngContentIndexMatcher, _wildcardNgContentIndex, providerContext) {
	          this.isTemplateElement = isTemplateElement;
	          this._ngContentIndexMatcher = _ngContentIndexMatcher;
	          this._wildcardNgContentIndex = _wildcardNgContentIndex;
	          this.providerContext = providerContext;
	      }
	      ElementContext.create = function (isTemplateElement, directives, providerContext) {
	          var matcher = new SelectorMatcher();
	          var wildcardNgContentIndex = null;
	          var component = directives.find(function (directive) { return directive.directive.isComponent; });
	          if (component) {
	              var ngContentSelectors = component.directive.template.ngContentSelectors;
	              for (var i = 0; i < ngContentSelectors.length; i++) {
	                  var selector = ngContentSelectors[i];
	                  if (selector === '*') {
	                      wildcardNgContentIndex = i;
	                  }
	                  else {
	                      matcher.addSelectables(CssSelector.parse(ngContentSelectors[i]), i);
	                  }
	              }
	          }
	          return new ElementContext(isTemplateElement, matcher, wildcardNgContentIndex, providerContext);
	      };
	      ElementContext.prototype.findNgContentIndex = function (selector) {
	          var ngContentIndices = [];
	          this._ngContentIndexMatcher.match(selector, function (selector, ngContentIndex) { ngContentIndices.push(ngContentIndex); });
	          ngContentIndices.sort();
	          if (isPresent(this._wildcardNgContentIndex)) {
	              ngContentIndices.push(this._wildcardNgContentIndex);
	          }
	          return ngContentIndices.length > 0 ? ngContentIndices[0] : null;
	      };
	      return ElementContext;
	  }());
	  function createElementCssSelector(elementName, matchableAttrs) {
	      var cssSelector = new CssSelector();
	      var elNameNoNs = splitNsName(elementName)[1];
	      cssSelector.setElement(elNameNoNs);
	      for (var i = 0; i < matchableAttrs.length; i++) {
	          var attrName = matchableAttrs[i][0];
	          var attrNameNoNs = splitNsName(attrName)[1];
	          var attrValue = matchableAttrs[i][1];
	          cssSelector.addAttribute(attrNameNoNs, attrValue);
	          if (attrName.toLowerCase() == CLASS_ATTR) {
	              var classes = splitClasses(attrValue);
	              classes.forEach(function (className) { return cssSelector.addClassName(className); });
	          }
	      }
	      return cssSelector;
	  }
	  var EMPTY_ELEMENT_CONTEXT = new ElementContext(true, new SelectorMatcher(), null, null);
	  var NON_BINDABLE_VISITOR = new NonBindableVisitor();
	  function _isEmptyTextNode(node) {
	      return node instanceof Text && node.value.trim().length == 0;
	  }
	  function removeSummaryDuplicates(items) {
	      var map = new Map();
	      items.forEach(function (item) {
	          if (!map.get(item.type.reference)) {
	              map.set(item.type.reference, item);
	          }
	      });
	      return Array.from(map.values());
	  }

	  function unimplemented$1() {
	      throw new Error('unimplemented');
	  }
	  var CompilerConfig = (function () {
	      function CompilerConfig(_a) {
	          var _b = _a === void 0 ? {} : _a, _c = _b.renderTypes, renderTypes = _c === void 0 ? new DefaultRenderTypes() : _c, _d = _b.defaultEncapsulation, defaultEncapsulation = _d === void 0 ? _angular_core.ViewEncapsulation.Emulated : _d, genDebugInfo = _b.genDebugInfo, logBindingUpdate = _b.logBindingUpdate, _e = _b.useJit, useJit = _e === void 0 ? true : _e;
	          this.renderTypes = renderTypes;
	          this.defaultEncapsulation = defaultEncapsulation;
	          this._genDebugInfo = genDebugInfo;
	          this._logBindingUpdate = logBindingUpdate;
	          this.useJit = useJit;
	      }
	      Object.defineProperty(CompilerConfig.prototype, "genDebugInfo", {
	          get: function () {
	              return this._genDebugInfo === void 0 ? _angular_core.isDevMode() : this._genDebugInfo;
	          },
	          enumerable: true,
	          configurable: true
	      });
	      Object.defineProperty(CompilerConfig.prototype, "logBindingUpdate", {
	          get: function () {
	              return this._logBindingUpdate === void 0 ? _angular_core.isDevMode() : this._logBindingUpdate;
	          },
	          enumerable: true,
	          configurable: true
	      });
	      return CompilerConfig;
	  }());
	  /**
	   * Types used for the renderer.
	   * Can be replaced to specialize the generated output to a specific renderer
	   * to help tree shaking.
	   */
	  var RenderTypes = (function () {
	      function RenderTypes() {
	      }
	      Object.defineProperty(RenderTypes.prototype, "renderer", {
	          get: function () { return unimplemented$1(); },
	          enumerable: true,
	          configurable: true
	      });
	      Object.defineProperty(RenderTypes.prototype, "renderText", {
	          get: function () { return unimplemented$1(); },
	          enumerable: true,
	          configurable: true
	      });
	      Object.defineProperty(RenderTypes.prototype, "renderElement", {
	          get: function () { return unimplemented$1(); },
	          enumerable: true,
	          configurable: true
	      });
	      Object.defineProperty(RenderTypes.prototype, "renderComment", {
	          get: function () { return unimplemented$1(); },
	          enumerable: true,
	          configurable: true
	      });
	      Object.defineProperty(RenderTypes.prototype, "renderNode", {
	          get: function () { return unimplemented$1(); },
	          enumerable: true,
	          configurable: true
	      });
	      Object.defineProperty(RenderTypes.prototype, "renderEvent", {
	          get: function () { return unimplemented$1(); },
	          enumerable: true,
	          configurable: true
	      });
	      return RenderTypes;
	  }());
	  var DefaultRenderTypes = (function () {
	      function DefaultRenderTypes() {
	          this.renderText = null;
	          this.renderElement = null;
	          this.renderComment = null;
	          this.renderNode = null;
	          this.renderEvent = null;
	      }
	      Object.defineProperty(DefaultRenderTypes.prototype, "renderer", {
	          get: function () { return resolveIdentifier(Identifiers.Renderer); },
	          enumerable: true,
	          configurable: true
	      });
	      ;
	      return DefaultRenderTypes;
	  }());

	  /**
	   * @license
	   * Copyright Google Inc. All Rights Reserved.
	   *
	   * Use of this source code is governed by an MIT-style license that can be
	   * found in the LICENSE file at https://angular.io/license
	   */
	  var __extends$12 = (this && this.__extends) || function (d, b) {
	      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	      function __() { this.constructor = d; }
	      d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	  };
	  //// Types
	  var TypeModifier;
	  (function (TypeModifier) {
	      TypeModifier[TypeModifier["Const"] = 0] = "Const";
	  })(TypeModifier || (TypeModifier = {}));
	  var Type$1 = (function () {
	      function Type(modifiers) {
	          if (modifiers === void 0) { modifiers = null; }
	          this.modifiers = modifiers;
	          if (!modifiers) {
	              this.modifiers = [];
	          }
	      }
	      Type.prototype.hasModifier = function (modifier) { return this.modifiers.indexOf(modifier) !== -1; };
	      return Type;
	  }());
	  var BuiltinTypeName;
	  (function (BuiltinTypeName) {
	      BuiltinTypeName[BuiltinTypeName["Dynamic"] = 0] = "Dynamic";
	      BuiltinTypeName[BuiltinTypeName["Bool"] = 1] = "Bool";
	      BuiltinTypeName[BuiltinTypeName["String"] = 2] = "String";
	      BuiltinTypeName[BuiltinTypeName["Int"] = 3] = "Int";
	      BuiltinTypeName[BuiltinTypeName["Number"] = 4] = "Number";
	      BuiltinTypeName[BuiltinTypeName["Function"] = 5] = "Function";
	      BuiltinTypeName[BuiltinTypeName["Null"] = 6] = "Null";
	  })(BuiltinTypeName || (BuiltinTypeName = {}));
	  var BuiltinType = (function (_super) {
	      __extends$12(BuiltinType, _super);
	      function BuiltinType(name, modifiers) {
	          if (modifiers === void 0) { modifiers = null; }
	          _super.call(this, modifiers);
	          this.name = name;
	      }
	      BuiltinType.prototype.visitType = function (visitor, context) {
	          return visitor.visitBuiltintType(this, context);
	      };
	      return BuiltinType;
	  }(Type$1));
	  var ExternalType = (function (_super) {
	      __extends$12(ExternalType, _super);
	      function ExternalType(value, typeParams, modifiers) {
	          if (typeParams === void 0) { typeParams = null; }
	          if (modifiers === void 0) { modifiers = null; }
	          _super.call(this, modifiers);
	          this.value = value;
	          this.typeParams = typeParams;
	      }
	      ExternalType.prototype.visitType = function (visitor, context) {
	          return visitor.visitExternalType(this, context);
	      };
	      return ExternalType;
	  }(Type$1));
	  var ArrayType = (function (_super) {
	      __extends$12(ArrayType, _super);
	      function ArrayType(of, modifiers) {
	          if (modifiers === void 0) { modifiers = null; }
	          _super.call(this, modifiers);
	          this.of = of;
	      }
	      ArrayType.prototype.visitType = function (visitor, context) {
	          return visitor.visitArrayType(this, context);
	      };
	      return ArrayType;
	  }(Type$1));
	  var MapType = (function (_super) {
	      __extends$12(MapType, _super);
	      function MapType(valueType, modifiers) {
	          if (modifiers === void 0) { modifiers = null; }
	          _super.call(this, modifiers);
	          this.valueType = valueType;
	      }
	      MapType.prototype.visitType = function (visitor, context) { return visitor.visitMapType(this, context); };
	      return MapType;
	  }(Type$1));
	  var DYNAMIC_TYPE = new BuiltinType(BuiltinTypeName.Dynamic);
	  var BOOL_TYPE = new BuiltinType(BuiltinTypeName.Bool);
	  var INT_TYPE = new BuiltinType(BuiltinTypeName.Int);
	  var NUMBER_TYPE = new BuiltinType(BuiltinTypeName.Number);
	  var STRING_TYPE = new BuiltinType(BuiltinTypeName.String);
	  var FUNCTION_TYPE = new BuiltinType(BuiltinTypeName.Function);
	  var NULL_TYPE = new BuiltinType(BuiltinTypeName.Null);
	  ///// Expressions
	  var BinaryOperator;
	  (function (BinaryOperator) {
	      BinaryOperator[BinaryOperator["Equals"] = 0] = "Equals";
	      BinaryOperator[BinaryOperator["NotEquals"] = 1] = "NotEquals";
	      BinaryOperator[BinaryOperator["Identical"] = 2] = "Identical";
	      BinaryOperator[BinaryOperator["NotIdentical"] = 3] = "NotIdentical";
	      BinaryOperator[BinaryOperator["Minus"] = 4] = "Minus";
	      BinaryOperator[BinaryOperator["Plus"] = 5] = "Plus";
	      BinaryOperator[BinaryOperator["Divide"] = 6] = "Divide";
	      BinaryOperator[BinaryOperator["Multiply"] = 7] = "Multiply";
	      BinaryOperator[BinaryOperator["Modulo"] = 8] = "Modulo";
	      BinaryOperator[BinaryOperator["And"] = 9] = "And";
	      BinaryOperator[BinaryOperator["Or"] = 10] = "Or";
	      BinaryOperator[BinaryOperator["Lower"] = 11] = "Lower";
	      BinaryOperator[BinaryOperator["LowerEquals"] = 12] = "LowerEquals";
	      BinaryOperator[BinaryOperator["Bigger"] = 13] = "Bigger";
	      BinaryOperator[BinaryOperator["BiggerEquals"] = 14] = "BiggerEquals";
	  })(BinaryOperator || (BinaryOperator = {}));
	  var Expression = (function () {
	      function Expression(type) {
	          this.type = type;
	      }
	      Expression.prototype.prop = function (name) { return new ReadPropExpr(this, name); };
	      Expression.prototype.key = function (index, type) {
	          if (type === void 0) { type = null; }
	          return new ReadKeyExpr(this, index, type);
	      };
	      Expression.prototype.callMethod = function (name, params) {
	          return new InvokeMethodExpr(this, name, params);
	      };
	      Expression.prototype.callFn = function (params) { return new InvokeFunctionExpr(this, params); };
	      Expression.prototype.instantiate = function (params, type) {
	          if (type === void 0) { type = null; }
	          return new InstantiateExpr(this, params, type);
	      };
	      Expression.prototype.conditional = function (trueCase, falseCase) {
	          if (falseCase === void 0) { falseCase = null; }
	          return new ConditionalExpr(this, trueCase, falseCase);
	      };
	      Expression.prototype.equals = function (rhs) {
	          return new BinaryOperatorExpr(BinaryOperator.Equals, this, rhs);
	      };
	      Expression.prototype.notEquals = function (rhs) {
	          return new BinaryOperatorExpr(BinaryOperator.NotEquals, this, rhs);
	      };
	      Expression.prototype.identical = function (rhs) {
	          return new BinaryOperatorExpr(BinaryOperator.Identical, this, rhs);
	      };
	      Expression.prototype.notIdentical = function (rhs) {
	          return new BinaryOperatorExpr(BinaryOperator.NotIdentical, this, rhs);
	      };
	      Expression.prototype.minus = function (rhs) {
	          return new BinaryOperatorExpr(BinaryOperator.Minus, this, rhs);
	      };
	      Expression.prototype.plus = function (rhs) {
	          return new BinaryOperatorExpr(BinaryOperator.Plus, this, rhs);
	      };
	      Expression.prototype.divide = function (rhs) {
	          return new BinaryOperatorExpr(BinaryOperator.Divide, this, rhs);
	      };
	      Expression.prototype.multiply = function (rhs) {
	          return new BinaryOperatorExpr(BinaryOperator.Multiply, this, rhs);
	      };
	      Expression.prototype.modulo = function (rhs) {
	          return new BinaryOperatorExpr(BinaryOperator.Modulo, this, rhs);
	      };
	      Expression.prototype.and = function (rhs) {
	          return new BinaryOperatorExpr(BinaryOperator.And, this, rhs);
	      };
	      Expression.prototype.or = function (rhs) {
	          return new BinaryOperatorExpr(BinaryOperator.Or, this, rhs);
	      };
	      Expression.prototype.lower = function (rhs) {
	          return new BinaryOperatorExpr(BinaryOperator.Lower, this, rhs);
	      };
	      Expression.prototype.lowerEquals = function (rhs) {
	          return new BinaryOperatorExpr(BinaryOperator.LowerEquals, this, rhs);
	      };
	      Expression.prototype.bigger = function (rhs) {
	          return new BinaryOperatorExpr(BinaryOperator.Bigger, this, rhs);
	      };
	      Expression.prototype.biggerEquals = function (rhs) {
	          return new BinaryOperatorExpr(BinaryOperator.BiggerEquals, this, rhs);
	      };
	      Expression.prototype.isBlank = function () {
	          // Note: We use equals by purpose here to compare to null and undefined in JS.
	          // We use the typed null to allow strictNullChecks to narrow types.
	          return this.equals(TYPED_NULL_EXPR);
	      };
	      Expression.prototype.cast = function (type) { return new CastExpr(this, type); };
	      Expression.prototype.toStmt = function () { return new ExpressionStatement(this); };
	      return Expression;
	  }());
	  var BuiltinVar;
	  (function (BuiltinVar) {
	      BuiltinVar[BuiltinVar["This"] = 0] = "This";
	      BuiltinVar[BuiltinVar["Super"] = 1] = "Super";
	      BuiltinVar[BuiltinVar["CatchError"] = 2] = "CatchError";
	      BuiltinVar[BuiltinVar["CatchStack"] = 3] = "CatchStack";
	  })(BuiltinVar || (BuiltinVar = {}));
	  var ReadVarExpr = (function (_super) {
	      __extends$12(ReadVarExpr, _super);
	      function ReadVarExpr(name, type) {
	          if (type === void 0) { type = null; }
	          _super.call(this, type);
	          if (typeof name === 'string') {
	              this.name = name;
	              this.builtin = null;
	          }
	          else {
	              this.name = null;
	              this.builtin = name;
	          }
	      }
	      ReadVarExpr.prototype.visitExpression = function (visitor, context) {
	          return visitor.visitReadVarExpr(this, context);
	      };
	      ReadVarExpr.prototype.set = function (value) { return new WriteVarExpr(this.name, value); };
	      return ReadVarExpr;
	  }(Expression));
	  var WriteVarExpr = (function (_super) {
	      __extends$12(WriteVarExpr, _super);
	      function WriteVarExpr(name, value, type) {
	          if (type === void 0) { type = null; }
	          _super.call(this, type || value.type);
	          this.name = name;
	          this.value = value;
	      }
	      WriteVarExpr.prototype.visitExpression = function (visitor, context) {
	          return visitor.visitWriteVarExpr(this, context);
	      };
	      WriteVarExpr.prototype.toDeclStmt = function (type, modifiers) {
	          if (type === void 0) { type = null; }
	          if (modifiers === void 0) { modifiers = null; }
	          return new DeclareVarStmt(this.name, this.value, type, modifiers);
	      };
	      return WriteVarExpr;
	  }(Expression));
	  var WriteKeyExpr = (function (_super) {
	      __extends$12(WriteKeyExpr, _super);
	      function WriteKeyExpr(receiver, index, value, type) {
	          if (type === void 0) { type = null; }
	          _super.call(this, type || value.type);
	          this.receiver = receiver;
	          this.index = index;
	          this.value = value;
	      }
	      WriteKeyExpr.prototype.visitExpression = function (visitor, context) {
	          return visitor.visitWriteKeyExpr(this, context);
	      };
	      return WriteKeyExpr;
	  }(Expression));
	  var WritePropExpr = (function (_super) {
	      __extends$12(WritePropExpr, _super);
	      function WritePropExpr(receiver, name, value, type) {
	          if (type === void 0) { type = null; }
	          _super.call(this, type || value.type);
	          this.receiver = receiver;
	          this.name = name;
	          this.value = value;
	      }
	      WritePropExpr.prototype.visitExpression = function (visitor, context) {
	          return visitor.visitWritePropExpr(this, context);
	      };
	      return WritePropExpr;
	  }(Expression));
	  var BuiltinMethod;
	  (function (BuiltinMethod) {
	      BuiltinMethod[BuiltinMethod["ConcatArray"] = 0] = "ConcatArray";
	      BuiltinMethod[BuiltinMethod["SubscribeObservable"] = 1] = "SubscribeObservable";
	      BuiltinMethod[BuiltinMethod["Bind"] = 2] = "Bind";
	  })(BuiltinMethod || (BuiltinMethod = {}));
	  var InvokeMethodExpr = (function (_super) {
	      __extends$12(InvokeMethodExpr, _super);
	      function InvokeMethodExpr(receiver, method, args, type) {
	          if (type === void 0) { type = null; }
	          _super.call(this, type);
	          this.receiver = receiver;
	          this.args = args;
	          if (typeof method === 'string') {
	              this.name = method;
	              this.builtin = null;
	          }
	          else {
	              this.name = null;
	              this.builtin = method;
	          }
	      }
	      InvokeMethodExpr.prototype.visitExpression = function (visitor, context) {
	          return visitor.visitInvokeMethodExpr(this, context);
	      };
	      return InvokeMethodExpr;
	  }(Expression));
	  var InvokeFunctionExpr = (function (_super) {
	      __extends$12(InvokeFunctionExpr, _super);
	      function InvokeFunctionExpr(fn, args, type) {
	          if (type === void 0) { type = null; }
	          _super.call(this, type);
	          this.fn = fn;
	          this.args = args;
	      }
	      InvokeFunctionExpr.prototype.visitExpression = function (visitor, context) {
	          return visitor.visitInvokeFunctionExpr(this, context);
	      };
	      return InvokeFunctionExpr;
	  }(Expression));
	  var InstantiateExpr = (function (_super) {
	      __extends$12(InstantiateExpr, _super);
	      function InstantiateExpr(classExpr, args, type) {
	          _super.call(this, type);
	          this.classExpr = classExpr;
	          this.args = args;
	      }
	      InstantiateExpr.prototype.visitExpression = function (visitor, context) {
	          return visitor.visitInstantiateExpr(this, context);
	      };
	      return InstantiateExpr;
	  }(Expression));
	  var LiteralExpr = (function (_super) {
	      __extends$12(LiteralExpr, _super);
	      function LiteralExpr(value, type) {
	          if (type === void 0) { type = null; }
	          _super.call(this, type);
	          this.value = value;
	      }
	      LiteralExpr.prototype.visitExpression = function (visitor, context) {
	          return visitor.visitLiteralExpr(this, context);
	      };
	      return LiteralExpr;
	  }(Expression));
	  var ExternalExpr = (function (_super) {
	      __extends$12(ExternalExpr, _super);
	      function ExternalExpr(value, type, typeParams) {
	          if (type === void 0) { type = null; }
	          if (typeParams === void 0) { typeParams = null; }
	          _super.call(this, type);
	          this.value = value;
	          this.typeParams = typeParams;
	      }
	      ExternalExpr.prototype.visitExpression = function (visitor, context) {
	          return visitor.visitExternalExpr(this, context);
	      };
	      return ExternalExpr;
	  }(Expression));
	  var ConditionalExpr = (function (_super) {
	      __extends$12(ConditionalExpr, _super);
	      function ConditionalExpr(condition, trueCase, falseCase, type) {
	          if (falseCase === void 0) { falseCase = null; }
	          if (type === void 0) { type = null; }
	          _super.call(this, type || trueCase.type);
	          this.condition = condition;
	          this.falseCase = falseCase;
	          this.trueCase = trueCase;
	      }
	      ConditionalExpr.prototype.visitExpression = function (visitor, context) {
	          return visitor.visitConditionalExpr(this, context);
	      };
	      return ConditionalExpr;
	  }(Expression));
	  var NotExpr = (function (_super) {
	      __extends$12(NotExpr, _super);
	      function NotExpr(condition) {
	          _super.call(this, BOOL_TYPE);
	          this.condition = condition;
	      }
	      NotExpr.prototype.visitExpression = function (visitor, context) {
	          return visitor.visitNotExpr(this, context);
	      };
	      return NotExpr;
	  }(Expression));
	  var CastExpr = (function (_super) {
	      __extends$12(CastExpr, _super);
	      function CastExpr(value, type) {
	          _super.call(this, type);
	          this.value = value;
	      }
	      CastExpr.prototype.visitExpression = function (visitor, context) {
	          return visitor.visitCastExpr(this, context);
	      };
	      return CastExpr;
	  }(Expression));
	  var FnParam = (function () {
	      function FnParam(name, type) {
	          if (type === void 0) { type = null; }
	          this.name = name;
	          this.type = type;
	      }
	      return FnParam;
	  }());
	  var FunctionExpr = (function (_super) {
	      __extends$12(FunctionExpr, _super);
	      function FunctionExpr(params, statements, type) {
	          if (type === void 0) { type = null; }
	          _super.call(this, type);
	          this.params = params;
	          this.statements = statements;
	      }
	      FunctionExpr.prototype.visitExpression = function (visitor, context) {
	          return visitor.visitFunctionExpr(this, context);
	      };
	      FunctionExpr.prototype.toDeclStmt = function (name, modifiers) {
	          if (modifiers === void 0) { modifiers = null; }
	          return new DeclareFunctionStmt(name, this.params, this.statements, this.type, modifiers);
	      };
	      return FunctionExpr;
	  }(Expression));
	  var BinaryOperatorExpr = (function (_super) {
	      __extends$12(BinaryOperatorExpr, _super);
	      function BinaryOperatorExpr(operator, lhs, rhs, type) {
	          if (type === void 0) { type = null; }
	          _super.call(this, type || lhs.type);
	          this.operator = operator;
	          this.rhs = rhs;
	          this.lhs = lhs;
	      }
	      BinaryOperatorExpr.prototype.visitExpression = function (visitor, context) {
	          return visitor.visitBinaryOperatorExpr(this, context);
	      };
	      return BinaryOperatorExpr;
	  }(Expression));
	  var ReadPropExpr = (function (_super) {
	      __extends$12(ReadPropExpr, _super);
	      function ReadPropExpr(receiver, name, type) {
	          if (type === void 0) { type = null; }
	          _super.call(this, type);
	          this.receiver = receiver;
	          this.name = name;
	      }
	      ReadPropExpr.prototype.visitExpression = function (visitor, context) {
	          return visitor.visitReadPropExpr(this, context);
	      };
	      ReadPropExpr.prototype.set = function (value) {
	          return new WritePropExpr(this.receiver, this.name, value);
	      };
	      return ReadPropExpr;
	  }(Expression));
	  var ReadKeyExpr = (function (_super) {
	      __extends$12(ReadKeyExpr, _super);
	      function ReadKeyExpr(receiver, index, type) {
	          if (type === void 0) { type = null; }
	          _super.call(this, type);
	          this.receiver = receiver;
	          this.index = index;
	      }
	      ReadKeyExpr.prototype.visitExpression = function (visitor, context) {
	          return visitor.visitReadKeyExpr(this, context);
	      };
	      ReadKeyExpr.prototype.set = function (value) {
	          return new WriteKeyExpr(this.receiver, this.index, value);
	      };
	      return ReadKeyExpr;
	  }(Expression));
	  var LiteralArrayExpr = (function (_super) {
	      __extends$12(LiteralArrayExpr, _super);
	      function LiteralArrayExpr(entries, type) {
	          if (type === void 0) { type = null; }
	          _super.call(this, type);
	          this.entries = entries;
	      }
	      LiteralArrayExpr.prototype.visitExpression = function (visitor, context) {
	          return visitor.visitLiteralArrayExpr(this, context);
	      };
	      return LiteralArrayExpr;
	  }(Expression));
	  var LiteralMapExpr = (function (_super) {
	      __extends$12(LiteralMapExpr, _super);
	      function LiteralMapExpr(entries, type) {
	          if (type === void 0) { type = null; }
	          _super.call(this, type);
	          this.entries = entries;
	          this.valueType = null;
	          if (isPresent(type)) {
	              this.valueType = type.valueType;
	          }
	      }
	      LiteralMapExpr.prototype.visitExpression = function (visitor, context) {
	          return visitor.visitLiteralMapExpr(this, context);
	      };
	      return LiteralMapExpr;
	  }(Expression));
	  var THIS_EXPR = new ReadVarExpr(BuiltinVar.This);
	  var SUPER_EXPR = new ReadVarExpr(BuiltinVar.Super);
	  var CATCH_ERROR_VAR = new ReadVarExpr(BuiltinVar.CatchError);
	  var CATCH_STACK_VAR = new ReadVarExpr(BuiltinVar.CatchStack);
	  var NULL_EXPR = new LiteralExpr(null, null);
	  var TYPED_NULL_EXPR = new LiteralExpr(null, NULL_TYPE);
	  //// Statements
	  var StmtModifier;
	  (function (StmtModifier) {
	      StmtModifier[StmtModifier["Final"] = 0] = "Final";
	      StmtModifier[StmtModifier["Private"] = 1] = "Private";
	  })(StmtModifier || (StmtModifier = {}));
	  var Statement = (function () {
	      function Statement(modifiers) {
	          if (modifiers === void 0) { modifiers = null; }
	          this.modifiers = modifiers;
	          if (!modifiers) {
	              this.modifiers = [];
	          }
	      }
	      Statement.prototype.hasModifier = function (modifier) { return this.modifiers.indexOf(modifier) !== -1; };
	      return Statement;
	  }());
	  var DeclareVarStmt = (function (_super) {
	      __extends$12(DeclareVarStmt, _super);
	      function DeclareVarStmt(name, value, type, modifiers) {
	          if (type === void 0) { type = null; }
	          if (modifiers === void 0) { modifiers = null; }
	          _super.call(this, modifiers);
	          this.name = name;
	          this.value = value;
	          this.type = type || value.type;
	      }
	      DeclareVarStmt.prototype.visitStatement = function (visitor, context) {
	          return visitor.visitDeclareVarStmt(this, context);
	      };
	      return DeclareVarStmt;
	  }(Statement));
	  var DeclareFunctionStmt = (function (_super) {
	      __extends$12(DeclareFunctionStmt, _super);
	      function DeclareFunctionStmt(name, params, statements, type, modifiers) {
	          if (type === void 0) { type = null; }
	          if (modifiers === void 0) { modifiers = null; }
	          _super.call(this, modifiers);
	          this.name = name;
	          this.params = params;
	          this.statements = statements;
	          this.type = type;
	      }
	      DeclareFunctionStmt.prototype.visitStatement = function (visitor, context) {
	          return visitor.visitDeclareFunctionStmt(this, context);
	      };
	      return DeclareFunctionStmt;
	  }(Statement));
	  var ExpressionStatement = (function (_super) {
	      __extends$12(ExpressionStatement, _super);
	      function ExpressionStatement(expr) {
	          _super.call(this);
	          this.expr = expr;
	      }
	      ExpressionStatement.prototype.visitStatement = function (visitor, context) {
	          return visitor.visitExpressionStmt(this, context);
	      };
	      return ExpressionStatement;
	  }(Statement));
	  var ReturnStatement = (function (_super) {
	      __extends$12(ReturnStatement, _super);
	      function ReturnStatement(value) {
	          _super.call(this);
	          this.value = value;
	      }
	      ReturnStatement.prototype.visitStatement = function (visitor, context) {
	          return visitor.visitReturnStmt(this, context);
	      };
	      return ReturnStatement;
	  }(Statement));
	  var AbstractClassPart = (function () {
	      function AbstractClassPart(type, modifiers) {
	          if (type === void 0) { type = null; }
	          this.type = type;
	          this.modifiers = modifiers;
	          if (!modifiers) {
	              this.modifiers = [];
	          }
	      }
	      AbstractClassPart.prototype.hasModifier = function (modifier) { return this.modifiers.indexOf(modifier) !== -1; };
	      return AbstractClassPart;
	  }());
	  var ClassField = (function (_super) {
	      __extends$12(ClassField, _super);
	      function ClassField(name, type, modifiers) {
	          if (type === void 0) { type = null; }
	          if (modifiers === void 0) { modifiers = null; }
	          _super.call(this, type, modifiers);
	          this.name = name;
	      }
	      return ClassField;
	  }(AbstractClassPart));
	  var ClassMethod = (function (_super) {
	      __extends$12(ClassMethod, _super);
	      function ClassMethod(name, params, body, type, modifiers) {
	          if (type === void 0) { type = null; }
	          if (modifiers === void 0) { modifiers = null; }
	          _super.call(this, type, modifiers);
	          this.name = name;
	          this.params = params;
	          this.body = body;
	      }
	      return ClassMethod;
	  }(AbstractClassPart));
	  var ClassGetter = (function (_super) {
	      __extends$12(ClassGetter, _super);
	      function ClassGetter(name, body, type, modifiers) {
	          if (type === void 0) { type = null; }
	          if (modifiers === void 0) { modifiers = null; }
	          _super.call(this, type, modifiers);
	          this.name = name;
	          this.body = body;
	      }
	      return ClassGetter;
	  }(AbstractClassPart));
	  var ClassStmt = (function (_super) {
	      __extends$12(ClassStmt, _super);
	      function ClassStmt(name, parent, fields, getters, constructorMethod, methods, modifiers) {
	          if (modifiers === void 0) { modifiers = null; }
	          _super.call(this, modifiers);
	          this.name = name;
	          this.parent = parent;
	          this.fields = fields;
	          this.getters = getters;
	          this.constructorMethod = constructorMethod;
	          this.methods = methods;
	      }
	      ClassStmt.prototype.visitStatement = function (visitor, context) {
	          return visitor.visitDeclareClassStmt(this, context);
	      };
	      return ClassStmt;
	  }(Statement));
	  var IfStmt = (function (_super) {
	      __extends$12(IfStmt, _super);
	      function IfStmt(condition, trueCase, falseCase) {
	          if (falseCase === void 0) { falseCase = []; }
	          _super.call(this);
	          this.condition = condition;
	          this.trueCase = trueCase;
	          this.falseCase = falseCase;
	      }
	      IfStmt.prototype.visitStatement = function (visitor, context) {
	          return visitor.visitIfStmt(this, context);
	      };
	      return IfStmt;
	  }(Statement));
	  var CommentStmt = (function (_super) {
	      __extends$12(CommentStmt, _super);
	      function CommentStmt(comment) {
	          _super.call(this);
	          this.comment = comment;
	      }
	      CommentStmt.prototype.visitStatement = function (visitor, context) {
	          return visitor.visitCommentStmt(this, context);
	      };
	      return CommentStmt;
	  }(Statement));
	  var TryCatchStmt = (function (_super) {
	      __extends$12(TryCatchStmt, _super);
	      function TryCatchStmt(bodyStmts, catchStmts) {
	          _super.call(this);
	          this.bodyStmts = bodyStmts;
	          this.catchStmts = catchStmts;
	      }
	      TryCatchStmt.prototype.visitStatement = function (visitor, context) {
	          return visitor.visitTryCatchStmt(this, context);
	      };
	      return TryCatchStmt;
	  }(Statement));
	  var ThrowStmt = (function (_super) {
	      __extends$12(ThrowStmt, _super);
	      function ThrowStmt(error) {
	          _super.call(this);
	          this.error = error;
	      }
	      ThrowStmt.prototype.visitStatement = function (visitor, context) {
	          return visitor.visitThrowStmt(this, context);
	      };
	      return ThrowStmt;
	  }(Statement));
	  var ExpressionTransformer = (function () {
	      function ExpressionTransformer() {
	      }
	      ExpressionTransformer.prototype.visitReadVarExpr = function (ast, context) { return ast; };
	      ExpressionTransformer.prototype.visitWriteVarExpr = function (expr, context) {
	          return new WriteVarExpr(expr.name, expr.value.visitExpression(this, context));
	      };
	      ExpressionTransformer.prototype.visitWriteKeyExpr = function (expr, context) {
	          return new WriteKeyExpr(expr.receiver.visitExpression(this, context), expr.index.visitExpression(this, context), expr.value.visitExpression(this, context));
	      };
	      ExpressionTransformer.prototype.visitWritePropExpr = function (expr, context) {
	          return new WritePropExpr(expr.receiver.visitExpression(this, context), expr.name, expr.value.visitExpression(this, context));
	      };
	      ExpressionTransformer.prototype.visitInvokeMethodExpr = function (ast, context) {
	          var method = ast.builtin || ast.name;
	          return new InvokeMethodExpr(ast.receiver.visitExpression(this, context), method, this.visitAllExpressions(ast.args, context), ast.type);
	      };
	      ExpressionTransformer.prototype.visitInvokeFunctionExpr = function (ast, context) {
	          return new InvokeFunctionExpr(ast.fn.visitExpression(this, context), this.visitAllExpressions(ast.args, context), ast.type);
	      };
	      ExpressionTransformer.prototype.visitInstantiateExpr = function (ast, context) {
	          return new InstantiateExpr(ast.classExpr.visitExpression(this, context), this.visitAllExpressions(ast.args, context), ast.type);
	      };
	      ExpressionTransformer.prototype.visitLiteralExpr = function (ast, context) { return ast; };
	      ExpressionTransformer.prototype.visitExternalExpr = function (ast, context) { return ast; };
	      ExpressionTransformer.prototype.visitConditionalExpr = function (ast, context) {
	          return new ConditionalExpr(ast.condition.visitExpression(this, context), ast.trueCase.visitExpression(this, context), ast.falseCase.visitExpression(this, context));
	      };
	      ExpressionTransformer.prototype.visitNotExpr = function (ast, context) {
	          return new NotExpr(ast.condition.visitExpression(this, context));
	      };
	      ExpressionTransformer.prototype.visitCastExpr = function (ast, context) {
	          return new CastExpr(ast.value.visitExpression(this, context), context);
	      };
	      ExpressionTransformer.prototype.visitFunctionExpr = function (ast, context) {
	          // Don't descend into nested functions
	          return ast;
	      };
	      ExpressionTransformer.prototype.visitBinaryOperatorExpr = function (ast, context) {
	          return new BinaryOperatorExpr(ast.operator, ast.lhs.visitExpression(this, context), ast.rhs.visitExpression(this, context), ast.type);
	      };
	      ExpressionTransformer.prototype.visitReadPropExpr = function (ast, context) {
	          return new ReadPropExpr(ast.receiver.visitExpression(this, context), ast.name, ast.type);
	      };
	      ExpressionTransformer.prototype.visitReadKeyExpr = function (ast, context) {
	          return new ReadKeyExpr(ast.receiver.visitExpression(this, context), ast.index.visitExpression(this, context), ast.type);
	      };
	      ExpressionTransformer.prototype.visitLiteralArrayExpr = function (ast, context) {
	          return new LiteralArrayExpr(this.visitAllExpressions(ast.entries, context));
	      };
	      ExpressionTransformer.prototype.visitLiteralMapExpr = function (ast, context) {
	          var _this = this;
	          var entries = ast.entries.map(function (entry) { return [entry[0], entry[1].visitExpression(_this, context),]; });
	          return new LiteralMapExpr(entries);
	      };
	      ExpressionTransformer.prototype.visitAllExpressions = function (exprs, context) {
	          var _this = this;
	          return exprs.map(function (expr) { return expr.visitExpression(_this, context); });
	      };
	      ExpressionTransformer.prototype.visitDeclareVarStmt = function (stmt, context) {
	          return new DeclareVarStmt(stmt.name, stmt.value.visitExpression(this, context), stmt.type, stmt.modifiers);
	      };
	      ExpressionTransformer.prototype.visitDeclareFunctionStmt = function (stmt, context) {
	          // Don't descend into nested functions
	          return stmt;
	      };
	      ExpressionTransformer.prototype.visitExpressionStmt = function (stmt, context) {
	          return new ExpressionStatement(stmt.expr.visitExpression(this, context));
	      };
	      ExpressionTransformer.prototype.visitReturnStmt = function (stmt, context) {
	          return new ReturnStatement(stmt.value.visitExpression(this, context));
	      };
	      ExpressionTransformer.prototype.visitDeclareClassStmt = function (stmt, context) {
	          // Don't descend into nested functions
	          return stmt;
	      };
	      ExpressionTransformer.prototype.visitIfStmt = function (stmt, context) {
	          return new IfStmt(stmt.condition.visitExpression(this, context), this.visitAllStatements(stmt.trueCase, context), this.visitAllStatements(stmt.falseCase, context));
	      };
	      ExpressionTransformer.prototype.visitTryCatchStmt = function (stmt, context) {
	          return new TryCatchStmt(this.visitAllStatements(stmt.bodyStmts, context), this.visitAllStatements(stmt.catchStmts, context));
	      };
	      ExpressionTransformer.prototype.visitThrowStmt = function (stmt, context) {
	          return new ThrowStmt(stmt.error.visitExpression(this, context));
	      };
	      ExpressionTransformer.prototype.visitCommentStmt = function (stmt, context) { return stmt; };
	      ExpressionTransformer.prototype.visitAllStatements = function (stmts, context) {
	          var _this = this;
	          return stmts.map(function (stmt) { return stmt.visitStatement(_this, context); });
	      };
	      return ExpressionTransformer;
	  }());
	  var RecursiveExpressionVisitor = (function () {
	      function RecursiveExpressionVisitor() {
	      }
	      RecursiveExpressionVisitor.prototype.visitReadVarExpr = function (ast, context) { return ast; };
	      RecursiveExpressionVisitor.prototype.visitWriteVarExpr = function (expr, context) {
	          expr.value.visitExpression(this, context);
	          return expr;
	      };
	      RecursiveExpressionVisitor.prototype.visitWriteKeyExpr = function (expr, context) {
	          expr.receiver.visitExpression(this, context);
	          expr.index.visitExpression(this, context);
	          expr.value.visitExpression(this, context);
	          return expr;
	      };
	      RecursiveExpressionVisitor.prototype.visitWritePropExpr = function (expr, context) {
	          expr.receiver.visitExpression(this, context);
	          expr.value.visitExpression(this, context);
	          return expr;
	      };
	      RecursiveExpressionVisitor.prototype.visitInvokeMethodExpr = function (ast, context) {
	          ast.receiver.visitExpression(this, context);
	          this.visitAllExpressions(ast.args, context);
	          return ast;
	      };
	      RecursiveExpressionVisitor.prototype.visitInvokeFunctionExpr = function (ast, context) {
	          ast.fn.visitExpression(this, context);
	          this.visitAllExpressions(ast.args, context);
	          return ast;
	      };
	      RecursiveExpressionVisitor.prototype.visitInstantiateExpr = function (ast, context) {
	          ast.classExpr.visitExpression(this, context);
	          this.visitAllExpressions(ast.args, context);
	          return ast;
	      };
	      RecursiveExpressionVisitor.prototype.visitLiteralExpr = function (ast, context) { return ast; };
	      RecursiveExpressionVisitor.prototype.visitExternalExpr = function (ast, context) { return ast; };
	      RecursiveExpressionVisitor.prototype.visitConditionalExpr = function (ast, context) {
	          ast.condition.visitExpression(this, context);
	          ast.trueCase.visitExpression(this, context);
	          ast.falseCase.visitExpression(this, context);
	          return ast;
	      };
	      RecursiveExpressionVisitor.prototype.visitNotExpr = function (ast, context) {
	          ast.condition.visitExpression(this, context);
	          return ast;
	      };
	      RecursiveExpressionVisitor.prototype.visitCastExpr = function (ast, context) {
	          ast.value.visitExpression(this, context);
	          return ast;
	      };
	      RecursiveExpressionVisitor.prototype.visitFunctionExpr = function (ast, context) { return ast; };
	      RecursiveExpressionVisitor.prototype.visitBinaryOperatorExpr = function (ast, context) {
	          ast.lhs.visitExpression(this, context);
	          ast.rhs.visitExpression(this, context);
	          return ast;
	      };
	      RecursiveExpressionVisitor.prototype.visitReadPropExpr = function (ast, context) {
	          ast.receiver.visitExpression(this, context);
	          return ast;
	      };
	      RecursiveExpressionVisitor.prototype.visitReadKeyExpr = function (ast, context) {
	          ast.receiver.visitExpression(this, context);
	          ast.index.visitExpression(this, context);
	          return ast;
	      };
	      RecursiveExpressionVisitor.prototype.visitLiteralArrayExpr = function (ast, context) {
	          this.visitAllExpressions(ast.entries, context);
	          return ast;
	      };
	      RecursiveExpressionVisitor.prototype.visitLiteralMapExpr = function (ast, context) {
	          var _this = this;
	          ast.entries.forEach(function (entry) { return entry[1].visitExpression(_this, context); });
	          return ast;
	      };
	      RecursiveExpressionVisitor.prototype.visitAllExpressions = function (exprs, context) {
	          var _this = this;
	          exprs.forEach(function (expr) { return expr.visitExpression(_this, context); });
	      };
	      RecursiveExpressionVisitor.prototype.visitDeclareVarStmt = function (stmt, context) {
	          stmt.value.visitExpression(this, context);
	          return stmt;
	      };
	      RecursiveExpressionVisitor.prototype.visitDeclareFunctionStmt = function (stmt, context) {
	          // Don't descend into nested functions
	          return stmt;
	      };
	      RecursiveExpressionVisitor.prototype.visitExpressionStmt = function (stmt, context) {
	          stmt.expr.visitExpression(this, context);
	          return stmt;
	      };
	      RecursiveExpressionVisitor.prototype.visitReturnStmt = function (stmt, context) {
	          stmt.value.visitExpression(this, context);
	          return stmt;
	      };
	      RecursiveExpressionVisitor.prototype.visitDeclareClassStmt = function (stmt, context) {
	          // Don't descend into nested functions
	          return stmt;
	      };
	      RecursiveExpressionVisitor.prototype.visitIfStmt = function (stmt, context) {
	          stmt.condition.visitExpression(this, context);
	          this.visitAllStatements(stmt.trueCase, context);
	          this.visitAllStatements(stmt.falseCase, context);
	          return stmt;
	      };
	      RecursiveExpressionVisitor.prototype.visitTryCatchStmt = function (stmt, context) {
	          this.visitAllStatements(stmt.bodyStmts, context);
	          this.visitAllStatements(stmt.catchStmts, context);
	          return stmt;
	      };
	      RecursiveExpressionVisitor.prototype.visitThrowStmt = function (stmt, context) {
	          stmt.error.visitExpression(this, context);
	          return stmt;
	      };
	      RecursiveExpressionVisitor.prototype.visitCommentStmt = function (stmt, context) { return stmt; };
	      RecursiveExpressionVisitor.prototype.visitAllStatements = function (stmts, context) {
	          var _this = this;
	          stmts.forEach(function (stmt) { return stmt.visitStatement(_this, context); });
	      };
	      return RecursiveExpressionVisitor;
	  }());
	  function replaceVarInExpression(varName, newValue, expression) {
	      var transformer = new _ReplaceVariableTransformer(varName, newValue);
	      return expression.visitExpression(transformer, null);
	  }
	  var _ReplaceVariableTransformer = (function (_super) {
	      __extends$12(_ReplaceVariableTransformer, _super);
	      function _ReplaceVariableTransformer(_varName, _newValue) {
	          _super.call(this);
	          this._varName = _varName;
	          this._newValue = _newValue;
	      }
	      _ReplaceVariableTransformer.prototype.visitReadVarExpr = function (ast, context) {
	          return ast.name == this._varName ? this._newValue : ast;
	      };
	      return _ReplaceVariableTransformer;
	  }(ExpressionTransformer));
	  function findReadVarNames(stmts) {
	      var finder = new _VariableFinder();
	      finder.visitAllStatements(stmts, null);
	      return finder.varNames;
	  }
	  var _VariableFinder = (function (_super) {
	      __extends$12(_VariableFinder, _super);
	      function _VariableFinder() {
	          _super.apply(this, arguments);
	          this.varNames = new Set();
	      }
	      _VariableFinder.prototype.visitReadVarExpr = function (ast, context) {
	          this.varNames.add(ast.name);
	          return null;
	      };
	      return _VariableFinder;
	  }(RecursiveExpressionVisitor));
	  function variable(name, type) {
	      if (type === void 0) { type = null; }
	      return new ReadVarExpr(name, type);
	  }
	  function importExpr(id, typeParams) {
	      if (typeParams === void 0) { typeParams = null; }
	      return new ExternalExpr(id, null, typeParams);
	  }
	  function importType(id, typeParams, typeModifiers) {
	      if (typeParams === void 0) { typeParams = null; }
	      if (typeModifiers === void 0) { typeModifiers = null; }
	      return isPresent(id) ? new ExternalType(id, typeParams, typeModifiers) : null;
	  }
	  function literalArr(values, type) {
	      if (type === void 0) { type = null; }
	      return new LiteralArrayExpr(values, type);
	  }
	  function literalMap(values, type) {
	      if (type === void 0) { type = null; }
	      return new LiteralMapExpr(values, type);
	  }
	  function not(expr) {
	      return new NotExpr(expr);
	  }
	  function fn(params, body, type) {
	      if (type === void 0) { type = null; }
	      return new FunctionExpr(params, body, type);
	  }
	  function literal(value, type) {
	      if (type === void 0) { type = null; }
	      return new LiteralExpr(value, type);
	  }

	  /**
	   * @license
	   * Copyright Google Inc. All Rights Reserved.
	   *
	   * Use of this source code is governed by an MIT-style license that can be
	   * found in the LICENSE file at https://angular.io/license
	   */
	  var __extends$13 = (this && this.__extends) || function (d, b) {
	      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	      function __() { this.constructor = d; }
	      d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	  };
	  var AnimationAst = (function () {
	      function AnimationAst() {
	          this.startTime = 0;
	          this.playTime = 0;
	      }
	      return AnimationAst;
	  }());
	  var AnimationStateAst = (function (_super) {
	      __extends$13(AnimationStateAst, _super);
	      function AnimationStateAst() {
	          _super.apply(this, arguments);
	      }
	      return AnimationStateAst;
	  }(AnimationAst));
	  var AnimationEntryAst = (function (_super) {
	      __extends$13(AnimationEntryAst, _super);
	      function AnimationEntryAst(name, stateDeclarations, stateTransitions) {
	          _super.call(this);
	          this.name = name;
	          this.stateDeclarations = stateDeclarations;
	          this.stateTransitions = stateTransitions;
	      }
	      AnimationEntryAst.prototype.visit = function (visitor, context) {
	          return visitor.visitAnimationEntry(this, context);
	      };
	      return AnimationEntryAst;
	  }(AnimationAst));
	  var AnimationStateDeclarationAst = (function (_super) {
	      __extends$13(AnimationStateDeclarationAst, _super);
	      function AnimationStateDeclarationAst(stateName, styles) {
	          _super.call(this);
	          this.stateName = stateName;
	          this.styles = styles;
	      }
	      AnimationStateDeclarationAst.prototype.visit = function (visitor, context) {
	          return visitor.visitAnimationStateDeclaration(this, context);
	      };
	      return AnimationStateDeclarationAst;
	  }(AnimationStateAst));
	  var AnimationStateTransitionExpression = (function () {
	      function AnimationStateTransitionExpression(fromState, toState) {
	          this.fromState = fromState;
	          this.toState = toState;
	      }
	      return AnimationStateTransitionExpression;
	  }());
	  var AnimationStateTransitionAst = (function (_super) {
	      __extends$13(AnimationStateTransitionAst, _super);
	      function AnimationStateTransitionAst(stateChanges, animation) {
	          _super.call(this);
	          this.stateChanges = stateChanges;
	          this.animation = animation;
	      }
	      AnimationStateTransitionAst.prototype.visit = function (visitor, context) {
	          return visitor.visitAnimationStateTransition(this, context);
	      };
	      return AnimationStateTransitionAst;
	  }(AnimationStateAst));
	  var AnimationStepAst = (function (_super) {
	      __extends$13(AnimationStepAst, _super);
	      function AnimationStepAst(startingStyles, keyframes, duration, delay, easing) {
	          _super.call(this);
	          this.startingStyles = startingStyles;
	          this.keyframes = keyframes;
	          this.duration = duration;
	          this.delay = delay;
	          this.easing = easing;
	      }
	      AnimationStepAst.prototype.visit = function (visitor, context) {
	          return visitor.visitAnimationStep(this, context);
	      };
	      return AnimationStepAst;
	  }(AnimationAst));
	  var AnimationStylesAst = (function (_super) {
	      __extends$13(AnimationStylesAst, _super);
	      function AnimationStylesAst(styles) {
	          _super.call(this);
	          this.styles = styles;
	      }
	      AnimationStylesAst.prototype.visit = function (visitor, context) {
	          return visitor.visitAnimationStyles(this, context);
	      };
	      return AnimationStylesAst;
	  }(AnimationAst));
	  var AnimationKeyframeAst = (function (_super) {
	      __extends$13(AnimationKeyframeAst, _super);
	      function AnimationKeyframeAst(offset, styles) {
	          _super.call(this);
	          this.offset = offset;
	          this.styles = styles;
	      }
	      AnimationKeyframeAst.prototype.visit = function (visitor, context) {
	          return visitor.visitAnimationKeyframe(this, context);
	      };
	      return AnimationKeyframeAst;
	  }(AnimationAst));
	  var AnimationWithStepsAst = (function (_super) {
	      __extends$13(AnimationWithStepsAst, _super);
	      function AnimationWithStepsAst(steps) {
	          _super.call(this);
	          this.steps = steps;
	      }
	      return AnimationWithStepsAst;
	  }(AnimationAst));
	  var AnimationGroupAst = (function (_super) {
	      __extends$13(AnimationGroupAst, _super);
	      function AnimationGroupAst(steps) {
	          _super.call(this, steps);
	      }
	      AnimationGroupAst.prototype.visit = function (visitor, context) {
	          return visitor.visitAnimationGroup(this, context);
	      };
	      return AnimationGroupAst;
	  }(AnimationWithStepsAst));
	  var AnimationSequenceAst = (function (_super) {
	      __extends$13(AnimationSequenceAst, _super);
	      function AnimationSequenceAst(steps) {
	          _super.call(this, steps);
	      }
	      AnimationSequenceAst.prototype.visit = function (visitor, context) {
	          return visitor.visitAnimationSequence(this, context);
	      };
	      return AnimationSequenceAst;
	  }(AnimationWithStepsAst));

	  var AnimationEntryCompileResult = (function () {
	      function AnimationEntryCompileResult(name, statements, fnExp) {
	          this.name = name;
	          this.statements = statements;
	          this.fnExp = fnExp;
	      }
	      return AnimationEntryCompileResult;
	  }());
	  var AnimationCompiler = (function () {
	      function AnimationCompiler() {
	      }
	      AnimationCompiler.prototype.compile = function (factoryNamePrefix, parsedAnimations) {
	          return parsedAnimations.map(function (entry) {
	              var factoryName = factoryNamePrefix + "_" + entry.name;
	              var visitor = new _AnimationBuilder(entry.name, factoryName);
	              return visitor.build(entry);
	          });
	      };
	      return AnimationCompiler;
	  }());
	  var _ANIMATION_FACTORY_ELEMENT_VAR = variable('element');
	  var _ANIMATION_DEFAULT_STATE_VAR = variable('defaultStateStyles');
	  var _ANIMATION_FACTORY_VIEW_VAR = variable('view');
	  var _ANIMATION_FACTORY_VIEW_CONTEXT = _ANIMATION_FACTORY_VIEW_VAR.prop('animationContext');
	  var _ANIMATION_FACTORY_RENDERER_VAR = _ANIMATION_FACTORY_VIEW_VAR.prop('renderer');
	  var _ANIMATION_CURRENT_STATE_VAR = variable('currentState');
	  var _ANIMATION_NEXT_STATE_VAR = variable('nextState');
	  var _ANIMATION_PLAYER_VAR = variable('player');
	  var _ANIMATION_TIME_VAR = variable('totalTime');
	  var _ANIMATION_START_STATE_STYLES_VAR = variable('startStateStyles');
	  var _ANIMATION_END_STATE_STYLES_VAR = variable('endStateStyles');
	  var _ANIMATION_COLLECTED_STYLES = variable('collectedStyles');
	  var _PREVIOUS_ANIMATION_PLAYERS = variable('previousPlayers');
	  var _EMPTY_MAP = literalMap([]);
	  var _EMPTY_ARRAY = literalArr([]);
	  var _AnimationBuilder = (function () {
	      function _AnimationBuilder(animationName, factoryName) {
	          this.animationName = animationName;
	          this._fnVarName = factoryName + '_factory';
	          this._statesMapVarName = factoryName + '_states';
	          this._statesMapVar = variable(this._statesMapVarName);
	      }
	      _AnimationBuilder.prototype.visitAnimationStyles = function (ast, context) {
	          var stylesArr = [];
	          if (context.isExpectingFirstStyleStep) {
	              stylesArr.push(_ANIMATION_START_STATE_STYLES_VAR);
	              context.isExpectingFirstStyleStep = false;
	          }
	          ast.styles.forEach(function (entry) {
	              var entries = Object.keys(entry).map(function (key) { return [key, literal(entry[key])]; });
	              stylesArr.push(literalMap(entries));
	          });
	          return importExpr(resolveIdentifier(Identifiers.AnimationStyles)).instantiate([
	              importExpr(resolveIdentifier(Identifiers.collectAndResolveStyles)).callFn([
	                  _ANIMATION_COLLECTED_STYLES, literalArr(stylesArr)
	              ])
	          ]);
	      };
	      _AnimationBuilder.prototype.visitAnimationKeyframe = function (ast, context) {
	          return importExpr(resolveIdentifier(Identifiers.AnimationKeyframe)).instantiate([
	              literal(ast.offset), ast.styles.visit(this, context)
	          ]);
	      };
	      _AnimationBuilder.prototype.visitAnimationStep = function (ast, context) {
	          var _this = this;
	          if (context.endStateAnimateStep === ast) {
	              return this._visitEndStateAnimation(ast, context);
	          }
	          var startingStylesExpr = ast.startingStyles.visit(this, context);
	          var keyframeExpressions = ast.keyframes.map(function (keyframeEntry) { return keyframeEntry.visit(_this, context); });
	          return this._callAnimateMethod(ast, startingStylesExpr, literalArr(keyframeExpressions), context);
	      };
	      /** @internal */
	      _AnimationBuilder.prototype._visitEndStateAnimation = function (ast, context) {
	          var _this = this;
	          var startingStylesExpr = ast.startingStyles.visit(this, context);
	          var keyframeExpressions = ast.keyframes.map(function (keyframe) { return keyframe.visit(_this, context); });
	          var keyframesExpr = importExpr(resolveIdentifier(Identifiers.balanceAnimationKeyframes)).callFn([
	              _ANIMATION_COLLECTED_STYLES, _ANIMATION_END_STATE_STYLES_VAR,
	              literalArr(keyframeExpressions)
	          ]);
	          return this._callAnimateMethod(ast, startingStylesExpr, keyframesExpr, context);
	      };
	      /** @internal */
	      _AnimationBuilder.prototype._callAnimateMethod = function (ast, startingStylesExpr, keyframesExpr, context) {
	          var previousStylesValue = _EMPTY_ARRAY;
	          if (context.isExpectingFirstAnimateStep) {
	              previousStylesValue = _PREVIOUS_ANIMATION_PLAYERS;
	              context.isExpectingFirstAnimateStep = false;
	          }
	          context.totalTransitionTime += ast.duration + ast.delay;
	          return _ANIMATION_FACTORY_RENDERER_VAR.callMethod('animate', [
	              _ANIMATION_FACTORY_ELEMENT_VAR, startingStylesExpr, keyframesExpr, literal(ast.duration),
	              literal(ast.delay), literal(ast.easing), previousStylesValue
	          ]);
	      };
	      _AnimationBuilder.prototype.visitAnimationSequence = function (ast, context) {
	          var _this = this;
	          var playerExprs = ast.steps.map(function (step) { return step.visit(_this, context); });
	          return importExpr(resolveIdentifier(Identifiers.AnimationSequencePlayer)).instantiate([
	              literalArr(playerExprs)
	          ]);
	      };
	      _AnimationBuilder.prototype.visitAnimationGroup = function (ast, context) {
	          var _this = this;
	          var playerExprs = ast.steps.map(function (step) { return step.visit(_this, context); });
	          return importExpr(resolveIdentifier(Identifiers.AnimationGroupPlayer)).instantiate([
	              literalArr(playerExprs)
	          ]);
	      };
	      _AnimationBuilder.prototype.visitAnimationStateDeclaration = function (ast, context) {
	          var flatStyles = {};
	          _getStylesArray(ast).forEach(function (entry) { Object.keys(entry).forEach(function (key) { flatStyles[key] = entry[key]; }); });
	          context.stateMap.registerState(ast.stateName, flatStyles);
	      };
	      _AnimationBuilder.prototype.visitAnimationStateTransition = function (ast, context) {
	          var steps = ast.animation.steps;
	          var lastStep = steps[steps.length - 1];
	          if (_isEndStateAnimateStep(lastStep)) {
	              context.endStateAnimateStep = lastStep;
	          }
	          context.totalTransitionTime = 0;
	          context.isExpectingFirstStyleStep = true;
	          context.isExpectingFirstAnimateStep = true;
	          var stateChangePreconditions = [];
	          ast.stateChanges.forEach(function (stateChange) {
	              stateChangePreconditions.push(_compareToAnimationStateExpr(_ANIMATION_CURRENT_STATE_VAR, stateChange.fromState)
	                  .and(_compareToAnimationStateExpr(_ANIMATION_NEXT_STATE_VAR, stateChange.toState)));
	              if (stateChange.fromState != ANY_STATE) {
	                  context.stateMap.registerState(stateChange.fromState);
	              }
	              if (stateChange.toState != ANY_STATE) {
	                  context.stateMap.registerState(stateChange.toState);
	              }
	          });
	          var animationPlayerExpr = ast.animation.visit(this, context);
	          var reducedStateChangesPrecondition = stateChangePreconditions.reduce(function (a, b) { return a.or(b); });
	          var precondition = _ANIMATION_PLAYER_VAR.equals(NULL_EXPR).and(reducedStateChangesPrecondition);
	          var animationStmt = _ANIMATION_PLAYER_VAR.set(animationPlayerExpr).toStmt();
	          var totalTimeStmt = _ANIMATION_TIME_VAR.set(literal(context.totalTransitionTime)).toStmt();
	          return new IfStmt(precondition, [animationStmt, totalTimeStmt]);
	      };
	      _AnimationBuilder.prototype.visitAnimationEntry = function (ast, context) {
	          var _this = this;
	          // visit each of the declarations first to build the context state map
	          ast.stateDeclarations.forEach(function (def) { return def.visit(_this, context); });
	          // this should always be defined even if the user overrides it
	          context.stateMap.registerState(DEFAULT_STATE, {});
	          var statements = [];
	          statements.push(_PREVIOUS_ANIMATION_PLAYERS
	              .set(_ANIMATION_FACTORY_VIEW_CONTEXT.callMethod('getAnimationPlayers', [
	              _ANIMATION_FACTORY_ELEMENT_VAR, literal(this.animationName),
	              _ANIMATION_NEXT_STATE_VAR.equals(literal(EMPTY_ANIMATION_STATE))
	          ]))
	              .toDeclStmt());
	          statements.push(_ANIMATION_COLLECTED_STYLES.set(_EMPTY_MAP).toDeclStmt());
	          statements.push(_ANIMATION_PLAYER_VAR.set(NULL_EXPR).toDeclStmt());
	          statements.push(_ANIMATION_TIME_VAR.set(literal(0)).toDeclStmt());
	          statements.push(_ANIMATION_DEFAULT_STATE_VAR.set(this._statesMapVar.key(literal(DEFAULT_STATE)))
	              .toDeclStmt());
	          statements.push(_ANIMATION_START_STATE_STYLES_VAR.set(this._statesMapVar.key(_ANIMATION_CURRENT_STATE_VAR))
	              .toDeclStmt());
	          statements.push(new IfStmt(_ANIMATION_START_STATE_STYLES_VAR.equals(NULL_EXPR), [_ANIMATION_START_STATE_STYLES_VAR.set(_ANIMATION_DEFAULT_STATE_VAR).toStmt()]));
	          statements.push(_ANIMATION_END_STATE_STYLES_VAR.set(this._statesMapVar.key(_ANIMATION_NEXT_STATE_VAR))
	              .toDeclStmt());
	          statements.push(new IfStmt(_ANIMATION_END_STATE_STYLES_VAR.equals(NULL_EXPR), [_ANIMATION_END_STATE_STYLES_VAR.set(_ANIMATION_DEFAULT_STATE_VAR).toStmt()]));
	          var RENDER_STYLES_FN = importExpr(resolveIdentifier(Identifiers.renderStyles));
	          ast.stateTransitions.forEach(function (transAst) { return statements.push(transAst.visit(_this, context)); });
	          // this check ensures that the animation factory always returns a player
	          // so that the onDone callback can be used for tracking
	          statements.push(new IfStmt(_ANIMATION_PLAYER_VAR.equals(NULL_EXPR), [_ANIMATION_PLAYER_VAR
	                  .set(importExpr(resolveIdentifier(Identifiers.NoOpAnimationPlayer)).instantiate([]))
	                  .toStmt()]));
	          // once complete we want to apply the styles on the element
	          // since the destination state's values should persist once
	          // the animation sequence has completed.
	          statements.push(_ANIMATION_PLAYER_VAR
	              .callMethod('onDone', [fn([], [
	                  _ANIMATION_PLAYER_VAR.callMethod('destroy', []).toStmt(),
	                  RENDER_STYLES_FN
	                      .callFn([
	                      _ANIMATION_FACTORY_ELEMENT_VAR, _ANIMATION_FACTORY_RENDERER_VAR,
	                      importExpr(resolveIdentifier(Identifiers.prepareFinalAnimationStyles))
	                          .callFn([
	                          _ANIMATION_START_STATE_STYLES_VAR,
	                          _ANIMATION_END_STATE_STYLES_VAR
	                      ])
	                  ])
	                      .toStmt()
	              ])])
	              .toStmt());
	          statements.push(importExpr(resolveIdentifier(Identifiers.AnimationSequencePlayer))
	              .instantiate([_PREVIOUS_ANIMATION_PLAYERS])
	              .callMethod('destroy', [])
	              .toStmt());
	          // before we start any animation we want to clear out the starting
	          // styles from the element's style property (since they were placed
	          // there at the end of the last animation
	          statements.push(RENDER_STYLES_FN
	              .callFn([
	              _ANIMATION_FACTORY_ELEMENT_VAR, _ANIMATION_FACTORY_RENDERER_VAR,
	              importExpr(resolveIdentifier(Identifiers.clearStyles))
	                  .callFn([_ANIMATION_START_STATE_STYLES_VAR])
	          ])
	              .toStmt());
	          statements.push(_ANIMATION_FACTORY_VIEW_CONTEXT
	              .callMethod('queueAnimation', [
	              _ANIMATION_FACTORY_ELEMENT_VAR, literal(this.animationName),
	              _ANIMATION_PLAYER_VAR
	          ])
	              .toStmt());
	          statements.push(new ReturnStatement(importExpr(resolveIdentifier(Identifiers.AnimationTransition)).instantiate([
	              _ANIMATION_PLAYER_VAR, _ANIMATION_CURRENT_STATE_VAR, _ANIMATION_NEXT_STATE_VAR,
	              _ANIMATION_TIME_VAR
	          ])));
	          return fn([
	              new FnParam(_ANIMATION_FACTORY_VIEW_VAR.name, importType(resolveIdentifier(Identifiers.AppView), [DYNAMIC_TYPE])),
	              new FnParam(_ANIMATION_FACTORY_ELEMENT_VAR.name, DYNAMIC_TYPE),
	              new FnParam(_ANIMATION_CURRENT_STATE_VAR.name, DYNAMIC_TYPE),
	              new FnParam(_ANIMATION_NEXT_STATE_VAR.name, DYNAMIC_TYPE)
	          ], statements, importType(resolveIdentifier(Identifiers.AnimationTransition)));
	      };
	      _AnimationBuilder.prototype.build = function (ast) {
	          var context = new _AnimationBuilderContext();
	          var fnStatement = ast.visit(this, context).toDeclStmt(this._fnVarName);
	          var fnVariable = variable(this._fnVarName);
	          var lookupMap = [];
	          Object.keys(context.stateMap.states).forEach(function (stateName) {
	              var value = context.stateMap.states[stateName];
	              var variableValue = _EMPTY_MAP;
	              if (isPresent(value)) {
	                  var styleMap_1 = [];
	                  Object.keys(value).forEach(function (key) { styleMap_1.push([key, literal(value[key])]); });
	                  variableValue = literalMap(styleMap_1);
	              }
	              lookupMap.push([stateName, variableValue]);
	          });
	          var compiledStatesMapStmt = this._statesMapVar.set(literalMap(lookupMap)).toDeclStmt();
	          var statements = [compiledStatesMapStmt, fnStatement];
	          return new AnimationEntryCompileResult(this.animationName, statements, fnVariable);
	      };
	      return _AnimationBuilder;
	  }());
	  var _AnimationBuilderContext = (function () {
	      function _AnimationBuilderContext() {
	          this.stateMap = new _AnimationBuilderStateMap();
	          this.endStateAnimateStep = null;
	          this.isExpectingFirstStyleStep = false;
	          this.isExpectingFirstAnimateStep = false;
	          this.totalTransitionTime = 0;
	      }
	      return _AnimationBuilderContext;
	  }());
	  var _AnimationBuilderStateMap = (function () {
	      function _AnimationBuilderStateMap() {
	          this._states = {};
	      }
	      Object.defineProperty(_AnimationBuilderStateMap.prototype, "states", {
	          get: function () { return this._states; },
	          enumerable: true,
	          configurable: true
	      });
	      _AnimationBuilderStateMap.prototype.registerState = function (name, value) {
	          if (value === void 0) { value = null; }
	          var existingEntry = this._states[name];
	          if (!existingEntry) {
	              this._states[name] = value;
	          }
	      };
	      return _AnimationBuilderStateMap;
	  }());
	  function _compareToAnimationStateExpr(value, animationState) {
	      var emptyStateLiteral = literal(EMPTY_ANIMATION_STATE);
	      switch (animationState) {
	          case EMPTY_ANIMATION_STATE:
	              return value.equals(emptyStateLiteral);
	          case ANY_STATE:
	              return literal(true);
	          default:
	              return value.equals(literal(animationState));
	      }
	  }
	  function _isEndStateAnimateStep(step) {
	      // the final animation step is characterized by having only TWO
	      // keyframe values and it must have zero styles for both keyframes
	      if (step instanceof AnimationStepAst && step.duration > 0 && step.keyframes.length == 2) {
	          var styles1 = _getStylesArray(step.keyframes[0])[0];
	          var styles2 = _getStylesArray(step.keyframes[1])[0];
	          return Object.keys(styles1).length === 0 && Object.keys(styles2).length === 0;
	      }
	      return false;
	  }
	  function _getStylesArray(obj) {
	      return obj.styles.styles;
	  }

	  function createDiTokenExpression(token) {
	      if (isPresent(token.value)) {
	          return literal(token.value);
	      }
	      else if (token.identifierIsInstance) {
	          return importExpr(token.identifier)
	              .instantiate([], importType(token.identifier, [], [TypeModifier.Const]));
	      }
	      else {
	          return importExpr(token.identifier);
	      }
	  }
	  function createInlineArray(values) {
	      if (values.length === 0) {
	          return importExpr(resolveIdentifier(Identifiers.EMPTY_INLINE_ARRAY));
	      }
	      var log2 = Math.log(values.length) / Math.log(2);
	      var index = Math.ceil(log2);
	      var identifierSpec = index < Identifiers.inlineArrays.length ? Identifiers.inlineArrays[index] :
	          Identifiers.InlineArrayDynamic;
	      var identifier = resolveIdentifier(identifierSpec);
	      return importExpr(identifier).instantiate([
	          literal(values.length)
	      ].concat(values));
	  }
	  function createPureProxy(fn, argCount, pureProxyProp, builder) {
	      builder.fields.push(new ClassField(pureProxyProp.name, null));
	      var pureProxyId = argCount < Identifiers.pureProxies.length ? Identifiers.pureProxies[argCount] : null;
	      if (!pureProxyId) {
	          throw new Error("Unsupported number of argument for pure functions: " + argCount);
	      }
	      builder.ctorStmts.push(THIS_EXPR.prop(pureProxyProp.name)
	          .set(importExpr(resolveIdentifier(pureProxyId)).callFn([fn]))
	          .toStmt());
	  }
	  function createEnumExpression(enumType, enumValue) {
	      var enumName = Object.keys(enumType.runtime).find(function (propName) { return enumType.runtime[propName] === enumValue; });
	      if (!enumName) {
	          throw new Error("Unknown enum value " + enumValue + " in " + enumType.name);
	      }
	      return importExpr(resolveEnumIdentifier(resolveIdentifier(enumType), enumName));
	  }

	  var CheckBindingField = (function () {
	      function CheckBindingField(expression, bindingId) {
	          this.expression = expression;
	          this.bindingId = bindingId;
	      }
	      return CheckBindingField;
	  }());
	  function createCheckBindingField(builder) {
	      var bindingId = "" + builder.fields.length;
	      var fieldExpr = createBindFieldExpr(bindingId);
	      // private is fine here as no child view will reference the cached value...
	      builder.fields.push(new ClassField(fieldExpr.name, null, [StmtModifier.Private]));
	      builder.ctorStmts.push(THIS_EXPR.prop(fieldExpr.name)
	          .set(importExpr(resolveIdentifier(Identifiers.UNINITIALIZED)))
	          .toStmt());
	      return new CheckBindingField(fieldExpr, bindingId);
	  }
	  function createCheckBindingStmt(evalResult, fieldExpr, throwOnChangeVar, actions) {
	      var condition = importExpr(resolveIdentifier(Identifiers.checkBinding)).callFn([
	          throwOnChangeVar, fieldExpr, evalResult.currValExpr
	      ]);
	      if (evalResult.forceUpdate) {
	          condition = evalResult.forceUpdate.or(condition);
	      }
	      return evalResult.stmts.concat([
	          new IfStmt(condition, actions.concat([
	              THIS_EXPR.prop(fieldExpr.name).set(evalResult.currValExpr).toStmt()
	          ]))
	      ]);
	  }
	  function createBindFieldExpr(bindingId) {
	      return THIS_EXPR.prop("_expr_" + bindingId);
	  }

	  var VAL_UNWRAPPER_VAR = variable("valUnwrapper");
	  var EventHandlerVars = (function () {
	      function EventHandlerVars() {
	      }
	      EventHandlerVars.event = variable('$event');
	      return EventHandlerVars;
	  }());
	  var ConvertPropertyBindingResult = (function () {
	      function ConvertPropertyBindingResult(stmts, currValExpr, forceUpdate) {
	          this.stmts = stmts;
	          this.currValExpr = currValExpr;
	          this.forceUpdate = forceUpdate;
	      }
	      return ConvertPropertyBindingResult;
	  }());
	  /**
	   * Converts the given expression AST into an executable output AST, assuming the expression is
	   * used in a property binding.
	   */
	  function convertPropertyBinding(builder, nameResolver, implicitReceiver, expression, bindingId) {
	      var currValExpr = createCurrValueExpr(bindingId);
	      var stmts = [];
	      if (!nameResolver) {
	          nameResolver = new DefaultNameResolver();
	      }
	      var visitor = new _AstToIrVisitor(builder, nameResolver, implicitReceiver, VAL_UNWRAPPER_VAR, bindingId, false);
	      var outputExpr = expression.visit(visitor, _Mode.Expression);
	      if (!outputExpr) {
	          // e.g. an empty expression was given
	          return null;
	      }
	      if (visitor.temporaryCount) {
	          for (var i = 0; i < visitor.temporaryCount; i++) {
	              stmts.push(temporaryDeclaration(bindingId, i));
	          }
	      }
	      if (visitor.needsValueUnwrapper) {
	          var initValueUnwrapperStmt = VAL_UNWRAPPER_VAR.callMethod('reset', []).toStmt();
	          stmts.push(initValueUnwrapperStmt);
	      }
	      stmts.push(currValExpr.set(outputExpr).toDeclStmt(null, [StmtModifier.Final]));
	      if (visitor.needsValueUnwrapper) {
	          return new ConvertPropertyBindingResult(stmts, currValExpr, VAL_UNWRAPPER_VAR.prop('hasWrappedValue'));
	      }
	      else {
	          return new ConvertPropertyBindingResult(stmts, currValExpr, null);
	      }
	  }
	  var ConvertActionBindingResult = (function () {
	      function ConvertActionBindingResult(stmts, preventDefault) {
	          this.stmts = stmts;
	          this.preventDefault = preventDefault;
	      }
	      return ConvertActionBindingResult;
	  }());
	  /**
	   * Converts the given expression AST into an executable output AST, assuming the expression is
	   * used in an action binding (e.g. an event handler).
	   */
	  function convertActionBinding(builder, nameResolver, implicitReceiver, action, bindingId) {
	      if (!nameResolver) {
	          nameResolver = new DefaultNameResolver();
	      }
	      var visitor = new _AstToIrVisitor(builder, nameResolver, implicitReceiver, null, bindingId, true);
	      var actionStmts = [];
	      flattenStatements(action.visit(visitor, _Mode.Statement), actionStmts);
	      prependTemporaryDecls(visitor.temporaryCount, bindingId, actionStmts);
	      var lastIndex = actionStmts.length - 1;
	      var preventDefaultVar = null;
	      if (lastIndex >= 0) {
	          var lastStatement = actionStmts[lastIndex];
	          var returnExpr = convertStmtIntoExpression(lastStatement);
	          if (returnExpr) {
	              // Note: We need to cast the result of the method call to dynamic,
	              // as it might be a void method!
	              preventDefaultVar = createPreventDefaultVar(bindingId);
	              actionStmts[lastIndex] =
	                  preventDefaultVar.set(returnExpr.cast(DYNAMIC_TYPE).notIdentical(literal(false)))
	                      .toDeclStmt(null, [StmtModifier.Final]);
	          }
	      }
	      return new ConvertActionBindingResult(actionStmts, preventDefaultVar);
	  }
	  /**
	   * Creates variables that are shared by multiple calls to `convertActionBinding` /
	   * `convertPropertyBinding`
	   */
	  function createSharedBindingVariablesIfNeeded(stmts) {
	      var unwrapperStmts = [];
	      var readVars = findReadVarNames(stmts);
	      if (readVars.has(VAL_UNWRAPPER_VAR.name)) {
	          unwrapperStmts.push(VAL_UNWRAPPER_VAR
	              .set(importExpr(resolveIdentifier(Identifiers.ValueUnwrapper)).instantiate([]))
	              .toDeclStmt(null, [StmtModifier.Final]));
	      }
	      return unwrapperStmts;
	  }
	  function temporaryName(bindingId, temporaryNumber) {
	      return "tmp_" + bindingId + "_" + temporaryNumber;
	  }
	  function temporaryDeclaration(bindingId, temporaryNumber) {
	      return new DeclareVarStmt(temporaryName(bindingId, temporaryNumber), NULL_EXPR);
	  }
	  function prependTemporaryDecls(temporaryCount, bindingId, statements) {
	      for (var i = temporaryCount - 1; i >= 0; i--) {
	          statements.unshift(temporaryDeclaration(bindingId, i));
	      }
	  }
	  var _Mode;
	  (function (_Mode) {
	      _Mode[_Mode["Statement"] = 0] = "Statement";
	      _Mode[_Mode["Expression"] = 1] = "Expression";
	  })(_Mode || (_Mode = {}));
	  function ensureStatementMode(mode, ast) {
	      if (mode !== _Mode.Statement) {
	          throw new Error("Expected a statement, but saw " + ast);
	      }
	  }
	  function ensureExpressionMode(mode, ast) {
	      if (mode !== _Mode.Expression) {
	          throw new Error("Expected an expression, but saw " + ast);
	      }
	  }
	  function convertToStatementIfNeeded(mode, expr) {
	      if (mode === _Mode.Statement) {
	          return expr.toStmt();
	      }
	      else {
	          return expr;
	      }
	  }
	  var _AstToIrVisitor = (function () {
	      function _AstToIrVisitor(_builder, _nameResolver, _implicitReceiver, _valueUnwrapper, bindingId, isAction) {
	          this._builder = _builder;
	          this._nameResolver = _nameResolver;
	          this._implicitReceiver = _implicitReceiver;
	          this._valueUnwrapper = _valueUnwrapper;
	          this.bindingId = bindingId;
	          this.isAction = isAction;
	          this._nodeMap = new Map();
	          this._resultMap = new Map();
	          this._currentTemporary = 0;
	          this.needsValueUnwrapper = false;
	          this.temporaryCount = 0;
	      }
	      _AstToIrVisitor.prototype.visitBinary = function (ast, mode) {
	          var op;
	          switch (ast.operation) {
	              case '+':
	                  op = BinaryOperator.Plus;
	                  break;
	              case '-':
	                  op = BinaryOperator.Minus;
	                  break;
	              case '*':
	                  op = BinaryOperator.Multiply;
	                  break;
	              case '/':
	                  op = BinaryOperator.Divide;
	                  break;
	              case '%':
	                  op = BinaryOperator.Modulo;
	                  break;
	              case '&&':
	                  op = BinaryOperator.And;
	                  break;
	              case '||':
	                  op = BinaryOperator.Or;
	                  break;
	              case '==':
	                  op = BinaryOperator.Equals;
	                  break;
	              case '!=':
	                  op = BinaryOperator.NotEquals;
	                  break;
	              case '===':
	                  op = BinaryOperator.Identical;
	                  break;
	              case '!==':
	                  op = BinaryOperator.NotIdentical;
	                  break;
	              case '<':
	                  op = BinaryOperator.Lower;
	                  break;
	              case '>':
	                  op = BinaryOperator.Bigger;
	                  break;
	              case '<=':
	                  op = BinaryOperator.LowerEquals;
	                  break;
	              case '>=':
	                  op = BinaryOperator.BiggerEquals;
	                  break;
	              default:
	                  throw new Error("Unsupported operation " + ast.operation);
	          }
	          return convertToStatementIfNeeded(mode, new BinaryOperatorExpr(op, this.visit(ast.left, _Mode.Expression), this.visit(ast.right, _Mode.Expression)));
	      };
	      _AstToIrVisitor.prototype.visitChain = function (ast, mode) {
	          ensureStatementMode(mode, ast);
	          return this.visitAll(ast.expressions, mode);
	      };
	      _AstToIrVisitor.prototype.visitConditional = function (ast, mode) {
	          var value = this.visit(ast.condition, _Mode.Expression);
	          return convertToStatementIfNeeded(mode, value.conditional(this.visit(ast.trueExp, _Mode.Expression), this.visit(ast.falseExp, _Mode.Expression)));
	      };
	      _AstToIrVisitor.prototype.visitPipe = function (ast, mode) {
	          var input = this.visit(ast.exp, _Mode.Expression);
	          var args = this.visitAll(ast.args, _Mode.Expression);
	          var value = this._nameResolver.callPipe(ast.name, input, args);
	          if (!value) {
	              throw new Error("Illegal state: Pipe " + ast.name + " is not allowed here!");
	          }
	          this.needsValueUnwrapper = true;
	          return convertToStatementIfNeeded(mode, this._valueUnwrapper.callMethod('unwrap', [value]));
	      };
	      _AstToIrVisitor.prototype.visitFunctionCall = function (ast, mode) {
	          return convertToStatementIfNeeded(mode, this.visit(ast.target, _Mode.Expression).callFn(this.visitAll(ast.args, _Mode.Expression)));
	      };
	      _AstToIrVisitor.prototype.visitImplicitReceiver = function (ast, mode) {
	          ensureExpressionMode(mode, ast);
	          return this._implicitReceiver;
	      };
	      _AstToIrVisitor.prototype.visitInterpolation = function (ast, mode) {
	          ensureExpressionMode(mode, ast);
	          var args = [literal(ast.expressions.length)];
	          for (var i = 0; i < ast.strings.length - 1; i++) {
	              args.push(literal(ast.strings[i]));
	              args.push(this.visit(ast.expressions[i], _Mode.Expression));
	          }
	          args.push(literal(ast.strings[ast.strings.length - 1]));
	          return ast.expressions.length <= 9 ?
	              importExpr(resolveIdentifier(Identifiers.inlineInterpolate)).callFn(args) :
	              importExpr(resolveIdentifier(Identifiers.interpolate)).callFn([
	                  args[0], literalArr(args.slice(1))
	              ]);
	      };
	      _AstToIrVisitor.prototype.visitKeyedRead = function (ast, mode) {
	          return convertToStatementIfNeeded(mode, this.visit(ast.obj, _Mode.Expression).key(this.visit(ast.key, _Mode.Expression)));
	      };
	      _AstToIrVisitor.prototype.visitKeyedWrite = function (ast, mode) {
	          var obj = this.visit(ast.obj, _Mode.Expression);
	          var key = this.visit(ast.key, _Mode.Expression);
	          var value = this.visit(ast.value, _Mode.Expression);
	          return convertToStatementIfNeeded(mode, obj.key(key).set(value));
	      };
	      _AstToIrVisitor.prototype.visitLiteralArray = function (ast, mode) {
	          var parts = this.visitAll(ast.expressions, mode);
	          var literalArr$$ = this.isAction ? literalArr(parts) : createCachedLiteralArray(this._builder, parts);
	          return convertToStatementIfNeeded(mode, literalArr$$);
	      };
	      _AstToIrVisitor.prototype.visitLiteralMap = function (ast, mode) {
	          var parts = [];
	          for (var i = 0; i < ast.keys.length; i++) {
	              parts.push([ast.keys[i], this.visit(ast.values[i], _Mode.Expression)]);
	          }
	          var literalMap$$ = this.isAction ? literalMap(parts) : createCachedLiteralMap(this._builder, parts);
	          return convertToStatementIfNeeded(mode, literalMap$$);
	      };
	      _AstToIrVisitor.prototype.visitLiteralPrimitive = function (ast, mode) {
	          return convertToStatementIfNeeded(mode, literal(ast.value));
	      };
	      _AstToIrVisitor.prototype._getLocal = function (name) {
	          if (this.isAction && name == EventHandlerVars.event.name) {
	              return EventHandlerVars.event;
	          }
	          return this._nameResolver.getLocal(name);
	      };
	      _AstToIrVisitor.prototype.visitMethodCall = function (ast, mode) {
	          var leftMostSafe = this.leftMostSafeNode(ast);
	          if (leftMostSafe) {
	              return this.convertSafeAccess(ast, leftMostSafe, mode);
	          }
	          else {
	              var args = this.visitAll(ast.args, _Mode.Expression);
	              var result = null;
	              var receiver = this.visit(ast.receiver, _Mode.Expression);
	              if (receiver === this._implicitReceiver) {
	                  var varExpr = this._getLocal(ast.name);
	                  if (isPresent(varExpr)) {
	                      result = varExpr.callFn(args);
	                  }
	              }
	              if (isBlank(result)) {
	                  result = receiver.callMethod(ast.name, args);
	              }
	              return convertToStatementIfNeeded(mode, result);
	          }
	      };
	      _AstToIrVisitor.prototype.visitPrefixNot = function (ast, mode) {
	          return convertToStatementIfNeeded(mode, not(this.visit(ast.expression, _Mode.Expression)));
	      };
	      _AstToIrVisitor.prototype.visitPropertyRead = function (ast, mode) {
	          var leftMostSafe = this.leftMostSafeNode(ast);
	          if (leftMostSafe) {
	              return this.convertSafeAccess(ast, leftMostSafe, mode);
	          }
	          else {
	              var result = null;
	              var receiver = this.visit(ast.receiver, _Mode.Expression);
	              if (receiver === this._implicitReceiver) {
	                  result = this._getLocal(ast.name);
	              }
	              if (isBlank(result)) {
	                  result = receiver.prop(ast.name);
	              }
	              return convertToStatementIfNeeded(mode, result);
	          }
	      };
	      _AstToIrVisitor.prototype.visitPropertyWrite = function (ast, mode) {
	          var receiver = this.visit(ast.receiver, _Mode.Expression);
	          if (receiver === this._implicitReceiver) {
	              var varExpr = this._getLocal(ast.name);
	              if (isPresent(varExpr)) {
	                  throw new Error('Cannot assign to a reference or variable!');
	              }
	          }
	          return convertToStatementIfNeeded(mode, receiver.prop(ast.name).set(this.visit(ast.value, _Mode.Expression)));
	      };
	      _AstToIrVisitor.prototype.visitSafePropertyRead = function (ast, mode) {
	          return this.convertSafeAccess(ast, this.leftMostSafeNode(ast), mode);
	      };
	      _AstToIrVisitor.prototype.visitSafeMethodCall = function (ast, mode) {
	          return this.convertSafeAccess(ast, this.leftMostSafeNode(ast), mode);
	      };
	      _AstToIrVisitor.prototype.visitAll = function (asts, mode) {
	          var _this = this;
	          return asts.map(function (ast) { return _this.visit(ast, mode); });
	      };
	      _AstToIrVisitor.prototype.visitQuote = function (ast, mode) {
	          throw new Error('Quotes are not supported for evaluation!');
	      };
	      _AstToIrVisitor.prototype.visit = function (ast, mode) {
	          var result = this._resultMap.get(ast);
	          if (result)
	              return result;
	          return (this._nodeMap.get(ast) || ast).visit(this, mode);
	      };
	      _AstToIrVisitor.prototype.convertSafeAccess = function (ast, leftMostSafe, mode) {
	          // If the expression contains a safe access node on the left it needs to be converted to
	          // an expression that guards the access to the member by checking the receiver for blank. As
	          // execution proceeds from left to right, the left most part of the expression must be guarded
	          // first but, because member access is left associative, the right side of the expression is at
	          // the top of the AST. The desired result requires lifting a copy of the the left part of the
	          // expression up to test it for blank before generating the unguarded version.
	          // Consider, for example the following expression: a?.b.c?.d.e
	          // This results in the ast:
	          //         .
	          //        / \
	          //       ?.   e
	          //      /  \
	          //     .    d
	          //    / \
	          //   ?.  c
	          //  /  \
	          // a    b
	          // The following tree should be generated:
	          //
	          //        /---- ? ----\
	          //       /      |      \
	          //     a   /--- ? ---\  null
	          //        /     |     \
	          //       .      .     null
	          //      / \    / \
	          //     .  c   .   e
	          //    / \    / \
	          //   a   b  ,   d
	          //         / \
	          //        .   c
	          //       / \
	          //      a   b
	          //
	          // Notice that the first guard condition is the left hand of the left most safe access node
	          // which comes in as leftMostSafe to this routine.
	          var guardedExpression = this.visit(leftMostSafe.receiver, _Mode.Expression);
	          var temporary;
	          if (this.needsTemporary(leftMostSafe.receiver)) {
	              // If the expression has method calls or pipes then we need to save the result into a
	              // temporary variable to avoid calling stateful or impure code more than once.
	              temporary = this.allocateTemporary();
	              // Preserve the result in the temporary variable
	              guardedExpression = temporary.set(guardedExpression);
	              // Ensure all further references to the guarded expression refer to the temporary instead.
	              this._resultMap.set(leftMostSafe.receiver, temporary);
	          }
	          var condition = guardedExpression.isBlank();
	          // Convert the ast to an unguarded access to the receiver's member. The map will substitute
	          // leftMostNode with its unguarded version in the call to `this.visit()`.
	          if (leftMostSafe instanceof SafeMethodCall) {
	              this._nodeMap.set(leftMostSafe, new MethodCall(leftMostSafe.span, leftMostSafe.receiver, leftMostSafe.name, leftMostSafe.args));
	          }
	          else {
	              this._nodeMap.set(leftMostSafe, new PropertyRead(leftMostSafe.span, leftMostSafe.receiver, leftMostSafe.name));
	          }
	          // Recursively convert the node now without the guarded member access.
	          var access = this.visit(ast, _Mode.Expression);
	          // Remove the mapping. This is not strictly required as the converter only traverses each node
	          // once but is safer if the conversion is changed to traverse the nodes more than once.
	          this._nodeMap.delete(leftMostSafe);
	          // If we allcoated a temporary, release it.
	          if (temporary) {
	              this.releaseTemporary(temporary);
	          }
	          // Produce the conditional
	          return convertToStatementIfNeeded(mode, condition.conditional(literal(null), access));
	      };
	      // Given a expression of the form a?.b.c?.d.e the the left most safe node is
	      // the (a?.b). The . and ?. are left associative thus can be rewritten as:
	      // ((((a?.c).b).c)?.d).e. This returns the most deeply nested safe read or
	      // safe method call as this needs be transform initially to:
	      //   a == null ? null : a.c.b.c?.d.e
	      // then to:
	      //   a == null ? null : a.b.c == null ? null : a.b.c.d.e
	      _AstToIrVisitor.prototype.leftMostSafeNode = function (ast) {
	          var _this = this;
	          var visit = function (visitor, ast) {
	              return (_this._nodeMap.get(ast) || ast).visit(visitor);
	          };
	          return ast.visit({
	              visitBinary: function (ast) { return null; },
	              visitChain: function (ast) { return null; },
	              visitConditional: function (ast) { return null; },
	              visitFunctionCall: function (ast) { return null; },
	              visitImplicitReceiver: function (ast) { return null; },
	              visitInterpolation: function (ast) { return null; },
	              visitKeyedRead: function (ast) { return visit(this, ast.obj); },
	              visitKeyedWrite: function (ast) { return null; },
	              visitLiteralArray: function (ast) { return null; },
	              visitLiteralMap: function (ast) { return null; },
	              visitLiteralPrimitive: function (ast) { return null; },
	              visitMethodCall: function (ast) { return visit(this, ast.receiver); },
	              visitPipe: function (ast) { return null; },
	              visitPrefixNot: function (ast) { return null; },
	              visitPropertyRead: function (ast) { return visit(this, ast.receiver); },
	              visitPropertyWrite: function (ast) { return null; },
	              visitQuote: function (ast) { return null; },
	              visitSafeMethodCall: function (ast) { return visit(this, ast.receiver) || ast; },
	              visitSafePropertyRead: function (ast) {
	                  return visit(this, ast.receiver) || ast;
	              }
	          });
	      };
	      // Returns true of the AST includes a method or a pipe indicating that, if the
	      // expression is used as the target of a safe property or method access then
	      // the expression should be stored into a temporary variable.
	      _AstToIrVisitor.prototype.needsTemporary = function (ast) {
	          var _this = this;
	          var visit = function (visitor, ast) {
	              return ast && (_this._nodeMap.get(ast) || ast).visit(visitor);
	          };
	          var visitSome = function (visitor, ast) {
	              return ast.some(function (ast) { return visit(visitor, ast); });
	          };
	          return ast.visit({
	              visitBinary: function (ast) { return visit(this, ast.left) || visit(this, ast.right); },
	              visitChain: function (ast) { return false; },
	              visitConditional: function (ast) {
	                  return visit(this, ast.condition) || visit(this, ast.trueExp) ||
	                      visit(this, ast.falseExp);
	              },
	              visitFunctionCall: function (ast) { return true; },
	              visitImplicitReceiver: function (ast) { return false; },
	              visitInterpolation: function (ast) { return visitSome(this, ast.expressions); },
	              visitKeyedRead: function (ast) { return false; },
	              visitKeyedWrite: function (ast) { return false; },
	              visitLiteralArray: function (ast) { return true; },
	              visitLiteralMap: function (ast) { return true; },
	              visitLiteralPrimitive: function (ast) { return false; },
	              visitMethodCall: function (ast) { return true; },
	              visitPipe: function (ast) { return true; },
	              visitPrefixNot: function (ast) { return visit(this, ast.expression); },
	              visitPropertyRead: function (ast) { return false; },
	              visitPropertyWrite: function (ast) { return false; },
	              visitQuote: function (ast) { return false; },
	              visitSafeMethodCall: function (ast) { return true; },
	              visitSafePropertyRead: function (ast) { return false; }
	          });
	      };
	      _AstToIrVisitor.prototype.allocateTemporary = function () {
	          var tempNumber = this._currentTemporary++;
	          this.temporaryCount = Math.max(this._currentTemporary, this.temporaryCount);
	          return new ReadVarExpr(temporaryName(this.bindingId, tempNumber));
	      };
	      _AstToIrVisitor.prototype.releaseTemporary = function (temporary) {
	          this._currentTemporary--;
	          if (temporary.name != temporaryName(this.bindingId, this._currentTemporary)) {
	              throw new Error("Temporary " + temporary.name + " released out of order");
	          }
	      };
	      return _AstToIrVisitor;
	  }());
	  function flattenStatements(arg, output) {
	      if (Array.isArray(arg)) {
	          arg.forEach(function (entry) { return flattenStatements(entry, output); });
	      }
	      else {
	          output.push(arg);
	      }
	  }
	  function createCachedLiteralArray(builder, values) {
	      if (values.length === 0) {
	          return importExpr(resolveIdentifier(Identifiers.EMPTY_ARRAY));
	      }
	      var proxyExpr = THIS_EXPR.prop("_arr_" + builder.fields.length);
	      var proxyParams = [];
	      var proxyReturnEntries = [];
	      for (var i = 0; i < values.length; i++) {
	          var paramName = "p" + i;
	          proxyParams.push(new FnParam(paramName));
	          proxyReturnEntries.push(variable(paramName));
	      }
	      createPureProxy(fn(proxyParams, [new ReturnStatement(literalArr(proxyReturnEntries))], new ArrayType(DYNAMIC_TYPE)), values.length, proxyExpr, builder);
	      return proxyExpr.callFn(values);
	  }
	  function createCachedLiteralMap(builder, entries) {
	      if (entries.length === 0) {
	          return importExpr(resolveIdentifier(Identifiers.EMPTY_MAP));
	      }
	      var proxyExpr = THIS_EXPR.prop("_map_" + builder.fields.length);
	      var proxyParams = [];
	      var proxyReturnEntries = [];
	      var values = [];
	      for (var i = 0; i < entries.length; i++) {
	          var paramName = "p" + i;
	          proxyParams.push(new FnParam(paramName));
	          proxyReturnEntries.push([entries[i][0], variable(paramName)]);
	          values.push(entries[i][1]);
	      }
	      createPureProxy(fn(proxyParams, [new ReturnStatement(literalMap(proxyReturnEntries))], new MapType(DYNAMIC_TYPE)), entries.length, proxyExpr, builder);
	      return proxyExpr.callFn(values);
	  }
	  var DefaultNameResolver = (function () {
	      function DefaultNameResolver() {
	      }
	      DefaultNameResolver.prototype.callPipe = function (name, input, args) { return null; };
	      DefaultNameResolver.prototype.getLocal = function (name) { return null; };
	      return DefaultNameResolver;
	  }());
	  function createCurrValueExpr(bindingId) {
	      return variable("currVal_" + bindingId); // fix syntax highlighting: `
	  }
	  function createPreventDefaultVar(bindingId) {
	      return variable("pd_" + bindingId);
	  }
	  function convertStmtIntoExpression(stmt) {
	      if (stmt instanceof ExpressionStatement) {
	          return stmt.expr;
	      }
	      else if (stmt instanceof ReturnStatement) {
	          return stmt.value;
	      }
	      return null;
	  }

	  function writeToRenderer(view, boundProp, renderElement, renderValue, logBindingUpdate, securityContextExpression) {
	      var updateStmts = [];
	      var renderer = view.prop('renderer');
	      renderValue = sanitizedValue(view, boundProp, renderValue, securityContextExpression);
	      switch (boundProp.type) {
	          case exports.PropertyBindingType.Property:
	              if (logBindingUpdate) {
	                  updateStmts.push(importExpr(resolveIdentifier(Identifiers.setBindingDebugInfo))
	                      .callFn([renderer, renderElement, literal(boundProp.name), renderValue])
	                      .toStmt());
	              }
	              updateStmts.push(renderer
	                  .callMethod('setElementProperty', [renderElement, literal(boundProp.name), renderValue])
	                  .toStmt());
	              break;
	          case exports.PropertyBindingType.Attribute:
	              renderValue =
	                  renderValue.isBlank().conditional(NULL_EXPR, renderValue.callMethod('toString', []));
	              updateStmts.push(renderer
	                  .callMethod('setElementAttribute', [renderElement, literal(boundProp.name), renderValue])
	                  .toStmt());
	              break;
	          case exports.PropertyBindingType.Class:
	              updateStmts.push(renderer
	                  .callMethod('setElementClass', [renderElement, literal(boundProp.name), renderValue])
	                  .toStmt());
	              break;
	          case exports.PropertyBindingType.Style:
	              var strValue = renderValue.callMethod('toString', []);
	              if (isPresent(boundProp.unit)) {
	                  strValue = strValue.plus(literal(boundProp.unit));
	              }
	              renderValue = renderValue.isBlank().conditional(NULL_EXPR, strValue);
	              updateStmts.push(renderer
	                  .callMethod('setElementStyle', [renderElement, literal(boundProp.name), renderValue])
	                  .toStmt());
	              break;
	          case exports.PropertyBindingType.Animation:
	              throw new Error('Illegal state: Should not come here!');
	      }
	      return updateStmts;
	  }
	  function sanitizedValue(view, boundProp, renderValue, securityContextExpression) {
	      if (boundProp.securityContext === _angular_core.SecurityContext.NONE) {
	          return renderValue; // No sanitization needed.
	      }
	      if (!boundProp.needsRuntimeSecurityContext) {
	          securityContextExpression =
	              createEnumExpression(Identifiers.SecurityContext, boundProp.securityContext);
	      }
	      if (!securityContextExpression) {
	          throw new Error("internal error, no SecurityContext given " + boundProp.name);
	      }
	      var ctx = view.prop('viewUtils').prop('sanitizer');
	      var args = [securityContextExpression, renderValue];
	      return ctx.callMethod('sanitize', args);
	  }
	  function triggerAnimation(view, componentView, boundProp, eventListener, renderElement, renderValue, lastRenderValue) {
	      var detachStmts = [];
	      var updateStmts = [];
	      var animationName = boundProp.name;
	      var animationFnExpr = componentView.prop('componentType').prop('animations').key(literal(animationName));
	      // it's important to normalize the void value as `void` explicitly
	      // so that the styles data can be obtained from the stringmap
	      var emptyStateValue = literal(EMPTY_ANIMATION_STATE);
	      var unitializedValue = importExpr(resolveIdentifier(Identifiers.UNINITIALIZED));
	      var animationTransitionVar = variable('animationTransition_' + animationName);
	      updateStmts.push(animationTransitionVar
	          .set(animationFnExpr.callFn([
	          view, renderElement,
	          lastRenderValue.equals(unitializedValue).conditional(emptyStateValue, lastRenderValue),
	          renderValue.equals(unitializedValue).conditional(emptyStateValue, renderValue)
	      ]))
	          .toDeclStmt());
	      detachStmts.push(animationTransitionVar
	          .set(animationFnExpr.callFn([view, renderElement, lastRenderValue, emptyStateValue]))
	          .toDeclStmt());
	      var registerStmts = [
	          animationTransitionVar
	              .callMethod('onStart', [eventListener.callMethod(BuiltinMethod.Bind, [view, literal(BoundEventAst.calcFullName(animationName, null, 'start'))])])
	              .toStmt(),
	          animationTransitionVar
	              .callMethod('onDone', [eventListener.callMethod(BuiltinMethod.Bind, [view, literal(BoundEventAst.calcFullName(animationName, null, 'done'))])])
	              .toStmt(),
	      ];
	      updateStmts.push.apply(updateStmts, registerStmts);
	      detachStmts.push.apply(detachStmts, registerStmts);
	      return { updateStmts: updateStmts, detachStmts: detachStmts };
	  }

	  /**
	   * Create a new class stmts based on the given data.
	   */
	  function createClassStmt(config) {
	      var parentArgs = config.parentArgs || [];
	      var superCtorStmts = config.parent ? [SUPER_EXPR.callFn(parentArgs).toStmt()] : [];
	      var builder = concatClassBuilderParts(Array.isArray(config.builders) ? config.builders : [config.builders]);
	      var ctor = new ClassMethod(null, config.ctorParams || [], superCtorStmts.concat(builder.ctorStmts));
	      return new ClassStmt(config.name, config.parent, builder.fields, builder.getters, ctor, builder.methods, config.modifiers || []);
	  }
	  function concatClassBuilderParts(builders) {
	      return {
	          fields: (_a = []).concat.apply(_a, builders.map(function (builder) { return builder.fields || []; })),
	          methods: (_b = []).concat.apply(_b, builders.map(function (builder) { return builder.methods || []; })),
	          getters: (_c = []).concat.apply(_c, builders.map(function (builder) { return builder.getters || []; })),
	          ctorStmts: (_d = []).concat.apply(_d, builders.map(function (builder) { return builder.ctorStmts || []; })),
	      };
	      var _a, _b, _c, _d;
	  }

	  var DirectiveWrapperCompileResult = (function () {
	      function DirectiveWrapperCompileResult(statements, dirWrapperClassVar) {
	          this.statements = statements;
	          this.dirWrapperClassVar = dirWrapperClassVar;
	      }
	      return DirectiveWrapperCompileResult;
	  }());
	  var CONTEXT_FIELD_NAME = 'context';
	  var CHANGES_FIELD_NAME = '_changes';
	  var CHANGED_FIELD_NAME = '_changed';
	  var EVENT_HANDLER_FIELD_NAME = '_eventHandler';
	  var CURR_VALUE_VAR = variable('currValue');
	  var THROW_ON_CHANGE_VAR = variable('throwOnChange');
	  var FORCE_UPDATE_VAR = variable('forceUpdate');
	  var VIEW_VAR = variable('view');
	  var COMPONENT_VIEW_VAR = variable('componentView');
	  var RENDER_EL_VAR = variable('el');
	  var EVENT_NAME_VAR = variable('eventName');
	  var RESET_CHANGES_STMT = THIS_EXPR.prop(CHANGES_FIELD_NAME).set(literalMap([])).toStmt();
	  /**
	   * We generate directive wrappers to prevent code bloat when a directive is used.
	   * A directive wrapper encapsulates
	   * the dirty checking for `@Input`, the handling of `@HostListener` / `@HostBinding`
	   * and calling the lifecyclehooks `ngOnInit`, `ngOnChanges`, `ngDoCheck`.
	   *
	   * So far, only `@Input` and the lifecycle hooks have been implemented.
	   */
	  var DirectiveWrapperCompiler = (function () {
	      function DirectiveWrapperCompiler(compilerConfig, _exprParser, _schemaRegistry, _console) {
	          this.compilerConfig = compilerConfig;
	          this._exprParser = _exprParser;
	          this._schemaRegistry = _schemaRegistry;
	          this._console = _console;
	      }
	      DirectiveWrapperCompiler.dirWrapperClassName = function (id) { return "Wrapper_" + id.name; };
	      DirectiveWrapperCompiler.prototype.compile = function (dirMeta) {
	          var hostParseResult = parseHostBindings(dirMeta, this._exprParser, this._schemaRegistry);
	          reportParseErrors(hostParseResult.errors, this._console);
	          var builder = new DirectiveWrapperBuilder(this.compilerConfig, dirMeta);
	          Object.keys(dirMeta.inputs).forEach(function (inputFieldName) {
	              addCheckInputMethod(inputFieldName, builder);
	          });
	          addNgDoCheckMethod(builder);
	          addCheckHostMethod(hostParseResult.hostProps, builder);
	          addHandleEventMethod(hostParseResult.hostListeners, builder);
	          addSubscribeMethod(dirMeta, builder);
	          var classStmt = builder.build();
	          return new DirectiveWrapperCompileResult([classStmt], classStmt.name);
	      };
	      DirectiveWrapperCompiler.decorators = [
	          { type: _angular_core.Injectable },
	      ];
	      /** @nocollapse */
	      DirectiveWrapperCompiler.ctorParameters = [
	          { type: CompilerConfig, },
	          { type: Parser, },
	          { type: ElementSchemaRegistry, },
	          { type: Console, },
	      ];
	      return DirectiveWrapperCompiler;
	  }());
	  var DirectiveWrapperBuilder = (function () {
	      function DirectiveWrapperBuilder(compilerConfig, dirMeta) {
	          this.compilerConfig = compilerConfig;
	          this.dirMeta = dirMeta;
	          this.fields = [];
	          this.getters = [];
	          this.methods = [];
	          this.ctorStmts = [];
	          this.detachStmts = [];
	          this.destroyStmts = [];
	          var dirLifecycleHooks = dirMeta.type.lifecycleHooks;
	          this.genChanges = dirLifecycleHooks.indexOf(LifecycleHooks.OnChanges) !== -1 ||
	              this.compilerConfig.logBindingUpdate;
	          this.ngOnChanges = dirLifecycleHooks.indexOf(LifecycleHooks.OnChanges) !== -1;
	          this.ngOnInit = dirLifecycleHooks.indexOf(LifecycleHooks.OnInit) !== -1;
	          this.ngDoCheck = dirLifecycleHooks.indexOf(LifecycleHooks.DoCheck) !== -1;
	          this.ngOnDestroy = dirLifecycleHooks.indexOf(LifecycleHooks.OnDestroy) !== -1;
	          if (this.ngOnDestroy) {
	              this.destroyStmts.push(THIS_EXPR.prop(CONTEXT_FIELD_NAME).callMethod('ngOnDestroy', []).toStmt());
	          }
	      }
	      DirectiveWrapperBuilder.prototype.build = function () {
	          var dirDepParamNames = [];
	          for (var i = 0; i < this.dirMeta.type.diDeps.length; i++) {
	              dirDepParamNames.push("p" + i);
	          }
	          var methods = [
	              new ClassMethod('ngOnDetach', [
	                  new FnParam(VIEW_VAR.name, importType(resolveIdentifier(Identifiers.AppView), [DYNAMIC_TYPE])),
	                  new FnParam(COMPONENT_VIEW_VAR.name, importType(resolveIdentifier(Identifiers.AppView), [DYNAMIC_TYPE])),
	                  new FnParam(RENDER_EL_VAR.name, DYNAMIC_TYPE),
	              ], this.detachStmts),
	              new ClassMethod('ngOnDestroy', [], this.destroyStmts),
	          ];
	          var fields = [
	              new ClassField(EVENT_HANDLER_FIELD_NAME, FUNCTION_TYPE, [StmtModifier.Private]),
	              new ClassField(CONTEXT_FIELD_NAME, importType(this.dirMeta.type)),
	              new ClassField(CHANGED_FIELD_NAME, BOOL_TYPE, [StmtModifier.Private]),
	          ];
	          var ctorStmts = [THIS_EXPR.prop(CHANGED_FIELD_NAME).set(literal(false)).toStmt()];
	          if (this.genChanges) {
	              fields.push(new ClassField(CHANGES_FIELD_NAME, new MapType(DYNAMIC_TYPE), [StmtModifier.Private]));
	              ctorStmts.push(RESET_CHANGES_STMT);
	          }
	          ctorStmts.push(THIS_EXPR.prop(CONTEXT_FIELD_NAME)
	              .set(importExpr(this.dirMeta.type)
	              .instantiate(dirDepParamNames.map(function (paramName) { return variable(paramName); })))
	              .toStmt());
	          return createClassStmt({
	              name: DirectiveWrapperCompiler.dirWrapperClassName(this.dirMeta.type),
	              ctorParams: dirDepParamNames.map(function (paramName) { return new FnParam(paramName, DYNAMIC_TYPE); }),
	              builders: [{ fields: fields, ctorStmts: ctorStmts, methods: methods }, this]
	          });
	      };
	      return DirectiveWrapperBuilder;
	  }());
	  function addNgDoCheckMethod(builder) {
	      var changedVar = variable('changed');
	      var stmts = [
	          changedVar.set(THIS_EXPR.prop(CHANGED_FIELD_NAME)).toDeclStmt(),
	          THIS_EXPR.prop(CHANGED_FIELD_NAME).set(literal(false)).toStmt(),
	      ];
	      var lifecycleStmts = [];
	      if (builder.genChanges) {
	          var onChangesStmts = [];
	          if (builder.ngOnChanges) {
	              onChangesStmts.push(THIS_EXPR.prop(CONTEXT_FIELD_NAME)
	                  .callMethod('ngOnChanges', [THIS_EXPR.prop(CHANGES_FIELD_NAME)])
	                  .toStmt());
	          }
	          if (builder.compilerConfig.logBindingUpdate) {
	              onChangesStmts.push(importExpr(resolveIdentifier(Identifiers.setBindingDebugInfoForChanges))
	                  .callFn([VIEW_VAR.prop('renderer'), RENDER_EL_VAR, THIS_EXPR.prop(CHANGES_FIELD_NAME)])
	                  .toStmt());
	          }
	          onChangesStmts.push(RESET_CHANGES_STMT);
	          lifecycleStmts.push(new IfStmt(changedVar, onChangesStmts));
	      }
	      if (builder.ngOnInit) {
	          lifecycleStmts.push(new IfStmt(VIEW_VAR.prop('numberOfChecks').identical(new LiteralExpr(0)), [THIS_EXPR.prop(CONTEXT_FIELD_NAME).callMethod('ngOnInit', []).toStmt()]));
	      }
	      if (builder.ngDoCheck) {
	          lifecycleStmts.push(THIS_EXPR.prop(CONTEXT_FIELD_NAME).callMethod('ngDoCheck', []).toStmt());
	      }
	      if (lifecycleStmts.length > 0) {
	          stmts.push(new IfStmt(not(THROW_ON_CHANGE_VAR), lifecycleStmts));
	      }
	      stmts.push(new ReturnStatement(changedVar));
	      builder.methods.push(new ClassMethod('ngDoCheck', [
	          new FnParam(VIEW_VAR.name, importType(resolveIdentifier(Identifiers.AppView), [DYNAMIC_TYPE])),
	          new FnParam(RENDER_EL_VAR.name, DYNAMIC_TYPE),
	          new FnParam(THROW_ON_CHANGE_VAR.name, BOOL_TYPE),
	      ], stmts, BOOL_TYPE));
	  }
	  function addCheckInputMethod(input, builder) {
	      var field = createCheckBindingField(builder);
	      var onChangeStatements = [
	          THIS_EXPR.prop(CHANGED_FIELD_NAME).set(literal(true)).toStmt(),
	          THIS_EXPR.prop(CONTEXT_FIELD_NAME).prop(input).set(CURR_VALUE_VAR).toStmt(),
	      ];
	      if (builder.genChanges) {
	          onChangeStatements.push(THIS_EXPR.prop(CHANGES_FIELD_NAME)
	              .key(literal(input))
	              .set(importExpr(resolveIdentifier(Identifiers.SimpleChange))
	              .instantiate([field.expression, CURR_VALUE_VAR]))
	              .toStmt());
	      }
	      var methodBody = createCheckBindingStmt({ currValExpr: CURR_VALUE_VAR, forceUpdate: FORCE_UPDATE_VAR, stmts: [] }, field.expression, THROW_ON_CHANGE_VAR, onChangeStatements);
	      builder.methods.push(new ClassMethod("check_" + input, [
	          new FnParam(CURR_VALUE_VAR.name, DYNAMIC_TYPE),
	          new FnParam(THROW_ON_CHANGE_VAR.name, BOOL_TYPE),
	          new FnParam(FORCE_UPDATE_VAR.name, BOOL_TYPE),
	      ], methodBody));
	  }
	  function addCheckHostMethod(hostProps, builder) {
	      var stmts = [];
	      var methodParams = [
	          new FnParam(VIEW_VAR.name, importType(resolveIdentifier(Identifiers.AppView), [DYNAMIC_TYPE])),
	          new FnParam(COMPONENT_VIEW_VAR.name, importType(resolveIdentifier(Identifiers.AppView), [DYNAMIC_TYPE])),
	          new FnParam(RENDER_EL_VAR.name, DYNAMIC_TYPE),
	          new FnParam(THROW_ON_CHANGE_VAR.name, BOOL_TYPE),
	      ];
	      hostProps.forEach(function (hostProp, hostPropIdx) {
	          var field = createCheckBindingField(builder);
	          var evalResult = convertPropertyBinding(builder, null, THIS_EXPR.prop(CONTEXT_FIELD_NAME), hostProp.value, field.bindingId);
	          if (!evalResult) {
	              return;
	          }
	          var securityContextExpr;
	          if (hostProp.needsRuntimeSecurityContext) {
	              securityContextExpr = variable("secCtx_" + methodParams.length);
	              methodParams.push(new FnParam(securityContextExpr.name, importType(resolveIdentifier(Identifiers.SecurityContext))));
	          }
	          var checkBindingStmts;
	          if (hostProp.isAnimation) {
	              var _a = triggerAnimation(VIEW_VAR, COMPONENT_VIEW_VAR, hostProp, THIS_EXPR.prop(EVENT_HANDLER_FIELD_NAME)
	                  .or(importExpr(resolveIdentifier(Identifiers.noop))), RENDER_EL_VAR, evalResult.currValExpr, field.expression), updateStmts = _a.updateStmts, detachStmts = _a.detachStmts;
	              checkBindingStmts = updateStmts;
	              (_b = builder.detachStmts).push.apply(_b, detachStmts);
	          }
	          else {
	              checkBindingStmts = writeToRenderer(VIEW_VAR, hostProp, RENDER_EL_VAR, evalResult.currValExpr, builder.compilerConfig.logBindingUpdate, securityContextExpr);
	          }
	          stmts.push.apply(stmts, createCheckBindingStmt(evalResult, field.expression, THROW_ON_CHANGE_VAR, checkBindingStmts));
	          var _b;
	      });
	      builder.methods.push(new ClassMethod('checkHost', methodParams, stmts));
	  }
	  function addHandleEventMethod(hostListeners, builder) {
	      var resultVar = variable("result");
	      var actionStmts = [resultVar.set(literal(true)).toDeclStmt(BOOL_TYPE)];
	      hostListeners.forEach(function (hostListener, eventIdx) {
	          var evalResult = convertActionBinding(builder, null, THIS_EXPR.prop(CONTEXT_FIELD_NAME), hostListener.handler, "sub_" + eventIdx);
	          var trueStmts = evalResult.stmts;
	          if (evalResult.preventDefault) {
	              trueStmts.push(resultVar.set(evalResult.preventDefault.and(resultVar)).toStmt());
	          }
	          // TODO(tbosch): convert this into a `switch` once our OutputAst supports it.
	          actionStmts.push(new IfStmt(EVENT_NAME_VAR.equals(literal(hostListener.fullName)), trueStmts));
	      });
	      actionStmts.push(new ReturnStatement(resultVar));
	      builder.methods.push(new ClassMethod('handleEvent', [
	          new FnParam(EVENT_NAME_VAR.name, STRING_TYPE),
	          new FnParam(EventHandlerVars.event.name, DYNAMIC_TYPE)
	      ], actionStmts, BOOL_TYPE));
	  }
	  function addSubscribeMethod(dirMeta, builder) {
	      var methodParams = [
	          new FnParam(VIEW_VAR.name, importType(resolveIdentifier(Identifiers.AppView), [DYNAMIC_TYPE])),
	          new FnParam(EVENT_HANDLER_FIELD_NAME, DYNAMIC_TYPE)
	      ];
	      var stmts = [
	          THIS_EXPR.prop(EVENT_HANDLER_FIELD_NAME).set(variable(EVENT_HANDLER_FIELD_NAME)).toStmt()
	      ];
	      Object.keys(dirMeta.outputs).forEach(function (emitterPropName, emitterIdx) {
	          var eventName = dirMeta.outputs[emitterPropName];
	          var paramName = "emit" + emitterIdx;
	          methodParams.push(new FnParam(paramName, BOOL_TYPE));
	          var subscriptionFieldName = "subscription" + emitterIdx;
	          builder.fields.push(new ClassField(subscriptionFieldName, DYNAMIC_TYPE));
	          stmts.push(new IfStmt(variable(paramName), [
	              THIS_EXPR.prop(subscriptionFieldName)
	                  .set(THIS_EXPR.prop(CONTEXT_FIELD_NAME)
	                  .prop(emitterPropName)
	                  .callMethod(BuiltinMethod.SubscribeObservable, [variable(EVENT_HANDLER_FIELD_NAME)
	                      .callMethod(BuiltinMethod.Bind, [VIEW_VAR, literal(eventName)])]))
	                  .toStmt()
	          ]));
	          builder.destroyStmts.push(THIS_EXPR.prop(subscriptionFieldName)
	              .and(THIS_EXPR.prop(subscriptionFieldName).callMethod('unsubscribe', []))
	              .toStmt());
	      });
	      builder.methods.push(new ClassMethod('subscribe', methodParams, stmts));
	  }
	  var ParseResult = (function () {
	      function ParseResult(hostProps, hostListeners, errors) {
	          this.hostProps = hostProps;
	          this.hostListeners = hostListeners;
	          this.errors = errors;
	      }
	      return ParseResult;
	  }());
	  function parseHostBindings(dirMeta, exprParser, schemaRegistry) {
	      var errors = [];
	      var parser = new BindingParser(exprParser, DEFAULT_INTERPOLATION_CONFIG, schemaRegistry, [], errors);
	      var sourceFileName = dirMeta.type.moduleUrl ?
	          "in Directive " + dirMeta.type.name + " in " + dirMeta.type.moduleUrl :
	          "in Directive " + dirMeta.type.name;
	      var sourceFile = new ParseSourceFile('', sourceFileName);
	      var sourceSpan = new ParseSourceSpan(new ParseLocation(sourceFile, null, null, null), new ParseLocation(sourceFile, null, null, null));
	      var parsedHostProps = parser.createDirectiveHostPropertyAsts(dirMeta.toSummary(), sourceSpan);
	      var parsedHostListeners = parser.createDirectiveHostEventAsts(dirMeta.toSummary(), sourceSpan);
	      return new ParseResult(parsedHostProps, parsedHostListeners, errors);
	  }
	  function reportParseErrors(parseErrors, console) {
	      var warnings = parseErrors.filter(function (error) { return error.level === exports.ParseErrorLevel.WARNING; });
	      var errors = parseErrors.filter(function (error) { return error.level === exports.ParseErrorLevel.FATAL; });
	      if (warnings.length > 0) {
	          this._console.warn("Directive parse warnings:\n" + warnings.join('\n'));
	      }
	      if (errors.length > 0) {
	          throw new Error("Directive parse errors:\n" + errors.join('\n'));
	      }
	  }
	  var DirectiveWrapperExpressions = (function () {
	      function DirectiveWrapperExpressions() {
	      }
	      DirectiveWrapperExpressions.create = function (dir, depsExpr) {
	          return importExpr(dir).instantiate(depsExpr, importType(dir));
	      };
	      DirectiveWrapperExpressions.context = function (dirWrapper) {
	          return dirWrapper.prop(CONTEXT_FIELD_NAME);
	      };
	      DirectiveWrapperExpressions.ngDoCheck = function (dirWrapper, view, renderElement, throwOnChange) {
	          return dirWrapper.callMethod('ngDoCheck', [view, renderElement, throwOnChange]);
	      };
	      DirectiveWrapperExpressions.checkHost = function (hostProps, dirWrapper, view, componentView, renderElement, throwOnChange, runtimeSecurityContexts) {
	          if (hostProps.length) {
	              return [dirWrapper
	                      .callMethod('checkHost', [view, componentView, renderElement, throwOnChange].concat(runtimeSecurityContexts))
	                      .toStmt()];
	          }
	          else {
	              return [];
	          }
	      };
	      DirectiveWrapperExpressions.ngOnDetach = function (hostProps, dirWrapper, view, componentView, renderEl) {
	          if (hostProps.some(function (prop) { return prop.isAnimation; })) {
	              return [dirWrapper
	                      .callMethod('ngOnDetach', [
	                      view,
	                      componentView,
	                      renderEl,
	                  ])
	                      .toStmt()];
	          }
	          else {
	              return [];
	          }
	      };
	      DirectiveWrapperExpressions.ngOnDestroy = function (dir, dirWrapper) {
	          if (dir.type.lifecycleHooks.indexOf(LifecycleHooks.OnDestroy) !== -1 ||
	              Object.keys(dir.outputs).length > 0) {
	              return [dirWrapper.callMethod('ngOnDestroy', []).toStmt()];
	          }
	          else {
	              return [];
	          }
	      };
	      DirectiveWrapperExpressions.subscribe = function (dirMeta, hostProps, usedEvents, dirWrapper, view, eventListener) {
	          var needsSubscribe = false;
	          var eventFlags = [];
	          Object.keys(dirMeta.outputs).forEach(function (propName) {
	              var eventName = dirMeta.outputs[propName];
	              var eventUsed = usedEvents.indexOf(eventName) > -1;
	              needsSubscribe = needsSubscribe || eventUsed;
	              eventFlags.push(literal(eventUsed));
	          });
	          hostProps.forEach(function (hostProp) {
	              if (hostProp.isAnimation && usedEvents.length > 0) {
	                  needsSubscribe = true;
	              }
	          });
	          if (needsSubscribe) {
	              return [
	                  dirWrapper.callMethod('subscribe', [view, eventListener].concat(eventFlags)).toStmt()
	              ];
	          }
	          else {
	              return [];
	          }
	      };
	      DirectiveWrapperExpressions.handleEvent = function (hostEvents, dirWrapper, eventName, event) {
	          return dirWrapper.callMethod('handleEvent', [eventName, event]);
	      };
	      return DirectiveWrapperExpressions;
	  }());

	  function convertValueToOutputAst(value, type) {
	      if (type === void 0) { type = null; }
	      return visitValue(value, new _ValueOutputAstTransformer(), type);
	  }
	  var _ValueOutputAstTransformer = (function () {
	      function _ValueOutputAstTransformer() {
	      }
	      _ValueOutputAstTransformer.prototype.visitArray = function (arr, type) {
	          var _this = this;
	          return literalArr(arr.map(function (value) { return visitValue(value, _this, null); }), type);
	      };
	      _ValueOutputAstTransformer.prototype.visitStringMap = function (map, type) {
	          var _this = this;
	          var entries = [];
	          Object.keys(map).forEach(function (key) { entries.push([key, visitValue(map[key], _this, null)]); });
	          return literalMap(entries, type);
	      };
	      _ValueOutputAstTransformer.prototype.visitPrimitive = function (value, type) { return literal(value, type); };
	      _ValueOutputAstTransformer.prototype.visitOther = function (value, type) {
	          if (value instanceof CompileIdentifierMetadata) {
	              return importExpr(value);
	          }
	          else if (value instanceof Expression) {
	              return value;
	          }
	          else {
	              throw new Error("Illegal state: Don't now how to compile value " + value);
	          }
	      };
	      return _ValueOutputAstTransformer;
	  }());

	  var _DebugState = (function () {
	      function _DebugState(nodeIndex, sourceAst) {
	          this.nodeIndex = nodeIndex;
	          this.sourceAst = sourceAst;
	      }
	      return _DebugState;
	  }());
	  var NULL_DEBUG_STATE = new _DebugState(null, null);
	  var CompileMethod = (function () {
	      function CompileMethod(_view) {
	          this._view = _view;
	          this._newState = NULL_DEBUG_STATE;
	          this._currState = NULL_DEBUG_STATE;
	          this._bodyStatements = [];
	          this._debugEnabled = this._view.genConfig.genDebugInfo;
	      }
	      CompileMethod.prototype._updateDebugContextIfNeeded = function () {
	          if (this._newState.nodeIndex !== this._currState.nodeIndex ||
	              this._newState.sourceAst !== this._currState.sourceAst) {
	              var expr = this._updateDebugContext(this._newState);
	              if (isPresent(expr)) {
	                  this._bodyStatements.push(expr.toStmt());
	              }
	          }
	      };
	      CompileMethod.prototype._updateDebugContext = function (newState) {
	          this._currState = this._newState = newState;
	          if (this._debugEnabled) {
	              var sourceLocation = isPresent(newState.sourceAst) ? newState.sourceAst.sourceSpan.start : null;
	              return THIS_EXPR.callMethod('debug', [
	                  literal(newState.nodeIndex),
	                  isPresent(sourceLocation) ? literal(sourceLocation.line) : NULL_EXPR,
	                  isPresent(sourceLocation) ? literal(sourceLocation.col) : NULL_EXPR
	              ]);
	          }
	          else {
	              return null;
	          }
	      };
	      CompileMethod.prototype.resetDebugInfoExpr = function (nodeIndex, templateAst) {
	          var res = this._updateDebugContext(new _DebugState(nodeIndex, templateAst));
	          return res || NULL_EXPR;
	      };
	      CompileMethod.prototype.resetDebugInfo = function (nodeIndex, templateAst) {
	          this._newState = new _DebugState(nodeIndex, templateAst);
	      };
	      CompileMethod.prototype.push = function () {
	          var stmts = [];
	          for (var _i = 0; _i < arguments.length; _i++) {
	              stmts[_i - 0] = arguments[_i];
	          }
	          this.addStmts(stmts);
	      };
	      CompileMethod.prototype.addStmt = function (stmt) {
	          this._updateDebugContextIfNeeded();
	          this._bodyStatements.push(stmt);
	      };
	      CompileMethod.prototype.addStmts = function (stmts) {
	          this._updateDebugContextIfNeeded();
	          (_a = this._bodyStatements).push.apply(_a, stmts);
	          var _a;
	      };
	      CompileMethod.prototype.finish = function () { return this._bodyStatements; };
	      CompileMethod.prototype.isEmpty = function () { return this._bodyStatements.length === 0; };
	      return CompileMethod;
	  }());

	  /**
	   * @license
	   * Copyright Google Inc. All Rights Reserved.
	   *
	   * Use of this source code is governed by an MIT-style license that can be
	   * found in the LICENSE file at https://angular.io/license
	   */
	  var __extends$15 = (this && this.__extends) || function (d, b) {
	      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	      function __() { this.constructor = d; }
	      d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	  };
	  function getPropertyInView(property, callingView, definedView) {
	      if (callingView === definedView) {
	          return property;
	      }
	      else {
	          var viewProp = THIS_EXPR;
	          var currView = callingView;
	          while (currView !== definedView && isPresent(currView.declarationElement.view)) {
	              currView = currView.declarationElement.view;
	              viewProp = viewProp.prop('parentView');
	          }
	          if (currView !== definedView) {
	              throw new Error("Internal error: Could not calculate a property in a parent view: " + property);
	          }
	          return property.visitExpression(new _ReplaceViewTransformer(viewProp, definedView), null);
	      }
	  }
	  var _ReplaceViewTransformer = (function (_super) {
	      __extends$15(_ReplaceViewTransformer, _super);
	      function _ReplaceViewTransformer(_viewExpr, _view) {
	          _super.call(this);
	          this._viewExpr = _viewExpr;
	          this._view = _view;
	      }
	      _ReplaceViewTransformer.prototype._isThis = function (expr) {
	          return expr instanceof ReadVarExpr && expr.builtin === BuiltinVar.This;
	      };
	      _ReplaceViewTransformer.prototype.visitReadVarExpr = function (ast, context) {
	          return this._isThis(ast) ? this._viewExpr : ast;
	      };
	      _ReplaceViewTransformer.prototype.visitReadPropExpr = function (ast, context) {
	          if (this._isThis(ast.receiver)) {
	              // Note: Don't cast for members of the AppView base class...
	              if (this._view.fields.some(function (field) { return field.name == ast.name; }) ||
	                  this._view.getters.some(function (field) { return field.name == ast.name; })) {
	                  return this._viewExpr.cast(this._view.classType).prop(ast.name);
	              }
	          }
	          return _super.prototype.visitReadPropExpr.call(this, ast, context);
	      };
	      return _ReplaceViewTransformer;
	  }(ExpressionTransformer));
	  function injectFromViewParentInjector(view, token, optional) {
	      var viewExpr;
	      if (view.viewType === ViewType.HOST) {
	          viewExpr = THIS_EXPR;
	      }
	      else {
	          viewExpr = THIS_EXPR.prop('parentView');
	      }
	      var args = [createDiTokenExpression(token), THIS_EXPR.prop('parentIndex')];
	      if (optional) {
	          args.push(NULL_EXPR);
	      }
	      return viewExpr.callMethod('injectorGet', args);
	  }
	  function getViewClassName(component, embeddedTemplateIndex) {
	      return "View_" + component.type.name + embeddedTemplateIndex;
	  }
	  function getHandleEventMethodName(elementIndex) {
	      return "handleEvent_" + elementIndex;
	  }

	  var ViewQueryValues = (function () {
	      function ViewQueryValues(view, values) {
	          this.view = view;
	          this.values = values;
	      }
	      return ViewQueryValues;
	  }());
	  var CompileQuery = (function () {
	      function CompileQuery(meta, queryList, ownerDirectiveExpression, view) {
	          this.meta = meta;
	          this.queryList = queryList;
	          this.ownerDirectiveExpression = ownerDirectiveExpression;
	          this.view = view;
	          this._values = new ViewQueryValues(view, []);
	      }
	      CompileQuery.prototype.addValue = function (value, view) {
	          var currentView = view;
	          var elPath = [];
	          while (isPresent(currentView) && currentView !== this.view) {
	              var parentEl = currentView.declarationElement;
	              elPath.unshift(parentEl);
	              currentView = parentEl.view;
	          }
	          var queryListForDirtyExpr = getPropertyInView(this.queryList, view, this.view);
	          var viewValues = this._values;
	          elPath.forEach(function (el) {
	              var last = viewValues.values.length > 0 ? viewValues.values[viewValues.values.length - 1] : null;
	              if (last instanceof ViewQueryValues && last.view === el.embeddedView) {
	                  viewValues = last;
	              }
	              else {
	                  var newViewValues = new ViewQueryValues(el.embeddedView, []);
	                  viewValues.values.push(newViewValues);
	                  viewValues = newViewValues;
	              }
	          });
	          viewValues.values.push(value);
	          if (elPath.length > 0) {
	              view.dirtyParentQueriesMethod.addStmt(queryListForDirtyExpr.callMethod('setDirty', []).toStmt());
	          }
	      };
	      CompileQuery.prototype._isStatic = function () {
	          return !this._values.values.some(function (value) { return value instanceof ViewQueryValues; });
	      };
	      CompileQuery.prototype.afterChildren = function (targetStaticMethod, targetDynamicMethod) {
	          var values = createQueryValues(this._values);
	          var updateStmts = [this.queryList.callMethod('reset', [literalArr(values)]).toStmt()];
	          if (isPresent(this.ownerDirectiveExpression)) {
	              var valueExpr = this.meta.first ? this.queryList.prop('first') : this.queryList;
	              updateStmts.push(this.ownerDirectiveExpression.prop(this.meta.propertyName).set(valueExpr).toStmt());
	          }
	          if (!this.meta.first) {
	              updateStmts.push(this.queryList.callMethod('notifyOnChanges', []).toStmt());
	          }
	          if (this.meta.first && this._isStatic()) {
	              // for queries that don't change and the user asked for a single element,
	              // set it immediately. That is e.g. needed for querying for ViewContainerRefs, ...
	              // we don't do this for QueryLists for now as this would break the timing when
	              // we call QueryList listeners...
	              targetStaticMethod.addStmts(updateStmts);
	          }
	          else {
	              targetDynamicMethod.addStmt(new IfStmt(this.queryList.prop('dirty'), updateStmts));
	          }
	      };
	      return CompileQuery;
	  }());
	  function createQueryValues(viewValues) {
	      return ListWrapper.flatten(viewValues.values.map(function (entry) {
	          if (entry instanceof ViewQueryValues) {
	              return mapNestedViews(entry.view.declarationElement.viewContainer, entry.view, createQueryValues(entry));
	          }
	          else {
	              return entry;
	          }
	      }));
	  }
	  function mapNestedViews(viewContainer, view, expressions) {
	      var adjustedExpressions = expressions.map(function (expr) { return replaceVarInExpression(THIS_EXPR.name, variable('nestedView'), expr); });
	      return viewContainer.callMethod('mapNestedViews', [
	          variable(view.className),
	          fn([new FnParam('nestedView', view.classType)], [new ReturnStatement(literalArr(adjustedExpressions))], DYNAMIC_TYPE)
	      ]);
	  }
	  function createQueryList(query, directiveInstance, propertyName, compileView) {
	      compileView.fields.push(new ClassField(propertyName, importType(resolveIdentifier(Identifiers.QueryList), [DYNAMIC_TYPE])));
	      var expr = THIS_EXPR.prop(propertyName);
	      compileView.createMethod.addStmt(THIS_EXPR.prop(propertyName)
	          .set(importExpr(resolveIdentifier(Identifiers.QueryList), [DYNAMIC_TYPE])
	          .instantiate([]))
	          .toStmt());
	      return expr;
	  }
	  function addQueryToTokenMap(map, query) {
	      query.meta.selectors.forEach(function (selector) {
	          var entry = map.get(selector.reference);
	          if (!entry) {
	              entry = [];
	              map.set(selector.reference, entry);
	          }
	          entry.push(query);
	      });
	  }

	  var ViewTypeEnum = (function () {
	      function ViewTypeEnum() {
	      }
	      ViewTypeEnum.fromValue = function (value) {
	          return createEnumExpression(Identifiers.ViewType, value);
	      };
	      return ViewTypeEnum;
	  }());
	  var ViewEncapsulationEnum = (function () {
	      function ViewEncapsulationEnum() {
	      }
	      ViewEncapsulationEnum.fromValue = function (value) {
	          return createEnumExpression(Identifiers.ViewEncapsulation, value);
	      };
	      return ViewEncapsulationEnum;
	  }());
	  var ChangeDetectorStatusEnum = (function () {
	      function ChangeDetectorStatusEnum() {
	      }
	      ChangeDetectorStatusEnum.fromValue = function (value) {
	          return createEnumExpression(Identifiers.ChangeDetectorStatus, value);
	      };
	      return ChangeDetectorStatusEnum;
	  }());
	  var ViewConstructorVars = (function () {
	      function ViewConstructorVars() {
	      }
	      ViewConstructorVars.viewUtils = variable('viewUtils');
	      ViewConstructorVars.parentView = variable('parentView');
	      ViewConstructorVars.parentIndex = variable('parentIndex');
	      ViewConstructorVars.parentElement = variable('parentElement');
	      return ViewConstructorVars;
	  }());
	  var ViewProperties = (function () {
	      function ViewProperties() {
	      }
	      ViewProperties.renderer = THIS_EXPR.prop('renderer');
	      ViewProperties.viewUtils = THIS_EXPR.prop('viewUtils');
	      return ViewProperties;
	  }());
	  var InjectMethodVars = (function () {
	      function InjectMethodVars() {
	      }
	      InjectMethodVars.token = variable('token');
	      InjectMethodVars.requestNodeIndex = variable('requestNodeIndex');
	      InjectMethodVars.notFoundResult = variable('notFoundResult');
	      return InjectMethodVars;
	  }());
	  var DetectChangesVars = (function () {
	      function DetectChangesVars() {
	      }
	      DetectChangesVars.throwOnChange = variable("throwOnChange");
	      DetectChangesVars.changes = variable("changes");
	      DetectChangesVars.changed = variable("changed");
	      return DetectChangesVars;
	  }());

	  /**
	   * @license
	   * Copyright Google Inc. All Rights Reserved.
	   *
	   * Use of this source code is governed by an MIT-style license that can be
	   * found in the LICENSE file at https://angular.io/license
	   */
	  var ViewClassDependency = (function () {
	      function ViewClassDependency(comp, placeholder) {
	          this.comp = comp;
	          this.placeholder = placeholder;
	      }
	      return ViewClassDependency;
	  }());
	  var ComponentFactoryDependency = (function () {
	      function ComponentFactoryDependency(comp, placeholder) {
	          this.comp = comp;
	          this.placeholder = placeholder;
	      }
	      return ComponentFactoryDependency;
	  }());
	  var DirectiveWrapperDependency = (function () {
	      function DirectiveWrapperDependency(dir, placeholder) {
	          this.dir = dir;
	          this.placeholder = placeholder;
	      }
	      return DirectiveWrapperDependency;
	  }());

	  /**
	   * @license
	   * Copyright Google Inc. All Rights Reserved.
	   *
	   * Use of this source code is governed by an MIT-style license that can be
	   * found in the LICENSE file at https://angular.io/license
	   */
	  var __extends$14 = (this && this.__extends) || function (d, b) {
	      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	      function __() { this.constructor = d; }
	      d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	  };
	  var CompileNode = (function () {
	      function CompileNode(parent, view, nodeIndex, renderNode, sourceAst) {
	          this.parent = parent;
	          this.view = view;
	          this.nodeIndex = nodeIndex;
	          this.renderNode = renderNode;
	          this.sourceAst = sourceAst;
	      }
	      CompileNode.prototype.isNull = function () { return !this.renderNode; };
	      CompileNode.prototype.isRootElement = function () { return this.view != this.parent.view; };
	      return CompileNode;
	  }());
	  var CompileElement = (function (_super) {
	      __extends$14(CompileElement, _super);
	      function CompileElement(parent, view, nodeIndex, renderNode, sourceAst, component, _directives, _resolvedProvidersArray, hasViewContainer, hasEmbeddedView, references, _targetDependencies) {
	          var _this = this;
	          _super.call(this, parent, view, nodeIndex, renderNode, sourceAst);
	          this.component = component;
	          this._directives = _directives;
	          this._resolvedProvidersArray = _resolvedProvidersArray;
	          this.hasViewContainer = hasViewContainer;
	          this.hasEmbeddedView = hasEmbeddedView;
	          this._targetDependencies = _targetDependencies;
	          this.compViewExpr = null;
	          this.instances = new Map();
	          this.directiveWrapperInstance = new Map();
	          this._queryCount = 0;
	          this._queries = new Map();
	          this.contentNodesByNgContentIndex = null;
	          this.referenceTokens = {};
	          references.forEach(function (ref) { return _this.referenceTokens[ref.name] = ref.value; });
	          this.elementRef =
	              importExpr(resolveIdentifier(Identifiers.ElementRef)).instantiate([this.renderNode]);
	          this.instances.set(resolveIdentifierToken(Identifiers.ElementRef).reference, this.elementRef);
	          this.instances.set(resolveIdentifierToken(Identifiers.Injector).reference, THIS_EXPR.callMethod('injector', [literal(this.nodeIndex)]));
	          this.instances.set(resolveIdentifierToken(Identifiers.Renderer).reference, THIS_EXPR.prop('renderer'));
	          if (this.hasViewContainer || this.hasEmbeddedView) {
	              this._createViewContainer();
	          }
	          if (this.component) {
	              this._createComponentFactoryResolver();
	          }
	      }
	      CompileElement.createNull = function () {
	          return new CompileElement(null, null, null, null, null, null, [], [], false, false, [], []);
	      };
	      CompileElement.prototype._createViewContainer = function () {
	          var fieldName = "_vc_" + this.nodeIndex;
	          var parentNodeIndex = this.isRootElement() ? null : this.parent.nodeIndex;
	          // private is fine here as no child view will reference a ViewContainer
	          this.view.fields.push(new ClassField(fieldName, importType(resolveIdentifier(Identifiers.ViewContainer)), [StmtModifier.Private]));
	          var statement = THIS_EXPR.prop(fieldName)
	              .set(importExpr(resolveIdentifier(Identifiers.ViewContainer)).instantiate([
	              literal(this.nodeIndex), literal(parentNodeIndex), THIS_EXPR, this.renderNode
	          ]))
	              .toStmt();
	          this.view.createMethod.addStmt(statement);
	          this.viewContainer = THIS_EXPR.prop(fieldName);
	          this.instances.set(resolveIdentifierToken(Identifiers.ViewContainer).reference, this.viewContainer);
	          this.view.viewContainers.push(this.viewContainer);
	      };
	      CompileElement.prototype._createComponentFactoryResolver = function () {
	          var _this = this;
	          var entryComponents = this.component.entryComponents.map(function (entryComponent) {
	              var id = new CompileIdentifierMetadata({ name: entryComponent.name });
	              _this._targetDependencies.push(new ComponentFactoryDependency(entryComponent, id));
	              return id;
	          });
	          if (!entryComponents || entryComponents.length === 0) {
	              return;
	          }
	          var createComponentFactoryResolverExpr = importExpr(resolveIdentifier(Identifiers.CodegenComponentFactoryResolver)).instantiate([
	              literalArr(entryComponents.map(function (entryComponent) { return importExpr(entryComponent); })),
	              injectFromViewParentInjector(this.view, resolveIdentifierToken(Identifiers.ComponentFactoryResolver), false)
	          ]);
	          var provider = new CompileProviderMetadata({
	              token: resolveIdentifierToken(Identifiers.ComponentFactoryResolver),
	              useValue: createComponentFactoryResolverExpr
	          });
	          // Add ComponentFactoryResolver as first provider as it does not have deps on other providers
	          // ProviderAstType.PrivateService as only the component and its view can see it,
	          // but nobody else
	          this._resolvedProvidersArray.unshift(new ProviderAst(provider.token, false, true, [provider], exports.ProviderAstType.PrivateService, [], this.sourceAst.sourceSpan));
	      };
	      CompileElement.prototype.setComponentView = function (compViewExpr) {
	          this.compViewExpr = compViewExpr;
	          this.contentNodesByNgContentIndex =
	              new Array(this.component.template.ngContentSelectors.length);
	          for (var i = 0; i < this.contentNodesByNgContentIndex.length; i++) {
	              this.contentNodesByNgContentIndex[i] = [];
	          }
	      };
	      CompileElement.prototype.setEmbeddedView = function (embeddedView) {
	          this.embeddedView = embeddedView;
	          if (isPresent(embeddedView)) {
	              var createTemplateRefExpr = importExpr(resolveIdentifier(Identifiers.TemplateRef_)).instantiate([
	                  THIS_EXPR, literal(this.nodeIndex), this.renderNode
	              ]);
	              var provider = new CompileProviderMetadata({
	                  token: resolveIdentifierToken(Identifiers.TemplateRef),
	                  useValue: createTemplateRefExpr
	              });
	              // Add TemplateRef as first provider as it does not have deps on other providers
	              this._resolvedProvidersArray.unshift(new ProviderAst(provider.token, false, true, [provider], exports.ProviderAstType.Builtin, [], this.sourceAst.sourceSpan));
	          }
	      };
	      CompileElement.prototype.beforeChildren = function () {
	          var _this = this;
	          if (this.hasViewContainer) {
	              this.instances.set(resolveIdentifierToken(Identifiers.ViewContainerRef).reference, this.viewContainer.prop('vcRef'));
	          }
	          this._resolvedProviders = new Map();
	          this._resolvedProvidersArray.forEach(function (provider) { return _this._resolvedProviders.set(provider.token.reference, provider); });
	          // create all the provider instances, some in the view constructor,
	          // some as getters. We rely on the fact that they are already sorted topologically.
	          Array.from(this._resolvedProviders.values()).forEach(function (resolvedProvider) {
	              var isDirectiveWrapper = resolvedProvider.providerType === exports.ProviderAstType.Component ||
	                  resolvedProvider.providerType === exports.ProviderAstType.Directive;
	              var providerValueExpressions = resolvedProvider.providers.map(function (provider) {
	                  if (provider.useExisting) {
	                      return _this._getDependency(resolvedProvider.providerType, new CompileDiDependencyMetadata({ token: provider.useExisting }));
	                  }
	                  else if (provider.useFactory) {
	                      var deps = provider.deps || provider.useFactory.diDeps;
	                      var depsExpr = deps.map(function (dep) { return _this._getDependency(resolvedProvider.providerType, dep); });
	                      return importExpr(provider.useFactory).callFn(depsExpr);
	                  }
	                  else if (provider.useClass) {
	                      var deps = provider.deps || provider.useClass.diDeps;
	                      var depsExpr = deps.map(function (dep) { return _this._getDependency(resolvedProvider.providerType, dep); });
	                      if (isDirectiveWrapper) {
	                          var directiveWrapperIdentifier = new CompileIdentifierMetadata({ name: DirectiveWrapperCompiler.dirWrapperClassName(provider.useClass) });
	                          _this._targetDependencies.push(new DirectiveWrapperDependency(provider.useClass, directiveWrapperIdentifier));
	                          return DirectiveWrapperExpressions.create(directiveWrapperIdentifier, depsExpr);
	                      }
	                      else {
	                          return importExpr(provider.useClass)
	                              .instantiate(depsExpr, importType(provider.useClass));
	                      }
	                  }
	                  else {
	                      return convertValueToOutputAst(provider.useValue);
	                  }
	              });
	              var propName = "_" + resolvedProvider.token.name + "_" + _this.nodeIndex + "_" + _this.instances.size;
	              var instance = createProviderProperty(propName, resolvedProvider, providerValueExpressions, resolvedProvider.multiProvider, resolvedProvider.eager, _this);
	              if (isDirectiveWrapper) {
	                  _this.directiveWrapperInstance.set(resolvedProvider.token.reference, instance);
	                  _this.instances.set(resolvedProvider.token.reference, DirectiveWrapperExpressions.context(instance));
	              }
	              else {
	                  _this.instances.set(resolvedProvider.token.reference, instance);
	              }
	          });
	          var _loop_1 = function(i) {
	              var directive = this_1._directives[i];
	              var directiveInstance = this_1.instances.get(identifierToken(directive.type).reference);
	              directive.queries.forEach(function (queryMeta) { _this._addQuery(queryMeta, directiveInstance); });
	          };
	          var this_1 = this;
	          for (var i = 0; i < this._directives.length; i++) {
	              _loop_1(i);
	          }
	          var queriesWithReads = [];
	          Array.from(this._resolvedProviders.values()).forEach(function (resolvedProvider) {
	              var queriesForProvider = _this._getQueriesFor(resolvedProvider.token);
	              queriesWithReads.push.apply(queriesWithReads, queriesForProvider.map(function (query) { return new _QueryWithRead(query, resolvedProvider.token); }));
	          });
	          Object.keys(this.referenceTokens).forEach(function (varName) {
	              var token = _this.referenceTokens[varName];
	              var varValue;
	              if (token) {
	                  varValue = _this.instances.get(token.reference);
	              }
	              else {
	                  varValue = _this.renderNode;
	              }
	              _this.view.locals.set(varName, varValue);
	              var varToken = new CompileTokenMetadata({ value: varName });
	              queriesWithReads.push.apply(queriesWithReads, _this._getQueriesFor(varToken).map(function (query) { return new _QueryWithRead(query, varToken); }));
	          });
	          queriesWithReads.forEach(function (queryWithRead) {
	              var value;
	              if (isPresent(queryWithRead.read.identifier)) {
	                  // query for an identifier
	                  value = _this.instances.get(queryWithRead.read.reference);
	              }
	              else {
	                  // query for a reference
	                  var token = _this.referenceTokens[queryWithRead.read.value];
	                  if (isPresent(token)) {
	                      value = _this.instances.get(token.reference);
	                  }
	                  else {
	                      value = _this.elementRef;
	                  }
	              }
	              if (isPresent(value)) {
	                  queryWithRead.query.addValue(value, _this.view);
	              }
	          });
	      };
	      CompileElement.prototype.afterChildren = function (childNodeCount) {
	          var _this = this;
	          Array.from(this._resolvedProviders.values()).forEach(function (resolvedProvider) {
	              // Note: afterChildren is called after recursing into children.
	              // This is good so that an injector match in an element that is closer to a requesting element
	              // matches first.
	              var providerExpr = _this.instances.get(resolvedProvider.token.reference);
	              // Note: view providers are only visible on the injector of that element.
	              // This is not fully correct as the rules during codegen don't allow a directive
	              // to get hold of a view provdier on the same element. We still do this semantic
	              // as it simplifies our model to having only one runtime injector per element.
	              var providerChildNodeCount = resolvedProvider.providerType === exports.ProviderAstType.PrivateService ? 0 : childNodeCount;
	              _this.view.injectorGetMethod.addStmt(createInjectInternalCondition(_this.nodeIndex, providerChildNodeCount, resolvedProvider, providerExpr));
	          });
	          Array.from(this._queries.values())
	              .forEach(function (queries) { return queries.forEach(function (q) {
	              return q.afterChildren(_this.view.createMethod, _this.view.updateContentQueriesMethod);
	          }); });
	      };
	      CompileElement.prototype.addContentNode = function (ngContentIndex, nodeExpr) {
	          this.contentNodesByNgContentIndex[ngContentIndex].push(nodeExpr);
	      };
	      CompileElement.prototype.getComponent = function () {
	          return isPresent(this.component) ?
	              this.instances.get(identifierToken(this.component.type).reference) :
	              null;
	      };
	      CompileElement.prototype.getProviderTokens = function () {
	          return Array.from(this._resolvedProviders.values())
	              .map(function (resolvedProvider) { return createDiTokenExpression(resolvedProvider.token); });
	      };
	      CompileElement.prototype._getQueriesFor = function (token) {
	          var result = [];
	          var currentEl = this;
	          var distance = 0;
	          var queries;
	          while (!currentEl.isNull()) {
	              queries = currentEl._queries.get(token.reference);
	              if (isPresent(queries)) {
	                  result.push.apply(result, queries.filter(function (query) { return query.meta.descendants || distance <= 1; }));
	              }
	              if (currentEl._directives.length > 0) {
	                  distance++;
	              }
	              currentEl = currentEl.parent;
	          }
	          queries = this.view.componentView.viewQueries.get(token.reference);
	          if (isPresent(queries)) {
	              result.push.apply(result, queries);
	          }
	          return result;
	      };
	      CompileElement.prototype._addQuery = function (queryMeta, directiveInstance) {
	          var propName = "_query_" + queryMeta.selectors[0].name + "_" + this.nodeIndex + "_" + this._queryCount++;
	          var queryList = createQueryList(queryMeta, directiveInstance, propName, this.view);
	          var query = new CompileQuery(queryMeta, queryList, directiveInstance, this.view);
	          addQueryToTokenMap(this._queries, query);
	          return query;
	      };
	      CompileElement.prototype._getLocalDependency = function (requestingProviderType, dep) {
	          var result = null;
	          if (isPresent(dep.token)) {
	              // access builtins with special visibility
	              if (!result) {
	                  if (dep.token.reference ===
	                      resolveIdentifierToken(Identifiers.ChangeDetectorRef).reference) {
	                      if (requestingProviderType === exports.ProviderAstType.Component) {
	                          return this.compViewExpr.prop('ref');
	                      }
	                      else {
	                          return getPropertyInView(THIS_EXPR.prop('ref'), this.view, this.view.componentView);
	                      }
	                  }
	              }
	              // access regular providers on the element
	              if (!result) {
	                  var resolvedProvider = this._resolvedProviders.get(dep.token.reference);
	                  // don't allow directives / public services to access private services.
	                  // only components and private services can access private services.
	                  if (resolvedProvider && (requestingProviderType === exports.ProviderAstType.Directive ||
	                      requestingProviderType === exports.ProviderAstType.PublicService) &&
	                      resolvedProvider.providerType === exports.ProviderAstType.PrivateService) {
	                      return null;
	                  }
	                  result = this.instances.get(dep.token.reference);
	              }
	          }
	          return result;
	      };
	      CompileElement.prototype._getDependency = function (requestingProviderType, dep) {
	          var currElement = this;
	          var result = null;
	          if (dep.isValue) {
	              result = literal(dep.value);
	          }
	          if (!result && !dep.isSkipSelf) {
	              result = this._getLocalDependency(requestingProviderType, dep);
	          }
	          // check parent elements
	          while (!result && !currElement.parent.isNull()) {
	              currElement = currElement.parent;
	              result = currElement._getLocalDependency(exports.ProviderAstType.PublicService, new CompileDiDependencyMetadata({ token: dep.token }));
	          }
	          if (!result) {
	              result = injectFromViewParentInjector(this.view, dep.token, dep.isOptional);
	          }
	          if (!result) {
	              result = NULL_EXPR;
	          }
	          return getPropertyInView(result, this.view, currElement.view);
	      };
	      return CompileElement;
	  }(CompileNode));
	  function createInjectInternalCondition(nodeIndex, childNodeCount, provider, providerExpr) {
	      var indexCondition;
	      if (childNodeCount > 0) {
	          indexCondition = literal(nodeIndex)
	              .lowerEquals(InjectMethodVars.requestNodeIndex)
	              .and(InjectMethodVars.requestNodeIndex.lowerEquals(literal(nodeIndex + childNodeCount)));
	      }
	      else {
	          indexCondition = literal(nodeIndex).identical(InjectMethodVars.requestNodeIndex);
	      }
	      return new IfStmt(InjectMethodVars.token.identical(createDiTokenExpression(provider.token)).and(indexCondition), [new ReturnStatement(providerExpr)]);
	  }
	  function createProviderProperty(propName, provider, providerValueExpressions, isMulti, isEager, compileElement) {
	      var view = compileElement.view;
	      var resolvedProviderValueExpr;
	      var type;
	      if (isMulti) {
	          resolvedProviderValueExpr = literalArr(providerValueExpressions);
	          type = new ArrayType(DYNAMIC_TYPE);
	      }
	      else {
	          resolvedProviderValueExpr = providerValueExpressions[0];
	          type = providerValueExpressions[0].type;
	      }
	      if (!type) {
	          type = DYNAMIC_TYPE;
	      }
	      if (isEager) {
	          view.fields.push(new ClassField(propName, type));
	          view.createMethod.addStmt(THIS_EXPR.prop(propName).set(resolvedProviderValueExpr).toStmt());
	      }
	      else {
	          var internalField = "_" + propName;
	          view.fields.push(new ClassField(internalField, type));
	          var getter = new CompileMethod(view);
	          getter.resetDebugInfo(compileElement.nodeIndex, compileElement.sourceAst);
	          // Note: Equals is important for JS so that it also checks the undefined case!
	          getter.addStmt(new IfStmt(THIS_EXPR.prop(internalField).isBlank(), [THIS_EXPR.prop(internalField).set(resolvedProviderValueExpr).toStmt()]));
	          getter.addStmt(new ReturnStatement(THIS_EXPR.prop(internalField)));
	          view.getters.push(new ClassGetter(propName, getter.finish(), type));
	      }
	      return THIS_EXPR.prop(propName);
	  }
	  var _QueryWithRead = (function () {
	      function _QueryWithRead(query, match) {
	          this.query = query;
	          this.read = query.meta.read || match;
	      }
	      return _QueryWithRead;
	  }());

	  var CompilePipe = (function () {
	      function CompilePipe(view, meta) {
	          var _this = this;
	          this.view = view;
	          this.meta = meta;
	          this._purePipeProxyCount = 0;
	          this.instance = THIS_EXPR.prop("_pipe_" + meta.name + "_" + view.pipeCount++);
	          var deps = this.meta.type.diDeps.map(function (diDep) {
	              if (diDep.token.reference ===
	                  resolveIdentifierToken(Identifiers.ChangeDetectorRef).reference) {
	                  return getPropertyInView(THIS_EXPR.prop('ref'), _this.view, _this.view.componentView);
	              }
	              return injectFromViewParentInjector(view, diDep.token, false);
	          });
	          this.view.fields.push(new ClassField(this.instance.name, importType(this.meta.type)));
	          this.view.createMethod.resetDebugInfo(null, null);
	          this.view.createMethod.addStmt(THIS_EXPR.prop(this.instance.name)
	              .set(importExpr(this.meta.type).instantiate(deps))
	              .toStmt());
	      }
	      CompilePipe.call = function (view, name, args) {
	          var compView = view.componentView;
	          var meta = _findPipeMeta(compView, name);
	          var pipe;
	          if (meta.pure) {
	              // pure pipes live on the component view
	              pipe = compView.purePipes.get(name);
	              if (!pipe) {
	                  pipe = new CompilePipe(compView, meta);
	                  compView.purePipes.set(name, pipe);
	                  compView.pipes.push(pipe);
	              }
	          }
	          else {
	              // Non pure pipes live on the view that called it
	              pipe = new CompilePipe(view, meta);
	              view.pipes.push(pipe);
	          }
	          return pipe._call(view, args);
	      };
	      Object.defineProperty(CompilePipe.prototype, "pure", {
	          get: function () { return this.meta.pure; },
	          enumerable: true,
	          configurable: true
	      });
	      CompilePipe.prototype._call = function (callingView, args) {
	          if (this.meta.pure) {
	              // PurePipeProxies live on the view that called them.
	              var purePipeProxyInstance = THIS_EXPR.prop(this.instance.name + "_" + this._purePipeProxyCount++);
	              var pipeInstanceSeenFromPureProxy = getPropertyInView(this.instance, callingView, this.view);
	              createPureProxy(pipeInstanceSeenFromPureProxy.prop('transform')
	                  .callMethod(BuiltinMethod.Bind, [pipeInstanceSeenFromPureProxy]), args.length, purePipeProxyInstance, { fields: callingView.fields, ctorStmts: callingView.createMethod });
	              return importExpr(resolveIdentifier(Identifiers.castByValue))
	                  .callFn([purePipeProxyInstance, pipeInstanceSeenFromPureProxy.prop('transform')])
	                  .callFn(args);
	          }
	          else {
	              return getPropertyInView(this.instance, callingView, this.view).callMethod('transform', args);
	          }
	      };
	      return CompilePipe;
	  }());
	  function _findPipeMeta(view, name) {
	      var pipeMeta = null;
	      for (var i = view.pipeMetas.length - 1; i >= 0; i--) {
	          var localPipeMeta = view.pipeMetas[i];
	          if (localPipeMeta.name == name) {
	              pipeMeta = localPipeMeta;
	              break;
	          }
	      }
	      if (!pipeMeta) {
	          throw new Error("Illegal state: Could not find pipe " + name + " although the parser should have detected this error!");
	      }
	      return pipeMeta;
	  }

	  var CompileViewRootNodeType;
	  (function (CompileViewRootNodeType) {
	      CompileViewRootNodeType[CompileViewRootNodeType["Node"] = 0] = "Node";
	      CompileViewRootNodeType[CompileViewRootNodeType["ViewContainer"] = 1] = "ViewContainer";
	      CompileViewRootNodeType[CompileViewRootNodeType["NgContent"] = 2] = "NgContent";
	  })(CompileViewRootNodeType || (CompileViewRootNodeType = {}));
	  var CompileViewRootNode = (function () {
	      function CompileViewRootNode(type, expr, ngContentIndex) {
	          this.type = type;
	          this.expr = expr;
	          this.ngContentIndex = ngContentIndex;
	      }
	      return CompileViewRootNode;
	  }());
	  var CompileView = (function () {
	      function CompileView(component, genConfig, pipeMetas, styles, animations, viewIndex, declarationElement, templateVariableBindings) {
	          var _this = this;
	          this.component = component;
	          this.genConfig = genConfig;
	          this.pipeMetas = pipeMetas;
	          this.styles = styles;
	          this.animations = animations;
	          this.viewIndex = viewIndex;
	          this.declarationElement = declarationElement;
	          this.templateVariableBindings = templateVariableBindings;
	          this.viewChildren = [];
	          this.nodes = [];
	          this.rootNodes = [];
	          this.lastRenderNode = NULL_EXPR;
	          this.viewContainers = [];
	          this.methods = [];
	          this.ctorStmts = [];
	          this.fields = [];
	          this.getters = [];
	          this.disposables = [];
	          this.purePipes = new Map();
	          this.pipes = [];
	          this.locals = new Map();
	          this.literalArrayCount = 0;
	          this.literalMapCount = 0;
	          this.pipeCount = 0;
	          this.createMethod = new CompileMethod(this);
	          this.animationBindingsMethod = new CompileMethod(this);
	          this.injectorGetMethod = new CompileMethod(this);
	          this.updateContentQueriesMethod = new CompileMethod(this);
	          this.dirtyParentQueriesMethod = new CompileMethod(this);
	          this.updateViewQueriesMethod = new CompileMethod(this);
	          this.detectChangesInInputsMethod = new CompileMethod(this);
	          this.detectChangesRenderPropertiesMethod = new CompileMethod(this);
	          this.afterContentLifecycleCallbacksMethod = new CompileMethod(this);
	          this.afterViewLifecycleCallbacksMethod = new CompileMethod(this);
	          this.destroyMethod = new CompileMethod(this);
	          this.detachMethod = new CompileMethod(this);
	          this.viewType = getViewType(component, viewIndex);
	          this.className = getViewClassName(component, viewIndex);
	          this.classType = importType(new CompileIdentifierMetadata({ name: this.className }));
	          this.classExpr = variable(this.className);
	          if (this.viewType === ViewType.COMPONENT || this.viewType === ViewType.HOST) {
	              this.componentView = this;
	          }
	          else {
	              this.componentView = this.declarationElement.view.componentView;
	          }
	          this.componentContext =
	              getPropertyInView(THIS_EXPR.prop('context'), this, this.componentView);
	          var viewQueries = new Map();
	          if (this.viewType === ViewType.COMPONENT) {
	              var directiveInstance_1 = THIS_EXPR.prop('context');
	              this.component.viewQueries.forEach(function (queryMeta, queryIndex) {
	                  var propName = "_viewQuery_" + queryMeta.selectors[0].name + "_" + queryIndex;
	                  var queryList = createQueryList(queryMeta, directiveInstance_1, propName, _this);
	                  var query = new CompileQuery(queryMeta, queryList, directiveInstance_1, _this);
	                  addQueryToTokenMap(viewQueries, query);
	              });
	          }
	          this.viewQueries = viewQueries;
	          templateVariableBindings.forEach(function (entry) { _this.locals.set(entry[1], THIS_EXPR.prop('context').prop(entry[0])); });
	          if (!this.declarationElement.isNull()) {
	              this.declarationElement.setEmbeddedView(this);
	          }
	      }
	      CompileView.prototype.callPipe = function (name, input, args) {
	          return CompilePipe.call(this, name, [input].concat(args));
	      };
	      CompileView.prototype.getLocal = function (name) {
	          if (name == EventHandlerVars.event.name) {
	              return EventHandlerVars.event;
	          }
	          var currView = this;
	          var result = currView.locals.get(name);
	          while (!result && isPresent(currView.declarationElement.view)) {
	              currView = currView.declarationElement.view;
	              result = currView.locals.get(name);
	          }
	          if (isPresent(result)) {
	              return getPropertyInView(result, this, currView);
	          }
	          else {
	              return null;
	          }
	      };
	      CompileView.prototype.afterNodes = function () {
	          var _this = this;
	          Array.from(this.viewQueries.values())
	              .forEach(function (queries) { return queries.forEach(function (q) { return q.afterChildren(_this.createMethod, _this.updateViewQueriesMethod); }); });
	      };
	      return CompileView;
	  }());
	  function getViewType(component, embeddedTemplateIndex) {
	      if (embeddedTemplateIndex > 0) {
	          return ViewType.EMBEDDED;
	      }
	      if (component.type.isHost) {
	          return ViewType.HOST;
	      }
	      return ViewType.COMPONENT;
	  }

	  function bindOutputs(boundEvents, directives, compileElement, bindToRenderer) {
	      var usedEvents = collectEvents(boundEvents, directives);
	      if (!usedEvents.size) {
	          return false;
	      }
	      if (bindToRenderer) {
	          subscribeToRenderEvents(usedEvents, compileElement);
	      }
	      subscribeToDirectiveEvents(usedEvents, directives, compileElement);
	      generateHandleEventMethod(boundEvents, directives, compileElement);
	      return true;
	  }
	  function collectEvents(boundEvents, directives) {
	      var usedEvents = new Map();
	      boundEvents.forEach(function (event) { usedEvents.set(event.fullName, event); });
	      directives.forEach(function (dirAst) {
	          dirAst.hostEvents.forEach(function (event) { usedEvents.set(event.fullName, event); });
	      });
	      return usedEvents;
	  }
	  function subscribeToRenderEvents(usedEvents, compileElement) {
	      var eventAndTargetExprs = [];
	      usedEvents.forEach(function (event) {
	          if (!event.phase) {
	              eventAndTargetExprs.push(literal(event.name), literal(event.target));
	          }
	      });
	      if (eventAndTargetExprs.length) {
	          var disposableVar = variable("disposable_" + compileElement.view.disposables.length);
	          compileElement.view.disposables.push(disposableVar);
	          compileElement.view.createMethod.addStmt(disposableVar
	              .set(importExpr(resolveIdentifier(Identifiers.subscribeToRenderElement)).callFn([
	              THIS_EXPR, compileElement.renderNode, createInlineArray(eventAndTargetExprs),
	              handleEventExpr(compileElement)
	          ]))
	              .toDeclStmt(FUNCTION_TYPE, [StmtModifier.Private]));
	      }
	  }
	  function subscribeToDirectiveEvents(usedEvents, directives, compileElement) {
	      var usedEventNames = Array.from(usedEvents.keys());
	      directives.forEach(function (dirAst) {
	          var dirWrapper = compileElement.directiveWrapperInstance.get(dirAst.directive.type.reference);
	          compileElement.view.createMethod.addStmts(DirectiveWrapperExpressions.subscribe(dirAst.directive, dirAst.hostProperties, usedEventNames, dirWrapper, THIS_EXPR, handleEventExpr(compileElement)));
	      });
	  }
	  function generateHandleEventMethod(boundEvents, directives, compileElement) {
	      var hasComponentHostListener = directives.some(function (dirAst) { return dirAst.hostEvents.some(function (event) { return dirAst.directive.isComponent; }); });
	      var markPathToRootStart = hasComponentHostListener ? compileElement.compViewExpr : THIS_EXPR;
	      var handleEventStmts = new CompileMethod(compileElement.view);
	      handleEventStmts.resetDebugInfo(compileElement.nodeIndex, compileElement.sourceAst);
	      handleEventStmts.push(markPathToRootStart.callMethod('markPathToRootAsCheckOnce', []).toStmt());
	      var eventNameVar = variable('eventName');
	      var resultVar = variable('result');
	      handleEventStmts.push(resultVar.set(literal(true)).toDeclStmt(BOOL_TYPE));
	      directives.forEach(function (dirAst, dirIdx) {
	          var dirWrapper = compileElement.directiveWrapperInstance.get(dirAst.directive.type.reference);
	          if (dirAst.hostEvents.length > 0) {
	              handleEventStmts.push(resultVar
	                  .set(DirectiveWrapperExpressions
	                  .handleEvent(dirAst.hostEvents, dirWrapper, eventNameVar, EventHandlerVars.event)
	                  .and(resultVar))
	                  .toStmt());
	          }
	      });
	      boundEvents.forEach(function (renderEvent, renderEventIdx) {
	          var evalResult = convertActionBinding(compileElement.view, compileElement.view, compileElement.view.componentContext, renderEvent.handler, "sub_" + renderEventIdx);
	          var trueStmts = evalResult.stmts;
	          if (evalResult.preventDefault) {
	              trueStmts.push(resultVar.set(evalResult.preventDefault.and(resultVar)).toStmt());
	          }
	          // TODO(tbosch): convert this into a `switch` once our OutputAst supports it.
	          handleEventStmts.push(new IfStmt(eventNameVar.equals(literal(renderEvent.fullName)), trueStmts));
	      });
	      handleEventStmts.push(new ReturnStatement(resultVar));
	      compileElement.view.methods.push(new ClassMethod(getHandleEventMethodName(compileElement.nodeIndex), [
	          new FnParam(eventNameVar.name, STRING_TYPE),
	          new FnParam(EventHandlerVars.event.name, DYNAMIC_TYPE)
	      ], handleEventStmts.finish(), BOOL_TYPE));
	  }
	  function handleEventExpr(compileElement) {
	      var handleEventMethodName = getHandleEventMethodName(compileElement.nodeIndex);
	      return THIS_EXPR.callMethod('eventHandler', [THIS_EXPR.prop(handleEventMethodName)]);
	  }

	  var STATE_IS_NEVER_CHECKED = THIS_EXPR.prop('numberOfChecks').identical(new LiteralExpr(0));
	  var NOT_THROW_ON_CHANGES = not(DetectChangesVars.throwOnChange);
	  function bindDirectiveAfterContentLifecycleCallbacks(directiveMeta, directiveInstance, compileElement) {
	      var view = compileElement.view;
	      var lifecycleHooks = directiveMeta.type.lifecycleHooks;
	      var afterContentLifecycleCallbacksMethod = view.afterContentLifecycleCallbacksMethod;
	      afterContentLifecycleCallbacksMethod.resetDebugInfo(compileElement.nodeIndex, compileElement.sourceAst);
	      if (lifecycleHooks.indexOf(LifecycleHooks.AfterContentInit) !== -1) {
	          afterContentLifecycleCallbacksMethod.addStmt(new IfStmt(STATE_IS_NEVER_CHECKED, [directiveInstance.callMethod('ngAfterContentInit', []).toStmt()]));
	      }
	      if (lifecycleHooks.indexOf(LifecycleHooks.AfterContentChecked) !== -1) {
	          afterContentLifecycleCallbacksMethod.addStmt(directiveInstance.callMethod('ngAfterContentChecked', []).toStmt());
	      }
	  }
	  function bindDirectiveAfterViewLifecycleCallbacks(directiveMeta, directiveInstance, compileElement) {
	      var view = compileElement.view;
	      var lifecycleHooks = directiveMeta.type.lifecycleHooks;
	      var afterViewLifecycleCallbacksMethod = view.afterViewLifecycleCallbacksMethod;
	      afterViewLifecycleCallbacksMethod.resetDebugInfo(compileElement.nodeIndex, compileElement.sourceAst);
	      if (lifecycleHooks.indexOf(LifecycleHooks.AfterViewInit) !== -1) {
	          afterViewLifecycleCallbacksMethod.addStmt(new IfStmt(STATE_IS_NEVER_CHECKED, [directiveInstance.callMethod('ngAfterViewInit', []).toStmt()]));
	      }
	      if (lifecycleHooks.indexOf(LifecycleHooks.AfterViewChecked) !== -1) {
	          afterViewLifecycleCallbacksMethod.addStmt(directiveInstance.callMethod('ngAfterViewChecked', []).toStmt());
	      }
	  }
	  function bindDirectiveWrapperLifecycleCallbacks(dir, directiveWrapperIntance, compileElement) {
	      compileElement.view.destroyMethod.addStmts(DirectiveWrapperExpressions.ngOnDestroy(dir.directive, directiveWrapperIntance));
	      compileElement.view.detachMethod.addStmts(DirectiveWrapperExpressions.ngOnDetach(dir.hostProperties, directiveWrapperIntance, THIS_EXPR, compileElement.compViewExpr || THIS_EXPR, compileElement.renderNode));
	  }
	  function bindInjectableDestroyLifecycleCallbacks(provider, providerInstance, compileElement) {
	      var onDestroyMethod = compileElement.view.destroyMethod;
	      onDestroyMethod.resetDebugInfo(compileElement.nodeIndex, compileElement.sourceAst);
	      if (provider.providerType !== exports.ProviderAstType.Directive &&
	          provider.providerType !== exports.ProviderAstType.Component &&
	          provider.lifecycleHooks.indexOf(LifecycleHooks.OnDestroy) !== -1) {
	          onDestroyMethod.addStmt(providerInstance.callMethod('ngOnDestroy', []).toStmt());
	      }
	  }
	  function bindPipeDestroyLifecycleCallbacks(pipeMeta, pipeInstance, view) {
	      var onDestroyMethod = view.destroyMethod;
	      if (pipeMeta.type.lifecycleHooks.indexOf(LifecycleHooks.OnDestroy) !== -1) {
	          onDestroyMethod.addStmt(pipeInstance.callMethod('ngOnDestroy', []).toStmt());
	      }
	  }

	  function bindRenderText(boundText, compileNode, view) {
	      var valueField = createCheckBindingField(view);
	      var evalResult = convertPropertyBinding(view, view, view.componentContext, boundText.value, valueField.bindingId);
	      if (!evalResult) {
	          return null;
	      }
	      view.detectChangesRenderPropertiesMethod.resetDebugInfo(compileNode.nodeIndex, boundText);
	      view.detectChangesRenderPropertiesMethod.addStmts(createCheckBindingStmt(evalResult, valueField.expression, DetectChangesVars.throwOnChange, [THIS_EXPR.prop('renderer')
	              .callMethod('setText', [compileNode.renderNode, evalResult.currValExpr])
	              .toStmt()]));
	  }
	  function bindRenderInputs(boundProps, hasEvents, compileElement) {
	      var view = compileElement.view;
	      var renderNode = compileElement.renderNode;
	      boundProps.forEach(function (boundProp) {
	          var bindingField = createCheckBindingField(view);
	          view.detectChangesRenderPropertiesMethod.resetDebugInfo(compileElement.nodeIndex, boundProp);
	          var evalResult = convertPropertyBinding(view, view, compileElement.view.componentContext, boundProp.value, bindingField.bindingId);
	          if (!evalResult) {
	              return;
	          }
	          var checkBindingStmts = [];
	          var compileMethod = view.detectChangesRenderPropertiesMethod;
	          switch (boundProp.type) {
	              case exports.PropertyBindingType.Property:
	              case exports.PropertyBindingType.Attribute:
	              case exports.PropertyBindingType.Class:
	              case exports.PropertyBindingType.Style:
	                  checkBindingStmts.push.apply(checkBindingStmts, writeToRenderer(THIS_EXPR, boundProp, renderNode, evalResult.currValExpr, view.genConfig.logBindingUpdate));
	                  break;
	              case exports.PropertyBindingType.Animation:
	                  compileMethod = view.animationBindingsMethod;
	                  var _a = triggerAnimation(THIS_EXPR, THIS_EXPR, boundProp, (hasEvents ? THIS_EXPR.prop(getHandleEventMethodName(compileElement.nodeIndex)) :
	                      importExpr(resolveIdentifier(Identifiers.noop)))
	                      .callMethod(BuiltinMethod.Bind, [THIS_EXPR]), compileElement.renderNode, evalResult.currValExpr, bindingField.expression), updateStmts = _a.updateStmts, detachStmts = _a.detachStmts;
	                  checkBindingStmts.push.apply(checkBindingStmts, updateStmts);
	                  view.detachMethod.addStmts(detachStmts);
	                  break;
	          }
	          compileMethod.addStmts(createCheckBindingStmt(evalResult, bindingField.expression, DetectChangesVars.throwOnChange, checkBindingStmts));
	      });
	  }
	  function bindDirectiveHostProps(directiveAst, directiveWrapperInstance, compileElement, elementName, schemaRegistry) {
	      // We need to provide the SecurityContext for properties that could need sanitization.
	      var runtimeSecurityCtxExprs = directiveAst.hostProperties.filter(function (boundProp) { return boundProp.needsRuntimeSecurityContext; })
	          .map(function (boundProp) {
	          var ctx;
	          switch (boundProp.type) {
	              case exports.PropertyBindingType.Property:
	                  ctx = schemaRegistry.securityContext(elementName, boundProp.name, false);
	                  break;
	              case exports.PropertyBindingType.Attribute:
	                  ctx = schemaRegistry.securityContext(elementName, boundProp.name, true);
	                  break;
	              default:
	                  throw new Error("Illegal state: Only property / attribute bindings can have an unknown security context! Binding " + boundProp.name);
	          }
	          return createEnumExpression(Identifiers.SecurityContext, ctx);
	      });
	      compileElement.view.detectChangesRenderPropertiesMethod.addStmts(DirectiveWrapperExpressions.checkHost(directiveAst.hostProperties, directiveWrapperInstance, THIS_EXPR, compileElement.compViewExpr || THIS_EXPR, compileElement.renderNode, DetectChangesVars.throwOnChange, runtimeSecurityCtxExprs));
	  }
	  function bindDirectiveInputs(directiveAst, directiveWrapperInstance, dirIndex, compileElement) {
	      var view = compileElement.view;
	      var detectChangesInInputsMethod = view.detectChangesInInputsMethod;
	      detectChangesInInputsMethod.resetDebugInfo(compileElement.nodeIndex, compileElement.sourceAst);
	      directiveAst.inputs.forEach(function (input, inputIdx) {
	          // Note: We can't use `fields.length` here, as we are not adding a field!
	          var bindingId = compileElement.nodeIndex + "_" + dirIndex + "_" + inputIdx;
	          detectChangesInInputsMethod.resetDebugInfo(compileElement.nodeIndex, input);
	          var evalResult = convertPropertyBinding(view, view, view.componentContext, input.value, bindingId);
	          if (!evalResult) {
	              return;
	          }
	          detectChangesInInputsMethod.addStmts(evalResult.stmts);
	          detectChangesInInputsMethod.addStmt(directiveWrapperInstance
	              .callMethod("check_" + input.directiveName, [
	              evalResult.currValExpr, DetectChangesVars.throwOnChange,
	              evalResult.forceUpdate || literal(false)
	          ])
	              .toStmt());
	      });
	      var isOnPushComp = directiveAst.directive.isComponent &&
	          !isDefaultChangeDetectionStrategy(directiveAst.directive.changeDetection);
	      var directiveDetectChangesExpr = DirectiveWrapperExpressions.ngDoCheck(directiveWrapperInstance, THIS_EXPR, compileElement.renderNode, DetectChangesVars.throwOnChange);
	      var directiveDetectChangesStmt = isOnPushComp ?
	          new IfStmt(directiveDetectChangesExpr, [compileElement.compViewExpr.callMethod('markAsCheckOnce', []).toStmt()]) :
	          directiveDetectChangesExpr.toStmt();
	      detectChangesInInputsMethod.addStmt(directiveDetectChangesStmt);
	  }

	  function bindView(view, parsedTemplate, schemaRegistry) {
	      var visitor = new ViewBinderVisitor(view, schemaRegistry);
	      templateVisitAll(visitor, parsedTemplate);
	      view.pipes.forEach(function (pipe) { bindPipeDestroyLifecycleCallbacks(pipe.meta, pipe.instance, pipe.view); });
	  }
	  var ViewBinderVisitor = (function () {
	      function ViewBinderVisitor(view, _schemaRegistry) {
	          this.view = view;
	          this._schemaRegistry = _schemaRegistry;
	          this._nodeIndex = 0;
	      }
	      ViewBinderVisitor.prototype.visitBoundText = function (ast, parent) {
	          var node = this.view.nodes[this._nodeIndex++];
	          bindRenderText(ast, node, this.view);
	          return null;
	      };
	      ViewBinderVisitor.prototype.visitText = function (ast, parent) {
	          this._nodeIndex++;
	          return null;
	      };
	      ViewBinderVisitor.prototype.visitNgContent = function (ast, parent) { return null; };
	      ViewBinderVisitor.prototype.visitElement = function (ast, parent) {
	          var _this = this;
	          var compileElement = this.view.nodes[this._nodeIndex++];
	          var hasEvents = bindOutputs(ast.outputs, ast.directives, compileElement, true);
	          bindRenderInputs(ast.inputs, hasEvents, compileElement);
	          ast.directives.forEach(function (directiveAst, dirIndex) {
	              var directiveWrapperInstance = compileElement.directiveWrapperInstance.get(directiveAst.directive.type.reference);
	              bindDirectiveInputs(directiveAst, directiveWrapperInstance, dirIndex, compileElement);
	              bindDirectiveHostProps(directiveAst, directiveWrapperInstance, compileElement, ast.name, _this._schemaRegistry);
	          });
	          templateVisitAll(this, ast.children, compileElement);
	          // afterContent and afterView lifecycles need to be called bottom up
	          // so that children are notified before parents
	          ast.directives.forEach(function (directiveAst) {
	              var directiveInstance = compileElement.instances.get(directiveAst.directive.type.reference);
	              var directiveWrapperInstance = compileElement.directiveWrapperInstance.get(directiveAst.directive.type.reference);
	              bindDirectiveAfterContentLifecycleCallbacks(directiveAst.directive, directiveInstance, compileElement);
	              bindDirectiveAfterViewLifecycleCallbacks(directiveAst.directive, directiveInstance, compileElement);
	              bindDirectiveWrapperLifecycleCallbacks(directiveAst, directiveWrapperInstance, compileElement);
	          });
	          ast.providers.forEach(function (providerAst) {
	              var providerInstance = compileElement.instances.get(providerAst.token.reference);
	              bindInjectableDestroyLifecycleCallbacks(providerAst, providerInstance, compileElement);
	          });
	          return null;
	      };
	      ViewBinderVisitor.prototype.visitEmbeddedTemplate = function (ast, parent) {
	          var compileElement = this.view.nodes[this._nodeIndex++];
	          bindOutputs(ast.outputs, ast.directives, compileElement, false);
	          ast.directives.forEach(function (directiveAst, dirIndex) {
	              var directiveInstance = compileElement.instances.get(directiveAst.directive.type.reference);
	              var directiveWrapperInstance = compileElement.directiveWrapperInstance.get(directiveAst.directive.type.reference);
	              bindDirectiveInputs(directiveAst, directiveWrapperInstance, dirIndex, compileElement);
	              bindDirectiveAfterContentLifecycleCallbacks(directiveAst.directive, directiveInstance, compileElement);
	              bindDirectiveAfterViewLifecycleCallbacks(directiveAst.directive, directiveInstance, compileElement);
	              bindDirectiveWrapperLifecycleCallbacks(directiveAst, directiveWrapperInstance, compileElement);
	          });
	          ast.providers.forEach(function (providerAst) {
	              var providerInstance = compileElement.instances.get(providerAst.token.reference);
	              bindInjectableDestroyLifecycleCallbacks(providerAst, providerInstance, compileElement);
	          });
	          bindView(compileElement.embeddedView, ast.children, this._schemaRegistry);
	          return null;
	      };
	      ViewBinderVisitor.prototype.visitAttr = function (ast, ctx) { return null; };
	      ViewBinderVisitor.prototype.visitDirective = function (ast, ctx) { return null; };
	      ViewBinderVisitor.prototype.visitEvent = function (ast, eventTargetAndNames) {
	          return null;
	      };
	      ViewBinderVisitor.prototype.visitReference = function (ast, ctx) { return null; };
	      ViewBinderVisitor.prototype.visitVariable = function (ast, ctx) { return null; };
	      ViewBinderVisitor.prototype.visitDirectiveProperty = function (ast, context) { return null; };
	      ViewBinderVisitor.prototype.visitElementProperty = function (ast, context) { return null; };
	      return ViewBinderVisitor;
	  }());

	  var IMPLICIT_TEMPLATE_VAR = '\$implicit';
	  var CLASS_ATTR$1 = 'class';
	  var STYLE_ATTR = 'style';
	  var NG_CONTAINER_TAG = 'ng-container';
	  var parentRenderNodeVar = variable('parentRenderNode');
	  var rootSelectorVar = variable('rootSelector');
	  function buildView(view, template, targetDependencies) {
	      var builderVisitor = new ViewBuilderVisitor(view, targetDependencies);
	      var parentEl = view.declarationElement.isNull() ? view.declarationElement : view.declarationElement.parent;
	      templateVisitAll(builderVisitor, template, parentEl);
	      if (view.viewType === ViewType.EMBEDDED || view.viewType === ViewType.HOST) {
	          view.lastRenderNode = builderVisitor.getOrCreateLastRenderNode();
	      }
	      return builderVisitor.nestedViewCount;
	  }
	  function finishView(view, targetStatements) {
	      view.afterNodes();
	      createViewTopLevelStmts(view, targetStatements);
	      view.nodes.forEach(function (node) {
	          if (node instanceof CompileElement && node.hasEmbeddedView) {
	              finishView(node.embeddedView, targetStatements);
	          }
	      });
	  }
	  var ViewBuilderVisitor = (function () {
	      function ViewBuilderVisitor(view, targetDependencies) {
	          this.view = view;
	          this.targetDependencies = targetDependencies;
	          this.nestedViewCount = 0;
	      }
	      ViewBuilderVisitor.prototype._isRootNode = function (parent) { return parent.view !== this.view; };
	      ViewBuilderVisitor.prototype._addRootNodeAndProject = function (node) {
	          var projectedNode = _getOuterContainerOrSelf(node);
	          var parent = projectedNode.parent;
	          var ngContentIndex = projectedNode.sourceAst.ngContentIndex;
	          var viewContainer = (node instanceof CompileElement && node.hasViewContainer) ? node.viewContainer : null;
	          if (this._isRootNode(parent)) {
	              if (this.view.viewType !== ViewType.COMPONENT) {
	                  this.view.rootNodes.push(new CompileViewRootNode(viewContainer ? CompileViewRootNodeType.ViewContainer : CompileViewRootNodeType.Node, viewContainer || node.renderNode));
	              }
	          }
	          else if (isPresent(parent.component) && isPresent(ngContentIndex)) {
	              parent.addContentNode(ngContentIndex, new CompileViewRootNode(viewContainer ? CompileViewRootNodeType.ViewContainer : CompileViewRootNodeType.Node, viewContainer || node.renderNode));
	          }
	      };
	      ViewBuilderVisitor.prototype._getParentRenderNode = function (parent) {
	          parent = _getOuterContainerParentOrSelf(parent);
	          if (this._isRootNode(parent)) {
	              if (this.view.viewType === ViewType.COMPONENT) {
	                  return parentRenderNodeVar;
	              }
	              else {
	                  // root node of an embedded/host view
	                  return NULL_EXPR;
	              }
	          }
	          else {
	              return isPresent(parent.component) &&
	                  parent.component.template.encapsulation !== _angular_core.ViewEncapsulation.Native ?
	                  NULL_EXPR :
	                  parent.renderNode;
	          }
	      };
	      ViewBuilderVisitor.prototype.getOrCreateLastRenderNode = function () {
	          var view = this.view;
	          if (view.rootNodes.length === 0 ||
	              view.rootNodes[view.rootNodes.length - 1].type !== CompileViewRootNodeType.Node) {
	              var fieldName = "_el_" + view.nodes.length;
	              view.fields.push(new ClassField(fieldName, importType(view.genConfig.renderTypes.renderElement)));
	              view.createMethod.addStmt(THIS_EXPR.prop(fieldName)
	                  .set(ViewProperties.renderer.callMethod('createTemplateAnchor', [NULL_EXPR, NULL_EXPR]))
	                  .toStmt());
	              view.rootNodes.push(new CompileViewRootNode(CompileViewRootNodeType.Node, THIS_EXPR.prop(fieldName)));
	          }
	          return view.rootNodes[view.rootNodes.length - 1].expr;
	      };
	      ViewBuilderVisitor.prototype.visitBoundText = function (ast, parent) {
	          return this._visitText(ast, '', parent);
	      };
	      ViewBuilderVisitor.prototype.visitText = function (ast, parent) {
	          return this._visitText(ast, ast.value, parent);
	      };
	      ViewBuilderVisitor.prototype._visitText = function (ast, value, parent) {
	          var fieldName = "_text_" + this.view.nodes.length;
	          this.view.fields.push(new ClassField(fieldName, importType(this.view.genConfig.renderTypes.renderText)));
	          var renderNode = THIS_EXPR.prop(fieldName);
	          var compileNode = new CompileNode(parent, this.view, this.view.nodes.length, renderNode, ast);
	          var createRenderNode = THIS_EXPR.prop(fieldName)
	              .set(ViewProperties.renderer.callMethod('createText', [
	              this._getParentRenderNode(parent), literal(value),
	              this.view.createMethod.resetDebugInfoExpr(this.view.nodes.length, ast)
	          ]))
	              .toStmt();
	          this.view.nodes.push(compileNode);
	          this.view.createMethod.addStmt(createRenderNode);
	          this._addRootNodeAndProject(compileNode);
	          return renderNode;
	      };
	      ViewBuilderVisitor.prototype.visitNgContent = function (ast, parent) {
	          // the projected nodes originate from a different view, so we don't
	          // have debug information for them...
	          this.view.createMethod.resetDebugInfo(null, ast);
	          var parentRenderNode = this._getParentRenderNode(parent);
	          if (parentRenderNode !== NULL_EXPR) {
	              this.view.createMethod.addStmt(THIS_EXPR.callMethod('projectNodes', [parentRenderNode, literal(ast.index)])
	                  .toStmt());
	          }
	          else if (this._isRootNode(parent)) {
	              if (this.view.viewType !== ViewType.COMPONENT) {
	                  // store root nodes only for embedded/host views
	                  this.view.rootNodes.push(new CompileViewRootNode(CompileViewRootNodeType.NgContent, null, ast.index));
	              }
	          }
	          else {
	              if (isPresent(parent.component) && isPresent(ast.ngContentIndex)) {
	                  parent.addContentNode(ast.ngContentIndex, new CompileViewRootNode(CompileViewRootNodeType.NgContent, null, ast.index));
	              }
	          }
	          return null;
	      };
	      ViewBuilderVisitor.prototype.visitElement = function (ast, parent) {
	          var nodeIndex = this.view.nodes.length;
	          var createRenderNodeExpr;
	          var debugContextExpr = this.view.createMethod.resetDebugInfoExpr(nodeIndex, ast);
	          var directives = ast.directives.map(function (directiveAst) { return directiveAst.directive; });
	          var component = directives.find(function (directive) { return directive.isComponent; });
	          if (ast.name === NG_CONTAINER_TAG) {
	              createRenderNodeExpr = ViewProperties.renderer.callMethod('createTemplateAnchor', [this._getParentRenderNode(parent), debugContextExpr]);
	          }
	          else {
	              var htmlAttrs = _readHtmlAttrs(ast.attrs);
	              var attrNameAndValues = createInlineArray(_mergeHtmlAndDirectiveAttrs(htmlAttrs, directives).map(function (v) { return literal(v); }));
	              if (nodeIndex === 0 && this.view.viewType === ViewType.HOST) {
	                  createRenderNodeExpr =
	                      importExpr(resolveIdentifier(Identifiers.selectOrCreateRenderHostElement)).callFn([
	                          ViewProperties.renderer, literal(ast.name), attrNameAndValues, rootSelectorVar,
	                          debugContextExpr
	                      ]);
	              }
	              else {
	                  createRenderNodeExpr =
	                      importExpr(resolveIdentifier(Identifiers.createRenderElement)).callFn([
	                          ViewProperties.renderer, this._getParentRenderNode(parent), literal(ast.name),
	                          attrNameAndValues, debugContextExpr
	                      ]);
	              }
	          }
	          var fieldName = "_el_" + nodeIndex;
	          this.view.fields.push(new ClassField(fieldName, importType(this.view.genConfig.renderTypes.renderElement)));
	          this.view.createMethod.addStmt(THIS_EXPR.prop(fieldName).set(createRenderNodeExpr).toStmt());
	          var renderNode = THIS_EXPR.prop(fieldName);
	          var compileElement = new CompileElement(parent, this.view, nodeIndex, renderNode, ast, component, directives, ast.providers, ast.hasViewContainer, false, ast.references, this.targetDependencies);
	          this.view.nodes.push(compileElement);
	          var compViewExpr = null;
	          if (isPresent(component)) {
	              var nestedComponentIdentifier = new CompileIdentifierMetadata({ name: getViewClassName(component, 0) });
	              this.targetDependencies.push(new ViewClassDependency(component.type, nestedComponentIdentifier));
	              compViewExpr = THIS_EXPR.prop("compView_" + nodeIndex); // fix highlighting: `
	              this.view.fields.push(new ClassField(compViewExpr.name, importType(resolveIdentifier(Identifiers.AppView), [importType(component.type)])));
	              this.view.viewChildren.push(compViewExpr);
	              compileElement.setComponentView(compViewExpr);
	              this.view.createMethod.addStmt(compViewExpr
	                  .set(importExpr(nestedComponentIdentifier).instantiate([
	                  ViewProperties.viewUtils, THIS_EXPR, literal(nodeIndex), renderNode
	              ]))
	                  .toStmt());
	          }
	          compileElement.beforeChildren();
	          this._addRootNodeAndProject(compileElement);
	          templateVisitAll(this, ast.children, compileElement);
	          compileElement.afterChildren(this.view.nodes.length - nodeIndex - 1);
	          if (isPresent(compViewExpr)) {
	              this.view.createMethod.addStmt(compViewExpr.callMethod('create', [compileElement.getComponent()]).toStmt());
	          }
	          return null;
	      };
	      ViewBuilderVisitor.prototype.visitEmbeddedTemplate = function (ast, parent) {
	          var nodeIndex = this.view.nodes.length;
	          var fieldName = "_anchor_" + nodeIndex;
	          this.view.fields.push(new ClassField(fieldName, importType(this.view.genConfig.renderTypes.renderComment)));
	          this.view.createMethod.addStmt(THIS_EXPR.prop(fieldName)
	              .set(ViewProperties.renderer.callMethod('createTemplateAnchor', [
	              this._getParentRenderNode(parent),
	              this.view.createMethod.resetDebugInfoExpr(nodeIndex, ast)
	          ]))
	              .toStmt());
	          var renderNode = THIS_EXPR.prop(fieldName);
	          var templateVariableBindings = ast.variables.map(function (varAst) { return [varAst.value.length > 0 ? varAst.value : IMPLICIT_TEMPLATE_VAR, varAst.name]; });
	          var directives = ast.directives.map(function (directiveAst) { return directiveAst.directive; });
	          var compileElement = new CompileElement(parent, this.view, nodeIndex, renderNode, ast, null, directives, ast.providers, ast.hasViewContainer, true, ast.references, this.targetDependencies);
	          this.view.nodes.push(compileElement);
	          this.nestedViewCount++;
	          var embeddedView = new CompileView(this.view.component, this.view.genConfig, this.view.pipeMetas, NULL_EXPR, this.view.animations, this.view.viewIndex + this.nestedViewCount, compileElement, templateVariableBindings);
	          this.nestedViewCount += buildView(embeddedView, ast.children, this.targetDependencies);
	          compileElement.beforeChildren();
	          this._addRootNodeAndProject(compileElement);
	          compileElement.afterChildren(0);
	          return null;
	      };
	      ViewBuilderVisitor.prototype.visitAttr = function (ast, ctx) { return null; };
	      ViewBuilderVisitor.prototype.visitDirective = function (ast, ctx) { return null; };
	      ViewBuilderVisitor.prototype.visitEvent = function (ast, eventTargetAndNames) {
	          return null;
	      };
	      ViewBuilderVisitor.prototype.visitReference = function (ast, ctx) { return null; };
	      ViewBuilderVisitor.prototype.visitVariable = function (ast, ctx) { return null; };
	      ViewBuilderVisitor.prototype.visitDirectiveProperty = function (ast, context) { return null; };
	      ViewBuilderVisitor.prototype.visitElementProperty = function (ast, context) { return null; };
	      return ViewBuilderVisitor;
	  }());
	  /**
	   * Walks up the nodes while the direct parent is a container.
	   *
	   * Returns the outer container or the node itself when it is not a direct child of a container.
	   *
	   * @internal
	   */
	  function _getOuterContainerOrSelf(node) {
	      var view = node.view;
	      while (_isNgContainer(node.parent, view)) {
	          node = node.parent;
	      }
	      return node;
	  }
	  /**
	   * Walks up the nodes while they are container and returns the first parent which is not.
	   *
	   * Returns the parent of the outer container or the node itself when it is not a container.
	   *
	   * @internal
	   */
	  function _getOuterContainerParentOrSelf(el) {
	      var view = el.view;
	      while (_isNgContainer(el, view)) {
	          el = el.parent;
	      }
	      return el;
	  }
	  function _isNgContainer(node, view) {
	      return !node.isNull() && node.sourceAst.name === NG_CONTAINER_TAG &&
	          node.view === view;
	  }
	  function _mergeHtmlAndDirectiveAttrs(declaredHtmlAttrs, directives) {
	      var mapResult = {};
	      Object.keys(declaredHtmlAttrs).forEach(function (key) { mapResult[key] = declaredHtmlAttrs[key]; });
	      directives.forEach(function (directiveMeta) {
	          Object.keys(directiveMeta.hostAttributes).forEach(function (name) {
	              var value = directiveMeta.hostAttributes[name];
	              var prevValue = mapResult[name];
	              mapResult[name] = isPresent(prevValue) ? mergeAttributeValue(name, prevValue, value) : value;
	          });
	      });
	      var arrResult = [];
	      // Note: We need to sort to get a defined output order
	      // for tests and for caching generated artifacts...
	      Object.keys(mapResult).sort().forEach(function (attrName) { arrResult.push(attrName, mapResult[attrName]); });
	      return arrResult;
	  }
	  function _readHtmlAttrs(attrs) {
	      var htmlAttrs = {};
	      attrs.forEach(function (ast) { htmlAttrs[ast.name] = ast.value; });
	      return htmlAttrs;
	  }
	  function mergeAttributeValue(attrName, attrValue1, attrValue2) {
	      if (attrName == CLASS_ATTR$1 || attrName == STYLE_ATTR) {
	          return attrValue1 + " " + attrValue2;
	      }
	      else {
	          return attrValue2;
	      }
	  }
	  function createViewTopLevelStmts(view, targetStatements) {
	      var nodeDebugInfosVar = NULL_EXPR;
	      if (view.genConfig.genDebugInfo) {
	          nodeDebugInfosVar = variable("nodeDebugInfos_" + view.component.type.name + view.viewIndex); // fix highlighting: `
	          targetStatements.push(nodeDebugInfosVar
	              .set(literalArr(view.nodes.map(createStaticNodeDebugInfo), new ArrayType(new ExternalType(resolveIdentifier(Identifiers.StaticNodeDebugInfo)), [TypeModifier.Const])))
	              .toDeclStmt(null, [StmtModifier.Final]));
	      }
	      var renderCompTypeVar = variable("renderType_" + view.component.type.name); // fix highlighting: `
	      if (view.viewIndex === 0) {
	          var templateUrlInfo = void 0;
	          if (view.component.template.templateUrl == view.component.type.moduleUrl) {
	              templateUrlInfo =
	                  view.component.type.moduleUrl + " class " + view.component.type.name + " - inline template";
	          }
	          else {
	              templateUrlInfo = view.component.template.templateUrl;
	          }
	          targetStatements.push(renderCompTypeVar
	              .set(importExpr(resolveIdentifier(Identifiers.createRenderComponentType)).callFn([
	              view.genConfig.genDebugInfo ? literal(templateUrlInfo) : literal(''),
	              literal(view.component.template.ngContentSelectors.length),
	              ViewEncapsulationEnum.fromValue(view.component.template.encapsulation),
	              view.styles,
	              literalMap(view.animations.map(function (entry) { return [entry.name, entry.fnExp]; })),
	          ]))
	              .toDeclStmt(importType(resolveIdentifier(Identifiers.RenderComponentType))));
	      }
	      var viewClass = createViewClass(view, renderCompTypeVar, nodeDebugInfosVar);
	      targetStatements.push(viewClass);
	  }
	  function createStaticNodeDebugInfo(node) {
	      var compileElement = node instanceof CompileElement ? node : null;
	      var providerTokens = [];
	      var componentToken = NULL_EXPR;
	      var varTokenEntries = [];
	      if (isPresent(compileElement)) {
	          providerTokens = compileElement.getProviderTokens();
	          if (isPresent(compileElement.component)) {
	              componentToken = createDiTokenExpression(identifierToken(compileElement.component.type));
	          }
	          Object.keys(compileElement.referenceTokens).forEach(function (varName) {
	              var token = compileElement.referenceTokens[varName];
	              varTokenEntries.push([varName, isPresent(token) ? createDiTokenExpression(token) : NULL_EXPR]);
	          });
	      }
	      return importExpr(resolveIdentifier(Identifiers.StaticNodeDebugInfo))
	          .instantiate([
	          literalArr(providerTokens, new ArrayType(DYNAMIC_TYPE, [TypeModifier.Const])),
	          componentToken,
	          literalMap(varTokenEntries, new MapType(DYNAMIC_TYPE, [TypeModifier.Const]))
	      ], importType(resolveIdentifier(Identifiers.StaticNodeDebugInfo), null, [TypeModifier.Const]));
	  }
	  function createViewClass(view, renderCompTypeVar, nodeDebugInfosVar) {
	      var viewConstructorArgs = [
	          new FnParam(ViewConstructorVars.viewUtils.name, importType(resolveIdentifier(Identifiers.ViewUtils))),
	          new FnParam(ViewConstructorVars.parentView.name, importType(resolveIdentifier(Identifiers.AppView), [DYNAMIC_TYPE])),
	          new FnParam(ViewConstructorVars.parentIndex.name, NUMBER_TYPE),
	          new FnParam(ViewConstructorVars.parentElement.name, DYNAMIC_TYPE)
	      ];
	      var superConstructorArgs = [
	          variable(view.className), renderCompTypeVar, ViewTypeEnum.fromValue(view.viewType),
	          ViewConstructorVars.viewUtils, ViewConstructorVars.parentView, ViewConstructorVars.parentIndex,
	          ViewConstructorVars.parentElement,
	          ChangeDetectorStatusEnum.fromValue(getChangeDetectionMode(view))
	      ];
	      if (view.genConfig.genDebugInfo) {
	          superConstructorArgs.push(nodeDebugInfosVar);
	      }
	      if (view.viewType === ViewType.EMBEDDED) {
	          viewConstructorArgs.push(new FnParam('declaredViewContainer', importType(resolveIdentifier(Identifiers.ViewContainer))));
	          superConstructorArgs.push(variable('declaredViewContainer'));
	      }
	      var viewMethods = [
	          new ClassMethod('createInternal', [new FnParam(rootSelectorVar.name, STRING_TYPE)], generateCreateMethod(view), importType(resolveIdentifier(Identifiers.ComponentRef), [DYNAMIC_TYPE])),
	          new ClassMethod('injectorGetInternal', [
	              new FnParam(InjectMethodVars.token.name, DYNAMIC_TYPE),
	              // Note: Can't use o.INT_TYPE here as the method in AppView uses number
	              new FnParam(InjectMethodVars.requestNodeIndex.name, NUMBER_TYPE),
	              new FnParam(InjectMethodVars.notFoundResult.name, DYNAMIC_TYPE)
	          ], addReturnValuefNotEmpty(view.injectorGetMethod.finish(), InjectMethodVars.notFoundResult), DYNAMIC_TYPE),
	          new ClassMethod('detectChangesInternal', [new FnParam(DetectChangesVars.throwOnChange.name, BOOL_TYPE)], generateDetectChangesMethod(view)),
	          new ClassMethod('dirtyParentQueriesInternal', [], view.dirtyParentQueriesMethod.finish()),
	          new ClassMethod('destroyInternal', [], generateDestroyMethod(view)),
	          new ClassMethod('detachInternal', [], view.detachMethod.finish()),
	          generateVisitRootNodesMethod(view), generateVisitProjectableNodesMethod(view),
	          generateCreateEmbeddedViewsMethod(view)
	      ].filter(function (method) { return method.body.length > 0; });
	      var superClass = view.genConfig.genDebugInfo ? Identifiers.DebugAppView : Identifiers.AppView;
	      var viewClass = createClassStmt({
	          name: view.className,
	          parent: importExpr(resolveIdentifier(superClass), [getContextType(view)]),
	          parentArgs: superConstructorArgs,
	          ctorParams: viewConstructorArgs,
	          builders: [{ methods: viewMethods }, view]
	      });
	      return viewClass;
	  }
	  function generateDestroyMethod(view) {
	      var stmts = [];
	      view.viewContainers.forEach(function (viewContainer) {
	          stmts.push(viewContainer.callMethod('destroyNestedViews', []).toStmt());
	      });
	      view.viewChildren.forEach(function (viewChild) { stmts.push(viewChild.callMethod('destroy', []).toStmt()); });
	      stmts.push.apply(stmts, view.destroyMethod.finish());
	      return stmts;
	  }
	  function generateCreateMethod(view) {
	      var parentRenderNodeExpr = NULL_EXPR;
	      var parentRenderNodeStmts = [];
	      if (view.viewType === ViewType.COMPONENT) {
	          parentRenderNodeExpr =
	              ViewProperties.renderer.callMethod('createViewRoot', [THIS_EXPR.prop('parentElement')]);
	          parentRenderNodeStmts =
	              [parentRenderNodeVar.set(parentRenderNodeExpr)
	                      .toDeclStmt(importType(view.genConfig.renderTypes.renderNode), [StmtModifier.Final])];
	      }
	      var resultExpr;
	      if (view.viewType === ViewType.HOST) {
	          var hostEl = view.nodes[0];
	          resultExpr =
	              importExpr(resolveIdentifier(Identifiers.ComponentRef_), [DYNAMIC_TYPE]).instantiate([
	                  literal(hostEl.nodeIndex), THIS_EXPR, hostEl.renderNode, hostEl.getComponent()
	              ]);
	      }
	      else {
	          resultExpr = NULL_EXPR;
	      }
	      var allNodesExpr = ViewProperties.renderer.cast(DYNAMIC_TYPE)
	          .prop('directRenderer')
	          .conditional(NULL_EXPR, literalArr(view.nodes.map(function (node) { return node.renderNode; })));
	      return parentRenderNodeStmts.concat(view.createMethod.finish(), [
	          THIS_EXPR
	              .callMethod('init', [
	              view.lastRenderNode,
	              allNodesExpr,
	              view.disposables.length ? literalArr(view.disposables) : NULL_EXPR,
	          ])
	              .toStmt(),
	          new ReturnStatement(resultExpr)
	      ]);
	  }
	  function generateDetectChangesMethod(view) {
	      var stmts = [];
	      if (view.animationBindingsMethod.isEmpty() && view.detectChangesInInputsMethod.isEmpty() &&
	          view.updateContentQueriesMethod.isEmpty() &&
	          view.afterContentLifecycleCallbacksMethod.isEmpty() &&
	          view.detectChangesRenderPropertiesMethod.isEmpty() &&
	          view.updateViewQueriesMethod.isEmpty() && view.afterViewLifecycleCallbacksMethod.isEmpty() &&
	          view.viewContainers.length === 0 && view.viewChildren.length === 0) {
	          return stmts;
	      }
	      stmts.push.apply(stmts, view.animationBindingsMethod.finish());
	      stmts.push.apply(stmts, view.detectChangesInInputsMethod.finish());
	      view.viewContainers.forEach(function (viewContainer) {
	          stmts.push(viewContainer.callMethod('detectChangesInNestedViews', [DetectChangesVars.throwOnChange])
	              .toStmt());
	      });
	      var afterContentStmts = view.updateContentQueriesMethod.finish().concat(view.afterContentLifecycleCallbacksMethod.finish());
	      if (afterContentStmts.length > 0) {
	          stmts.push(new IfStmt(not(DetectChangesVars.throwOnChange), afterContentStmts));
	      }
	      stmts.push.apply(stmts, view.detectChangesRenderPropertiesMethod.finish());
	      view.viewChildren.forEach(function (viewChild) {
	          stmts.push(viewChild.callMethod('detectChanges', [DetectChangesVars.throwOnChange]).toStmt());
	      });
	      var afterViewStmts = view.updateViewQueriesMethod.finish().concat(view.afterViewLifecycleCallbacksMethod.finish());
	      if (afterViewStmts.length > 0) {
	          stmts.push(new IfStmt(not(DetectChangesVars.throwOnChange), afterViewStmts));
	      }
	      var varStmts = [];
	      var readVars = findReadVarNames(stmts);
	      if (readVars.has(DetectChangesVars.changed.name)) {
	          varStmts.push(DetectChangesVars.changed.set(literal(true)).toDeclStmt(BOOL_TYPE));
	      }
	      if (readVars.has(DetectChangesVars.changes.name)) {
	          varStmts.push(DetectChangesVars.changes.set(NULL_EXPR)
	              .toDeclStmt(new MapType(importType(resolveIdentifier(Identifiers.SimpleChange)))));
	      }
	      varStmts.push.apply(varStmts, createSharedBindingVariablesIfNeeded(stmts));
	      return varStmts.concat(stmts);
	  }
	  function addReturnValuefNotEmpty(statements, value) {
	      if (statements.length > 0) {
	          return statements.concat([new ReturnStatement(value)]);
	      }
	      else {
	          return statements;
	      }
	  }
	  function getContextType(view) {
	      if (view.viewType === ViewType.COMPONENT) {
	          return importType(view.component.type);
	      }
	      return DYNAMIC_TYPE;
	  }
	  function getChangeDetectionMode(view) {
	      var mode;
	      if (view.viewType === ViewType.COMPONENT) {
	          mode = isDefaultChangeDetectionStrategy(view.component.changeDetection) ?
	              ChangeDetectorStatus.CheckAlways :
	              ChangeDetectorStatus.CheckOnce;
	      }
	      else {
	          mode = ChangeDetectorStatus.CheckAlways;
	      }
	      return mode;
	  }
	  function generateVisitRootNodesMethod(view) {
	      var cbVar = variable('cb');
	      var ctxVar = variable('ctx');
	      var stmts = generateVisitNodesStmts(view.rootNodes, cbVar, ctxVar);
	      return new ClassMethod('visitRootNodesInternal', [new FnParam(cbVar.name, DYNAMIC_TYPE), new FnParam(ctxVar.name, DYNAMIC_TYPE)], stmts);
	  }
	  function generateVisitProjectableNodesMethod(view) {
	      var nodeIndexVar = variable('nodeIndex');
	      var ngContentIndexVar = variable('ngContentIndex');
	      var cbVar = variable('cb');
	      var ctxVar = variable('ctx');
	      var stmts = [];
	      view.nodes.forEach(function (node) {
	          if (node instanceof CompileElement && node.component) {
	              node.contentNodesByNgContentIndex.forEach(function (projectedNodes, ngContentIndex) {
	                  stmts.push(new IfStmt(nodeIndexVar.equals(literal(node.nodeIndex))
	                      .and(ngContentIndexVar.equals(literal(ngContentIndex))), generateVisitNodesStmts(projectedNodes, cbVar, ctxVar)));
	              });
	          }
	      });
	      return new ClassMethod('visitProjectableNodesInternal', [
	          new FnParam(nodeIndexVar.name, NUMBER_TYPE),
	          new FnParam(ngContentIndexVar.name, NUMBER_TYPE),
	          new FnParam(cbVar.name, DYNAMIC_TYPE), new FnParam(ctxVar.name, DYNAMIC_TYPE)
	      ], stmts);
	  }
	  function generateVisitNodesStmts(nodes, cb, ctx) {
	      var stmts = [];
	      nodes.forEach(function (node) {
	          switch (node.type) {
	              case CompileViewRootNodeType.Node:
	                  stmts.push(cb.callFn([node.expr, ctx]).toStmt());
	                  break;
	              case CompileViewRootNodeType.ViewContainer:
	                  stmts.push(cb.callFn([node.expr.prop('nativeElement'), ctx]).toStmt());
	                  stmts.push(node.expr.callMethod('visitNestedViewRootNodes', [cb, ctx]).toStmt());
	                  break;
	              case CompileViewRootNodeType.NgContent:
	                  stmts.push(THIS_EXPR.callMethod('visitProjectedNodes', [literal(node.ngContentIndex), cb, ctx])
	                      .toStmt());
	                  break;
	          }
	      });
	      return stmts;
	  }
	  function generateCreateEmbeddedViewsMethod(view) {
	      var nodeIndexVar = variable('nodeIndex');
	      var stmts = [];
	      view.nodes.forEach(function (node) {
	          if (node instanceof CompileElement) {
	              if (node.embeddedView) {
	                  var parentNodeIndex = node.isRootElement() ? null : node.parent.nodeIndex;
	                  stmts.push(new IfStmt(nodeIndexVar.equals(literal(node.nodeIndex)), [new ReturnStatement(node.embeddedView.classExpr.instantiate([
	                          ViewProperties.viewUtils, THIS_EXPR, literal(node.nodeIndex), node.renderNode,
	                          node.viewContainer
	                      ]))]));
	              }
	          }
	      });
	      if (stmts.length > 0) {
	          stmts.push(new ReturnStatement(NULL_EXPR));
	      }
	      return new ClassMethod('createEmbeddedViewInternal', [new FnParam(nodeIndexVar.name, NUMBER_TYPE)], stmts, importType(resolveIdentifier(Identifiers.AppView), [DYNAMIC_TYPE]));
	  }

	  var ViewCompileResult = (function () {
	      function ViewCompileResult(statements, viewClassVar, dependencies) {
	          this.statements = statements;
	          this.viewClassVar = viewClassVar;
	          this.dependencies = dependencies;
	      }
	      return ViewCompileResult;
	  }());
	  var ViewCompiler = (function () {
	      function ViewCompiler(_genConfig, _schemaRegistry) {
	          this._genConfig = _genConfig;
	          this._schemaRegistry = _schemaRegistry;
	      }
	      ViewCompiler.prototype.compileComponent = function (component, template, styles, pipes, compiledAnimations) {
	          var dependencies = [];
	          var view = new CompileView(component, this._genConfig, pipes, styles, compiledAnimations, 0, CompileElement.createNull(), []);
	          var statements = [];
	          buildView(view, template, dependencies);
	          // Need to separate binding from creation to be able to refer to
	          // variables that have been declared after usage.
	          bindView(view, template, this._schemaRegistry);
	          finishView(view, statements);
	          return new ViewCompileResult(statements, view.classExpr.name, dependencies);
	      };
	      ViewCompiler.decorators = [
	          { type: _angular_core.Injectable },
	      ];
	      /** @nocollapse */
	      ViewCompiler.ctorParameters = [
	          { type: CompilerConfig, },
	          { type: ElementSchemaRegistry, },
	      ];
	      return ViewCompiler;
	  }());

	  var SourceModule = (function () {
	      function SourceModule(fileUrl, moduleUrl, source) {
	          this.fileUrl = fileUrl;
	          this.moduleUrl = moduleUrl;
	          this.source = source;
	      }
	      return SourceModule;
	  }());
	  // Returns all the source files and a mapping from modules to directives
	  function analyzeNgModules(programStaticSymbols, options, metadataResolver) {
	      var _a = _createNgModules(programStaticSymbols, options, metadataResolver), ngModules = _a.ngModules, symbolsMissingModule = _a.symbolsMissingModule;
	      return _analyzeNgModules(ngModules, symbolsMissingModule);
	  }
	  function analyzeAndValidateNgModules(programStaticSymbols, options, metadataResolver) {
	      var result = analyzeNgModules(programStaticSymbols, options, metadataResolver);
	      if (result.symbolsMissingModule && result.symbolsMissingModule.length) {
	          var messages = result.symbolsMissingModule.map(function (s) { return ("Cannot determine the module for class " + s.name + " in " + s.filePath + "!"); });
	          throw new Error(messages.join('\n'));
	      }
	      return result;
	  }
	  // Wait for the directives in the given modules have been loaded
	  function loadNgModuleDirectives(ngModules) {
	      return Promise
	          .all(ListWrapper.flatten(ngModules.map(function (ngModule) { return ngModule.transitiveModule.directiveLoaders.map(function (loader) { return loader(); }); })))
	          .then(function () { });
	  }
	  function _analyzeNgModules(ngModuleMetas, symbolsMissingModule) {
	      var moduleMetasByRef = new Map();
	      ngModuleMetas.forEach(function (ngModule) { return moduleMetasByRef.set(ngModule.type.reference, ngModule); });
	      var ngModuleByPipeOrDirective = new Map();
	      var ngModulesByFile = new Map();
	      var ngDirectivesByFile = new Map();
	      var filePaths = new Set();
	      // Looping over all modules to construct:
	      // - a map from file to modules `ngModulesByFile`,
	      // - a map from file to directives `ngDirectivesByFile`,
	      // - a map from directive/pipe to module `ngModuleByPipeOrDirective`.
	      ngModuleMetas.forEach(function (ngModuleMeta) {
	          var srcFileUrl = ngModuleMeta.type.reference.filePath;
	          filePaths.add(srcFileUrl);
	          ngModulesByFile.set(srcFileUrl, (ngModulesByFile.get(srcFileUrl) || []).concat(ngModuleMeta.type.reference));
	          ngModuleMeta.declaredDirectives.forEach(function (dirIdentifier) {
	              var fileUrl = dirIdentifier.reference.filePath;
	              filePaths.add(fileUrl);
	              ngDirectivesByFile.set(fileUrl, (ngDirectivesByFile.get(fileUrl) || []).concat(dirIdentifier.reference));
	              ngModuleByPipeOrDirective.set(dirIdentifier.reference, ngModuleMeta);
	          });
	          ngModuleMeta.declaredPipes.forEach(function (pipeIdentifier) {
	              var fileUrl = pipeIdentifier.reference.filePath;
	              filePaths.add(fileUrl);
	              ngModuleByPipeOrDirective.set(pipeIdentifier.reference, ngModuleMeta);
	          });
	      });
	      var files = [];
	      filePaths.forEach(function (srcUrl) {
	          var directives = ngDirectivesByFile.get(srcUrl) || [];
	          var ngModules = ngModulesByFile.get(srcUrl) || [];
	          files.push({ srcUrl: srcUrl, directives: directives, ngModules: ngModules });
	      });
	      return {
	          // map directive/pipe to module
	          ngModuleByPipeOrDirective: ngModuleByPipeOrDirective,
	          // list modules and directives for every source file
	          files: files,
	          ngModules: ngModuleMetas, symbolsMissingModule: symbolsMissingModule
	      };
	  }
	  var OfflineCompiler = (function () {
	      function OfflineCompiler(_metadataResolver, _templateParser, _styleCompiler, _viewCompiler, _dirWrapperCompiler, _ngModuleCompiler, _outputEmitter, _localeId, _translationFormat, _animationParser) {
	          this._metadataResolver = _metadataResolver;
	          this._templateParser = _templateParser;
	          this._styleCompiler = _styleCompiler;
	          this._viewCompiler = _viewCompiler;
	          this._dirWrapperCompiler = _dirWrapperCompiler;
	          this._ngModuleCompiler = _ngModuleCompiler;
	          this._outputEmitter = _outputEmitter;
	          this._localeId = _localeId;
	          this._translationFormat = _translationFormat;
	          this._animationParser = _animationParser;
	          this._animationCompiler = new AnimationCompiler();
	      }
	      OfflineCompiler.prototype.clearCache = function () { this._metadataResolver.clearCache(); };
	      OfflineCompiler.prototype.compileModules = function (staticSymbols, options) {
	          var _this = this;
	          var _a = analyzeAndValidateNgModules(staticSymbols, options, this._metadataResolver), ngModuleByPipeOrDirective = _a.ngModuleByPipeOrDirective, files = _a.files, ngModules = _a.ngModules;
	          return loadNgModuleDirectives(ngModules).then(function () {
	              var sourceModules = files.map(function (file) { return _this._compileSrcFile(file.srcUrl, ngModuleByPipeOrDirective, file.directives, file.ngModules); });
	              return ListWrapper.flatten(sourceModules);
	          });
	      };
	      OfflineCompiler.prototype._compileSrcFile = function (srcFileUrl, ngModuleByPipeOrDirective, directives, ngModules) {
	          var _this = this;
	          var fileSuffix = _splitTypescriptSuffix(srcFileUrl)[1];
	          var statements = [];
	          var exportedVars = [];
	          var outputSourceModules = [];
	          // compile all ng modules
	          exportedVars.push.apply(exportedVars, ngModules.map(function (ngModuleType) { return _this._compileModule(ngModuleType, statements); }));
	          // compile directive wrappers
	          exportedVars.push.apply(exportedVars, directives.map(function (directiveType) { return _this._compileDirectiveWrapper(directiveType, statements); }));
	          // compile components
	          directives.forEach(function (dirType) {
	              var compMeta = _this._metadataResolver.getDirectiveMetadata(dirType);
	              if (!compMeta.isComponent) {
	                  return Promise.resolve(null);
	              }
	              var ngModule = ngModuleByPipeOrDirective.get(dirType);
	              if (!ngModule) {
	                  throw new Error("Internal Error: cannot determine the module for component " + compMeta.type.name + "!");
	              }
	              _assertComponent(compMeta);
	              // compile styles
	              var stylesCompileResults = _this._styleCompiler.compileComponent(compMeta);
	              stylesCompileResults.externalStylesheets.forEach(function (compiledStyleSheet) {
	                  outputSourceModules.push(_this._codgenStyles(srcFileUrl, compiledStyleSheet, fileSuffix));
	              });
	              // compile components
	              exportedVars.push(_this._compileComponentFactory(compMeta, ngModule, fileSuffix, statements), _this._compileComponent(compMeta, ngModule, ngModule.transitiveModule.directives, stylesCompileResults.componentStylesheet, fileSuffix, statements));
	          });
	          if (statements.length > 0) {
	              var srcModule = this._codegenSourceModule(srcFileUrl, _ngfactoryModuleUrl(srcFileUrl), statements, exportedVars);
	              outputSourceModules.unshift(srcModule);
	          }
	          return outputSourceModules;
	      };
	      OfflineCompiler.prototype._compileModule = function (ngModuleType, targetStatements) {
	          var ngModule = this._metadataResolver.getNgModuleMetadata(ngModuleType);
	          var providers = [];
	          if (this._localeId) {
	              providers.push(new CompileProviderMetadata({
	                  token: resolveIdentifierToken(Identifiers.LOCALE_ID),
	                  useValue: this._localeId,
	              }));
	          }
	          if (this._translationFormat) {
	              providers.push(new CompileProviderMetadata({
	                  token: resolveIdentifierToken(Identifiers.TRANSLATIONS_FORMAT),
	                  useValue: this._translationFormat
	              }));
	          }
	          var appCompileResult = this._ngModuleCompiler.compile(ngModule, providers);
	          appCompileResult.dependencies.forEach(function (dep) {
	              dep.placeholder.name = _componentFactoryName(dep.comp);
	              dep.placeholder.moduleUrl = _ngfactoryModuleUrl(dep.comp.moduleUrl);
	          });
	          targetStatements.push.apply(targetStatements, appCompileResult.statements);
	          return appCompileResult.ngModuleFactoryVar;
	      };
	      OfflineCompiler.prototype._compileDirectiveWrapper = function (directiveType, targetStatements) {
	          var dirMeta = this._metadataResolver.getDirectiveMetadata(directiveType);
	          var dirCompileResult = this._dirWrapperCompiler.compile(dirMeta);
	          targetStatements.push.apply(targetStatements, dirCompileResult.statements);
	          return dirCompileResult.dirWrapperClassVar;
	      };
	      OfflineCompiler.prototype._compileComponentFactory = function (compMeta, ngModule, fileSuffix, targetStatements) {
	          var hostMeta = createHostComponentMeta(compMeta);
	          var hostViewFactoryVar = this._compileComponent(hostMeta, ngModule, [compMeta.type], null, fileSuffix, targetStatements);
	          var compFactoryVar = _componentFactoryName(compMeta.type);
	          targetStatements.push(variable(compFactoryVar)
	              .set(importExpr(resolveIdentifier(Identifiers.ComponentFactory), [importType(compMeta.type)])
	              .instantiate([
	              literal(compMeta.selector),
	              variable(hostViewFactoryVar),
	              importExpr(compMeta.type),
	          ], importType(resolveIdentifier(Identifiers.ComponentFactory), [importType(compMeta.type)], [TypeModifier.Const])))
	              .toDeclStmt(null, [StmtModifier.Final]));
	          return compFactoryVar;
	      };
	      OfflineCompiler.prototype._compileComponent = function (compMeta, ngModule, directiveIdentifiers, componentStyles, fileSuffix, targetStatements) {
	          var _this = this;
	          var parsedAnimations = this._animationParser.parseComponent(compMeta);
	          var directives = directiveIdentifiers.map(function (dir) { return _this._metadataResolver.getDirectiveSummary(dir.reference); });
	          var pipes = ngModule.transitiveModule.pipes.map(function (pipe) { return _this._metadataResolver.getPipeSummary(pipe.reference); });
	          var parsedTemplate = this._templateParser.parse(compMeta, compMeta.template.template, directives, pipes, ngModule.schemas, compMeta.type.name);
	          var stylesExpr = componentStyles ? variable(componentStyles.stylesVar) : literalArr([]);
	          var compiledAnimations = this._animationCompiler.compile(compMeta.type.name, parsedAnimations);
	          var viewResult = this._viewCompiler.compileComponent(compMeta, parsedTemplate, stylesExpr, pipes, compiledAnimations);
	          if (componentStyles) {
	              targetStatements.push.apply(targetStatements, _resolveStyleStatements(componentStyles, fileSuffix));
	          }
	          compiledAnimations.forEach(function (entry) { return targetStatements.push.apply(targetStatements, entry.statements); });
	          targetStatements.push.apply(targetStatements, _resolveViewStatements(viewResult));
	          return viewResult.viewClassVar;
	      };
	      OfflineCompiler.prototype._codgenStyles = function (fileUrl, stylesCompileResult, fileSuffix) {
	          _resolveStyleStatements(stylesCompileResult, fileSuffix);
	          return this._codegenSourceModule(fileUrl, _stylesModuleUrl(stylesCompileResult.meta.moduleUrl, stylesCompileResult.isShimmed, fileSuffix), stylesCompileResult.statements, [stylesCompileResult.stylesVar]);
	      };
	      OfflineCompiler.prototype._codegenSourceModule = function (fileUrl, moduleUrl, statements, exportedVars) {
	          return new SourceModule(fileUrl, moduleUrl, this._outputEmitter.emitStatements(moduleUrl, statements, exportedVars));
	      };
	      return OfflineCompiler;
	  }());
	  function _resolveViewStatements(compileResult) {
	      compileResult.dependencies.forEach(function (dep) {
	          if (dep instanceof ViewClassDependency) {
	              var vfd = dep;
	              vfd.placeholder.moduleUrl = _ngfactoryModuleUrl(vfd.comp.moduleUrl);
	          }
	          else if (dep instanceof ComponentFactoryDependency) {
	              var cfd = dep;
	              cfd.placeholder.name = _componentFactoryName(cfd.comp);
	              cfd.placeholder.moduleUrl = _ngfactoryModuleUrl(cfd.comp.moduleUrl);
	          }
	          else if (dep instanceof DirectiveWrapperDependency) {
	              var dwd = dep;
	              dwd.placeholder.moduleUrl = _ngfactoryModuleUrl(dwd.dir.moduleUrl);
	          }
	      });
	      return compileResult.statements;
	  }
	  function _resolveStyleStatements(compileResult, fileSuffix) {
	      compileResult.dependencies.forEach(function (dep) {
	          dep.valuePlaceholder.moduleUrl = _stylesModuleUrl(dep.moduleUrl, dep.isShimmed, fileSuffix);
	      });
	      return compileResult.statements;
	  }
	  function _ngfactoryModuleUrl(dirUrl) {
	      var urlWithSuffix = _splitTypescriptSuffix(dirUrl);
	      return urlWithSuffix[0] + ".ngfactory" + urlWithSuffix[1];
	  }
	  function _componentFactoryName(comp) {
	      return comp.name + "NgFactory";
	  }
	  function _stylesModuleUrl(stylesheetUrl, shim, suffix) {
	      return shim ? stylesheetUrl + ".shim" + suffix : "" + stylesheetUrl + suffix;
	  }
	  function _assertComponent(meta) {
	      if (!meta.isComponent) {
	          throw new Error("Could not compile '" + meta.type.name + "' because it is not a component.");
	      }
	  }
	  function _splitTypescriptSuffix(path) {
	      if (path.endsWith('.d.ts')) {
	          return [path.slice(0, -5), '.ts'];
	      }
	      var lastDot = path.lastIndexOf('.');
	      if (lastDot !== -1) {
	          return [path.substring(0, lastDot), path.substring(lastDot)];
	      }
	      return [path, ''];
	  }
	  // Load the NgModules and check
	  // that all directives / pipes that are present in the program
	  // are also declared by a module.
	  function _createNgModules(programStaticSymbols, options, metadataResolver) {
	      var ngModules = new Map();
	      var programPipesAndDirectives = [];
	      var ngModulePipesAndDirective = new Set();
	      var addNgModule = function (staticSymbol) {
	          if (ngModules.has(staticSymbol)) {
	              return false;
	          }
	          var ngModule = metadataResolver.getUnloadedNgModuleMetadata(staticSymbol, false, false);
	          if (ngModule) {
	              ngModules.set(ngModule.type.reference, ngModule);
	              ngModule.declaredDirectives.forEach(function (dir) { return ngModulePipesAndDirective.add(dir.reference); });
	              ngModule.declaredPipes.forEach(function (pipe) { return ngModulePipesAndDirective.add(pipe.reference); });
	              if (options.transitiveModules) {
	                  // For every input modules add the list of transitively included modules
	                  ngModule.transitiveModule.modules.forEach(function (modMeta) { return addNgModule(modMeta.type.reference); });
	              }
	          }
	          return !!ngModule;
	      };
	      programStaticSymbols.forEach(function (staticSymbol) {
	          if (!addNgModule(staticSymbol) &&
	              (metadataResolver.isDirective(staticSymbol) || metadataResolver.isPipe(staticSymbol))) {
	              programPipesAndDirectives.push(staticSymbol);
	          }
	      });
	      // Throw an error if any of the program pipe or directives is not declared by a module
	      var symbolsMissingModule = programPipesAndDirectives.filter(function (s) { return !ngModulePipesAndDirective.has(s); });
	      return { ngModules: Array.from(ngModules.values()), symbolsMissingModule: symbolsMissingModule };
	  }

	  var StylesCollectionEntry = (function () {
	      function StylesCollectionEntry(time, value) {
	          this.time = time;
	          this.value = value;
	      }
	      StylesCollectionEntry.prototype.matches = function (time, value) {
	          return time == this.time && value == this.value;
	      };
	      return StylesCollectionEntry;
	  }());
	  var StylesCollection = (function () {
	      function StylesCollection() {
	          this.styles = {};
	      }
	      StylesCollection.prototype.insertAtTime = function (property, time, value) {
	          var tuple = new StylesCollectionEntry(time, value);
	          var entries = this.styles[property];
	          if (!isPresent(entries)) {
	              entries = this.styles[property] = [];
	          }
	          // insert this at the right stop in the array
	          // this way we can keep it sorted
	          var insertionIndex = 0;
	          for (var i = entries.length - 1; i >= 0; i--) {
	              if (entries[i].time <= time) {
	                  insertionIndex = i + 1;
	                  break;
	              }
	          }
	          entries.splice(insertionIndex, 0, tuple);
	      };
	      StylesCollection.prototype.getByIndex = function (property, index) {
	          var items = this.styles[property];
	          if (isPresent(items)) {
	              return index >= items.length ? null : items[index];
	          }
	          return null;
	      };
	      StylesCollection.prototype.indexOfAtOrBeforeTime = function (property, time) {
	          var entries = this.styles[property];
	          if (isPresent(entries)) {
	              for (var i = entries.length - 1; i >= 0; i--) {
	                  if (entries[i].time <= time)
	                      return i;
	              }
	          }
	          return null;
	      };
	      return StylesCollection;
	  }());

	  /**
	   * @license
	   * Copyright Google Inc. All Rights Reserved.
	   *
	   * Use of this source code is governed by an MIT-style license that can be
	   * found in the LICENSE file at https://angular.io/license
	   */
	  var __extends$16 = (this && this.__extends) || function (d, b) {
	      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	      function __() { this.constructor = d; }
	      d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	  };
	  var _INITIAL_KEYFRAME = 0;
	  var _TERMINAL_KEYFRAME = 1;
	  var _ONE_SECOND = 1000;
	  var AnimationParseError = (function (_super) {
	      __extends$16(AnimationParseError, _super);
	      function AnimationParseError(message) {
	          _super.call(this, null, message);
	      }
	      AnimationParseError.prototype.toString = function () { return "" + this.msg; };
	      return AnimationParseError;
	  }(ParseError));
	  var AnimationEntryParseResult = (function () {
	      function AnimationEntryParseResult(ast, errors) {
	          this.ast = ast;
	          this.errors = errors;
	      }
	      return AnimationEntryParseResult;
	  }());
	  var AnimationParser = (function () {
	      function AnimationParser(_schema) {
	          this._schema = _schema;
	      }
	      AnimationParser.prototype.parseComponent = function (component) {
	          var _this = this;
	          var errors = [];
	          var componentName = component.type.name;
	          var animationTriggerNames = new Set();
	          var asts = component.template.animations.map(function (entry) {
	              var result = _this.parseEntry(entry);
	              var ast = result.ast;
	              var triggerName = ast.name;
	              if (animationTriggerNames.has(triggerName)) {
	                  result.errors.push(new AnimationParseError("The animation trigger \"" + triggerName + "\" has already been registered for the " + componentName + " component"));
	              }
	              else {
	                  animationTriggerNames.add(triggerName);
	              }
	              if (result.errors.length > 0) {
	                  var errorMessage_1 = "- Unable to parse the animation sequence for \"" + triggerName + "\" on the " + componentName + " component due to the following errors:";
	                  result.errors.forEach(function (error) { errorMessage_1 += '\n-- ' + error.msg; });
	                  errors.push(errorMessage_1);
	              }
	              return ast;
	          });
	          if (errors.length > 0) {
	              var errorString = errors.join('\n');
	              throw new Error("Animation parse errors:\n" + errorString);
	          }
	          return asts;
	      };
	      AnimationParser.prototype.parseEntry = function (entry) {
	          var _this = this;
	          var errors = [];
	          var stateStyles = {};
	          var transitions = [];
	          var stateDeclarationAsts = [];
	          entry.definitions.forEach(function (def) {
	              if (def instanceof CompileAnimationStateDeclarationMetadata) {
	                  _parseAnimationDeclarationStates(def, _this._schema, errors).forEach(function (ast) {
	                      stateDeclarationAsts.push(ast);
	                      stateStyles[ast.stateName] = ast.styles;
	                  });
	              }
	              else {
	                  transitions.push(def);
	              }
	          });
	          var stateTransitionAsts = transitions.map(function (transDef) { return _parseAnimationStateTransition(transDef, stateStyles, _this._schema, errors); });
	          var ast = new AnimationEntryAst(entry.name, stateDeclarationAsts, stateTransitionAsts);
	          return new AnimationEntryParseResult(ast, errors);
	      };
	      AnimationParser.decorators = [
	          { type: _angular_core.Injectable },
	      ];
	      /** @nocollapse */
	      AnimationParser.ctorParameters = [
	          { type: ElementSchemaRegistry, },
	      ];
	      return AnimationParser;
	  }());
	  function _parseAnimationDeclarationStates(stateMetadata, schema, errors) {
	      var normalizedStyles = _normalizeStyleMetadata(stateMetadata.styles, {}, schema, errors, false);
	      var defStyles = new AnimationStylesAst(normalizedStyles);
	      var states = stateMetadata.stateNameExpr.split(/\s*,\s*/);
	      return states.map(function (state) { return new AnimationStateDeclarationAst(state, defStyles); });
	  }
	  function _parseAnimationStateTransition(transitionStateMetadata, stateStyles, schema, errors) {
	      var styles = new StylesCollection();
	      var transitionExprs = [];
	      var transitionStates = transitionStateMetadata.stateChangeExpr.split(/\s*,\s*/);
	      transitionStates.forEach(function (expr) { transitionExprs.push.apply(transitionExprs, _parseAnimationTransitionExpr(expr, errors)); });
	      var entry = _normalizeAnimationEntry(transitionStateMetadata.steps);
	      var animation = _normalizeStyleSteps(entry, stateStyles, schema, errors);
	      var animationAst = _parseTransitionAnimation(animation, 0, styles, stateStyles, errors);
	      if (errors.length == 0) {
	          _fillAnimationAstStartingKeyframes(animationAst, styles, errors);
	      }
	      var stepsAst = (animationAst instanceof AnimationWithStepsAst) ?
	          animationAst :
	          new AnimationSequenceAst([animationAst]);
	      return new AnimationStateTransitionAst(transitionExprs, stepsAst);
	  }
	  function _parseAnimationAlias(alias, errors) {
	      switch (alias) {
	          case ':enter':
	              return 'void => *';
	          case ':leave':
	              return '* => void';
	          default:
	              errors.push(new AnimationParseError("the transition alias value \"" + alias + "\" is not supported"));
	              return '* => *';
	      }
	  }
	  function _parseAnimationTransitionExpr(eventStr, errors) {
	      var expressions = [];
	      if (eventStr[0] == ':') {
	          eventStr = _parseAnimationAlias(eventStr, errors);
	      }
	      var match = eventStr.match(/^(\*|[-\w]+)\s*(<?[=-]>)\s*(\*|[-\w]+)$/);
	      if (!isPresent(match) || match.length < 4) {
	          errors.push(new AnimationParseError("the provided " + eventStr + " is not of a supported format"));
	          return expressions;
	      }
	      var fromState = match[1];
	      var separator = match[2];
	      var toState = match[3];
	      expressions.push(new AnimationStateTransitionExpression(fromState, toState));
	      var isFullAnyStateExpr = fromState == ANY_STATE && toState == ANY_STATE;
	      if (separator[0] == '<' && !isFullAnyStateExpr) {
	          expressions.push(new AnimationStateTransitionExpression(toState, fromState));
	      }
	      return expressions;
	  }
	  function _normalizeAnimationEntry(entry) {
	      return Array.isArray(entry) ? new CompileAnimationSequenceMetadata(entry) : entry;
	  }
	  function _normalizeStyleMetadata(entry, stateStyles, schema, errors, permitStateReferences) {
	      var normalizedStyles = [];
	      entry.styles.forEach(function (styleEntry) {
	          if (typeof styleEntry === 'string') {
	              if (permitStateReferences) {
	                  normalizedStyles.push.apply(normalizedStyles, _resolveStylesFromState(styleEntry, stateStyles, errors));
	              }
	              else {
	                  errors.push(new AnimationParseError("State based animations cannot contain references to other states"));
	              }
	          }
	          else {
	              var stylesObj_1 = styleEntry;
	              var normalizedStylesObj_1 = {};
	              Object.keys(stylesObj_1).forEach(function (propName) {
	                  var normalizedProp = schema.normalizeAnimationStyleProperty(propName);
	                  var normalizedOutput = schema.normalizeAnimationStyleValue(normalizedProp, propName, stylesObj_1[propName]);
	                  var normalizationError = normalizedOutput['error'];
	                  if (normalizationError) {
	                      errors.push(new AnimationParseError(normalizationError));
	                  }
	                  normalizedStylesObj_1[normalizedProp] = normalizedOutput['value'];
	              });
	              normalizedStyles.push(normalizedStylesObj_1);
	          }
	      });
	      return normalizedStyles;
	  }
	  function _normalizeStyleSteps(entry, stateStyles, schema, errors) {
	      var steps = _normalizeStyleStepEntry(entry, stateStyles, schema, errors);
	      return (entry instanceof CompileAnimationGroupMetadata) ?
	          new CompileAnimationGroupMetadata(steps) :
	          new CompileAnimationSequenceMetadata(steps);
	  }
	  function _mergeAnimationStyles(stylesList, newItem) {
	      if (typeof newItem === 'object' && newItem !== null && stylesList.length > 0) {
	          var lastIndex = stylesList.length - 1;
	          var lastItem = stylesList[lastIndex];
	          if (typeof lastItem === 'object' && lastItem !== null) {
	              stylesList[lastIndex] = StringMapWrapper.merge(lastItem, newItem);
	              return;
	          }
	      }
	      stylesList.push(newItem);
	  }
	  function _normalizeStyleStepEntry(entry, stateStyles, schema, errors) {
	      var steps;
	      if (entry instanceof CompileAnimationWithStepsMetadata) {
	          steps = entry.steps;
	      }
	      else {
	          return [entry];
	      }
	      var newSteps = [];
	      var combinedStyles;
	      steps.forEach(function (step) {
	          if (step instanceof CompileAnimationStyleMetadata) {
	              // this occurs when a style step is followed by a previous style step
	              // or when the first style step is run. We want to concatenate all subsequent
	              // style steps together into a single style step such that we have the correct
	              // starting keyframe data to pass into the animation player.
	              if (!isPresent(combinedStyles)) {
	                  combinedStyles = [];
	              }
	              _normalizeStyleMetadata(step, stateStyles, schema, errors, true)
	                  .forEach(function (entry) { _mergeAnimationStyles(combinedStyles, entry); });
	          }
	          else {
	              // it is important that we create a metadata entry of the combined styles
	              // before we go on an process the animate, sequence or group metadata steps.
	              // This will ensure that the AST will have the previous styles painted on
	              // screen before any further animations that use the styles take place.
	              if (isPresent(combinedStyles)) {
	                  newSteps.push(new CompileAnimationStyleMetadata(0, combinedStyles));
	                  combinedStyles = null;
	              }
	              if (step instanceof CompileAnimationAnimateMetadata) {
	                  // we do not recurse into CompileAnimationAnimateMetadata since
	                  // those style steps are not going to be squashed
	                  var animateStyleValue = step.styles;
	                  if (animateStyleValue instanceof CompileAnimationStyleMetadata) {
	                      animateStyleValue.styles =
	                          _normalizeStyleMetadata(animateStyleValue, stateStyles, schema, errors, true);
	                  }
	                  else if (animateStyleValue instanceof CompileAnimationKeyframesSequenceMetadata) {
	                      animateStyleValue.steps.forEach(function (step) {
	                          step.styles = _normalizeStyleMetadata(step, stateStyles, schema, errors, true);
	                      });
	                  }
	              }
	              else if (step instanceof CompileAnimationWithStepsMetadata) {
	                  var innerSteps = _normalizeStyleStepEntry(step, stateStyles, schema, errors);
	                  step = step instanceof CompileAnimationGroupMetadata ?
	                      new CompileAnimationGroupMetadata(innerSteps) :
	                      new CompileAnimationSequenceMetadata(innerSteps);
	              }
	              newSteps.push(step);
	          }
	      });
	      // this happens when only styles were animated within the sequence
	      if (isPresent(combinedStyles)) {
	          newSteps.push(new CompileAnimationStyleMetadata(0, combinedStyles));
	      }
	      return newSteps;
	  }
	  function _resolveStylesFromState(stateName, stateStyles, errors) {
	      var styles = [];
	      if (stateName[0] != ':') {
	          errors.push(new AnimationParseError("Animation states via styles must be prefixed with a \":\""));
	      }
	      else {
	          var normalizedStateName = stateName.substring(1);
	          var value = stateStyles[normalizedStateName];
	          if (!isPresent(value)) {
	              errors.push(new AnimationParseError("Unable to apply styles due to missing a state: \"" + normalizedStateName + "\""));
	          }
	          else {
	              value.styles.forEach(function (stylesEntry) {
	                  if (typeof stylesEntry === 'object' && stylesEntry !== null) {
	                      styles.push(stylesEntry);
	                  }
	              });
	          }
	      }
	      return styles;
	  }
	  var _AnimationTimings = (function () {
	      function _AnimationTimings(duration, delay, easing) {
	          this.duration = duration;
	          this.delay = delay;
	          this.easing = easing;
	      }
	      return _AnimationTimings;
	  }());
	  function _parseAnimationKeyframes(keyframeSequence, currentTime, collectedStyles, stateStyles, errors) {
	      var totalEntries = keyframeSequence.steps.length;
	      var totalOffsets = 0;
	      keyframeSequence.steps.forEach(function (step) { return totalOffsets += (isPresent(step.offset) ? 1 : 0); });
	      if (totalOffsets > 0 && totalOffsets < totalEntries) {
	          errors.push(new AnimationParseError("Not all style() entries contain an offset for the provided keyframe()"));
	          totalOffsets = totalEntries;
	      }
	      var limit = totalEntries - 1;
	      var margin = totalOffsets == 0 ? (1 / limit) : 0;
	      var rawKeyframes = [];
	      var index = 0;
	      var doSortKeyframes = false;
	      var lastOffset = 0;
	      keyframeSequence.steps.forEach(function (styleMetadata) {
	          var offset = styleMetadata.offset;
	          var keyframeStyles = {};
	          styleMetadata.styles.forEach(function (entry) {
	              Object.keys(entry).forEach(function (prop) {
	                  if (prop != 'offset') {
	                      keyframeStyles[prop] = entry[prop];
	                  }
	              });
	          });
	          if (isPresent(offset)) {
	              doSortKeyframes = doSortKeyframes || (offset < lastOffset);
	          }
	          else {
	              offset = index == limit ? _TERMINAL_KEYFRAME : (margin * index);
	          }
	          rawKeyframes.push([offset, keyframeStyles]);
	          lastOffset = offset;
	          index++;
	      });
	      if (doSortKeyframes) {
	          rawKeyframes.sort(function (a, b) { return a[0] <= b[0] ? -1 : 1; });
	      }
	      var firstKeyframe = rawKeyframes[0];
	      if (firstKeyframe[0] != _INITIAL_KEYFRAME) {
	          rawKeyframes.splice(0, 0, firstKeyframe = [_INITIAL_KEYFRAME, {}]);
	      }
	      var firstKeyframeStyles = firstKeyframe[1];
	      limit = rawKeyframes.length - 1;
	      var lastKeyframe = rawKeyframes[limit];
	      if (lastKeyframe[0] != _TERMINAL_KEYFRAME) {
	          rawKeyframes.push(lastKeyframe = [_TERMINAL_KEYFRAME, {}]);
	          limit++;
	      }
	      var lastKeyframeStyles = lastKeyframe[1];
	      for (var i = 1; i <= limit; i++) {
	          var entry = rawKeyframes[i];
	          var styles = entry[1];
	          Object.keys(styles).forEach(function (prop) {
	              if (!isPresent(firstKeyframeStyles[prop])) {
	                  firstKeyframeStyles[prop] = FILL_STYLE_FLAG;
	              }
	          });
	      }
	      var _loop_1 = function(i) {
	          var entry = rawKeyframes[i];
	          var styles = entry[1];
	          Object.keys(styles).forEach(function (prop) {
	              if (!isPresent(lastKeyframeStyles[prop])) {
	                  lastKeyframeStyles[prop] = styles[prop];
	              }
	          });
	      };
	      for (var i = limit - 1; i >= 0; i--) {
	          _loop_1(i);
	      }
	      return rawKeyframes.map(function (entry) { return new AnimationKeyframeAst(entry[0], new AnimationStylesAst([entry[1]])); });
	  }
	  function _parseTransitionAnimation(entry, currentTime, collectedStyles, stateStyles, errors) {
	      var ast;
	      var playTime = 0;
	      var startingTime = currentTime;
	      if (entry instanceof CompileAnimationWithStepsMetadata) {
	          var maxDuration_1 = 0;
	          var steps_1 = [];
	          var isGroup_1 = entry instanceof CompileAnimationGroupMetadata;
	          var previousStyles_1;
	          entry.steps.forEach(function (entry) {
	              // these will get picked up by the next step...
	              var time = isGroup_1 ? startingTime : currentTime;
	              if (entry instanceof CompileAnimationStyleMetadata) {
	                  entry.styles.forEach(function (stylesEntry) {
	                      // by this point we know that we only have stringmap values
	                      var map = stylesEntry;
	                      Object.keys(map).forEach(function (prop) { collectedStyles.insertAtTime(prop, time, map[prop]); });
	                  });
	                  previousStyles_1 = entry.styles;
	                  return;
	              }
	              var innerAst = _parseTransitionAnimation(entry, time, collectedStyles, stateStyles, errors);
	              if (isPresent(previousStyles_1)) {
	                  if (entry instanceof CompileAnimationWithStepsMetadata) {
	                      var startingStyles = new AnimationStylesAst(previousStyles_1);
	                      steps_1.push(new AnimationStepAst(startingStyles, [], 0, 0, ''));
	                  }
	                  else {
	                      var innerStep = innerAst;
	                      (_a = innerStep.startingStyles.styles).push.apply(_a, previousStyles_1);
	                  }
	                  previousStyles_1 = null;
	              }
	              var astDuration = innerAst.playTime;
	              currentTime += astDuration;
	              playTime += astDuration;
	              maxDuration_1 = Math.max(astDuration, maxDuration_1);
	              steps_1.push(innerAst);
	              var _a;
	          });
	          if (isPresent(previousStyles_1)) {
	              var startingStyles = new AnimationStylesAst(previousStyles_1);
	              steps_1.push(new AnimationStepAst(startingStyles, [], 0, 0, ''));
	          }
	          if (isGroup_1) {
	              ast = new AnimationGroupAst(steps_1);
	              playTime = maxDuration_1;
	              currentTime = startingTime + playTime;
	          }
	          else {
	              ast = new AnimationSequenceAst(steps_1);
	          }
	      }
	      else if (entry instanceof CompileAnimationAnimateMetadata) {
	          var timings = _parseTimeExpression(entry.timings, errors);
	          var styles = entry.styles;
	          var keyframes = void 0;
	          if (styles instanceof CompileAnimationKeyframesSequenceMetadata) {
	              keyframes =
	                  _parseAnimationKeyframes(styles, currentTime, collectedStyles, stateStyles, errors);
	          }
	          else {
	              var styleData = styles;
	              var offset = _TERMINAL_KEYFRAME;
	              var styleAst = new AnimationStylesAst(styleData.styles);
	              var keyframe = new AnimationKeyframeAst(offset, styleAst);
	              keyframes = [keyframe];
	          }
	          ast = new AnimationStepAst(new AnimationStylesAst([]), keyframes, timings.duration, timings.delay, timings.easing);
	          playTime = timings.duration + timings.delay;
	          currentTime += playTime;
	          keyframes.forEach(function (keyframe /** TODO #9100 */) { return keyframe.styles.styles.forEach(function (entry /** TODO #9100 */) { return Object.keys(entry).forEach(function (prop) { collectedStyles.insertAtTime(prop, currentTime, entry[prop]); }); }); });
	      }
	      else {
	          // if the code reaches this stage then an error
	          // has already been populated within the _normalizeStyleSteps()
	          // operation...
	          ast = new AnimationStepAst(null, [], 0, 0, '');
	      }
	      ast.playTime = playTime;
	      ast.startTime = startingTime;
	      return ast;
	  }
	  function _fillAnimationAstStartingKeyframes(ast, collectedStyles, errors) {
	      // steps that only contain style will not be filled
	      if ((ast instanceof AnimationStepAst) && ast.keyframes.length > 0) {
	          var keyframes = ast.keyframes;
	          if (keyframes.length == 1) {
	              var endKeyframe = keyframes[0];
	              var startKeyframe = _createStartKeyframeFromEndKeyframe(endKeyframe, ast.startTime, ast.playTime, collectedStyles, errors);
	              ast.keyframes = [startKeyframe, endKeyframe];
	          }
	      }
	      else if (ast instanceof AnimationWithStepsAst) {
	          ast.steps.forEach(function (entry) { return _fillAnimationAstStartingKeyframes(entry, collectedStyles, errors); });
	      }
	  }
	  function _parseTimeExpression(exp, errors) {
	      var regex = /^([\.\d]+)(m?s)(?:\s+([\.\d]+)(m?s))?(?:\s+([-a-z]+(?:\(.+?\))?))?/i;
	      var duration;
	      var delay = 0;
	      var easing = null;
	      if (typeof exp === 'string') {
	          var matches = exp.match(regex);
	          if (matches === null) {
	              errors.push(new AnimationParseError("The provided timing value \"" + exp + "\" is invalid."));
	              return new _AnimationTimings(0, 0, null);
	          }
	          var durationMatch = parseFloat(matches[1]);
	          var durationUnit = matches[2];
	          if (durationUnit == 's') {
	              durationMatch *= _ONE_SECOND;
	          }
	          duration = Math.floor(durationMatch);
	          var delayMatch = matches[3];
	          var delayUnit = matches[4];
	          if (isPresent(delayMatch)) {
	              var delayVal = parseFloat(delayMatch);
	              if (isPresent(delayUnit) && delayUnit == 's') {
	                  delayVal *= _ONE_SECOND;
	              }
	              delay = Math.floor(delayVal);
	          }
	          var easingVal = matches[5];
	          if (!isBlank(easingVal)) {
	              easing = easingVal;
	          }
	      }
	      else {
	          duration = exp;
	      }
	      return new _AnimationTimings(duration, delay, easing);
	  }
	  function _createStartKeyframeFromEndKeyframe(endKeyframe, startTime, duration, collectedStyles, errors) {
	      var values = {};
	      var endTime = startTime + duration;
	      endKeyframe.styles.styles.forEach(function (styleData) {
	          Object.keys(styleData).forEach(function (prop) {
	              var val = styleData[prop];
	              if (prop == 'offset')
	                  return;
	              var resultIndex = collectedStyles.indexOfAtOrBeforeTime(prop, startTime);
	              var resultEntry /** TODO #9100 */, nextEntry /** TODO #9100 */, value;
	              if (isPresent(resultIndex)) {
	                  resultEntry = collectedStyles.getByIndex(prop, resultIndex);
	                  value = resultEntry.value;
	                  nextEntry = collectedStyles.getByIndex(prop, resultIndex + 1);
	              }
	              else {
	                  // this is a flag that the runtime code uses to pass
	                  // in a value either from the state declaration styles
	                  // or using the AUTO_STYLE value (e.g. getComputedStyle)
	                  value = FILL_STYLE_FLAG;
	              }
	              if (isPresent(nextEntry) && !nextEntry.matches(endTime, val)) {
	                  errors.push(new AnimationParseError("The animated CSS property \"" + prop + "\" unexpectedly changes between steps \"" + resultEntry.time + "ms\" and \"" + endTime + "ms\" at \"" + nextEntry.time + "ms\""));
	              }
	              values[prop] = value;
	          });
	      });
	      return new AnimationKeyframeAst(_INITIAL_KEYFRAME, new AnimationStylesAst([values]));
	  }

	  /**
	   * @license
	   * Copyright Google Inc. All Rights Reserved.
	   *
	   * Use of this source code is governed by an MIT-style license that can be
	   * found in the LICENSE file at https://angular.io/license
	   */
	  /**
	   * An interface for retrieving documents by URL that the compiler uses
	   * to load templates.
	   */
	  var ResourceLoader = (function () {
	      function ResourceLoader() {
	      }
	      ResourceLoader.prototype.get = function (url) { return null; };
	      return ResourceLoader;
	  }());

	  var _ASSET_SCHEME = 'asset:';
	  /**
	   * Create a {@link UrlResolver} with no package prefix.
	   */
	  function createUrlResolverWithoutPackagePrefix() {
	      return new UrlResolver();
	  }
	  function createOfflineCompileUrlResolver() {
	      return new UrlResolver(_ASSET_SCHEME);
	  }
	  /**
	   * A default provider for {@link PACKAGE_ROOT_URL} that maps to '/'.
	   */
	  var DEFAULT_PACKAGE_URL_PROVIDER = {
	      provide: _angular_core.PACKAGE_ROOT_URL,
	      useValue: '/'
	  };
	  /**
	   * Used by the {@link Compiler} when resolving HTML and CSS template URLs.
	   *
	   * This class can be overridden by the application developer to create custom behavior.
	   *
	   * See {@link Compiler}
	   *
	   * ## Example
	   *
	   * {@example compiler/ts/url_resolver/url_resolver.ts region='url_resolver'}
	   *
	   * @security  When compiling templates at runtime, you must
	   * ensure that the entire template comes from a trusted source.
	   * Attacker-controlled data introduced by a template could expose your
	   * application to XSS risks. For more detail, see the [Security Guide](http://g.co/ng/security).
	   */
	  var UrlResolver = (function () {
	      function UrlResolver(_packagePrefix) {
	          if (_packagePrefix === void 0) { _packagePrefix = null; }
	          this._packagePrefix = _packagePrefix;
	      }
	      /**
	       * Resolves the `url` given the `baseUrl`:
	       * - when the `url` is null, the `baseUrl` is returned,
	       * - if `url` is relative ('path/to/here', './path/to/here'), the resolved url is a combination of
	       * `baseUrl` and `url`,
	       * - if `url` is absolute (it has a scheme: 'http://', 'https://' or start with '/'), the `url` is
	       * returned as is (ignoring the `baseUrl`)
	       */
	      UrlResolver.prototype.resolve = function (baseUrl, url) {
	          var resolvedUrl = url;
	          if (isPresent(baseUrl) && baseUrl.length > 0) {
	              resolvedUrl = _resolveUrl(baseUrl, resolvedUrl);
	          }
	          var resolvedParts = _split(resolvedUrl);
	          var prefix = this._packagePrefix;
	          if (isPresent(prefix) && isPresent(resolvedParts) &&
	              resolvedParts[_ComponentIndex.Scheme] == 'package') {
	              var path = resolvedParts[_ComponentIndex.Path];
	              if (this._packagePrefix === _ASSET_SCHEME) {
	                  var pathSegements = path.split(/\//);
	                  resolvedUrl = "asset:" + pathSegements[0] + "/lib/" + pathSegements.slice(1).join('/');
	              }
	              else {
	                  prefix = prefix.replace(/\/+$/, '');
	                  path = path.replace(/^\/+/, '');
	                  return prefix + "/" + path;
	              }
	          }
	          return resolvedUrl;
	      };
	      UrlResolver.decorators = [
	          { type: _angular_core.Injectable },
	      ];
	      /** @nocollapse */
	      UrlResolver.ctorParameters = [
	          { type: undefined, decorators: [{ type: _angular_core.Inject, args: [_angular_core.PACKAGE_ROOT_URL,] },] },
	      ];
	      return UrlResolver;
	  }());
	  /**
	   * Extract the scheme of a URL.
	   */
	  function getUrlScheme(url) {
	      var match = _split(url);
	      return (match && match[_ComponentIndex.Scheme]) || '';
	  }
	  // The code below is adapted from Traceur:
	  // https://github.com/google/traceur-compiler/blob/9511c1dafa972bf0de1202a8a863bad02f0f95a8/src/runtime/url.js
	  /**
	   * Builds a URI string from already-encoded parts.
	   *
	   * No encoding is performed.  Any component may be omitted as either null or
	   * undefined.
	   *
	   * @param opt_scheme The scheme such as 'http'.
	   * @param opt_userInfo The user name before the '@'.
	   * @param opt_domain The domain such as 'www.google.com', already
	   *     URI-encoded.
	   * @param opt_port The port number.
	   * @param opt_path The path, already URI-encoded.  If it is not
	   *     empty, it must begin with a slash.
	   * @param opt_queryData The URI-encoded query data.
	   * @param opt_fragment The URI-encoded fragment identifier.
	   * @return The fully combined URI.
	   */
	  function _buildFromEncodedParts(opt_scheme, opt_userInfo, opt_domain, opt_port, opt_path, opt_queryData, opt_fragment) {
	      var out = [];
	      if (isPresent(opt_scheme)) {
	          out.push(opt_scheme + ':');
	      }
	      if (isPresent(opt_domain)) {
	          out.push('//');
	          if (isPresent(opt_userInfo)) {
	              out.push(opt_userInfo + '@');
	          }
	          out.push(opt_domain);
	          if (isPresent(opt_port)) {
	              out.push(':' + opt_port);
	          }
	      }
	      if (isPresent(opt_path)) {
	          out.push(opt_path);
	      }
	      if (isPresent(opt_queryData)) {
	          out.push('?' + opt_queryData);
	      }
	      if (isPresent(opt_fragment)) {
	          out.push('#' + opt_fragment);
	      }
	      return out.join('');
	  }
	  /**
	   * A regular expression for breaking a URI into its component parts.
	   *
	   * {@link http://www.gbiv.com/protocols/uri/rfc/rfc3986.html#RFC2234} says
	   * As the "first-match-wins" algorithm is identical to the "greedy"
	   * disambiguation method used by POSIX regular expressions, it is natural and
	   * commonplace to use a regular expression for parsing the potential five
	   * components of a URI reference.
	   *
	   * The following line is the regular expression for breaking-down a
	   * well-formed URI reference into its components.
	   *
	   * <pre>
	   * ^(([^:/?#]+):)?(//([^/?#]*))?([^?#]*)(\?([^#]*))?(#(.*))?
	   *  12            3  4          5       6  7        8 9
	   * </pre>
	   *
	   * The numbers in the second line above are only to assist readability; they
	   * indicate the reference points for each subexpression (i.e., each paired
	   * parenthesis). We refer to the value matched for subexpression <n> as $<n>.
	   * For example, matching the above expression to
	   * <pre>
	   *     http://www.ics.uci.edu/pub/ietf/uri/#Related
	   * </pre>
	   * results in the following subexpression matches:
	   * <pre>
	   *    $1 = http:
	   *    $2 = http
	   *    $3 = //www.ics.uci.edu
	   *    $4 = www.ics.uci.edu
	   *    $5 = /pub/ietf/uri/
	   *    $6 = <undefined>
	   *    $7 = <undefined>
	   *    $8 = #Related
	   *    $9 = Related
	   * </pre>
	   * where <undefined> indicates that the component is not present, as is the
	   * case for the query component in the above example. Therefore, we can
	   * determine the value of the five components as
	   * <pre>
	   *    scheme    = $2
	   *    authority = $4
	   *    path      = $5
	   *    query     = $7
	   *    fragment  = $9
	   * </pre>
	   *
	   * The regular expression has been modified slightly to expose the
	   * userInfo, domain, and port separately from the authority.
	   * The modified version yields
	   * <pre>
	   *    $1 = http              scheme
	   *    $2 = <undefined>       userInfo -\
	   *    $3 = www.ics.uci.edu   domain     | authority
	   *    $4 = <undefined>       port     -/
	   *    $5 = /pub/ietf/uri/    path
	   *    $6 = <undefined>       query without ?
	   *    $7 = Related           fragment without #
	   * </pre>
	   * @type {!RegExp}
	   * @internal
	   */
	  var _splitRe = new RegExp('^' +
	      '(?:' +
	      '([^:/?#.]+)' +
	      // used by other URL parts such as :,
	      // ?, /, #, and .
	      ':)?' +
	      '(?://' +
	      '(?:([^/?#]*)@)?' +
	      '([\\w\\d\\-\\u0100-\\uffff.%]*)' +
	      // digits, dashes, dots, percent
	      // escapes, and unicode characters.
	      '(?::([0-9]+))?' +
	      ')?' +
	      '([^?#]+)?' +
	      '(?:\\?([^#]*))?' +
	      '(?:#(.*))?' +
	      '$');
	  /**
	   * The index of each URI component in the return value of goog.uri.utils.split.
	   * @enum {number}
	   */
	  var _ComponentIndex;
	  (function (_ComponentIndex) {
	      _ComponentIndex[_ComponentIndex["Scheme"] = 1] = "Scheme";
	      _ComponentIndex[_ComponentIndex["UserInfo"] = 2] = "UserInfo";
	      _ComponentIndex[_ComponentIndex["Domain"] = 3] = "Domain";
	      _ComponentIndex[_ComponentIndex["Port"] = 4] = "Port";
	      _ComponentIndex[_ComponentIndex["Path"] = 5] = "Path";
	      _ComponentIndex[_ComponentIndex["QueryData"] = 6] = "QueryData";
	      _ComponentIndex[_ComponentIndex["Fragment"] = 7] = "Fragment";
	  })(_ComponentIndex || (_ComponentIndex = {}));
	  /**
	   * Splits a URI into its component parts.
	   *
	   * Each component can be accessed via the component indices; for example:
	   * <pre>
	   * goog.uri.utils.split(someStr)[goog.uri.utils.CompontentIndex.QUERY_DATA];
	   * </pre>
	   *
	   * @param uri The URI string to examine.
	   * @return Each component still URI-encoded.
	   *     Each component that is present will contain the encoded value, whereas
	   *     components that are not present will be undefined or empty, depending
	   *     on the browser's regular expression implementation.  Never null, since
	   *     arbitrary strings may still look like path names.
	   */
	  function _split(uri) {
	      return uri.match(_splitRe);
	  }
	  /**
	    * Removes dot segments in given path component, as described in
	    * RFC 3986, section 5.2.4.
	    *
	    * @param path A non-empty path component.
	    * @return Path component with removed dot segments.
	    */
	  function _removeDotSegments(path) {
	      if (path == '/')
	          return '/';
	      var leadingSlash = path[0] == '/' ? '/' : '';
	      var trailingSlash = path[path.length - 1] === '/' ? '/' : '';
	      var segments = path.split('/');
	      var out = [];
	      var up = 0;
	      for (var pos = 0; pos < segments.length; pos++) {
	          var segment = segments[pos];
	          switch (segment) {
	              case '':
	              case '.':
	                  break;
	              case '..':
	                  if (out.length > 0) {
	                      out.pop();
	                  }
	                  else {
	                      up++;
	                  }
	                  break;
	              default:
	                  out.push(segment);
	          }
	      }
	      if (leadingSlash == '') {
	          while (up-- > 0) {
	              out.unshift('..');
	          }
	          if (out.length === 0)
	              out.push('.');
	      }
	      return leadingSlash + out.join('/') + trailingSlash;
	  }
	  /**
	   * Takes an array of the parts from split and canonicalizes the path part
	   * and then joins all the parts.
	   */
	  function _joinAndCanonicalizePath(parts) {
	      var path = parts[_ComponentIndex.Path];
	      path = isBlank(path) ? '' : _removeDotSegments(path);
	      parts[_ComponentIndex.Path] = path;
	      return _buildFromEncodedParts(parts[_ComponentIndex.Scheme], parts[_ComponentIndex.UserInfo], parts[_ComponentIndex.Domain], parts[_ComponentIndex.Port], path, parts[_ComponentIndex.QueryData], parts[_ComponentIndex.Fragment]);
	  }
	  /**
	   * Resolves a URL.
	   * @param base The URL acting as the base URL.
	   * @param to The URL to resolve.
	   */
	  function _resolveUrl(base, url) {
	      var parts = _split(encodeURI(url));
	      var baseParts = _split(base);
	      if (isPresent(parts[_ComponentIndex.Scheme])) {
	          return _joinAndCanonicalizePath(parts);
	      }
	      else {
	          parts[_ComponentIndex.Scheme] = baseParts[_ComponentIndex.Scheme];
	      }
	      for (var i = _ComponentIndex.Scheme; i <= _ComponentIndex.Port; i++) {
	          if (isBlank(parts[i])) {
	              parts[i] = baseParts[i];
	          }
	      }
	      if (parts[_ComponentIndex.Path][0] == '/') {
	          return _joinAndCanonicalizePath(parts);
	      }
	      var path = baseParts[_ComponentIndex.Path];
	      if (isBlank(path))
	          path = '/';
	      var index = path.lastIndexOf('/');
	      path = path.substring(0, index + 1) + parts[_ComponentIndex.Path];
	      parts[_ComponentIndex.Path] = path;
	      return _joinAndCanonicalizePath(parts);
	  }

	  var DirectiveNormalizer = (function () {
	      function DirectiveNormalizer(_resourceLoader, _urlResolver, _htmlParser, _config) {
	          this._resourceLoader = _resourceLoader;
	          this._urlResolver = _urlResolver;
	          this._htmlParser = _htmlParser;
	          this._config = _config;
	          this._resourceLoaderCache = new Map();
	      }
	      DirectiveNormalizer.prototype.clearCache = function () { this._resourceLoaderCache.clear(); };
	      DirectiveNormalizer.prototype.clearCacheFor = function (normalizedDirective) {
	          var _this = this;
	          if (!normalizedDirective.isComponent) {
	              return;
	          }
	          this._resourceLoaderCache.delete(normalizedDirective.template.templateUrl);
	          normalizedDirective.template.externalStylesheets.forEach(function (stylesheet) { _this._resourceLoaderCache.delete(stylesheet.moduleUrl); });
	      };
	      DirectiveNormalizer.prototype._fetch = function (url) {
	          var result = this._resourceLoaderCache.get(url);
	          if (!result) {
	              result = this._resourceLoader.get(url);
	              this._resourceLoaderCache.set(url, result);
	          }
	          return result;
	      };
	      DirectiveNormalizer.prototype.normalizeTemplate = function (prenormData) {
	          var _this = this;
	          var normalizedTemplateSync = null;
	          var normalizedTemplateAsync;
	          if (isPresent(prenormData.template)) {
	              normalizedTemplateSync = this.normalizeTemplateSync(prenormData);
	              normalizedTemplateAsync = Promise.resolve(normalizedTemplateSync);
	          }
	          else if (prenormData.templateUrl) {
	              normalizedTemplateAsync = this.normalizeTemplateAsync(prenormData);
	          }
	          else {
	              throw new Error("No template specified for component " + stringify(prenormData.componentType));
	          }
	          if (normalizedTemplateSync && normalizedTemplateSync.styleUrls.length === 0) {
	              // sync case
	              return new SyncAsyncResult(normalizedTemplateSync);
	          }
	          else {
	              // async case
	              return new SyncAsyncResult(null, normalizedTemplateAsync.then(function (normalizedTemplate) { return _this.normalizeExternalStylesheets(normalizedTemplate); }));
	          }
	      };
	      DirectiveNormalizer.prototype.normalizeTemplateSync = function (prenomData) {
	          return this.normalizeLoadedTemplate(prenomData, prenomData.template, prenomData.moduleUrl);
	      };
	      DirectiveNormalizer.prototype.normalizeTemplateAsync = function (prenomData) {
	          var _this = this;
	          var templateUrl = this._urlResolver.resolve(prenomData.moduleUrl, prenomData.templateUrl);
	          return this._fetch(templateUrl)
	              .then(function (value) { return _this.normalizeLoadedTemplate(prenomData, value, templateUrl); });
	      };
	      DirectiveNormalizer.prototype.normalizeLoadedTemplate = function (prenomData, template, templateAbsUrl) {
	          var interpolationConfig = InterpolationConfig.fromArray(prenomData.interpolation);
	          var rootNodesAndErrors = this._htmlParser.parse(template, stringify(prenomData.componentType), false, interpolationConfig);
	          if (rootNodesAndErrors.errors.length > 0) {
	              var errorString = rootNodesAndErrors.errors.join('\n');
	              throw new Error("Template parse errors:\n" + errorString);
	          }
	          var templateMetadataStyles = this.normalizeStylesheet(new CompileStylesheetMetadata({
	              styles: prenomData.styles,
	              styleUrls: prenomData.styleUrls,
	              moduleUrl: prenomData.moduleUrl
	          }));
	          var visitor = new TemplatePreparseVisitor();
	          visitAll(visitor, rootNodesAndErrors.rootNodes);
	          var templateStyles = this.normalizeStylesheet(new CompileStylesheetMetadata({ styles: visitor.styles, styleUrls: visitor.styleUrls, moduleUrl: templateAbsUrl }));
	          var encapsulation = prenomData.encapsulation;
	          if (isBlank(encapsulation)) {
	              encapsulation = this._config.defaultEncapsulation;
	          }
	          var styles = templateMetadataStyles.styles.concat(templateStyles.styles);
	          var styleUrls = templateMetadataStyles.styleUrls.concat(templateStyles.styleUrls);
	          if (encapsulation === _angular_core.ViewEncapsulation.Emulated && styles.length === 0 &&
	              styleUrls.length === 0) {
	              encapsulation = _angular_core.ViewEncapsulation.None;
	          }
	          return new CompileTemplateMetadata({
	              encapsulation: encapsulation,
	              template: template,
	              templateUrl: templateAbsUrl, styles: styles, styleUrls: styleUrls,
	              ngContentSelectors: visitor.ngContentSelectors,
	              animations: prenomData.animations,
	              interpolation: prenomData.interpolation,
	          });
	      };
	      DirectiveNormalizer.prototype.normalizeExternalStylesheets = function (templateMeta) {
	          return this._loadMissingExternalStylesheets(templateMeta.styleUrls)
	              .then(function (externalStylesheets) { return new CompileTemplateMetadata({
	              encapsulation: templateMeta.encapsulation,
	              template: templateMeta.template,
	              templateUrl: templateMeta.templateUrl,
	              styles: templateMeta.styles,
	              styleUrls: templateMeta.styleUrls,
	              externalStylesheets: externalStylesheets,
	              ngContentSelectors: templateMeta.ngContentSelectors,
	              animations: templateMeta.animations,
	              interpolation: templateMeta.interpolation
	          }); });
	      };
	      DirectiveNormalizer.prototype._loadMissingExternalStylesheets = function (styleUrls, loadedStylesheets) {
	          var _this = this;
	          if (loadedStylesheets === void 0) { loadedStylesheets = new Map(); }
	          return Promise
	              .all(styleUrls.filter(function (styleUrl) { return !loadedStylesheets.has(styleUrl); })
	              .map(function (styleUrl) { return _this._fetch(styleUrl).then(function (loadedStyle) {
	              var stylesheet = _this.normalizeStylesheet(new CompileStylesheetMetadata({ styles: [loadedStyle], moduleUrl: styleUrl }));
	              loadedStylesheets.set(styleUrl, stylesheet);
	              return _this._loadMissingExternalStylesheets(stylesheet.styleUrls, loadedStylesheets);
	          }); }))
	              .then(function (_) { return Array.from(loadedStylesheets.values()); });
	      };
	      DirectiveNormalizer.prototype.normalizeStylesheet = function (stylesheet) {
	          var _this = this;
	          var allStyleUrls = stylesheet.styleUrls.filter(isStyleUrlResolvable)
	              .map(function (url) { return _this._urlResolver.resolve(stylesheet.moduleUrl, url); });
	          var allStyles = stylesheet.styles.map(function (style) {
	              var styleWithImports = extractStyleUrls(_this._urlResolver, stylesheet.moduleUrl, style);
	              allStyleUrls.push.apply(allStyleUrls, styleWithImports.styleUrls);
	              return styleWithImports.style;
	          });
	          return new CompileStylesheetMetadata({ styles: allStyles, styleUrls: allStyleUrls, moduleUrl: stylesheet.moduleUrl });
	      };
	      DirectiveNormalizer.decorators = [
	          { type: _angular_core.Injectable },
	      ];
	      /** @nocollapse */
	      DirectiveNormalizer.ctorParameters = [
	          { type: ResourceLoader, },
	          { type: UrlResolver, },
	          { type: HtmlParser, },
	          { type: CompilerConfig, },
	      ];
	      return DirectiveNormalizer;
	  }());
	  var TemplatePreparseVisitor = (function () {
	      function TemplatePreparseVisitor() {
	          this.ngContentSelectors = [];
	          this.styles = [];
	          this.styleUrls = [];
	          this.ngNonBindableStackCount = 0;
	      }
	      TemplatePreparseVisitor.prototype.visitElement = function (ast, context) {
	          var preparsedElement = preparseElement(ast);
	          switch (preparsedElement.type) {
	              case PreparsedElementType.NG_CONTENT:
	                  if (this.ngNonBindableStackCount === 0) {
	                      this.ngContentSelectors.push(preparsedElement.selectAttr);
	                  }
	                  break;
	              case PreparsedElementType.STYLE:
	                  var textContent_1 = '';
	                  ast.children.forEach(function (child) {
	                      if (child instanceof Text) {
	                          textContent_1 += child.value;
	                      }
	                  });
	                  this.styles.push(textContent_1);
	                  break;
	              case PreparsedElementType.STYLESHEET:
	                  this.styleUrls.push(preparsedElement.hrefAttr);
	                  break;
	              default:
	                  break;
	          }
	          if (preparsedElement.nonBindable) {
	              this.ngNonBindableStackCount++;
	          }
	          visitAll(this, ast.children);
	          if (preparsedElement.nonBindable) {
	              this.ngNonBindableStackCount--;
	          }
	          return null;
	      };
	      TemplatePreparseVisitor.prototype.visitComment = function (ast, context) { return null; };
	      TemplatePreparseVisitor.prototype.visitAttribute = function (ast, context) { return null; };
	      TemplatePreparseVisitor.prototype.visitText = function (ast, context) { return null; };
	      TemplatePreparseVisitor.prototype.visitExpansion = function (ast, context) { return null; };
	      TemplatePreparseVisitor.prototype.visitExpansionCase = function (ast, context) { return null; };
	      return TemplatePreparseVisitor;
	  }());

	  /*
	   * Resolve a `Type` for {@link Directive}.
	   *
	   * This interface can be overridden by the application developer to create custom behavior.
	   *
	   * See {@link Compiler}
	   */
	  var DirectiveResolver = (function () {
	      function DirectiveResolver(_reflector) {
	          if (_reflector === void 0) { _reflector = reflector; }
	          this._reflector = _reflector;
	      }
	      DirectiveResolver.prototype.isDirective = function (type) {
	          var typeMetadata = this._reflector.annotations(_angular_core.resolveForwardRef(type));
	          return typeMetadata && typeMetadata.some(isDirectiveMetadata);
	      };
	      /**
	       * Return {@link Directive} for a given `Type`.
	       */
	      DirectiveResolver.prototype.resolve = function (type, throwIfNotFound) {
	          if (throwIfNotFound === void 0) { throwIfNotFound = true; }
	          var typeMetadata = this._reflector.annotations(_angular_core.resolveForwardRef(type));
	          if (typeMetadata) {
	              var metadata = typeMetadata.find(isDirectiveMetadata);
	              if (metadata) {
	                  var propertyMetadata = this._reflector.propMetadata(type);
	                  return this._mergeWithPropertyMetadata(metadata, propertyMetadata, type);
	              }
	          }
	          if (throwIfNotFound) {
	              throw new Error("No Directive annotation found on " + stringify(type));
	          }
	          return null;
	      };
	      DirectiveResolver.prototype._mergeWithPropertyMetadata = function (dm, propertyMetadata, directiveType) {
	          var inputs = [];
	          var outputs = [];
	          var host = {};
	          var queries = {};
	          Object.keys(propertyMetadata).forEach(function (propName) {
	              propertyMetadata[propName].forEach(function (a) {
	                  if (a instanceof _angular_core.Input) {
	                      if (a.bindingPropertyName) {
	                          inputs.push(propName + ": " + a.bindingPropertyName);
	                      }
	                      else {
	                          inputs.push(propName);
	                      }
	                  }
	                  else if (a instanceof _angular_core.Output) {
	                      var output = a;
	                      if (output.bindingPropertyName) {
	                          outputs.push(propName + ": " + output.bindingPropertyName);
	                      }
	                      else {
	                          outputs.push(propName);
	                      }
	                  }
	                  else if (a instanceof _angular_core.HostBinding) {
	                      var hostBinding = a;
	                      if (hostBinding.hostPropertyName) {
	                          var startWith = hostBinding.hostPropertyName[0];
	                          if (startWith === '(') {
	                              throw new Error("@HostBinding can not bind to events. Use @HostListener instead.");
	                          }
	                          else if (startWith === '[') {
	                              throw new Error("@HostBinding parameter should be a property name, 'class.<name>', or 'attr.<name>'.");
	                          }
	                          host[("[" + hostBinding.hostPropertyName + "]")] = propName;
	                      }
	                      else {
	                          host[("[" + propName + "]")] = propName;
	                      }
	                  }
	                  else if (a instanceof _angular_core.HostListener) {
	                      var hostListener = a;
	                      var args = hostListener.args || [];
	                      host[("(" + hostListener.eventName + ")")] = propName + "(" + args.join(',') + ")";
	                  }
	                  else if (a instanceof _angular_core.Query) {
	                      queries[propName] = a;
	                  }
	              });
	          });
	          return this._merge(dm, inputs, outputs, host, queries, directiveType);
	      };
	      DirectiveResolver.prototype._extractPublicName = function (def) { return splitAtColon(def, [null, def])[1].trim(); };
	      DirectiveResolver.prototype._merge = function (directive, inputs, outputs, host, queries, directiveType) {
	          var _this = this;
	          var mergedInputs = inputs;
	          if (directive.inputs) {
	              var inputNames_1 = directive.inputs.map(function (def) { return _this._extractPublicName(def); });
	              inputs.forEach(function (inputDef) {
	                  var publicName = _this._extractPublicName(inputDef);
	                  if (inputNames_1.indexOf(publicName) > -1) {
	                      throw new Error("Input '" + publicName + "' defined multiple times in '" + stringify(directiveType) + "'");
	                  }
	              });
	              mergedInputs.unshift.apply(mergedInputs, directive.inputs);
	          }
	          var mergedOutputs = outputs;
	          if (directive.outputs) {
	              var outputNames_1 = directive.outputs.map(function (def) { return _this._extractPublicName(def); });
	              outputs.forEach(function (outputDef) {
	                  var publicName = _this._extractPublicName(outputDef);
	                  if (outputNames_1.indexOf(publicName) > -1) {
	                      throw new Error("Output event '" + publicName + "' defined multiple times in '" + stringify(directiveType) + "'");
	                  }
	              });
	              mergedOutputs.unshift.apply(mergedOutputs, directive.outputs);
	          }
	          var mergedHost = directive.host ? StringMapWrapper.merge(directive.host, host) : host;
	          var mergedQueries = directive.queries ? StringMapWrapper.merge(directive.queries, queries) : queries;
	          if (directive instanceof _angular_core.Component) {
	              return new _angular_core.Component({
	                  selector: directive.selector,
	                  inputs: mergedInputs,
	                  outputs: mergedOutputs,
	                  host: mergedHost,
	                  exportAs: directive.exportAs,
	                  moduleId: directive.moduleId,
	                  queries: mergedQueries,
	                  changeDetection: directive.changeDetection,
	                  providers: directive.providers,
	                  viewProviders: directive.viewProviders,
	                  entryComponents: directive.entryComponents,
	                  template: directive.template,
	                  templateUrl: directive.templateUrl,
	                  styles: directive.styles,
	                  styleUrls: directive.styleUrls,
	                  encapsulation: directive.encapsulation,
	                  animations: directive.animations,
	                  interpolation: directive.interpolation
	              });
	          }
	          else {
	              return new _angular_core.Directive({
	                  selector: directive.selector,
	                  inputs: mergedInputs,
	                  outputs: mergedOutputs,
	                  host: mergedHost,
	                  exportAs: directive.exportAs,
	                  queries: mergedQueries,
	                  providers: directive.providers
	              });
	          }
	      };
	      DirectiveResolver.decorators = [
	          { type: _angular_core.Injectable },
	      ];
	      /** @nocollapse */
	      DirectiveResolver.ctorParameters = [
	          { type: ReflectorReader, },
	      ];
	      return DirectiveResolver;
	  }());
	  function isDirectiveMetadata(type) {
	      return type instanceof _angular_core.Directive;
	  }

	  function hasLifecycleHook(hook, token) {
	      return reflector.hasLifecycleHook(token, getHookName(hook));
	  }
	  function getHookName(hook) {
	      switch (hook) {
	          case LifecycleHooks.OnInit:
	              return 'ngOnInit';
	          case LifecycleHooks.OnDestroy:
	              return 'ngOnDestroy';
	          case LifecycleHooks.DoCheck:
	              return 'ngDoCheck';
	          case LifecycleHooks.OnChanges:
	              return 'ngOnChanges';
	          case LifecycleHooks.AfterContentInit:
	              return 'ngAfterContentInit';
	          case LifecycleHooks.AfterContentChecked:
	              return 'ngAfterContentChecked';
	          case LifecycleHooks.AfterViewInit:
	              return 'ngAfterViewInit';
	          case LifecycleHooks.AfterViewChecked:
	              return 'ngAfterViewChecked';
	      }
	  }

	  function _isNgModuleMetadata(obj) {
	      return obj instanceof _angular_core.NgModule;
	  }
	  /**
	   * Resolves types to {@link NgModule}.
	   */
	  var NgModuleResolver = (function () {
	      function NgModuleResolver(_reflector) {
	          if (_reflector === void 0) { _reflector = reflector; }
	          this._reflector = _reflector;
	      }
	      NgModuleResolver.prototype.isNgModule = function (type) { return this._reflector.annotations(type).some(_isNgModuleMetadata); };
	      NgModuleResolver.prototype.resolve = function (type, throwIfNotFound) {
	          if (throwIfNotFound === void 0) { throwIfNotFound = true; }
	          var ngModuleMeta = this._reflector.annotations(type).find(_isNgModuleMetadata);
	          if (isPresent(ngModuleMeta)) {
	              return ngModuleMeta;
	          }
	          else {
	              if (throwIfNotFound) {
	                  throw new Error("No NgModule metadata found for '" + stringify(type) + "'.");
	              }
	              return null;
	          }
	      };
	      NgModuleResolver.decorators = [
	          { type: _angular_core.Injectable },
	      ];
	      /** @nocollapse */
	      NgModuleResolver.ctorParameters = [
	          { type: ReflectorReader, },
	      ];
	      return NgModuleResolver;
	  }());

	  function _isPipeMetadata(type) {
	      return type instanceof _angular_core.Pipe;
	  }
	  /**
	   * Resolve a `Type` for {@link Pipe}.
	   *
	   * This interface can be overridden by the application developer to create custom behavior.
	   *
	   * See {@link Compiler}
	   */
	  var PipeResolver = (function () {
	      function PipeResolver(_reflector) {
	          if (_reflector === void 0) { _reflector = reflector; }
	          this._reflector = _reflector;
	      }
	      PipeResolver.prototype.isPipe = function (type) {
	          var typeMetadata = this._reflector.annotations(_angular_core.resolveForwardRef(type));
	          return typeMetadata && typeMetadata.some(_isPipeMetadata);
	      };
	      /**
	       * Return {@link Pipe} for a given `Type`.
	       */
	      PipeResolver.prototype.resolve = function (type, throwIfNotFound) {
	          if (throwIfNotFound === void 0) { throwIfNotFound = true; }
	          var metas = this._reflector.annotations(_angular_core.resolveForwardRef(type));
	          if (isPresent(metas)) {
	              var annotation = metas.find(_isPipeMetadata);
	              if (isPresent(annotation)) {
	                  return annotation;
	              }
	          }
	          if (throwIfNotFound) {
	              throw new Error("No Pipe decorator found on " + stringify(type));
	          }
	          return null;
	      };
	      PipeResolver.decorators = [
	          { type: _angular_core.Injectable },
	      ];
	      /** @nocollapse */
	      PipeResolver.ctorParameters = [
	          { type: ReflectorReader, },
	      ];
	      return PipeResolver;
	  }());

	  /**
	   * @license
	   * Copyright Google Inc. All Rights Reserved.
	   *
	   * Use of this source code is governed by an MIT-style license that can be
	   * found in the LICENSE file at https://angular.io/license
	   */
	  var __extends$17 = (this && this.__extends) || function (d, b) {
	      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	      function __() { this.constructor = d; }
	      d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	  };
	  // Design notes:
	  // - don't lazily create metadata:
	  //   For some metadata, we need to do async work sometimes,
	  //   so the user has to kick off this loading.
	  //   But we want to report errors even when the async work is
	  //   not required to check that the user would have been able
	  //   to wait correctly.
	  var CompileMetadataResolver = (function () {
	      function CompileMetadataResolver(_ngModuleResolver, _directiveResolver, _pipeResolver, _schemaRegistry, _directiveNormalizer, _reflector) {
	          if (_reflector === void 0) { _reflector = reflector; }
	          this._ngModuleResolver = _ngModuleResolver;
	          this._directiveResolver = _directiveResolver;
	          this._pipeResolver = _pipeResolver;
	          this._schemaRegistry = _schemaRegistry;
	          this._directiveNormalizer = _directiveNormalizer;
	          this._reflector = _reflector;
	          this._directiveCache = new Map();
	          this._directiveSummaryCache = new Map();
	          this._pipeCache = new Map();
	          this._pipeSummaryCache = new Map();
	          this._ngModuleCache = new Map();
	          this._ngModuleOfTypes = new Map();
	          this._anonymousTypes = new Map();
	          this._anonymousTypeIndex = 0;
	      }
	      CompileMetadataResolver.prototype.sanitizeTokenName = function (token) {
	          var identifier = stringify(token);
	          if (identifier.indexOf('(') >= 0) {
	              // case: anonymous functions!
	              var found = this._anonymousTypes.get(token);
	              if (!found) {
	                  this._anonymousTypes.set(token, this._anonymousTypeIndex++);
	                  found = this._anonymousTypes.get(token);
	              }
	              identifier = "anonymous_token_" + found + "_";
	          }
	          return sanitizeIdentifier(identifier);
	      };
	      CompileMetadataResolver.prototype.clearCacheFor = function (type) {
	          var dirMeta = this._directiveCache.get(type);
	          this._directiveCache.delete(type);
	          this._directiveSummaryCache.delete(type);
	          this._pipeCache.delete(type);
	          this._pipeSummaryCache.delete(type);
	          this._ngModuleOfTypes.delete(type);
	          // Clear all of the NgModule as they contain transitive information!
	          this._ngModuleCache.clear();
	          if (dirMeta) {
	              this._directiveNormalizer.clearCacheFor(dirMeta);
	          }
	      };
	      CompileMetadataResolver.prototype.clearCache = function () {
	          this._directiveCache.clear();
	          this._directiveSummaryCache.clear();
	          this._pipeCache.clear();
	          this._pipeSummaryCache.clear();
	          this._ngModuleCache.clear();
	          this._ngModuleOfTypes.clear();
	          this._directiveNormalizer.clearCache();
	      };
	      CompileMetadataResolver.prototype.getAnimationEntryMetadata = function (entry) {
	          var _this = this;
	          var defs = entry.definitions.map(function (def) { return _this._getAnimationStateMetadata(def); });
	          return new CompileAnimationEntryMetadata(entry.name, defs);
	      };
	      CompileMetadataResolver.prototype._getAnimationStateMetadata = function (value) {
	          if (value instanceof _angular_core.AnimationStateDeclarationMetadata) {
	              var styles = this._getAnimationStyleMetadata(value.styles);
	              return new CompileAnimationStateDeclarationMetadata(value.stateNameExpr, styles);
	          }
	          if (value instanceof _angular_core.AnimationStateTransitionMetadata) {
	              return new CompileAnimationStateTransitionMetadata(value.stateChangeExpr, this._getAnimationMetadata(value.steps));
	          }
	          return null;
	      };
	      CompileMetadataResolver.prototype._getAnimationStyleMetadata = function (value) {
	          return new CompileAnimationStyleMetadata(value.offset, value.styles);
	      };
	      CompileMetadataResolver.prototype._getAnimationMetadata = function (value) {
	          var _this = this;
	          if (value instanceof _angular_core.AnimationStyleMetadata) {
	              return this._getAnimationStyleMetadata(value);
	          }
	          if (value instanceof _angular_core.AnimationKeyframesSequenceMetadata) {
	              return new CompileAnimationKeyframesSequenceMetadata(value.steps.map(function (entry) { return _this._getAnimationStyleMetadata(entry); }));
	          }
	          if (value instanceof _angular_core.AnimationAnimateMetadata) {
	              var animateData = this
	                  ._getAnimationMetadata(value.styles);
	              return new CompileAnimationAnimateMetadata(value.timings, animateData);
	          }
	          if (value instanceof _angular_core.AnimationWithStepsMetadata) {
	              var steps = value.steps.map(function (step) { return _this._getAnimationMetadata(step); });
	              if (value instanceof _angular_core.AnimationGroupMetadata) {
	                  return new CompileAnimationGroupMetadata(steps);
	              }
	              return new CompileAnimationSequenceMetadata(steps);
	          }
	          return null;
	      };
	      CompileMetadataResolver.prototype._loadDirectiveMetadata = function (directiveType, isSync) {
	          var _this = this;
	          if (this._directiveCache.has(directiveType)) {
	              return;
	          }
	          directiveType = _angular_core.resolveForwardRef(directiveType);
	          var nonNormalizedMetadata = this.getNonNormalizedDirectiveMetadata(directiveType);
	          var createDirectiveMetadata = function (templateMetadata) {
	              var normalizedDirMeta = new CompileDirectiveMetadata({
	                  type: nonNormalizedMetadata.type,
	                  isComponent: nonNormalizedMetadata.isComponent,
	                  selector: nonNormalizedMetadata.selector,
	                  exportAs: nonNormalizedMetadata.exportAs,
	                  changeDetection: nonNormalizedMetadata.changeDetection,
	                  inputs: nonNormalizedMetadata.inputs,
	                  outputs: nonNormalizedMetadata.outputs,
	                  hostListeners: nonNormalizedMetadata.hostListeners,
	                  hostProperties: nonNormalizedMetadata.hostProperties,
	                  hostAttributes: nonNormalizedMetadata.hostAttributes,
	                  providers: nonNormalizedMetadata.providers,
	                  viewProviders: nonNormalizedMetadata.viewProviders,
	                  queries: nonNormalizedMetadata.queries,
	                  viewQueries: nonNormalizedMetadata.viewQueries,
	                  entryComponents: nonNormalizedMetadata.entryComponents,
	                  template: templateMetadata
	              });
	              _this._directiveCache.set(directiveType, normalizedDirMeta);
	              _this._directiveSummaryCache.set(directiveType, normalizedDirMeta.toSummary());
	              return normalizedDirMeta;
	          };
	          if (nonNormalizedMetadata.isComponent) {
	              var templateMeta = this._directiveNormalizer.normalizeTemplate({
	                  componentType: directiveType,
	                  moduleUrl: nonNormalizedMetadata.type.moduleUrl,
	                  encapsulation: nonNormalizedMetadata.template.encapsulation,
	                  template: nonNormalizedMetadata.template.template,
	                  templateUrl: nonNormalizedMetadata.template.templateUrl,
	                  styles: nonNormalizedMetadata.template.styles,
	                  styleUrls: nonNormalizedMetadata.template.styleUrls,
	                  animations: nonNormalizedMetadata.template.animations,
	                  interpolation: nonNormalizedMetadata.template.interpolation
	              });
	              if (templateMeta.syncResult) {
	                  createDirectiveMetadata(templateMeta.syncResult);
	                  return null;
	              }
	              else {
	                  if (isSync) {
	                      throw new ComponentStillLoadingError(directiveType);
	                  }
	                  return templateMeta.asyncResult.then(createDirectiveMetadata);
	              }
	          }
	          else {
	              // directive
	              createDirectiveMetadata(null);
	              return null;
	          }
	      };
	      CompileMetadataResolver.prototype.getNonNormalizedDirectiveMetadata = function (directiveType) {
	          var _this = this;
	          directiveType = _angular_core.resolveForwardRef(directiveType);
	          var dirMeta = this._directiveResolver.resolve(directiveType);
	          if (!dirMeta) {
	              return null;
	          }
	          var moduleUrl = staticTypeModuleUrl(directiveType);
	          var nonNormalizedTemplateMetadata;
	          if (dirMeta instanceof _angular_core.Component) {
	              // component
	              moduleUrl = componentModuleUrl(this._reflector, directiveType, dirMeta);
	              assertArrayOfStrings('styles', dirMeta.styles);
	              assertArrayOfStrings('styleUrls', dirMeta.styleUrls);
	              assertInterpolationSymbols('interpolation', dirMeta.interpolation);
	              var animations = dirMeta.animations ?
	                  dirMeta.animations.map(function (e) { return _this.getAnimationEntryMetadata(e); }) :
	                  null;
	              nonNormalizedTemplateMetadata = new CompileTemplateMetadata({
	                  encapsulation: dirMeta.encapsulation,
	                  template: dirMeta.template,
	                  templateUrl: dirMeta.templateUrl,
	                  styles: dirMeta.styles,
	                  styleUrls: dirMeta.styleUrls,
	                  animations: animations,
	                  interpolation: dirMeta.interpolation
	              });
	          }
	          var changeDetectionStrategy = null;
	          var viewProviders = [];
	          var entryComponentMetadata = [];
	          var selector = dirMeta.selector;
	          if (dirMeta instanceof _angular_core.Component) {
	              // Component
	              changeDetectionStrategy = dirMeta.changeDetection;
	              if (dirMeta.viewProviders) {
	                  viewProviders = this._getProvidersMetadata(dirMeta.viewProviders, entryComponentMetadata, "viewProviders for \"" + stringify(directiveType) + "\"");
	              }
	              if (dirMeta.entryComponents) {
	                  entryComponentMetadata =
	                      flattenAndDedupeArray(dirMeta.entryComponents)
	                          .map(function (type) { return _this._getIdentifierMetadata(type, staticTypeModuleUrl(type)); })
	                          .concat(entryComponentMetadata);
	              }
	              if (!selector) {
	                  selector = this._schemaRegistry.getDefaultComponentElementName();
	              }
	          }
	          else {
	              // Directive
	              if (!selector) {
	                  throw new Error("Directive " + stringify(directiveType) + " has no selector, please add it!");
	              }
	          }
	          var providers = [];
	          if (isPresent(dirMeta.providers)) {
	              providers = this._getProvidersMetadata(dirMeta.providers, entryComponentMetadata, "providers for \"" + stringify(directiveType) + "\"");
	          }
	          var queries = [];
	          var viewQueries = [];
	          if (isPresent(dirMeta.queries)) {
	              queries = this._getQueriesMetadata(dirMeta.queries, false, directiveType);
	              viewQueries = this._getQueriesMetadata(dirMeta.queries, true, directiveType);
	          }
	          return CompileDirectiveMetadata.create({
	              selector: selector,
	              exportAs: dirMeta.exportAs,
	              isComponent: !!nonNormalizedTemplateMetadata,
	              type: this._getTypeMetadata(directiveType, moduleUrl),
	              template: nonNormalizedTemplateMetadata,
	              changeDetection: changeDetectionStrategy,
	              inputs: dirMeta.inputs,
	              outputs: dirMeta.outputs,
	              host: dirMeta.host,
	              providers: providers,
	              viewProviders: viewProviders,
	              queries: queries,
	              viewQueries: viewQueries,
	              entryComponents: entryComponentMetadata
	          });
	      };
	      /**
	       * Gets the metadata for the given directive.
	       * This assumes `loadNgModuleMetadata` has been called first.
	       */
	      CompileMetadataResolver.prototype.getDirectiveMetadata = function (directiveType) {
	          var dirMeta = this._directiveCache.get(directiveType);
	          if (!dirMeta) {
	              throw new Error("Illegal state: getDirectiveMetadata can only be called after loadNgModuleMetadata for a module that declares it. Directive " + stringify(directiveType) + ".");
	          }
	          return dirMeta;
	      };
	      CompileMetadataResolver.prototype.getDirectiveSummary = function (dirType) {
	          var dirSummary = this._directiveSummaryCache.get(dirType);
	          if (!dirSummary) {
	              throw new Error("Illegal state: getDirectiveSummary can only be called after loadNgModuleMetadata for a module that imports it. Directive " + stringify(dirType) + ".");
	          }
	          return dirSummary;
	      };
	      CompileMetadataResolver.prototype.isDirective = function (type) { return this._directiveResolver.isDirective(type); };
	      CompileMetadataResolver.prototype.isPipe = function (type) { return this._pipeResolver.isPipe(type); };
	      /**
	       * Gets the metadata for the given module.
	       * This assumes `loadNgModuleMetadata` has been called first.
	       */
	      CompileMetadataResolver.prototype.getNgModuleMetadata = function (moduleType) {
	          var modMeta = this._ngModuleCache.get(moduleType);
	          if (!modMeta) {
	              throw new Error("Illegal state: getNgModuleMetadata can only be called after loadNgModuleMetadata. Module " + stringify(moduleType) + ".");
	          }
	          return modMeta;
	      };
	      CompileMetadataResolver.prototype._loadNgModuleSummary = function (moduleType, isSync) {
	          // TODO(tbosch): add logic to read summary files!
	          // - needs to add directive / pipe summaries to this._directiveSummaryCache /
	          // this._pipeSummaryCache as well!
	          var moduleMeta = this._loadNgModuleMetadata(moduleType, isSync, false);
	          return moduleMeta ? moduleMeta.toSummary() : null;
	      };
	      /**
	       * Loads an NgModule and all of its directives. This includes loading the exported directives of
	       * imported modules,
	       * but not private directives of imported modules.
	       */
	      CompileMetadataResolver.prototype.loadNgModuleMetadata = function (moduleType, isSync, throwIfNotFound) {
	          if (throwIfNotFound === void 0) { throwIfNotFound = true; }
	          var ngModule = this._loadNgModuleMetadata(moduleType, isSync, throwIfNotFound);
	          var loading = ngModule ?
	              Promise.all(ngModule.transitiveModule.directiveLoaders.map(function (loader) { return loader(); })) :
	              Promise.resolve(null);
	          return { ngModule: ngModule, loading: loading };
	      };
	      /**
	       * Get the NgModule metadata without loading the directives.
	       */
	      CompileMetadataResolver.prototype.getUnloadedNgModuleMetadata = function (moduleType, isSync, throwIfNotFound) {
	          if (throwIfNotFound === void 0) { throwIfNotFound = true; }
	          return this._loadNgModuleMetadata(moduleType, isSync, throwIfNotFound);
	      };
	      CompileMetadataResolver.prototype._loadNgModuleMetadata = function (moduleType, isSync, throwIfNotFound) {
	          var _this = this;
	          if (throwIfNotFound === void 0) { throwIfNotFound = true; }
	          moduleType = _angular_core.resolveForwardRef(moduleType);
	          var compileMeta = this._ngModuleCache.get(moduleType);
	          if (compileMeta) {
	              return compileMeta;
	          }
	          var meta = this._ngModuleResolver.resolve(moduleType, throwIfNotFound);
	          if (!meta) {
	              return null;
	          }
	          var declaredDirectives = [];
	          var exportedNonModuleIdentifiers = [];
	          var declaredPipes = [];
	          var importedModules = [];
	          var exportedModules = [];
	          var providers = [];
	          var entryComponents = [];
	          var bootstrapComponents = [];
	          var schemas = [];
	          if (meta.imports) {
	              flattenAndDedupeArray(meta.imports).forEach(function (importedType) {
	                  var importedModuleType;
	                  if (isValidType(importedType)) {
	                      importedModuleType = importedType;
	                  }
	                  else if (importedType && importedType.ngModule) {
	                      var moduleWithProviders = importedType;
	                      importedModuleType = moduleWithProviders.ngModule;
	                      if (moduleWithProviders.providers) {
	                          providers.push.apply(providers, _this._getProvidersMetadata(moduleWithProviders.providers, entryComponents, "provider for the NgModule '" + stringify(importedModuleType) + "'"));
	                      }
	                  }
	                  if (importedModuleType) {
	                      var importedModuleSummary = _this._loadNgModuleSummary(importedModuleType, isSync);
	                      if (!importedModuleSummary) {
	                          throw new Error("Unexpected " + _this._getTypeDescriptor(importedType) + " '" + stringify(importedType) + "' imported by the module '" + stringify(moduleType) + "'");
	                      }
	                      importedModules.push(importedModuleSummary);
	                  }
	                  else {
	                      throw new Error("Unexpected value '" + stringify(importedType) + "' imported by the module '" + stringify(moduleType) + "'");
	                  }
	              });
	          }
	          if (meta.exports) {
	              flattenAndDedupeArray(meta.exports).forEach(function (exportedType) {
	                  if (!isValidType(exportedType)) {
	                      throw new Error("Unexpected value '" + stringify(exportedType) + "' exported by the module '" + stringify(moduleType) + "'");
	                  }
	                  var exportedModuleSummary = _this._loadNgModuleSummary(exportedType, isSync);
	                  if (exportedModuleSummary) {
	                      exportedModules.push(exportedModuleSummary);
	                  }
	                  else {
	                      exportedNonModuleIdentifiers.push(_this._getIdentifierMetadata(exportedType, staticTypeModuleUrl(exportedType)));
	                  }
	              });
	          }
	          // Note: This will be modified later, so we rely on
	          // getting a new instance every time!
	          var transitiveModule = this._getTransitiveNgModuleMetadata(importedModules, exportedModules);
	          if (meta.declarations) {
	              flattenAndDedupeArray(meta.declarations).forEach(function (declaredType) {
	                  if (!isValidType(declaredType)) {
	                      throw new Error("Unexpected value '" + stringify(declaredType) + "' declared by the module '" + stringify(moduleType) + "'");
	                  }
	                  var declaredIdentifier = _this._getIdentifierMetadata(declaredType, staticTypeModuleUrl(declaredType));
	                  if (_this._directiveResolver.isDirective(declaredType)) {
	                      transitiveModule.directivesSet.add(declaredType);
	                      transitiveModule.directives.push(declaredIdentifier);
	                      declaredDirectives.push(declaredIdentifier);
	                      _this._addTypeToModule(declaredType, moduleType);
	                      transitiveModule.directiveLoaders.push(function () { return _this._loadDirectiveMetadata(declaredType, isSync); });
	                  }
	                  else if (_this._pipeResolver.isPipe(declaredType)) {
	                      transitiveModule.pipesSet.add(declaredType);
	                      transitiveModule.pipes.push(declaredIdentifier);
	                      declaredPipes.push(declaredIdentifier);
	                      _this._addTypeToModule(declaredType, moduleType);
	                      _this._loadPipeMetadata(declaredType);
	                  }
	                  else {
	                      throw new Error("Unexpected " + _this._getTypeDescriptor(declaredType) + " '" + stringify(declaredType) + "' declared by the module '" + stringify(moduleType) + "'");
	                  }
	              });
	          }
	          var exportedDirectives = [];
	          var exportedPipes = [];
	          exportedNonModuleIdentifiers.forEach(function (exportedId) {
	              if (transitiveModule.directivesSet.has(exportedId.reference)) {
	                  exportedDirectives.push(exportedId);
	              }
	              else if (transitiveModule.pipesSet.has(exportedId.reference)) {
	                  exportedPipes.push(exportedId);
	              }
	              else {
	                  throw new Error("Can't export " + _this._getTypeDescriptor(exportedId.reference) + " " + stringify(exportedId.reference) + " from " + stringify(moduleType) + " as it was neither declared nor imported!");
	              }
	          });
	          // The providers of the module have to go last
	          // so that they overwrite any other provider we already added.
	          if (meta.providers) {
	              providers.push.apply(providers, this._getProvidersMetadata(meta.providers, entryComponents, "provider for the NgModule '" + stringify(moduleType) + "'"));
	          }
	          if (meta.entryComponents) {
	              entryComponents.push.apply(entryComponents, flattenAndDedupeArray(meta.entryComponents)
	                  .map(function (type) { return _this._getTypeMetadata(type, staticTypeModuleUrl(type)); }));
	          }
	          if (meta.bootstrap) {
	              var typeMetadata = flattenAndDedupeArray(meta.bootstrap).map(function (type) {
	                  if (!isValidType(type)) {
	                      throw new Error("Unexpected value '" + stringify(type) + "' used in the bootstrap property of module '" + stringify(moduleType) + "'");
	                  }
	                  return _this._getTypeMetadata(type, staticTypeModuleUrl(type));
	              });
	              bootstrapComponents.push.apply(bootstrapComponents, typeMetadata);
	          }
	          entryComponents.push.apply(entryComponents, bootstrapComponents);
	          if (meta.schemas) {
	              schemas.push.apply(schemas, flattenAndDedupeArray(meta.schemas));
	          }
	          (_a = transitiveModule.entryComponents).push.apply(_a, entryComponents);
	          (_b = transitiveModule.providers).push.apply(_b, providers);
	          compileMeta = new CompileNgModuleMetadata({
	              type: this._getTypeMetadata(moduleType, staticTypeModuleUrl(moduleType)),
	              providers: providers,
	              entryComponents: entryComponents,
	              bootstrapComponents: bootstrapComponents,
	              schemas: schemas,
	              declaredDirectives: declaredDirectives,
	              exportedDirectives: exportedDirectives,
	              declaredPipes: declaredPipes,
	              exportedPipes: exportedPipes,
	              importedModules: importedModules,
	              exportedModules: exportedModules,
	              transitiveModule: transitiveModule,
	              id: meta.id,
	          });
	          transitiveModule.modules.push(compileMeta.toInjectorSummary());
	          this._ngModuleCache.set(moduleType, compileMeta);
	          return compileMeta;
	          var _a, _b;
	      };
	      CompileMetadataResolver.prototype._getTypeDescriptor = function (type) {
	          if (this._directiveResolver.isDirective(type)) {
	              return 'directive';
	          }
	          if (this._pipeResolver.isPipe(type)) {
	              return 'pipe';
	          }
	          if (this._ngModuleResolver.isNgModule(type)) {
	              return 'module';
	          }
	          if (type.provide) {
	              return 'provider';
	          }
	          return 'value';
	      };
	      CompileMetadataResolver.prototype._addTypeToModule = function (type, moduleType) {
	          var oldModule = this._ngModuleOfTypes.get(type);
	          if (oldModule && oldModule !== moduleType) {
	              throw new Error(("Type " + stringify(type) + " is part of the declarations of 2 modules: " + stringify(oldModule) + " and " + stringify(moduleType) + "! ") +
	                  ("Please consider moving " + stringify(type) + " to a higher module that imports " + stringify(oldModule) + " and " + stringify(moduleType) + ". ") +
	                  ("You can also create a new NgModule that exports and includes " + stringify(type) + " then import that NgModule in " + stringify(oldModule) + " and " + stringify(moduleType) + "."));
	          }
	          this._ngModuleOfTypes.set(type, moduleType);
	      };
	      CompileMetadataResolver.prototype._getTransitiveNgModuleMetadata = function (importedModules, exportedModules) {
	          // collect `providers` / `entryComponents` from all imported and all exported modules
	          var transitiveModules = getTransitiveImportedModules(importedModules.concat(exportedModules));
	          var providers = flattenArray(transitiveModules.map(function (ngModule) { return ngModule.providers; }));
	          var entryComponents = flattenArray(transitiveModules.map(function (ngModule) { return ngModule.entryComponents; }));
	          var transitiveExportedModules = getTransitiveExportedModules(importedModules);
	          var directives = flattenArray(transitiveExportedModules.map(function (ngModule) { return ngModule.exportedDirectives; }));
	          var pipes = flattenArray(transitiveExportedModules.map(function (ngModule) { return ngModule.exportedPipes; }));
	          var directiveLoaders = ListWrapper.flatten(transitiveExportedModules.map(function (ngModule) { return ngModule.directiveLoaders; }));
	          return new TransitiveCompileNgModuleMetadata(transitiveModules, providers, entryComponents, directives, pipes, directiveLoaders);
	      };
	      CompileMetadataResolver.prototype._getIdentifierMetadata = function (type, moduleUrl) {
	          type = _angular_core.resolveForwardRef(type);
	          return new CompileIdentifierMetadata({ name: this.sanitizeTokenName(type), moduleUrl: moduleUrl, reference: type });
	      };
	      CompileMetadataResolver.prototype._getTypeMetadata = function (type, moduleUrl, dependencies) {
	          if (dependencies === void 0) { dependencies = null; }
	          var identifier = this._getIdentifierMetadata(type, moduleUrl);
	          return new CompileTypeMetadata({
	              name: identifier.name,
	              moduleUrl: identifier.moduleUrl,
	              reference: identifier.reference,
	              diDeps: this._getDependenciesMetadata(identifier.reference, dependencies),
	              lifecycleHooks: LIFECYCLE_HOOKS_VALUES.filter(function (hook) { return hasLifecycleHook(hook, identifier.reference); }),
	          });
	      };
	      CompileMetadataResolver.prototype._getFactoryMetadata = function (factory, moduleUrl, dependencies) {
	          if (dependencies === void 0) { dependencies = null; }
	          factory = _angular_core.resolveForwardRef(factory);
	          return new CompileFactoryMetadata({
	              name: this.sanitizeTokenName(factory),
	              moduleUrl: moduleUrl,
	              reference: factory,
	              diDeps: this._getDependenciesMetadata(factory, dependencies)
	          });
	      };
	      /**
	       * Gets the metadata for the given pipe.
	       * This assumes `loadNgModuleMetadata` has been called first.
	       */
	      CompileMetadataResolver.prototype.getPipeMetadata = function (pipeType) {
	          var pipeMeta = this._pipeCache.get(pipeType);
	          if (!pipeMeta) {
	              throw new Error("Illegal state: getPipeMetadata can only be called after loadNgModuleMetadata for a module that declares it. Pipe " + stringify(pipeType) + ".");
	          }
	          return pipeMeta;
	      };
	      CompileMetadataResolver.prototype.getPipeSummary = function (pipeType) {
	          var pipeSummary = this._pipeSummaryCache.get(pipeType);
	          if (!pipeSummary) {
	              throw new Error("Illegal state: getPipeSummary can only be called after loadNgModuleMetadata for a module that imports it. Pipe " + stringify(pipeType) + ".");
	          }
	          return pipeSummary;
	      };
	      CompileMetadataResolver.prototype.getOrLoadPipeMetadata = function (pipeType) {
	          var pipeMeta = this._pipeCache.get(pipeType);
	          if (!pipeMeta) {
	              pipeMeta = this._loadPipeMetadata(pipeType);
	          }
	          return pipeMeta;
	      };
	      CompileMetadataResolver.prototype._loadPipeMetadata = function (pipeType) {
	          pipeType = _angular_core.resolveForwardRef(pipeType);
	          var pipeAnnotation = this._pipeResolver.resolve(pipeType);
	          var pipeMeta = new CompilePipeMetadata({
	              type: this._getTypeMetadata(pipeType, staticTypeModuleUrl(pipeType)),
	              name: pipeAnnotation.name,
	              pure: pipeAnnotation.pure
	          });
	          this._pipeCache.set(pipeType, pipeMeta);
	          this._pipeSummaryCache.set(pipeType, pipeMeta.toSummary());
	          return pipeMeta;
	      };
	      CompileMetadataResolver.prototype._getDependenciesMetadata = function (typeOrFunc, dependencies) {
	          var _this = this;
	          var hasUnknownDeps = false;
	          var params = dependencies || this._reflector.parameters(typeOrFunc) || [];
	          var dependenciesMetadata = params.map(function (param) {
	              var isAttribute = false;
	              var isHost = false;
	              var isSelf = false;
	              var isSkipSelf = false;
	              var isOptional = false;
	              var token = null;
	              if (Array.isArray(param)) {
	                  param.forEach(function (paramEntry) {
	                      if (paramEntry instanceof _angular_core.Host) {
	                          isHost = true;
	                      }
	                      else if (paramEntry instanceof _angular_core.Self) {
	                          isSelf = true;
	                      }
	                      else if (paramEntry instanceof _angular_core.SkipSelf) {
	                          isSkipSelf = true;
	                      }
	                      else if (paramEntry instanceof _angular_core.Optional) {
	                          isOptional = true;
	                      }
	                      else if (paramEntry instanceof _angular_core.Attribute) {
	                          isAttribute = true;
	                          token = paramEntry.attributeName;
	                      }
	                      else if (paramEntry instanceof _angular_core.Inject) {
	                          token = paramEntry.token;
	                      }
	                      else if (isValidType(paramEntry) && isBlank(token)) {
	                          token = paramEntry;
	                      }
	                  });
	              }
	              else {
	                  token = param;
	              }
	              if (isBlank(token)) {
	                  hasUnknownDeps = true;
	                  return null;
	              }
	              return new CompileDiDependencyMetadata({
	                  isAttribute: isAttribute,
	                  isHost: isHost,
	                  isSelf: isSelf,
	                  isSkipSelf: isSkipSelf,
	                  isOptional: isOptional,
	                  token: _this._getTokenMetadata(token)
	              });
	          });
	          if (hasUnknownDeps) {
	              var depsTokens = dependenciesMetadata.map(function (dep) { return dep ? stringify(dep.token) : '?'; }).join(', ');
	              throw new Error("Can't resolve all parameters for " + stringify(typeOrFunc) + ": (" + depsTokens + ").");
	          }
	          return dependenciesMetadata;
	      };
	      CompileMetadataResolver.prototype._getTokenMetadata = function (token) {
	          token = _angular_core.resolveForwardRef(token);
	          var compileToken;
	          if (typeof token === 'string') {
	              compileToken = new CompileTokenMetadata({ value: token });
	          }
	          else {
	              compileToken = new CompileTokenMetadata({
	                  identifier: new CompileIdentifierMetadata({
	                      reference: token,
	                      name: this.sanitizeTokenName(token),
	                      moduleUrl: staticTypeModuleUrl(token)
	                  })
	              });
	          }
	          return compileToken;
	      };
	      CompileMetadataResolver.prototype._getProvidersMetadata = function (providers, targetEntryComponents, debugInfo) {
	          var _this = this;
	          var compileProviders = [];
	          providers.forEach(function (provider, providerIdx) {
	              provider = _angular_core.resolveForwardRef(provider);
	              if (provider && typeof provider == 'object' && provider.hasOwnProperty('provide')) {
	                  provider = new ProviderMeta(provider.provide, provider);
	              }
	              var compileProvider;
	              if (Array.isArray(provider)) {
	                  compileProvider = _this._getProvidersMetadata(provider, targetEntryComponents, debugInfo);
	              }
	              else if (provider instanceof ProviderMeta) {
	                  var tokenMeta = _this._getTokenMetadata(provider.token);
	                  if (tokenMeta.reference ===
	                      resolveIdentifierToken(Identifiers.ANALYZE_FOR_ENTRY_COMPONENTS).reference) {
	                      targetEntryComponents.push.apply(targetEntryComponents, _this._getEntryComponentsFromProvider(provider));
	                  }
	                  else {
	                      compileProvider = _this.getProviderMetadata(provider);
	                  }
	              }
	              else if (isValidType(provider)) {
	                  compileProvider = _this._getTypeMetadata(provider, staticTypeModuleUrl(provider));
	              }
	              else {
	                  var providersInfo = providers.reduce(function (soFar, seenProvider, seenProviderIdx) {
	                      if (seenProviderIdx < providerIdx) {
	                          soFar.push("" + stringify(seenProvider));
	                      }
	                      else if (seenProviderIdx == providerIdx) {
	                          soFar.push("?" + stringify(seenProvider) + "?");
	                      }
	                      else if (seenProviderIdx == providerIdx + 1) {
	                          soFar.push('...');
	                      }
	                      return soFar;
	                  }, [])
	                      .join(', ');
	                  throw new Error("Invalid " + (debugInfo ? debugInfo : 'provider') + " - only instances of Provider and Type are allowed, got: [" + providersInfo + "]");
	              }
	              if (compileProvider) {
	                  compileProviders.push(compileProvider);
	              }
	          });
	          return compileProviders;
	      };
	      CompileMetadataResolver.prototype._getEntryComponentsFromProvider = function (provider) {
	          var _this = this;
	          var components = [];
	          var collectedIdentifiers = [];
	          if (provider.useFactory || provider.useExisting || provider.useClass) {
	              throw new Error("The ANALYZE_FOR_ENTRY_COMPONENTS token only supports useValue!");
	          }
	          if (!provider.multi) {
	              throw new Error("The ANALYZE_FOR_ENTRY_COMPONENTS token only supports 'multi = true'!");
	          }
	          convertToCompileValue(provider.useValue, collectedIdentifiers);
	          collectedIdentifiers.forEach(function (identifier) {
	              if (_this._directiveResolver.isDirective(identifier.reference)) {
	                  components.push(identifier);
	              }
	          });
	          return components;
	      };
	      CompileMetadataResolver.prototype.getProviderMetadata = function (provider) {
	          var compileDeps;
	          var compileTypeMetadata = null;
	          var compileFactoryMetadata = null;
	          if (provider.useClass) {
	              compileTypeMetadata = this._getTypeMetadata(provider.useClass, staticTypeModuleUrl(provider.useClass), provider.dependencies);
	              compileDeps = compileTypeMetadata.diDeps;
	          }
	          else if (provider.useFactory) {
	              compileFactoryMetadata = this._getFactoryMetadata(provider.useFactory, staticTypeModuleUrl(provider.useFactory), provider.dependencies);
	              compileDeps = compileFactoryMetadata.diDeps;
	          }
	          return new CompileProviderMetadata({
	              token: this._getTokenMetadata(provider.token),
	              useClass: compileTypeMetadata,
	              useValue: convertToCompileValue(provider.useValue, []),
	              useFactory: compileFactoryMetadata,
	              useExisting: provider.useExisting ? this._getTokenMetadata(provider.useExisting) : null,
	              deps: compileDeps,
	              multi: provider.multi
	          });
	      };
	      CompileMetadataResolver.prototype._getQueriesMetadata = function (queries, isViewQuery, directiveType) {
	          var _this = this;
	          var res = [];
	          Object.keys(queries).forEach(function (propertyName) {
	              var query = queries[propertyName];
	              if (query.isViewQuery === isViewQuery) {
	                  res.push(_this._getQueryMetadata(query, propertyName, directiveType));
	              }
	          });
	          return res;
	      };
	      CompileMetadataResolver.prototype._queryVarBindings = function (selector) { return selector.split(/\s*,\s*/); };
	      CompileMetadataResolver.prototype._getQueryMetadata = function (q, propertyName, typeOrFunc) {
	          var _this = this;
	          var selectors;
	          if (typeof q.selector === 'string') {
	              selectors =
	                  this._queryVarBindings(q.selector).map(function (varName) { return _this._getTokenMetadata(varName); });
	          }
	          else {
	              if (!q.selector) {
	                  throw new Error("Can't construct a query for the property \"" + propertyName + "\" of \"" + stringify(typeOrFunc) + "\" since the query selector wasn't defined.");
	              }
	              selectors = [this._getTokenMetadata(q.selector)];
	          }
	          return new CompileQueryMetadata({
	              selectors: selectors,
	              first: q.first,
	              descendants: q.descendants, propertyName: propertyName,
	              read: q.read ? this._getTokenMetadata(q.read) : null
	          });
	      };
	      CompileMetadataResolver.decorators = [
	          { type: _angular_core.Injectable },
	      ];
	      /** @nocollapse */
	      CompileMetadataResolver.ctorParameters = [
	          { type: NgModuleResolver, },
	          { type: DirectiveResolver, },
	          { type: PipeResolver, },
	          { type: ElementSchemaRegistry, },
	          { type: DirectiveNormalizer, },
	          { type: ReflectorReader, },
	      ];
	      return CompileMetadataResolver;
	  }());
	  function getTransitiveExportedModules(modules, targetModules, visitedModules) {
	      if (targetModules === void 0) { targetModules = []; }
	      if (visitedModules === void 0) { visitedModules = new Set(); }
	      modules.forEach(function (ngModule) {
	          if (!visitedModules.has(ngModule.type.reference)) {
	              visitedModules.add(ngModule.type.reference);
	              getTransitiveExportedModules(ngModule.exportedModules, targetModules, visitedModules);
	              // Add after recursing so imported/exported modules are before the module itself.
	              // This is important for overwriting providers of imported modules!
	              targetModules.push(ngModule);
	          }
	      });
	      return targetModules;
	  }
	  function getTransitiveImportedModules(modules, targetModules, visitedModules) {
	      if (targetModules === void 0) { targetModules = []; }
	      if (visitedModules === void 0) { visitedModules = new Set(); }
	      modules.forEach(function (ngModule) {
	          if (!visitedModules.has(ngModule.type.reference)) {
	              visitedModules.add(ngModule.type.reference);
	              var nestedModules = ngModule.importedModules.concat(ngModule.exportedModules);
	              getTransitiveImportedModules(nestedModules, targetModules, visitedModules);
	              // Add after recursing so imported/exported modules are before the module itself.
	              // This is important for overwriting providers of imported modules!
	              targetModules.push(ngModule);
	          }
	      });
	      return targetModules;
	  }
	  function flattenArray(tree, out) {
	      if (out === void 0) { out = []; }
	      if (tree) {
	          for (var i = 0; i < tree.length; i++) {
	              var item = _angular_core.resolveForwardRef(tree[i]);
	              if (Array.isArray(item)) {
	                  flattenArray(item, out);
	              }
	              else {
	                  out.push(item);
	              }
	          }
	      }
	      return out;
	  }
	  function dedupeArray(array) {
	      if (array) {
	          return Array.from(new Set(array));
	      }
	      return [];
	  }
	  function flattenAndDedupeArray(tree) {
	      return dedupeArray(flattenArray(tree));
	  }
	  function isValidType(value) {
	      return isStaticSymbol(value) || (value instanceof _angular_core.Type);
	  }
	  function staticTypeModuleUrl(value) {
	      return isStaticSymbol(value) ? value.filePath : null;
	  }
	  function componentModuleUrl(reflector, type, cmpMetadata) {
	      if (isStaticSymbol(type)) {
	          return staticTypeModuleUrl(type);
	      }
	      var moduleId = cmpMetadata.moduleId;
	      if (typeof moduleId === 'string') {
	          var scheme = getUrlScheme(moduleId);
	          return scheme ? moduleId : "package:" + moduleId + MODULE_SUFFIX;
	      }
	      else if (moduleId !== null && moduleId !== void 0) {
	          throw new Error(("moduleId should be a string in \"" + stringify(type) + "\". See https://goo.gl/wIDDiL for more information.\n") +
	              "If you're using Webpack you should inline the template and the styles, see https://goo.gl/X2J8zc.");
	      }
	      return reflector.importUri(type);
	  }
	  function convertToCompileValue(value, targetIdentifiers) {
	      return visitValue(value, new _CompileValueConverter(), targetIdentifiers);
	  }
	  var _CompileValueConverter = (function (_super) {
	      __extends$17(_CompileValueConverter, _super);
	      function _CompileValueConverter() {
	          _super.apply(this, arguments);
	      }
	      _CompileValueConverter.prototype.visitOther = function (value, targetIdentifiers) {
	          var identifier;
	          if (isStaticSymbol(value)) {
	              identifier = new CompileIdentifierMetadata({ name: value.name, moduleUrl: value.filePath, reference: value });
	          }
	          else {
	              identifier = new CompileIdentifierMetadata({ reference: value });
	          }
	          targetIdentifiers.push(identifier);
	          return identifier;
	      };
	      return _CompileValueConverter;
	  }(ValueTransformer));

	  var ComponentFactoryDependency$1 = (function () {
	      function ComponentFactoryDependency(comp, placeholder) {
	          this.comp = comp;
	          this.placeholder = placeholder;
	      }
	      return ComponentFactoryDependency;
	  }());
	  var NgModuleCompileResult = (function () {
	      function NgModuleCompileResult(statements, ngModuleFactoryVar, dependencies) {
	          this.statements = statements;
	          this.ngModuleFactoryVar = ngModuleFactoryVar;
	          this.dependencies = dependencies;
	      }
	      return NgModuleCompileResult;
	  }());
	  var NgModuleCompiler = (function () {
	      function NgModuleCompiler() {
	      }
	      NgModuleCompiler.prototype.compile = function (ngModuleMeta, extraProviders) {
	          var sourceFileName = isPresent(ngModuleMeta.type.moduleUrl) ?
	              "in NgModule " + ngModuleMeta.type.name + " in " + ngModuleMeta.type.moduleUrl :
	              "in NgModule " + ngModuleMeta.type.name;
	          var sourceFile = new ParseSourceFile('', sourceFileName);
	          var sourceSpan = new ParseSourceSpan(new ParseLocation(sourceFile, null, null, null), new ParseLocation(sourceFile, null, null, null));
	          var deps = [];
	          var bootstrapComponentFactories = [];
	          var entryComponentFactories = ngModuleMeta.transitiveModule.entryComponents.map(function (entryComponent) {
	              var id = new CompileIdentifierMetadata({ name: entryComponent.name });
	              if (ngModuleMeta.bootstrapComponents.indexOf(entryComponent) > -1) {
	                  bootstrapComponentFactories.push(id);
	              }
	              deps.push(new ComponentFactoryDependency$1(entryComponent, id));
	              return id;
	          });
	          var builder = new _InjectorBuilder(ngModuleMeta, entryComponentFactories, bootstrapComponentFactories, sourceSpan);
	          var providerParser = new NgModuleProviderAnalyzer(ngModuleMeta, extraProviders, sourceSpan);
	          providerParser.parse().forEach(function (provider) { return builder.addProvider(provider); });
	          var injectorClass = builder.build();
	          var ngModuleFactoryVar = ngModuleMeta.type.name + "NgFactory";
	          var ngModuleFactoryStmt = variable(ngModuleFactoryVar)
	              .set(importExpr(resolveIdentifier(Identifiers.NgModuleFactory))
	              .instantiate([variable(injectorClass.name), importExpr(ngModuleMeta.type)], importType(resolveIdentifier(Identifiers.NgModuleFactory), [importType(ngModuleMeta.type)], [TypeModifier.Const])))
	              .toDeclStmt(null, [StmtModifier.Final]);
	          var stmts = [injectorClass, ngModuleFactoryStmt];
	          if (ngModuleMeta.id) {
	              var registerFactoryStmt = importExpr(resolveIdentifier(Identifiers.RegisterModuleFactoryFn))
	                  .callFn([literal(ngModuleMeta.id), variable(ngModuleFactoryVar)])
	                  .toStmt();
	              stmts.push(registerFactoryStmt);
	          }
	          return new NgModuleCompileResult(stmts, ngModuleFactoryVar, deps);
	      };
	      NgModuleCompiler.decorators = [
	          { type: _angular_core.Injectable },
	      ];
	      /** @nocollapse */
	      NgModuleCompiler.ctorParameters = [];
	      return NgModuleCompiler;
	  }());
	  var _InjectorBuilder = (function () {
	      function _InjectorBuilder(_ngModuleMeta, _entryComponentFactories, _bootstrapComponentFactories, _sourceSpan) {
	          this._ngModuleMeta = _ngModuleMeta;
	          this._entryComponentFactories = _entryComponentFactories;
	          this._bootstrapComponentFactories = _bootstrapComponentFactories;
	          this._sourceSpan = _sourceSpan;
	          this.fields = [];
	          this.getters = [];
	          this.methods = [];
	          this.ctorStmts = [];
	          this._tokens = [];
	          this._instances = new Map();
	          this._createStmts = [];
	          this._destroyStmts = [];
	      }
	      _InjectorBuilder.prototype.addProvider = function (resolvedProvider) {
	          var _this = this;
	          var providerValueExpressions = resolvedProvider.providers.map(function (provider) { return _this._getProviderValue(provider); });
	          var propName = "_" + resolvedProvider.token.name + "_" + this._instances.size;
	          var instance = this._createProviderProperty(propName, resolvedProvider, providerValueExpressions, resolvedProvider.multiProvider, resolvedProvider.eager);
	          if (resolvedProvider.lifecycleHooks.indexOf(LifecycleHooks.OnDestroy) !== -1) {
	              this._destroyStmts.push(instance.callMethod('ngOnDestroy', []).toStmt());
	          }
	          this._tokens.push(resolvedProvider.token);
	          this._instances.set(resolvedProvider.token.reference, instance);
	      };
	      _InjectorBuilder.prototype.build = function () {
	          var _this = this;
	          var getMethodStmts = this._tokens.map(function (token) {
	              var providerExpr = _this._instances.get(token.reference);
	              return new IfStmt(InjectMethodVars$1.token.identical(createDiTokenExpression(token)), [new ReturnStatement(providerExpr)]);
	          });
	          var methods = [
	              new ClassMethod('createInternal', [], this._createStmts.concat(new ReturnStatement(this._instances.get(this._ngModuleMeta.type.reference))), importType(this._ngModuleMeta.type)),
	              new ClassMethod('getInternal', [
	                  new FnParam(InjectMethodVars$1.token.name, DYNAMIC_TYPE),
	                  new FnParam(InjectMethodVars$1.notFoundResult.name, DYNAMIC_TYPE)
	              ], getMethodStmts.concat([new ReturnStatement(InjectMethodVars$1.notFoundResult)]), DYNAMIC_TYPE),
	              new ClassMethod('destroyInternal', [], this._destroyStmts),
	          ];
	          var parentArgs = [
	              variable(InjectorProps.parent.name),
	              literalArr(this._entryComponentFactories.map(function (componentFactory) { return importExpr(componentFactory); })),
	              literalArr(this._bootstrapComponentFactories.map(function (componentFactory) { return importExpr(componentFactory); }))
	          ];
	          var injClassName = this._ngModuleMeta.type.name + "Injector";
	          return createClassStmt({
	              name: injClassName,
	              ctorParams: [new FnParam(InjectorProps.parent.name, importType(resolveIdentifier(Identifiers.Injector)))],
	              parent: importExpr(resolveIdentifier(Identifiers.NgModuleInjector), [importType(this._ngModuleMeta.type)]),
	              parentArgs: parentArgs,
	              builders: [{ methods: methods }, this]
	          });
	      };
	      _InjectorBuilder.prototype._getProviderValue = function (provider) {
	          var _this = this;
	          var result;
	          if (isPresent(provider.useExisting)) {
	              result = this._getDependency(new CompileDiDependencyMetadata({ token: provider.useExisting }));
	          }
	          else if (isPresent(provider.useFactory)) {
	              var deps = provider.deps || provider.useFactory.diDeps;
	              var depsExpr = deps.map(function (dep) { return _this._getDependency(dep); });
	              result = importExpr(provider.useFactory).callFn(depsExpr);
	          }
	          else if (isPresent(provider.useClass)) {
	              var deps = provider.deps || provider.useClass.diDeps;
	              var depsExpr = deps.map(function (dep) { return _this._getDependency(dep); });
	              result =
	                  importExpr(provider.useClass).instantiate(depsExpr, importType(provider.useClass));
	          }
	          else {
	              result = convertValueToOutputAst(provider.useValue);
	          }
	          return result;
	      };
	      _InjectorBuilder.prototype._createProviderProperty = function (propName, provider, providerValueExpressions, isMulti, isEager) {
	          var resolvedProviderValueExpr;
	          var type;
	          if (isMulti) {
	              resolvedProviderValueExpr = literalArr(providerValueExpressions);
	              type = new ArrayType(DYNAMIC_TYPE);
	          }
	          else {
	              resolvedProviderValueExpr = providerValueExpressions[0];
	              type = providerValueExpressions[0].type;
	          }
	          if (!type) {
	              type = DYNAMIC_TYPE;
	          }
	          if (isEager) {
	              this.fields.push(new ClassField(propName, type));
	              this._createStmts.push(THIS_EXPR.prop(propName).set(resolvedProviderValueExpr).toStmt());
	          }
	          else {
	              var internalField = "_" + propName;
	              this.fields.push(new ClassField(internalField, type));
	              // Note: Equals is important for JS so that it also checks the undefined case!
	              var getterStmts = [
	                  new IfStmt(THIS_EXPR.prop(internalField).isBlank(), [THIS_EXPR.prop(internalField).set(resolvedProviderValueExpr).toStmt()]),
	                  new ReturnStatement(THIS_EXPR.prop(internalField))
	              ];
	              this.getters.push(new ClassGetter(propName, getterStmts, type));
	          }
	          return THIS_EXPR.prop(propName);
	      };
	      _InjectorBuilder.prototype._getDependency = function (dep) {
	          var result = null;
	          if (dep.isValue) {
	              result = literal(dep.value);
	          }
	          if (!dep.isSkipSelf) {
	              if (dep.token &&
	                  (dep.token.reference === resolveIdentifierToken(Identifiers.Injector).reference ||
	                      dep.token.reference ===
	                          resolveIdentifierToken(Identifiers.ComponentFactoryResolver).reference)) {
	                  result = THIS_EXPR;
	              }
	              if (!result) {
	                  result = this._instances.get(dep.token.reference);
	              }
	          }
	          if (!result) {
	              var args = [createDiTokenExpression(dep.token)];
	              if (dep.isOptional) {
	                  args.push(NULL_EXPR);
	              }
	              result = InjectorProps.parent.callMethod('get', args);
	          }
	          return result;
	      };
	      return _InjectorBuilder;
	  }());
	  var InjectorProps = (function () {
	      function InjectorProps() {
	      }
	      InjectorProps.parent = THIS_EXPR.prop('parent');
	      return InjectorProps;
	  }());
	  var InjectMethodVars$1 = (function () {
	      function InjectMethodVars() {
	      }
	      InjectMethodVars.token = variable('token');
	      InjectMethodVars.notFoundResult = variable('notFoundResult');
	      return InjectMethodVars;
	  }());

	  var _SINGLE_QUOTE_ESCAPE_STRING_RE = /'|\\|\n|\r|\$/g;
	  var _LEGAL_IDENTIFIER_RE = /^[$A-Z_][0-9A-Z_$]*$/i;
	  var CATCH_ERROR_VAR$2 = variable('error');
	  var CATCH_STACK_VAR$2 = variable('stack');
	  var _EmittedLine = (function () {
	      function _EmittedLine(indent) {
	          this.indent = indent;
	          this.parts = [];
	      }
	      return _EmittedLine;
	  }());
	  var EmitterVisitorContext = (function () {
	      function EmitterVisitorContext(_exportedVars, _indent) {
	          this._exportedVars = _exportedVars;
	          this._indent = _indent;
	          this._classes = [];
	          this._lines = [new _EmittedLine(_indent)];
	      }
	      EmitterVisitorContext.createRoot = function (exportedVars) {
	          return new EmitterVisitorContext(exportedVars, 0);
	      };
	      Object.defineProperty(EmitterVisitorContext.prototype, "_currentLine", {
	          get: function () { return this._lines[this._lines.length - 1]; },
	          enumerable: true,
	          configurable: true
	      });
	      EmitterVisitorContext.prototype.isExportedVar = function (varName) { return this._exportedVars.indexOf(varName) !== -1; };
	      EmitterVisitorContext.prototype.println = function (lastPart) {
	          if (lastPart === void 0) { lastPart = ''; }
	          this.print(lastPart, true);
	      };
	      EmitterVisitorContext.prototype.lineIsEmpty = function () { return this._currentLine.parts.length === 0; };
	      EmitterVisitorContext.prototype.print = function (part, newLine) {
	          if (newLine === void 0) { newLine = false; }
	          if (part.length > 0) {
	              this._currentLine.parts.push(part);
	          }
	          if (newLine) {
	              this._lines.push(new _EmittedLine(this._indent));
	          }
	      };
	      EmitterVisitorContext.prototype.removeEmptyLastLine = function () {
	          if (this.lineIsEmpty()) {
	              this._lines.pop();
	          }
	      };
	      EmitterVisitorContext.prototype.incIndent = function () {
	          this._indent++;
	          this._currentLine.indent = this._indent;
	      };
	      EmitterVisitorContext.prototype.decIndent = function () {
	          this._indent--;
	          this._currentLine.indent = this._indent;
	      };
	      EmitterVisitorContext.prototype.pushClass = function (clazz) { this._classes.push(clazz); };
	      EmitterVisitorContext.prototype.popClass = function () { return this._classes.pop(); };
	      Object.defineProperty(EmitterVisitorContext.prototype, "currentClass", {
	          get: function () {
	              return this._classes.length > 0 ? this._classes[this._classes.length - 1] : null;
	          },
	          enumerable: true,
	          configurable: true
	      });
	      EmitterVisitorContext.prototype.toSource = function () {
	          var lines = this._lines;
	          if (lines[lines.length - 1].parts.length === 0) {
	              lines = lines.slice(0, lines.length - 1);
	          }
	          return lines
	              .map(function (line) {
	              if (line.parts.length > 0) {
	                  return _createIndent(line.indent) + line.parts.join('');
	              }
	              else {
	                  return '';
	              }
	          })
	              .join('\n');
	      };
	      return EmitterVisitorContext;
	  }());
	  var AbstractEmitterVisitor = (function () {
	      function AbstractEmitterVisitor(_escapeDollarInStrings) {
	          this._escapeDollarInStrings = _escapeDollarInStrings;
	      }
	      AbstractEmitterVisitor.prototype.visitExpressionStmt = function (stmt, ctx) {
	          stmt.expr.visitExpression(this, ctx);
	          ctx.println(';');
	          return null;
	      };
	      AbstractEmitterVisitor.prototype.visitReturnStmt = function (stmt, ctx) {
	          ctx.print("return ");
	          stmt.value.visitExpression(this, ctx);
	          ctx.println(';');
	          return null;
	      };
	      AbstractEmitterVisitor.prototype.visitIfStmt = function (stmt, ctx) {
	          ctx.print("if (");
	          stmt.condition.visitExpression(this, ctx);
	          ctx.print(") {");
	          var hasElseCase = isPresent(stmt.falseCase) && stmt.falseCase.length > 0;
	          if (stmt.trueCase.length <= 1 && !hasElseCase) {
	              ctx.print(" ");
	              this.visitAllStatements(stmt.trueCase, ctx);
	              ctx.removeEmptyLastLine();
	              ctx.print(" ");
	          }
	          else {
	              ctx.println();
	              ctx.incIndent();
	              this.visitAllStatements(stmt.trueCase, ctx);
	              ctx.decIndent();
	              if (hasElseCase) {
	                  ctx.println("} else {");
	                  ctx.incIndent();
	                  this.visitAllStatements(stmt.falseCase, ctx);
	                  ctx.decIndent();
	              }
	          }
	          ctx.println("}");
	          return null;
	      };
	      AbstractEmitterVisitor.prototype.visitThrowStmt = function (stmt, ctx) {
	          ctx.print("throw ");
	          stmt.error.visitExpression(this, ctx);
	          ctx.println(";");
	          return null;
	      };
	      AbstractEmitterVisitor.prototype.visitCommentStmt = function (stmt, ctx) {
	          var lines = stmt.comment.split('\n');
	          lines.forEach(function (line) { ctx.println("// " + line); });
	          return null;
	      };
	      AbstractEmitterVisitor.prototype.visitWriteVarExpr = function (expr, ctx) {
	          var lineWasEmpty = ctx.lineIsEmpty();
	          if (!lineWasEmpty) {
	              ctx.print('(');
	          }
	          ctx.print(expr.name + " = ");
	          expr.value.visitExpression(this, ctx);
	          if (!lineWasEmpty) {
	              ctx.print(')');
	          }
	          return null;
	      };
	      AbstractEmitterVisitor.prototype.visitWriteKeyExpr = function (expr, ctx) {
	          var lineWasEmpty = ctx.lineIsEmpty();
	          if (!lineWasEmpty) {
	              ctx.print('(');
	          }
	          expr.receiver.visitExpression(this, ctx);
	          ctx.print("[");
	          expr.index.visitExpression(this, ctx);
	          ctx.print("] = ");
	          expr.value.visitExpression(this, ctx);
	          if (!lineWasEmpty) {
	              ctx.print(')');
	          }
	          return null;
	      };
	      AbstractEmitterVisitor.prototype.visitWritePropExpr = function (expr, ctx) {
	          var lineWasEmpty = ctx.lineIsEmpty();
	          if (!lineWasEmpty) {
	              ctx.print('(');
	          }
	          expr.receiver.visitExpression(this, ctx);
	          ctx.print("." + expr.name + " = ");
	          expr.value.visitExpression(this, ctx);
	          if (!lineWasEmpty) {
	              ctx.print(')');
	          }
	          return null;
	      };
	      AbstractEmitterVisitor.prototype.visitInvokeMethodExpr = function (expr, ctx) {
	          expr.receiver.visitExpression(this, ctx);
	          var name = expr.name;
	          if (isPresent(expr.builtin)) {
	              name = this.getBuiltinMethodName(expr.builtin);
	              if (isBlank(name)) {
	                  // some builtins just mean to skip the call.
	                  return null;
	              }
	          }
	          ctx.print("." + name + "(");
	          this.visitAllExpressions(expr.args, ctx, ",");
	          ctx.print(")");
	          return null;
	      };
	      AbstractEmitterVisitor.prototype.visitInvokeFunctionExpr = function (expr, ctx) {
	          expr.fn.visitExpression(this, ctx);
	          ctx.print("(");
	          this.visitAllExpressions(expr.args, ctx, ',');
	          ctx.print(")");
	          return null;
	      };
	      AbstractEmitterVisitor.prototype.visitReadVarExpr = function (ast, ctx) {
	          var varName = ast.name;
	          if (isPresent(ast.builtin)) {
	              switch (ast.builtin) {
	                  case BuiltinVar.Super:
	                      varName = 'super';
	                      break;
	                  case BuiltinVar.This:
	                      varName = 'this';
	                      break;
	                  case BuiltinVar.CatchError:
	                      varName = CATCH_ERROR_VAR$2.name;
	                      break;
	                  case BuiltinVar.CatchStack:
	                      varName = CATCH_STACK_VAR$2.name;
	                      break;
	                  default:
	                      throw new Error("Unknown builtin variable " + ast.builtin);
	              }
	          }
	          ctx.print(varName);
	          return null;
	      };
	      AbstractEmitterVisitor.prototype.visitInstantiateExpr = function (ast, ctx) {
	          ctx.print("new ");
	          ast.classExpr.visitExpression(this, ctx);
	          ctx.print("(");
	          this.visitAllExpressions(ast.args, ctx, ',');
	          ctx.print(")");
	          return null;
	      };
	      AbstractEmitterVisitor.prototype.visitLiteralExpr = function (ast, ctx) {
	          var value = ast.value;
	          if (typeof value === 'string') {
	              ctx.print(escapeIdentifier(value, this._escapeDollarInStrings));
	          }
	          else {
	              ctx.print("" + value);
	          }
	          return null;
	      };
	      AbstractEmitterVisitor.prototype.visitConditionalExpr = function (ast, ctx) {
	          ctx.print("(");
	          ast.condition.visitExpression(this, ctx);
	          ctx.print('? ');
	          ast.trueCase.visitExpression(this, ctx);
	          ctx.print(': ');
	          ast.falseCase.visitExpression(this, ctx);
	          ctx.print(")");
	          return null;
	      };
	      AbstractEmitterVisitor.prototype.visitNotExpr = function (ast, ctx) {
	          ctx.print('!');
	          ast.condition.visitExpression(this, ctx);
	          return null;
	      };
	      AbstractEmitterVisitor.prototype.visitBinaryOperatorExpr = function (ast, ctx) {
	          var opStr;
	          switch (ast.operator) {
	              case BinaryOperator.Equals:
	                  opStr = '==';
	                  break;
	              case BinaryOperator.Identical:
	                  opStr = '===';
	                  break;
	              case BinaryOperator.NotEquals:
	                  opStr = '!=';
	                  break;
	              case BinaryOperator.NotIdentical:
	                  opStr = '!==';
	                  break;
	              case BinaryOperator.And:
	                  opStr = '&&';
	                  break;
	              case BinaryOperator.Or:
	                  opStr = '||';
	                  break;
	              case BinaryOperator.Plus:
	                  opStr = '+';
	                  break;
	              case BinaryOperator.Minus:
	                  opStr = '-';
	                  break;
	              case BinaryOperator.Divide:
	                  opStr = '/';
	                  break;
	              case BinaryOperator.Multiply:
	                  opStr = '*';
	                  break;
	              case BinaryOperator.Modulo:
	                  opStr = '%';
	                  break;
	              case BinaryOperator.Lower:
	                  opStr = '<';
	                  break;
	              case BinaryOperator.LowerEquals:
	                  opStr = '<=';
	                  break;
	              case BinaryOperator.Bigger:
	                  opStr = '>';
	                  break;
	              case BinaryOperator.BiggerEquals:
	                  opStr = '>=';
	                  break;
	              default:
	                  throw new Error("Unknown operator " + ast.operator);
	          }
	          ctx.print("(");
	          ast.lhs.visitExpression(this, ctx);
	          ctx.print(" " + opStr + " ");
	          ast.rhs.visitExpression(this, ctx);
	          ctx.print(")");
	          return null;
	      };
	      AbstractEmitterVisitor.prototype.visitReadPropExpr = function (ast, ctx) {
	          ast.receiver.visitExpression(this, ctx);
	          ctx.print(".");
	          ctx.print(ast.name);
	          return null;
	      };
	      AbstractEmitterVisitor.prototype.visitReadKeyExpr = function (ast, ctx) {
	          ast.receiver.visitExpression(this, ctx);
	          ctx.print("[");
	          ast.index.visitExpression(this, ctx);
	          ctx.print("]");
	          return null;
	      };
	      AbstractEmitterVisitor.prototype.visitLiteralArrayExpr = function (ast, ctx) {
	          var useNewLine = ast.entries.length > 1;
	          ctx.print("[", useNewLine);
	          ctx.incIndent();
	          this.visitAllExpressions(ast.entries, ctx, ',', useNewLine);
	          ctx.decIndent();
	          ctx.print("]", useNewLine);
	          return null;
	      };
	      AbstractEmitterVisitor.prototype.visitLiteralMapExpr = function (ast, ctx) {
	          var _this = this;
	          var useNewLine = ast.entries.length > 1;
	          ctx.print("{", useNewLine);
	          ctx.incIndent();
	          this.visitAllObjects(function (entry) {
	              ctx.print(escapeIdentifier(entry[0], _this._escapeDollarInStrings, false) + ": ");
	              entry[1].visitExpression(_this, ctx);
	          }, ast.entries, ctx, ',', useNewLine);
	          ctx.decIndent();
	          ctx.print("}", useNewLine);
	          return null;
	      };
	      AbstractEmitterVisitor.prototype.visitAllExpressions = function (expressions, ctx, separator, newLine) {
	          var _this = this;
	          if (newLine === void 0) { newLine = false; }
	          this.visitAllObjects(function (expr) { return expr.visitExpression(_this, ctx); }, expressions, ctx, separator, newLine);
	      };
	      AbstractEmitterVisitor.prototype.visitAllObjects = function (handler, expressions, ctx, separator, newLine) {
	          if (newLine === void 0) { newLine = false; }
	          for (var i = 0; i < expressions.length; i++) {
	              if (i > 0) {
	                  ctx.print(separator, newLine);
	              }
	              handler(expressions[i]);
	          }
	          if (newLine) {
	              ctx.println();
	          }
	      };
	      AbstractEmitterVisitor.prototype.visitAllStatements = function (statements, ctx) {
	          var _this = this;
	          statements.forEach(function (stmt) { return stmt.visitStatement(_this, ctx); });
	      };
	      return AbstractEmitterVisitor;
	  }());
	  function escapeIdentifier(input, escapeDollar, alwaysQuote) {
	      if (alwaysQuote === void 0) { alwaysQuote = true; }
	      if (isBlank(input)) {
	          return null;
	      }
	      var body = input.replace(_SINGLE_QUOTE_ESCAPE_STRING_RE, function () {
	          var match = [];
	          for (var _i = 0; _i < arguments.length; _i++) {
	              match[_i - 0] = arguments[_i];
	          }
	          if (match[0] == '$') {
	              return escapeDollar ? '\\$' : '$';
	          }
	          else if (match[0] == '\n') {
	              return '\\n';
	          }
	          else if (match[0] == '\r') {
	              return '\\r';
	          }
	          else {
	              return "\\" + match[0];
	          }
	      });
	      var requiresQuotes = alwaysQuote || !_LEGAL_IDENTIFIER_RE.test(body);
	      return requiresQuotes ? "'" + body + "'" : body;
	  }
	  function _createIndent(count) {
	      var res = '';
	      for (var i = 0; i < count; i++) {
	          res += '  ';
	      }
	      return res;
	  }

	  /**
	   * @license
	   * Copyright Google Inc. All Rights Reserved.
	   *
	   * Use of this source code is governed by an MIT-style license that can be
	   * found in the LICENSE file at https://angular.io/license
	   */
	  var __extends$18 = (this && this.__extends) || function (d, b) {
	      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	      function __() { this.constructor = d; }
	      d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	  };
	  var _debugModuleUrl = 'asset://debug/lib';
	  function debugOutputAstAsTypeScript(ast) {
	      var converter = new _TsEmitterVisitor(_debugModuleUrl);
	      var ctx = EmitterVisitorContext.createRoot([]);
	      var asts = Array.isArray(ast) ? ast : [ast];
	      asts.forEach(function (ast) {
	          if (ast instanceof Statement) {
	              ast.visitStatement(converter, ctx);
	          }
	          else if (ast instanceof Expression) {
	              ast.visitExpression(converter, ctx);
	          }
	          else if (ast instanceof Type$1) {
	              ast.visitType(converter, ctx);
	          }
	          else {
	              throw new Error("Don't know how to print debug info for " + ast);
	          }
	      });
	      return ctx.toSource();
	  }
	  var TypeScriptEmitter = (function () {
	      function TypeScriptEmitter(_importGenerator) {
	          this._importGenerator = _importGenerator;
	      }
	      TypeScriptEmitter.prototype.emitStatements = function (moduleUrl, stmts, exportedVars) {
	          var _this = this;
	          var converter = new _TsEmitterVisitor(moduleUrl);
	          var ctx = EmitterVisitorContext.createRoot(exportedVars);
	          converter.visitAllStatements(stmts, ctx);
	          var srcParts = [];
	          converter.importsWithPrefixes.forEach(function (prefix, importedModuleUrl) {
	              // Note: can't write the real word for import as it screws up system.js auto detection...
	              srcParts.push("imp" +
	                  ("ort * as " + prefix + " from '" + _this._importGenerator.getImportPath(moduleUrl, importedModuleUrl) + "';"));
	          });
	          srcParts.push(ctx.toSource());
	          return srcParts.join('\n');
	      };
	      return TypeScriptEmitter;
	  }());
	  var _TsEmitterVisitor = (function (_super) {
	      __extends$18(_TsEmitterVisitor, _super);
	      function _TsEmitterVisitor(_moduleUrl) {
	          _super.call(this, false);
	          this._moduleUrl = _moduleUrl;
	          this.importsWithPrefixes = new Map();
	      }
	      _TsEmitterVisitor.prototype.visitType = function (t, ctx, defaultType) {
	          if (defaultType === void 0) { defaultType = 'any'; }
	          if (isPresent(t)) {
	              t.visitType(this, ctx);
	          }
	          else {
	              ctx.print(defaultType);
	          }
	      };
	      _TsEmitterVisitor.prototype.visitLiteralExpr = function (ast, ctx) {
	          var value = ast.value;
	          if (isBlank(value) && ast.type != NULL_TYPE) {
	              ctx.print("(" + value + " as any)");
	              return null;
	          }
	          return _super.prototype.visitLiteralExpr.call(this, ast, ctx);
	      };
	      // Temporary workaround to support strictNullCheck enabled consumers of ngc emit.
	      // In SNC mode, [] have the type never[], so we cast here to any[].
	      // TODO: narrow the cast to a more explicit type, or use a pattern that does not
	      // start with [].concat. see https://github.com/angular/angular/pull/11846
	      _TsEmitterVisitor.prototype.visitLiteralArrayExpr = function (ast, ctx) {
	          if (ast.entries.length === 0) {
	              ctx.print('(');
	          }
	          var result = _super.prototype.visitLiteralArrayExpr.call(this, ast, ctx);
	          if (ast.entries.length === 0) {
	              ctx.print(' as any[])');
	          }
	          return result;
	      };
	      _TsEmitterVisitor.prototype.visitExternalExpr = function (ast, ctx) {
	          this._visitIdentifier(ast.value, ast.typeParams, ctx);
	          return null;
	      };
	      _TsEmitterVisitor.prototype.visitDeclareVarStmt = function (stmt, ctx) {
	          if (ctx.isExportedVar(stmt.name)) {
	              ctx.print("export ");
	          }
	          if (stmt.hasModifier(StmtModifier.Final)) {
	              ctx.print("const");
	          }
	          else {
	              ctx.print("var");
	          }
	          ctx.print(" " + stmt.name + ":");
	          this.visitType(stmt.type, ctx);
	          ctx.print(" = ");
	          stmt.value.visitExpression(this, ctx);
	          ctx.println(";");
	          return null;
	      };
	      _TsEmitterVisitor.prototype.visitCastExpr = function (ast, ctx) {
	          ctx.print("(<");
	          ast.type.visitType(this, ctx);
	          ctx.print(">");
	          ast.value.visitExpression(this, ctx);
	          ctx.print(")");
	          return null;
	      };
	      _TsEmitterVisitor.prototype.visitDeclareClassStmt = function (stmt, ctx) {
	          var _this = this;
	          ctx.pushClass(stmt);
	          if (ctx.isExportedVar(stmt.name)) {
	              ctx.print("export ");
	          }
	          ctx.print("class " + stmt.name);
	          if (isPresent(stmt.parent)) {
	              ctx.print(" extends ");
	              stmt.parent.visitExpression(this, ctx);
	          }
	          ctx.println(" {");
	          ctx.incIndent();
	          stmt.fields.forEach(function (field) { return _this._visitClassField(field, ctx); });
	          if (isPresent(stmt.constructorMethod)) {
	              this._visitClassConstructor(stmt, ctx);
	          }
	          stmt.getters.forEach(function (getter) { return _this._visitClassGetter(getter, ctx); });
	          stmt.methods.forEach(function (method) { return _this._visitClassMethod(method, ctx); });
	          ctx.decIndent();
	          ctx.println("}");
	          ctx.popClass();
	          return null;
	      };
	      _TsEmitterVisitor.prototype._visitClassField = function (field, ctx) {
	          if (field.hasModifier(StmtModifier.Private)) {
	              // comment out as a workaround for #10967
	              ctx.print("/*private*/ ");
	          }
	          ctx.print(field.name);
	          ctx.print(':');
	          this.visitType(field.type, ctx);
	          ctx.println(";");
	      };
	      _TsEmitterVisitor.prototype._visitClassGetter = function (getter, ctx) {
	          if (getter.hasModifier(StmtModifier.Private)) {
	              ctx.print("private ");
	          }
	          ctx.print("get " + getter.name + "()");
	          ctx.print(':');
	          this.visitType(getter.type, ctx);
	          ctx.println(" {");
	          ctx.incIndent();
	          this.visitAllStatements(getter.body, ctx);
	          ctx.decIndent();
	          ctx.println("}");
	      };
	      _TsEmitterVisitor.prototype._visitClassConstructor = function (stmt, ctx) {
	          ctx.print("constructor(");
	          this._visitParams(stmt.constructorMethod.params, ctx);
	          ctx.println(") {");
	          ctx.incIndent();
	          this.visitAllStatements(stmt.constructorMethod.body, ctx);
	          ctx.decIndent();
	          ctx.println("}");
	      };
	      _TsEmitterVisitor.prototype._visitClassMethod = function (method, ctx) {
	          if (method.hasModifier(StmtModifier.Private)) {
	              ctx.print("private ");
	          }
	          ctx.print(method.name + "(");
	          this._visitParams(method.params, ctx);
	          ctx.print("):");
	          this.visitType(method.type, ctx, 'void');
	          ctx.println(" {");
	          ctx.incIndent();
	          this.visitAllStatements(method.body, ctx);
	          ctx.decIndent();
	          ctx.println("}");
	      };
	      _TsEmitterVisitor.prototype.visitFunctionExpr = function (ast, ctx) {
	          ctx.print("(");
	          this._visitParams(ast.params, ctx);
	          ctx.print("):");
	          this.visitType(ast.type, ctx, 'void');
	          ctx.println(" => {");
	          ctx.incIndent();
	          this.visitAllStatements(ast.statements, ctx);
	          ctx.decIndent();
	          ctx.print("}");
	          return null;
	      };
	      _TsEmitterVisitor.prototype.visitDeclareFunctionStmt = function (stmt, ctx) {
	          if (ctx.isExportedVar(stmt.name)) {
	              ctx.print("export ");
	          }
	          ctx.print("function " + stmt.name + "(");
	          this._visitParams(stmt.params, ctx);
	          ctx.print("):");
	          this.visitType(stmt.type, ctx, 'void');
	          ctx.println(" {");
	          ctx.incIndent();
	          this.visitAllStatements(stmt.statements, ctx);
	          ctx.decIndent();
	          ctx.println("}");
	          return null;
	      };
	      _TsEmitterVisitor.prototype.visitTryCatchStmt = function (stmt, ctx) {
	          ctx.println("try {");
	          ctx.incIndent();
	          this.visitAllStatements(stmt.bodyStmts, ctx);
	          ctx.decIndent();
	          ctx.println("} catch (" + CATCH_ERROR_VAR$2.name + ") {");
	          ctx.incIndent();
	          var catchStmts = [CATCH_STACK_VAR$2.set(CATCH_ERROR_VAR$2.prop('stack')).toDeclStmt(null, [
	                  StmtModifier.Final
	              ])].concat(stmt.catchStmts);
	          this.visitAllStatements(catchStmts, ctx);
	          ctx.decIndent();
	          ctx.println("}");
	          return null;
	      };
	      _TsEmitterVisitor.prototype.visitBuiltintType = function (type, ctx) {
	          var typeStr;
	          switch (type.name) {
	              case BuiltinTypeName.Bool:
	                  typeStr = 'boolean';
	                  break;
	              case BuiltinTypeName.Dynamic:
	                  typeStr = 'any';
	                  break;
	              case BuiltinTypeName.Function:
	                  typeStr = 'Function';
	                  break;
	              case BuiltinTypeName.Number:
	                  typeStr = 'number';
	                  break;
	              case BuiltinTypeName.Int:
	                  typeStr = 'number';
	                  break;
	              case BuiltinTypeName.String:
	                  typeStr = 'string';
	                  break;
	              default:
	                  throw new Error("Unsupported builtin type " + type.name);
	          }
	          ctx.print(typeStr);
	          return null;
	      };
	      _TsEmitterVisitor.prototype.visitExternalType = function (ast, ctx) {
	          this._visitIdentifier(ast.value, ast.typeParams, ctx);
	          return null;
	      };
	      _TsEmitterVisitor.prototype.visitArrayType = function (type, ctx) {
	          this.visitType(type.of, ctx);
	          ctx.print("[]");
	          return null;
	      };
	      _TsEmitterVisitor.prototype.visitMapType = function (type, ctx) {
	          ctx.print("{[key: string]:");
	          this.visitType(type.valueType, ctx);
	          ctx.print("}");
	          return null;
	      };
	      _TsEmitterVisitor.prototype.getBuiltinMethodName = function (method) {
	          var name;
	          switch (method) {
	              case BuiltinMethod.ConcatArray:
	                  name = 'concat';
	                  break;
	              case BuiltinMethod.SubscribeObservable:
	                  name = 'subscribe';
	                  break;
	              case BuiltinMethod.Bind:
	                  name = 'bind';
	                  break;
	              default:
	                  throw new Error("Unknown builtin method: " + method);
	          }
	          return name;
	      };
	      _TsEmitterVisitor.prototype._visitParams = function (params, ctx) {
	          var _this = this;
	          this.visitAllObjects(function (param) {
	              ctx.print(param.name);
	              ctx.print(':');
	              _this.visitType(param.type, ctx);
	          }, params, ctx, ',');
	      };
	      _TsEmitterVisitor.prototype._visitIdentifier = function (value, typeParams, ctx) {
	          var _this = this;
	          if (isBlank(value.name)) {
	              throw new Error("Internal error: unknown identifier " + value);
	          }
	          if (isPresent(value.moduleUrl) && value.moduleUrl != this._moduleUrl) {
	              var prefix = this.importsWithPrefixes.get(value.moduleUrl);
	              if (isBlank(prefix)) {
	                  prefix = "import" + this.importsWithPrefixes.size;
	                  this.importsWithPrefixes.set(value.moduleUrl, prefix);
	              }
	              ctx.print(prefix + ".");
	          }
	          if (value.reference && value.reference.members) {
	              ctx.print(value.reference.name);
	              ctx.print('.');
	              ctx.print(value.reference.members.join('.'));
	          }
	          else {
	              ctx.print(value.name);
	          }
	          if (isPresent(typeParams) && typeParams.length > 0) {
	              ctx.print("<");
	              this.visitAllObjects(function (type) { return type.visitType(_this, ctx); }, typeParams, ctx, ',');
	              ctx.print(">");
	          }
	      };
	      return _TsEmitterVisitor;
	  }(AbstractEmitterVisitor));

	  function interpretStatements(statements, resultVar) {
	      var stmtsWithReturn = statements.concat([new ReturnStatement(variable(resultVar))]);
	      var ctx = new _ExecutionContext(null, null, null, new Map());
	      var visitor = new StatementInterpreter();
	      var result = visitor.visitAllStatements(stmtsWithReturn, ctx);
	      return isPresent(result) ? result.value : null;
	  }
	  function _executeFunctionStatements(varNames, varValues, statements, ctx, visitor) {
	      var childCtx = ctx.createChildWihtLocalVars();
	      for (var i = 0; i < varNames.length; i++) {
	          childCtx.vars.set(varNames[i], varValues[i]);
	      }
	      var result = visitor.visitAllStatements(statements, childCtx);
	      return isPresent(result) ? result.value : null;
	  }
	  var _ExecutionContext = (function () {
	      function _ExecutionContext(parent, instance, className, vars) {
	          this.parent = parent;
	          this.instance = instance;
	          this.className = className;
	          this.vars = vars;
	      }
	      _ExecutionContext.prototype.createChildWihtLocalVars = function () {
	          return new _ExecutionContext(this, this.instance, this.className, new Map());
	      };
	      return _ExecutionContext;
	  }());
	  var ReturnValue = (function () {
	      function ReturnValue(value) {
	          this.value = value;
	      }
	      return ReturnValue;
	  }());
	  function createDynamicClass(_classStmt, _ctx, _visitor) {
	      var propertyDescriptors = {};
	      _classStmt.getters.forEach(function (getter) {
	          // Note: use `function` instead of arrow function to capture `this`
	          propertyDescriptors[getter.name] = {
	              configurable: false,
	              get: function () {
	                  var instanceCtx = new _ExecutionContext(_ctx, this, _classStmt.name, _ctx.vars);
	                  return _executeFunctionStatements([], [], getter.body, instanceCtx, _visitor);
	              }
	          };
	      });
	      _classStmt.methods.forEach(function (method) {
	          var paramNames = method.params.map(function (param) { return param.name; });
	          // Note: use `function` instead of arrow function to capture `this`
	          propertyDescriptors[method.name] = {
	              writable: false,
	              configurable: false,
	              value: function () {
	                  var args = [];
	                  for (var _i = 0; _i < arguments.length; _i++) {
	                      args[_i - 0] = arguments[_i];
	                  }
	                  var instanceCtx = new _ExecutionContext(_ctx, this, _classStmt.name, _ctx.vars);
	                  return _executeFunctionStatements(paramNames, args, method.body, instanceCtx, _visitor);
	              }
	          };
	      });
	      var ctorParamNames = _classStmt.constructorMethod.params.map(function (param) { return param.name; });
	      // Note: use `function` instead of arrow function to capture `this`
	      var ctor = function () {
	          var _this = this;
	          var args = [];
	          for (var _i = 0; _i < arguments.length; _i++) {
	              args[_i - 0] = arguments[_i];
	          }
	          var instanceCtx = new _ExecutionContext(_ctx, this, _classStmt.name, _ctx.vars);
	          _classStmt.fields.forEach(function (field) { _this[field.name] = undefined; });
	          _executeFunctionStatements(ctorParamNames, args, _classStmt.constructorMethod.body, instanceCtx, _visitor);
	      };
	      var superClass = _classStmt.parent ? _classStmt.parent.visitExpression(_visitor, _ctx) : Object;
	      ctor.prototype = Object.create(superClass.prototype, propertyDescriptors);
	      return ctor;
	  }
	  var StatementInterpreter = (function () {
	      function StatementInterpreter() {
	      }
	      StatementInterpreter.prototype.debugAst = function (ast) { return debugOutputAstAsTypeScript(ast); };
	      StatementInterpreter.prototype.visitDeclareVarStmt = function (stmt, ctx) {
	          ctx.vars.set(stmt.name, stmt.value.visitExpression(this, ctx));
	          return null;
	      };
	      StatementInterpreter.prototype.visitWriteVarExpr = function (expr, ctx) {
	          var value = expr.value.visitExpression(this, ctx);
	          var currCtx = ctx;
	          while (currCtx != null) {
	              if (currCtx.vars.has(expr.name)) {
	                  currCtx.vars.set(expr.name, value);
	                  return value;
	              }
	              currCtx = currCtx.parent;
	          }
	          throw new Error("Not declared variable " + expr.name);
	      };
	      StatementInterpreter.prototype.visitReadVarExpr = function (ast, ctx) {
	          var varName = ast.name;
	          if (isPresent(ast.builtin)) {
	              switch (ast.builtin) {
	                  case BuiltinVar.Super:
	                      return ctx.instance.__proto__;
	                  case BuiltinVar.This:
	                      return ctx.instance;
	                  case BuiltinVar.CatchError:
	                      varName = CATCH_ERROR_VAR$1;
	                      break;
	                  case BuiltinVar.CatchStack:
	                      varName = CATCH_STACK_VAR$1;
	                      break;
	                  default:
	                      throw new Error("Unknown builtin variable " + ast.builtin);
	              }
	          }
	          var currCtx = ctx;
	          while (currCtx != null) {
	              if (currCtx.vars.has(varName)) {
	                  return currCtx.vars.get(varName);
	              }
	              currCtx = currCtx.parent;
	          }
	          throw new Error("Not declared variable " + varName);
	      };
	      StatementInterpreter.prototype.visitWriteKeyExpr = function (expr, ctx) {
	          var receiver = expr.receiver.visitExpression(this, ctx);
	          var index = expr.index.visitExpression(this, ctx);
	          var value = expr.value.visitExpression(this, ctx);
	          receiver[index] = value;
	          return value;
	      };
	      StatementInterpreter.prototype.visitWritePropExpr = function (expr, ctx) {
	          var receiver = expr.receiver.visitExpression(this, ctx);
	          var value = expr.value.visitExpression(this, ctx);
	          receiver[expr.name] = value;
	          return value;
	      };
	      StatementInterpreter.prototype.visitInvokeMethodExpr = function (expr, ctx) {
	          var receiver = expr.receiver.visitExpression(this, ctx);
	          var args = this.visitAllExpressions(expr.args, ctx);
	          var result;
	          if (isPresent(expr.builtin)) {
	              switch (expr.builtin) {
	                  case BuiltinMethod.ConcatArray:
	                      result = receiver.concat.apply(receiver, args);
	                      break;
	                  case BuiltinMethod.SubscribeObservable:
	                      result = receiver.subscribe({ next: args[0] });
	                      break;
	                  case BuiltinMethod.Bind:
	                      result = receiver.bind.apply(receiver, args);
	                      break;
	                  default:
	                      throw new Error("Unknown builtin method " + expr.builtin);
	              }
	          }
	          else {
	              result = receiver[expr.name].apply(receiver, args);
	          }
	          return result;
	      };
	      StatementInterpreter.prototype.visitInvokeFunctionExpr = function (stmt, ctx) {
	          var args = this.visitAllExpressions(stmt.args, ctx);
	          var fnExpr = stmt.fn;
	          if (fnExpr instanceof ReadVarExpr && fnExpr.builtin === BuiltinVar.Super) {
	              ctx.instance.constructor.prototype.constructor.apply(ctx.instance, args);
	              return null;
	          }
	          else {
	              var fn = stmt.fn.visitExpression(this, ctx);
	              return fn.apply(null, args);
	          }
	      };
	      StatementInterpreter.prototype.visitReturnStmt = function (stmt, ctx) {
	          return new ReturnValue(stmt.value.visitExpression(this, ctx));
	      };
	      StatementInterpreter.prototype.visitDeclareClassStmt = function (stmt, ctx) {
	          var clazz = createDynamicClass(stmt, ctx, this);
	          ctx.vars.set(stmt.name, clazz);
	          return null;
	      };
	      StatementInterpreter.prototype.visitExpressionStmt = function (stmt, ctx) {
	          return stmt.expr.visitExpression(this, ctx);
	      };
	      StatementInterpreter.prototype.visitIfStmt = function (stmt, ctx) {
	          var condition = stmt.condition.visitExpression(this, ctx);
	          if (condition) {
	              return this.visitAllStatements(stmt.trueCase, ctx);
	          }
	          else if (isPresent(stmt.falseCase)) {
	              return this.visitAllStatements(stmt.falseCase, ctx);
	          }
	          return null;
	      };
	      StatementInterpreter.prototype.visitTryCatchStmt = function (stmt, ctx) {
	          try {
	              return this.visitAllStatements(stmt.bodyStmts, ctx);
	          }
	          catch (e) {
	              var childCtx = ctx.createChildWihtLocalVars();
	              childCtx.vars.set(CATCH_ERROR_VAR$1, e);
	              childCtx.vars.set(CATCH_STACK_VAR$1, e.stack);
	              return this.visitAllStatements(stmt.catchStmts, childCtx);
	          }
	      };
	      StatementInterpreter.prototype.visitThrowStmt = function (stmt, ctx) {
	          throw stmt.error.visitExpression(this, ctx);
	      };
	      StatementInterpreter.prototype.visitCommentStmt = function (stmt, context) { return null; };
	      StatementInterpreter.prototype.visitInstantiateExpr = function (ast, ctx) {
	          var args = this.visitAllExpressions(ast.args, ctx);
	          var clazz = ast.classExpr.visitExpression(this, ctx);
	          return new (clazz.bind.apply(clazz, [void 0].concat(args)))();
	      };
	      StatementInterpreter.prototype.visitLiteralExpr = function (ast, ctx) { return ast.value; };
	      StatementInterpreter.prototype.visitExternalExpr = function (ast, ctx) {
	          return ast.value.reference;
	      };
	      StatementInterpreter.prototype.visitConditionalExpr = function (ast, ctx) {
	          if (ast.condition.visitExpression(this, ctx)) {
	              return ast.trueCase.visitExpression(this, ctx);
	          }
	          else if (isPresent(ast.falseCase)) {
	              return ast.falseCase.visitExpression(this, ctx);
	          }
	          return null;
	      };
	      StatementInterpreter.prototype.visitNotExpr = function (ast, ctx) {
	          return !ast.condition.visitExpression(this, ctx);
	      };
	      StatementInterpreter.prototype.visitCastExpr = function (ast, ctx) {
	          return ast.value.visitExpression(this, ctx);
	      };
	      StatementInterpreter.prototype.visitFunctionExpr = function (ast, ctx) {
	          var paramNames = ast.params.map(function (param) { return param.name; });
	          return _declareFn(paramNames, ast.statements, ctx, this);
	      };
	      StatementInterpreter.prototype.visitDeclareFunctionStmt = function (stmt, ctx) {
	          var paramNames = stmt.params.map(function (param) { return param.name; });
	          ctx.vars.set(stmt.name, _declareFn(paramNames, stmt.statements, ctx, this));
	          return null;
	      };
	      StatementInterpreter.prototype.visitBinaryOperatorExpr = function (ast, ctx) {
	          var _this = this;
	          var lhs = function () { return ast.lhs.visitExpression(_this, ctx); };
	          var rhs = function () { return ast.rhs.visitExpression(_this, ctx); };
	          switch (ast.operator) {
	              case BinaryOperator.Equals:
	                  return lhs() == rhs();
	              case BinaryOperator.Identical:
	                  return lhs() === rhs();
	              case BinaryOperator.NotEquals:
	                  return lhs() != rhs();
	              case BinaryOperator.NotIdentical:
	                  return lhs() !== rhs();
	              case BinaryOperator.And:
	                  return lhs() && rhs();
	              case BinaryOperator.Or:
	                  return lhs() || rhs();
	              case BinaryOperator.Plus:
	                  return lhs() + rhs();
	              case BinaryOperator.Minus:
	                  return lhs() - rhs();
	              case BinaryOperator.Divide:
	                  return lhs() / rhs();
	              case BinaryOperator.Multiply:
	                  return lhs() * rhs();
	              case BinaryOperator.Modulo:
	                  return lhs() % rhs();
	              case BinaryOperator.Lower:
	                  return lhs() < rhs();
	              case BinaryOperator.LowerEquals:
	                  return lhs() <= rhs();
	              case BinaryOperator.Bigger:
	                  return lhs() > rhs();
	              case BinaryOperator.BiggerEquals:
	                  return lhs() >= rhs();
	              default:
	                  throw new Error("Unknown operator " + ast.operator);
	          }
	      };
	      StatementInterpreter.prototype.visitReadPropExpr = function (ast, ctx) {
	          var result;
	          var receiver = ast.receiver.visitExpression(this, ctx);
	          result = receiver[ast.name];
	          return result;
	      };
	      StatementInterpreter.prototype.visitReadKeyExpr = function (ast, ctx) {
	          var receiver = ast.receiver.visitExpression(this, ctx);
	          var prop = ast.index.visitExpression(this, ctx);
	          return receiver[prop];
	      };
	      StatementInterpreter.prototype.visitLiteralArrayExpr = function (ast, ctx) {
	          return this.visitAllExpressions(ast.entries, ctx);
	      };
	      StatementInterpreter.prototype.visitLiteralMapExpr = function (ast, ctx) {
	          var _this = this;
	          var result = {};
	          ast.entries.forEach(function (entry) { return result[entry[0]] =
	              entry[1].visitExpression(_this, ctx); });
	          return result;
	      };
	      StatementInterpreter.prototype.visitAllExpressions = function (expressions, ctx) {
	          var _this = this;
	          return expressions.map(function (expr) { return expr.visitExpression(_this, ctx); });
	      };
	      StatementInterpreter.prototype.visitAllStatements = function (statements, ctx) {
	          for (var i = 0; i < statements.length; i++) {
	              var stmt = statements[i];
	              var val = stmt.visitStatement(this, ctx);
	              if (val instanceof ReturnValue) {
	                  return val;
	              }
	          }
	          return null;
	      };
	      return StatementInterpreter;
	  }());
	  function _declareFn(varNames, statements, ctx, visitor) {
	      return function () {
	          var args = [];
	          for (var _i = 0; _i < arguments.length; _i++) {
	              args[_i - 0] = arguments[_i];
	          }
	          return _executeFunctionStatements(varNames, args, statements, ctx, visitor);
	      };
	  }
	  var CATCH_ERROR_VAR$1 = 'error';
	  var CATCH_STACK_VAR$1 = 'stack';

	  /**
	   * @license
	   * Copyright Google Inc. All Rights Reserved.
	   *
	   * Use of this source code is governed by an MIT-style license that can be
	   * found in the LICENSE file at https://angular.io/license
	   */
	  var __extends$20 = (this && this.__extends) || function (d, b) {
	      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	      function __() { this.constructor = d; }
	      d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	  };
	  var AbstractJsEmitterVisitor = (function (_super) {
	      __extends$20(AbstractJsEmitterVisitor, _super);
	      function AbstractJsEmitterVisitor() {
	          _super.call(this, false);
	      }
	      AbstractJsEmitterVisitor.prototype.visitDeclareClassStmt = function (stmt, ctx) {
	          var _this = this;
	          ctx.pushClass(stmt);
	          this._visitClassConstructor(stmt, ctx);
	          if (isPresent(stmt.parent)) {
	              ctx.print(stmt.name + ".prototype = Object.create(");
	              stmt.parent.visitExpression(this, ctx);
	              ctx.println(".prototype);");
	          }
	          stmt.getters.forEach(function (getter) { return _this._visitClassGetter(stmt, getter, ctx); });
	          stmt.methods.forEach(function (method) { return _this._visitClassMethod(stmt, method, ctx); });
	          ctx.popClass();
	          return null;
	      };
	      AbstractJsEmitterVisitor.prototype._visitClassConstructor = function (stmt, ctx) {
	          ctx.print("function " + stmt.name + "(");
	          if (isPresent(stmt.constructorMethod)) {
	              this._visitParams(stmt.constructorMethod.params, ctx);
	          }
	          ctx.println(") {");
	          ctx.incIndent();
	          if (isPresent(stmt.constructorMethod)) {
	              if (stmt.constructorMethod.body.length > 0) {
	                  ctx.println("var self = this;");
	                  this.visitAllStatements(stmt.constructorMethod.body, ctx);
	              }
	          }
	          ctx.decIndent();
	          ctx.println("}");
	      };
	      AbstractJsEmitterVisitor.prototype._visitClassGetter = function (stmt, getter, ctx) {
	          ctx.println("Object.defineProperty(" + stmt.name + ".prototype, '" + getter.name + "', { get: function() {");
	          ctx.incIndent();
	          if (getter.body.length > 0) {
	              ctx.println("var self = this;");
	              this.visitAllStatements(getter.body, ctx);
	          }
	          ctx.decIndent();
	          ctx.println("}});");
	      };
	      AbstractJsEmitterVisitor.prototype._visitClassMethod = function (stmt, method, ctx) {
	          ctx.print(stmt.name + ".prototype." + method.name + " = function(");
	          this._visitParams(method.params, ctx);
	          ctx.println(") {");
	          ctx.incIndent();
	          if (method.body.length > 0) {
	              ctx.println("var self = this;");
	              this.visitAllStatements(method.body, ctx);
	          }
	          ctx.decIndent();
	          ctx.println("};");
	      };
	      AbstractJsEmitterVisitor.prototype.visitReadVarExpr = function (ast, ctx) {
	          if (ast.builtin === BuiltinVar.This) {
	              ctx.print('self');
	          }
	          else if (ast.builtin === BuiltinVar.Super) {
	              throw new Error("'super' needs to be handled at a parent ast node, not at the variable level!");
	          }
	          else {
	              _super.prototype.visitReadVarExpr.call(this, ast, ctx);
	          }
	          return null;
	      };
	      AbstractJsEmitterVisitor.prototype.visitDeclareVarStmt = function (stmt, ctx) {
	          ctx.print("var " + stmt.name + " = ");
	          stmt.value.visitExpression(this, ctx);
	          ctx.println(";");
	          return null;
	      };
	      AbstractJsEmitterVisitor.prototype.visitCastExpr = function (ast, ctx) {
	          ast.value.visitExpression(this, ctx);
	          return null;
	      };
	      AbstractJsEmitterVisitor.prototype.visitInvokeFunctionExpr = function (expr, ctx) {
	          var fnExpr = expr.fn;
	          if (fnExpr instanceof ReadVarExpr && fnExpr.builtin === BuiltinVar.Super) {
	              ctx.currentClass.parent.visitExpression(this, ctx);
	              ctx.print(".call(this");
	              if (expr.args.length > 0) {
	                  ctx.print(", ");
	                  this.visitAllExpressions(expr.args, ctx, ',');
	              }
	              ctx.print(")");
	          }
	          else {
	              _super.prototype.visitInvokeFunctionExpr.call(this, expr, ctx);
	          }
	          return null;
	      };
	      AbstractJsEmitterVisitor.prototype.visitFunctionExpr = function (ast, ctx) {
	          ctx.print("function(");
	          this._visitParams(ast.params, ctx);
	          ctx.println(") {");
	          ctx.incIndent();
	          this.visitAllStatements(ast.statements, ctx);
	          ctx.decIndent();
	          ctx.print("}");
	          return null;
	      };
	      AbstractJsEmitterVisitor.prototype.visitDeclareFunctionStmt = function (stmt, ctx) {
	          ctx.print("function " + stmt.name + "(");
	          this._visitParams(stmt.params, ctx);
	          ctx.println(") {");
	          ctx.incIndent();
	          this.visitAllStatements(stmt.statements, ctx);
	          ctx.decIndent();
	          ctx.println("}");
	          return null;
	      };
	      AbstractJsEmitterVisitor.prototype.visitTryCatchStmt = function (stmt, ctx) {
	          ctx.println("try {");
	          ctx.incIndent();
	          this.visitAllStatements(stmt.bodyStmts, ctx);
	          ctx.decIndent();
	          ctx.println("} catch (" + CATCH_ERROR_VAR$2.name + ") {");
	          ctx.incIndent();
	          var catchStmts = [CATCH_STACK_VAR$2.set(CATCH_ERROR_VAR$2.prop('stack')).toDeclStmt(null, [
	                  StmtModifier.Final
	              ])].concat(stmt.catchStmts);
	          this.visitAllStatements(catchStmts, ctx);
	          ctx.decIndent();
	          ctx.println("}");
	          return null;
	      };
	      AbstractJsEmitterVisitor.prototype._visitParams = function (params, ctx) {
	          this.visitAllObjects(function (param) { return ctx.print(param.name); }, params, ctx, ',');
	      };
	      AbstractJsEmitterVisitor.prototype.getBuiltinMethodName = function (method) {
	          var name;
	          switch (method) {
	              case BuiltinMethod.ConcatArray:
	                  name = 'concat';
	                  break;
	              case BuiltinMethod.SubscribeObservable:
	                  name = 'subscribe';
	                  break;
	              case BuiltinMethod.Bind:
	                  name = 'bind';
	                  break;
	              default:
	                  throw new Error("Unknown builtin method: " + method);
	          }
	          return name;
	      };
	      return AbstractJsEmitterVisitor;
	  }(AbstractEmitterVisitor));

	  /**
	   * @license
	   * Copyright Google Inc. All Rights Reserved.
	   *
	   * Use of this source code is governed by an MIT-style license that can be
	   * found in the LICENSE file at https://angular.io/license
	   */
	  var __extends$19 = (this && this.__extends) || function (d, b) {
	      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	      function __() { this.constructor = d; }
	      d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	  };
	  function evalExpression(sourceUrl, expr, declarations, vars) {
	      var fnBody = declarations + "\nreturn " + expr + "\n//# sourceURL=" + sourceUrl;
	      var fnArgNames = [];
	      var fnArgValues = [];
	      for (var argName in vars) {
	          fnArgNames.push(argName);
	          fnArgValues.push(vars[argName]);
	      }
	      return new (Function.bind.apply(Function, [void 0].concat(fnArgNames.concat(fnBody))))().apply(void 0, fnArgValues);
	  }
	  function jitStatements(sourceUrl, statements, resultVar) {
	      var converter = new JitEmitterVisitor();
	      var ctx = EmitterVisitorContext.createRoot([resultVar]);
	      converter.visitAllStatements(statements, ctx);
	      return evalExpression(sourceUrl, resultVar, ctx.toSource(), converter.getArgs());
	  }
	  var JitEmitterVisitor = (function (_super) {
	      __extends$19(JitEmitterVisitor, _super);
	      function JitEmitterVisitor() {
	          _super.apply(this, arguments);
	          this._evalArgNames = [];
	          this._evalArgValues = [];
	      }
	      JitEmitterVisitor.prototype.getArgs = function () {
	          var result = {};
	          for (var i = 0; i < this._evalArgNames.length; i++) {
	              result[this._evalArgNames[i]] = this._evalArgValues[i];
	          }
	          return result;
	      };
	      JitEmitterVisitor.prototype.visitExternalExpr = function (ast, ctx) {
	          var value = ast.value.reference;
	          var id = this._evalArgValues.indexOf(value);
	          if (id === -1) {
	              id = this._evalArgValues.length;
	              this._evalArgValues.push(value);
	              var name_1 = isPresent(ast.value.name) ? sanitizeIdentifier(ast.value.name) : 'val';
	              this._evalArgNames.push(sanitizeIdentifier("jit_" + name_1 + id));
	          }
	          ctx.print(this._evalArgNames[id]);
	          return null;
	      };
	      return JitEmitterVisitor;
	  }(AbstractJsEmitterVisitor));

	  /**
	   * @license
	   * Copyright Google Inc. All Rights Reserved.
	   *
	   * Use of this source code is governed by an MIT-style license that can be
	   * found in the LICENSE file at https://angular.io/license
	   */
	  /**
	   * This file is a port of shadowCSS from webcomponents.js to TypeScript.
	   *
	   * Please make sure to keep to edits in sync with the source file.
	   *
	   * Source:
	   * https://github.com/webcomponents/webcomponentsjs/blob/4efecd7e0e/src/ShadowCSS/ShadowCSS.js
	   *
	   * The original file level comment is reproduced below
	   */
	  /*
	    This is a limited shim for ShadowDOM css styling.
	    https://dvcs.w3.org/hg/webcomponents/raw-file/tip/spec/shadow/index.html#styles

	    The intention here is to support only the styling features which can be
	    relatively simply implemented. The goal is to allow users to avoid the
	    most obvious pitfalls and do so without compromising performance significantly.
	    For ShadowDOM styling that's not covered here, a set of best practices
	    can be provided that should allow users to accomplish more complex styling.

	    The following is a list of specific ShadowDOM styling features and a brief
	    discussion of the approach used to shim.

	    Shimmed features:

	    * :host, :host-context: ShadowDOM allows styling of the shadowRoot's host
	    element using the :host rule. To shim this feature, the :host styles are
	    reformatted and prefixed with a given scope name and promoted to a
	    document level stylesheet.
	    For example, given a scope name of .foo, a rule like this:

	      :host {
	          background: red;
	        }
	      }

	    becomes:

	      .foo {
	        background: red;
	      }

	    * encapsulation: Styles defined within ShadowDOM, apply only to
	    dom inside the ShadowDOM. Polymer uses one of two techniques to implement
	    this feature.

	    By default, rules are prefixed with the host element tag name
	    as a descendant selector. This ensures styling does not leak out of the 'top'
	    of the element's ShadowDOM. For example,

	    div {
	        font-weight: bold;
	      }

	    becomes:

	    x-foo div {
	        font-weight: bold;
	      }

	    becomes:


	    Alternatively, if WebComponents.ShadowCSS.strictStyling is set to true then
	    selectors are scoped by adding an attribute selector suffix to each
	    simple selector that contains the host element tag name. Each element
	    in the element's ShadowDOM template is also given the scope attribute.
	    Thus, these rules match only elements that have the scope attribute.
	    For example, given a scope name of x-foo, a rule like this:

	      div {
	        font-weight: bold;
	      }

	    becomes:

	      div[x-foo] {
	        font-weight: bold;
	      }

	    Note that elements that are dynamically added to a scope must have the scope
	    selector added to them manually.

	    * upper/lower bound encapsulation: Styles which are defined outside a
	    shadowRoot should not cross the ShadowDOM boundary and should not apply
	    inside a shadowRoot.

	    This styling behavior is not emulated. Some possible ways to do this that
	    were rejected due to complexity and/or performance concerns include: (1) reset
	    every possible property for every possible selector for a given scope name;
	    (2) re-implement css in javascript.

	    As an alternative, users should make sure to use selectors
	    specific to the scope in which they are working.

	    * ::distributed: This behavior is not emulated. It's often not necessary
	    to style the contents of a specific insertion point and instead, descendants
	    of the host element can be styled selectively. Users can also create an
	    extra node around an insertion point and style that node's contents
	    via descendent selectors. For example, with a shadowRoot like this:

	      <style>
	        ::content(div) {
	          background: red;
	        }
	      </style>
	      <content></content>

	    could become:

	      <style>
	        / *@polyfill .content-container div * /
	        ::content(div) {
	          background: red;
	        }
	      </style>
	      <div class="content-container">
	        <content></content>
	      </div>

	    Note the use of @polyfill in the comment above a ShadowDOM specific style
	    declaration. This is a directive to the styling shim to use the selector
	    in comments in lieu of the next selector when running under polyfill.
	  */
	  var ShadowCss = (function () {
	      function ShadowCss() {
	          this.strictStyling = true;
	      }
	      /*
	      * Shim some cssText with the given selector. Returns cssText that can
	      * be included in the document via WebComponents.ShadowCSS.addCssToDocument(css).
	      *
	      * When strictStyling is true:
	      * - selector is the attribute added to all elements inside the host,
	      * - hostSelector is the attribute added to the host itself.
	      */
	      ShadowCss.prototype.shimCssText = function (cssText, selector, hostSelector) {
	          if (hostSelector === void 0) { hostSelector = ''; }
	          var sourceMappingUrl = extractSourceMappingUrl(cssText);
	          cssText = stripComments(cssText);
	          cssText = this._insertDirectives(cssText);
	          return this._scopeCssText(cssText, selector, hostSelector) + sourceMappingUrl;
	      };
	      ShadowCss.prototype._insertDirectives = function (cssText) {
	          cssText = this._insertPolyfillDirectivesInCssText(cssText);
	          return this._insertPolyfillRulesInCssText(cssText);
	      };
	      /*
	       * Process styles to convert native ShadowDOM rules that will trip
	       * up the css parser; we rely on decorating the stylesheet with inert rules.
	       *
	       * For example, we convert this rule:
	       *
	       * polyfill-next-selector { content: ':host menu-item'; }
	       * ::content menu-item {
	       *
	       * to this:
	       *
	       * scopeName menu-item {
	       *
	      **/
	      ShadowCss.prototype._insertPolyfillDirectivesInCssText = function (cssText) {
	          // Difference with webcomponents.js: does not handle comments
	          return cssText.replace(_cssContentNextSelectorRe, function () {
	              var m = [];
	              for (var _i = 0; _i < arguments.length; _i++) {
	                  m[_i - 0] = arguments[_i];
	              }
	              return m[2] + '{';
	          });
	      };
	      /*
	       * Process styles to add rules which will only apply under the polyfill
	       *
	       * For example, we convert this rule:
	       *
	       * polyfill-rule {
	       *   content: ':host menu-item';
	       * ...
	       * }
	       *
	       * to this:
	       *
	       * scopeName menu-item {...}
	       *
	      **/
	      ShadowCss.prototype._insertPolyfillRulesInCssText = function (cssText) {
	          // Difference with webcomponents.js: does not handle comments
	          return cssText.replace(_cssContentRuleRe, function () {
	              var m = [];
	              for (var _i = 0; _i < arguments.length; _i++) {
	                  m[_i - 0] = arguments[_i];
	              }
	              var rule = m[0].replace(m[1], '').replace(m[2], '');
	              return m[4] + rule;
	          });
	      };
	      /* Ensure styles are scoped. Pseudo-scoping takes a rule like:
	       *
	       *  .foo {... }
	       *
	       *  and converts this to
	       *
	       *  scopeName .foo { ... }
	      */
	      ShadowCss.prototype._scopeCssText = function (cssText, scopeSelector, hostSelector) {
	          var unscopedRules = this._extractUnscopedRulesFromCssText(cssText);
	          // replace :host and :host-context -shadowcsshost and -shadowcsshost respectively
	          cssText = this._insertPolyfillHostInCssText(cssText);
	          cssText = this._convertColonHost(cssText);
	          cssText = this._convertColonHostContext(cssText);
	          cssText = this._convertShadowDOMSelectors(cssText);
	          if (scopeSelector) {
	              cssText = this._scopeSelectors(cssText, scopeSelector, hostSelector);
	          }
	          cssText = cssText + '\n' + unscopedRules;
	          return cssText.trim();
	      };
	      /*
	       * Process styles to add rules which will only apply under the polyfill
	       * and do not process via CSSOM. (CSSOM is destructive to rules on rare
	       * occasions, e.g. -webkit-calc on Safari.)
	       * For example, we convert this rule:
	       *
	       * @polyfill-unscoped-rule {
	       *   content: 'menu-item';
	       * ... }
	       *
	       * to this:
	       *
	       * menu-item {...}
	       *
	      **/
	      ShadowCss.prototype._extractUnscopedRulesFromCssText = function (cssText) {
	          // Difference with webcomponents.js: does not handle comments
	          var r = '';
	          var m;
	          _cssContentUnscopedRuleRe.lastIndex = 0;
	          while ((m = _cssContentUnscopedRuleRe.exec(cssText)) !== null) {
	              var rule = m[0].replace(m[2], '').replace(m[1], m[4]);
	              r += rule + '\n\n';
	          }
	          return r;
	      };
	      /*
	       * convert a rule like :host(.foo) > .bar { }
	       *
	       * to
	       *
	       * .foo<scopeName> > .bar
	      */
	      ShadowCss.prototype._convertColonHost = function (cssText) {
	          return this._convertColonRule(cssText, _cssColonHostRe, this._colonHostPartReplacer);
	      };
	      /*
	       * convert a rule like :host-context(.foo) > .bar { }
	       *
	       * to
	       *
	       * .foo<scopeName> > .bar, .foo scopeName > .bar { }
	       *
	       * and
	       *
	       * :host-context(.foo:host) .bar { ... }
	       *
	       * to
	       *
	       * .foo<scopeName> .bar { ... }
	      */
	      ShadowCss.prototype._convertColonHostContext = function (cssText) {
	          return this._convertColonRule(cssText, _cssColonHostContextRe, this._colonHostContextPartReplacer);
	      };
	      ShadowCss.prototype._convertColonRule = function (cssText, regExp, partReplacer) {
	          // m[1] = :host(-context), m[2] = contents of (), m[3] rest of rule
	          return cssText.replace(regExp, function () {
	              var m = [];
	              for (var _i = 0; _i < arguments.length; _i++) {
	                  m[_i - 0] = arguments[_i];
	              }
	              if (m[2]) {
	                  var parts = m[2].split(',');
	                  var r = [];
	                  for (var i = 0; i < parts.length; i++) {
	                      var p = parts[i].trim();
	                      if (!p)
	                          break;
	                      r.push(partReplacer(_polyfillHostNoCombinator, p, m[3]));
	                  }
	                  return r.join(',');
	              }
	              else {
	                  return _polyfillHostNoCombinator + m[3];
	              }
	          });
	      };
	      ShadowCss.prototype._colonHostContextPartReplacer = function (host, part, suffix) {
	          if (part.indexOf(_polyfillHost) > -1) {
	              return this._colonHostPartReplacer(host, part, suffix);
	          }
	          else {
	              return host + part + suffix + ', ' + part + ' ' + host + suffix;
	          }
	      };
	      ShadowCss.prototype._colonHostPartReplacer = function (host, part, suffix) {
	          return host + part.replace(_polyfillHost, '') + suffix;
	      };
	      /*
	       * Convert combinators like ::shadow and pseudo-elements like ::content
	       * by replacing with space.
	      */
	      ShadowCss.prototype._convertShadowDOMSelectors = function (cssText) {
	          return _shadowDOMSelectorsRe.reduce(function (result, pattern) { return result.replace(pattern, ' '); }, cssText);
	      };
	      // change a selector like 'div' to 'name div'
	      ShadowCss.prototype._scopeSelectors = function (cssText, scopeSelector, hostSelector) {
	          var _this = this;
	          return processRules(cssText, function (rule) {
	              var selector = rule.selector;
	              var content = rule.content;
	              if (rule.selector[0] != '@') {
	                  selector =
	                      _this._scopeSelector(rule.selector, scopeSelector, hostSelector, _this.strictStyling);
	              }
	              else if (rule.selector.startsWith('@media') || rule.selector.startsWith('@supports') ||
	                  rule.selector.startsWith('@page') || rule.selector.startsWith('@document')) {
	                  content = _this._scopeSelectors(rule.content, scopeSelector, hostSelector);
	              }
	              return new CssRule(selector, content);
	          });
	      };
	      ShadowCss.prototype._scopeSelector = function (selector, scopeSelector, hostSelector, strict) {
	          var _this = this;
	          return selector.split(',')
	              .map(function (part) { return part.trim().split(_shadowDeepSelectors); })
	              .map(function (deepParts) {
	              var shallowPart = deepParts[0], otherParts = deepParts.slice(1);
	              var applyScope = function (shallowPart) {
	                  if (_this._selectorNeedsScoping(shallowPart, scopeSelector)) {
	                      return strict ?
	                          _this._applyStrictSelectorScope(shallowPart, scopeSelector, hostSelector) :
	                          _this._applySelectorScope(shallowPart, scopeSelector, hostSelector);
	                  }
	                  else {
	                      return shallowPart;
	                  }
	              };
	              return [applyScope(shallowPart)].concat(otherParts).join(' ');
	          })
	              .join(', ');
	      };
	      ShadowCss.prototype._selectorNeedsScoping = function (selector, scopeSelector) {
	          var re = this._makeScopeMatcher(scopeSelector);
	          return !re.test(selector);
	      };
	      ShadowCss.prototype._makeScopeMatcher = function (scopeSelector) {
	          var lre = /\[/g;
	          var rre = /\]/g;
	          scopeSelector = scopeSelector.replace(lre, '\\[').replace(rre, '\\]');
	          return new RegExp('^(' + scopeSelector + ')' + _selectorReSuffix, 'm');
	      };
	      ShadowCss.prototype._applySelectorScope = function (selector, scopeSelector, hostSelector) {
	          // Difference from webcomponents.js: scopeSelector could not be an array
	          return this._applySimpleSelectorScope(selector, scopeSelector, hostSelector);
	      };
	      // scope via name and [is=name]
	      ShadowCss.prototype._applySimpleSelectorScope = function (selector, scopeSelector, hostSelector) {
	          // In Android browser, the lastIndex is not reset when the regex is used in String.replace()
	          _polyfillHostRe.lastIndex = 0;
	          if (_polyfillHostRe.test(selector)) {
	              var replaceBy_1 = this.strictStyling ? "[" + hostSelector + "]" : scopeSelector;
	              return selector
	                  .replace(_polyfillHostNoCombinatorRe, function (hnc, selector) {
	                  return selector.replace(/([^:]*)(:*)(.*)/, function (_, before, colon, after) {
	                      return before + replaceBy_1 + colon + after;
	                  });
	              })
	                  .replace(_polyfillHostRe, replaceBy_1 + ' ');
	          }
	          return scopeSelector + ' ' + selector;
	      };
	      // return a selector with [name] suffix on each simple selector
	      // e.g. .foo.bar > .zot becomes .foo[name].bar[name] > .zot[name]  /** @internal */
	      ShadowCss.prototype._applyStrictSelectorScope = function (selector, scopeSelector, hostSelector) {
	          var _this = this;
	          var isRe = /\[is=([^\]]*)\]/g;
	          scopeSelector = scopeSelector.replace(isRe, function (_) {
	              var parts = [];
	              for (var _i = 1; _i < arguments.length; _i++) {
	                  parts[_i - 1] = arguments[_i];
	              }
	              return parts[0];
	          });
	          var attrName = '[' + scopeSelector + ']';
	          var _scopeSelectorPart = function (p) {
	              var scopedP = p.trim();
	              if (!scopedP) {
	                  return '';
	              }
	              if (p.indexOf(_polyfillHostNoCombinator) > -1) {
	                  scopedP = _this._applySimpleSelectorScope(p, scopeSelector, hostSelector);
	              }
	              else {
	                  // remove :host since it should be unnecessary
	                  var t = p.replace(_polyfillHostRe, '');
	                  if (t.length > 0) {
	                      var matches = t.match(/([^:]*)(:*)(.*)/);
	                      if (matches) {
	                          scopedP = matches[1] + attrName + matches[2] + matches[3];
	                      }
	                  }
	              }
	              return scopedP;
	          };
	          var safeContent = new SafeSelector(selector);
	          selector = safeContent.content();
	          var scopedSelector = '';
	          var startIndex = 0;
	          var res;
	          var sep = /( |>|\+|~(?!=))\s*/g;
	          var scopeAfter = selector.indexOf(_polyfillHostNoCombinator);
	          while ((res = sep.exec(selector)) !== null) {
	              var separator = res[1];
	              var part = selector.slice(startIndex, res.index).trim();
	              // if a selector appears before :host-context it should not be shimmed as it
	              // matches on ancestor elements and not on elements in the host's shadow
	              var scopedPart = startIndex >= scopeAfter ? _scopeSelectorPart(part) : part;
	              scopedSelector += scopedPart + " " + separator + " ";
	              startIndex = sep.lastIndex;
	          }
	          scopedSelector += _scopeSelectorPart(selector.substring(startIndex));
	          // replace the placeholders with their original values
	          return safeContent.restore(scopedSelector);
	      };
	      ShadowCss.prototype._insertPolyfillHostInCssText = function (selector) {
	          return selector.replace(_colonHostContextRe, _polyfillHostContext)
	              .replace(_colonHostRe, _polyfillHost);
	      };
	      return ShadowCss;
	  }());
	  var SafeSelector = (function () {
	      function SafeSelector(selector) {
	          var _this = this;
	          this.placeholders = [];
	          this.index = 0;
	          // Replaces attribute selectors with placeholders.
	          // The WS in [attr="va lue"] would otherwise be interpreted as a selector separator.
	          selector = selector.replace(/(\[[^\]]*\])/g, function (_, keep) {
	              var replaceBy = "__ph-" + _this.index + "__";
	              _this.placeholders.push(keep);
	              _this.index++;
	              return replaceBy;
	          });
	          // Replaces the expression in `:nth-child(2n + 1)` with a placeholder.
	          // WS and "+" would otherwise be interpreted as selector separators.
	          this._content = selector.replace(/(:nth-[-\w]+)(\([^)]+\))/g, function (_, pseudo, exp) {
	              var replaceBy = "__ph-" + _this.index + "__";
	              _this.placeholders.push(exp);
	              _this.index++;
	              return pseudo + replaceBy;
	          });
	      }
	      ;
	      SafeSelector.prototype.restore = function (content) {
	          var _this = this;
	          return content.replace(/__ph-(\d+)__/g, function (ph, index) { return _this.placeholders[+index]; });
	      };
	      SafeSelector.prototype.content = function () { return this._content; };
	      return SafeSelector;
	  }());
	  var _cssContentNextSelectorRe = /polyfill-next-selector[^}]*content:[\s]*?(['"])(.*?)\1[;\s]*}([^{]*?){/gim;
	  var _cssContentRuleRe = /(polyfill-rule)[^}]*(content:[\s]*(['"])(.*?)\3)[;\s]*[^}]*}/gim;
	  var _cssContentUnscopedRuleRe = /(polyfill-unscoped-rule)[^}]*(content:[\s]*(['"])(.*?)\3)[;\s]*[^}]*}/gim;
	  var _polyfillHost = '-shadowcsshost';
	  // note: :host-context pre-processed to -shadowcsshostcontext.
	  var _polyfillHostContext = '-shadowcsscontext';
	  var _parenSuffix = ')(?:\\((' +
	      '(?:\\([^)(]*\\)|[^)(]*)+?' +
	      ')\\))?([^,{]*)';
	  var _cssColonHostRe = new RegExp('(' + _polyfillHost + _parenSuffix, 'gim');
	  var _cssColonHostContextRe = new RegExp('(' + _polyfillHostContext + _parenSuffix, 'gim');
	  var _polyfillHostNoCombinator = _polyfillHost + '-no-combinator';
	  var _polyfillHostNoCombinatorRe = /-shadowcsshost-no-combinator([^\s]*)/;
	  var _shadowDOMSelectorsRe = [
	      /::shadow/g,
	      /::content/g,
	      // Deprecated selectors
	      /\/shadow-deep\//g,
	      /\/shadow\//g,
	  ];
	  var _shadowDeepSelectors = /(?:>>>)|(?:\/deep\/)/g;
	  var _selectorReSuffix = '([>\\s~+\[.,{:][\\s\\S]*)?$';
	  var _polyfillHostRe = /-shadowcsshost/gim;
	  var _colonHostRe = /:host/gim;
	  var _colonHostContextRe = /:host-context/gim;
	  var _commentRe = /\/\*\s*[\s\S]*?\*\//g;
	  function stripComments(input) {
	      return input.replace(_commentRe, '');
	  }
	  // all comments except inline source mapping
	  var _sourceMappingUrlRe = /\/\*\s*#\s*sourceMappingURL=[\s\S]+?\*\//;
	  function extractSourceMappingUrl(input) {
	      var matcher = input.match(_sourceMappingUrlRe);
	      return matcher ? matcher[0] : '';
	  }
	  var _ruleRe = /(\s*)([^;\{\}]+?)(\s*)((?:{%BLOCK%}?\s*;?)|(?:\s*;))/g;
	  var _curlyRe = /([{}])/g;
	  var OPEN_CURLY = '{';
	  var CLOSE_CURLY = '}';
	  var BLOCK_PLACEHOLDER = '%BLOCK%';
	  var CssRule = (function () {
	      function CssRule(selector, content) {
	          this.selector = selector;
	          this.content = content;
	      }
	      return CssRule;
	  }());
	  function processRules(input, ruleCallback) {
	      var inputWithEscapedBlocks = escapeBlocks(input);
	      var nextBlockIndex = 0;
	      return inputWithEscapedBlocks.escapedString.replace(_ruleRe, function () {
	          var m = [];
	          for (var _i = 0; _i < arguments.length; _i++) {
	              m[_i - 0] = arguments[_i];
	          }
	          var selector = m[2];
	          var content = '';
	          var suffix = m[4];
	          var contentPrefix = '';
	          if (suffix && suffix.startsWith('{' + BLOCK_PLACEHOLDER)) {
	              content = inputWithEscapedBlocks.blocks[nextBlockIndex++];
	              suffix = suffix.substring(BLOCK_PLACEHOLDER.length + 1);
	              contentPrefix = '{';
	          }
	          var rule = ruleCallback(new CssRule(selector, content));
	          return "" + m[1] + rule.selector + m[3] + contentPrefix + rule.content + suffix;
	      });
	  }
	  var StringWithEscapedBlocks = (function () {
	      function StringWithEscapedBlocks(escapedString, blocks) {
	          this.escapedString = escapedString;
	          this.blocks = blocks;
	      }
	      return StringWithEscapedBlocks;
	  }());
	  function escapeBlocks(input) {
	      var inputParts = input.split(_curlyRe);
	      var resultParts = [];
	      var escapedBlocks = [];
	      var bracketCount = 0;
	      var currentBlockParts = [];
	      for (var partIndex = 0; partIndex < inputParts.length; partIndex++) {
	          var part = inputParts[partIndex];
	          if (part == CLOSE_CURLY) {
	              bracketCount--;
	          }
	          if (bracketCount > 0) {
	              currentBlockParts.push(part);
	          }
	          else {
	              if (currentBlockParts.length > 0) {
	                  escapedBlocks.push(currentBlockParts.join(''));
	                  resultParts.push(BLOCK_PLACEHOLDER);
	                  currentBlockParts = [];
	              }
	              resultParts.push(part);
	          }
	          if (part == OPEN_CURLY) {
	              bracketCount++;
	          }
	      }
	      if (currentBlockParts.length > 0) {
	          escapedBlocks.push(currentBlockParts.join(''));
	          resultParts.push(BLOCK_PLACEHOLDER);
	      }
	      return new StringWithEscapedBlocks(resultParts.join(''), escapedBlocks);
	  }

	  var COMPONENT_VARIABLE = '%COMP%';
	  var HOST_ATTR = "_nghost-" + COMPONENT_VARIABLE;
	  var CONTENT_ATTR = "_ngcontent-" + COMPONENT_VARIABLE;
	  var StylesCompileDependency = (function () {
	      function StylesCompileDependency(moduleUrl, isShimmed, valuePlaceholder) {
	          this.moduleUrl = moduleUrl;
	          this.isShimmed = isShimmed;
	          this.valuePlaceholder = valuePlaceholder;
	      }
	      return StylesCompileDependency;
	  }());
	  var StylesCompileResult = (function () {
	      function StylesCompileResult(componentStylesheet, externalStylesheets) {
	          this.componentStylesheet = componentStylesheet;
	          this.externalStylesheets = externalStylesheets;
	      }
	      return StylesCompileResult;
	  }());
	  var CompiledStylesheet = (function () {
	      function CompiledStylesheet(statements, stylesVar, dependencies, isShimmed, meta) {
	          this.statements = statements;
	          this.stylesVar = stylesVar;
	          this.dependencies = dependencies;
	          this.isShimmed = isShimmed;
	          this.meta = meta;
	      }
	      return CompiledStylesheet;
	  }());
	  var StyleCompiler = (function () {
	      function StyleCompiler(_urlResolver) {
	          this._urlResolver = _urlResolver;
	          this._shadowCss = new ShadowCss();
	      }
	      StyleCompiler.prototype.compileComponent = function (comp) {
	          var _this = this;
	          var externalStylesheets = [];
	          var componentStylesheet = this._compileStyles(comp, new CompileStylesheetMetadata({
	              styles: comp.template.styles,
	              styleUrls: comp.template.styleUrls,
	              moduleUrl: comp.type.moduleUrl
	          }), true);
	          comp.template.externalStylesheets.forEach(function (stylesheetMeta) {
	              var compiledStylesheet = _this._compileStyles(comp, stylesheetMeta, false);
	              externalStylesheets.push(compiledStylesheet);
	          });
	          return new StylesCompileResult(componentStylesheet, externalStylesheets);
	      };
	      StyleCompiler.prototype._compileStyles = function (comp, stylesheet, isComponentStylesheet) {
	          var _this = this;
	          var shim = comp.template.encapsulation === _angular_core.ViewEncapsulation.Emulated;
	          var styleExpressions = stylesheet.styles.map(function (plainStyle) { return literal(_this._shimIfNeeded(plainStyle, shim)); });
	          var dependencies = [];
	          for (var i = 0; i < stylesheet.styleUrls.length; i++) {
	              var identifier = new CompileIdentifierMetadata({ name: getStylesVarName(null) });
	              dependencies.push(new StylesCompileDependency(stylesheet.styleUrls[i], shim, identifier));
	              styleExpressions.push(new ExternalExpr(identifier));
	          }
	          // styles variable contains plain strings and arrays of other styles arrays (recursive),
	          // so we set its type to dynamic.
	          var stylesVar = getStylesVarName(isComponentStylesheet ? comp : null);
	          var stmt = variable(stylesVar)
	              .set(literalArr(styleExpressions, new ArrayType(DYNAMIC_TYPE, [TypeModifier.Const])))
	              .toDeclStmt(null, [StmtModifier.Final]);
	          return new CompiledStylesheet([stmt], stylesVar, dependencies, shim, stylesheet);
	      };
	      StyleCompiler.prototype._shimIfNeeded = function (style, shim) {
	          return shim ? this._shadowCss.shimCssText(style, CONTENT_ATTR, HOST_ATTR) : style;
	      };
	      StyleCompiler.decorators = [
	          { type: _angular_core.Injectable },
	      ];
	      /** @nocollapse */
	      StyleCompiler.ctorParameters = [
	          { type: UrlResolver, },
	      ];
	      return StyleCompiler;
	  }());
	  function getStylesVarName(component) {
	      var result = "styles";
	      if (component) {
	          result += "_" + component.type.name;
	      }
	      return result;
	  }

	  /**
	   * An internal module of the Angular compiler that begins with component types,
	   * extracts templates, and eventually produces a compiled version of the component
	   * ready for linking into an application.
	   *
	   * @security  When compiling templates at runtime, you must ensure that the entire template comes
	   * from a trusted source. Attacker-controlled data introduced by a template could expose your
	   * application to XSS risks.  For more detail, see the [Security Guide](http://g.co/ng/security).
	   */
	  var RuntimeCompiler = (function () {
	      function RuntimeCompiler(_injector, _metadataResolver, _templateParser, _styleCompiler, _viewCompiler, _ngModuleCompiler, _directiveWrapperCompiler, _compilerConfig, _animationParser) {
	          this._injector = _injector;
	          this._metadataResolver = _metadataResolver;
	          this._templateParser = _templateParser;
	          this._styleCompiler = _styleCompiler;
	          this._viewCompiler = _viewCompiler;
	          this._ngModuleCompiler = _ngModuleCompiler;
	          this._directiveWrapperCompiler = _directiveWrapperCompiler;
	          this._compilerConfig = _compilerConfig;
	          this._animationParser = _animationParser;
	          this._compiledTemplateCache = new Map();
	          this._compiledHostTemplateCache = new Map();
	          this._compiledDirectiveWrapperCache = new Map();
	          this._compiledNgModuleCache = new Map();
	          this._animationCompiler = new AnimationCompiler();
	      }
	      Object.defineProperty(RuntimeCompiler.prototype, "injector", {
	          get: function () { return this._injector; },
	          enumerable: true,
	          configurable: true
	      });
	      RuntimeCompiler.prototype.compileModuleSync = function (moduleType) {
	          return this._compileModuleAndComponents(moduleType, true).syncResult;
	      };
	      RuntimeCompiler.prototype.compileModuleAsync = function (moduleType) {
	          return this._compileModuleAndComponents(moduleType, false).asyncResult;
	      };
	      RuntimeCompiler.prototype.compileModuleAndAllComponentsSync = function (moduleType) {
	          return this._compileModuleAndAllComponents(moduleType, true).syncResult;
	      };
	      RuntimeCompiler.prototype.compileModuleAndAllComponentsAsync = function (moduleType) {
	          return this._compileModuleAndAllComponents(moduleType, false).asyncResult;
	      };
	      RuntimeCompiler.prototype._compileModuleAndComponents = function (moduleType, isSync) {
	          var _this = this;
	          var loadingPromise = this._loadModules(moduleType, isSync);
	          var createResult = function () {
	              _this._compileComponents(moduleType, null);
	              return _this._compileModule(moduleType);
	          };
	          if (isSync) {
	              return new SyncAsyncResult(createResult());
	          }
	          else {
	              return new SyncAsyncResult(null, loadingPromise.then(createResult));
	          }
	      };
	      RuntimeCompiler.prototype._compileModuleAndAllComponents = function (moduleType, isSync) {
	          var _this = this;
	          var loadingPromise = this._loadModules(moduleType, isSync);
	          var createResult = function () {
	              var componentFactories = [];
	              _this._compileComponents(moduleType, componentFactories);
	              return new _angular_core.ModuleWithComponentFactories(_this._compileModule(moduleType), componentFactories);
	          };
	          if (isSync) {
	              return new SyncAsyncResult(createResult());
	          }
	          else {
	              return new SyncAsyncResult(null, loadingPromise.then(createResult));
	          }
	      };
	      RuntimeCompiler.prototype._loadModules = function (mainModule, isSync) {
	          var _this = this;
	          var loadingPromises = [];
	          var _a = this._metadataResolver.loadNgModuleMetadata(mainModule, isSync), ngModule = _a.ngModule, loading = _a.loading;
	          loadingPromises.push(loading);
	          // Note: the loadingPromise for a module only includes the loading of the exported directives
	          // of imported modules.
	          // However, for runtime compilation, we want to transitively compile all modules,
	          // so we also need to call loadNgModuleMetadata for all nested modules.
	          ngModule.transitiveModule.modules.forEach(function (localModuleMeta) {
	              loadingPromises.push(_this._metadataResolver.loadNgModuleMetadata(localModuleMeta.type.reference, isSync)
	                  .loading);
	          });
	          return Promise.all(loadingPromises);
	      };
	      RuntimeCompiler.prototype._compileModule = function (moduleType) {
	          var _this = this;
	          var ngModuleFactory = this._compiledNgModuleCache.get(moduleType);
	          if (!ngModuleFactory) {
	              var moduleMeta_1 = this._metadataResolver.getNgModuleMetadata(moduleType);
	              // Always provide a bound Compiler
	              var extraProviders = [this._metadataResolver.getProviderMetadata(new ProviderMeta(_angular_core.Compiler, { useFactory: function () { return new ModuleBoundCompiler(_this, moduleMeta_1.type.reference); } }))];
	              var compileResult = this._ngModuleCompiler.compile(moduleMeta_1, extraProviders);
	              compileResult.dependencies.forEach(function (dep) {
	                  dep.placeholder.reference =
	                      _this._assertComponentKnown(dep.comp.reference, true).proxyComponentFactory;
	                  dep.placeholder.name = "compFactory_" + dep.comp.name;
	              });
	              if (!this._compilerConfig.useJit) {
	                  ngModuleFactory =
	                      interpretStatements(compileResult.statements, compileResult.ngModuleFactoryVar);
	              }
	              else {
	                  ngModuleFactory = jitStatements("/" + moduleMeta_1.type.name + "/module.ngfactory.js", compileResult.statements, compileResult.ngModuleFactoryVar);
	              }
	              this._compiledNgModuleCache.set(moduleMeta_1.type.reference, ngModuleFactory);
	          }
	          return ngModuleFactory;
	      };
	      /**
	       * @internal
	       */
	      RuntimeCompiler.prototype._compileComponents = function (mainModule, allComponentFactories) {
	          var _this = this;
	          var ngModule = this._metadataResolver.getNgModuleMetadata(mainModule);
	          var moduleByDirective = new Map();
	          var templates = new Set();
	          ngModule.transitiveModule.modules.forEach(function (localModuleSummary) {
	              var localModuleMeta = _this._metadataResolver.getNgModuleMetadata(localModuleSummary.type.reference);
	              localModuleMeta.declaredDirectives.forEach(function (dirIdentifier) {
	                  moduleByDirective.set(dirIdentifier.reference, localModuleMeta);
	                  var dirMeta = _this._metadataResolver.getDirectiveMetadata(dirIdentifier.reference);
	                  _this._compileDirectiveWrapper(dirMeta, localModuleMeta);
	                  if (dirMeta.isComponent) {
	                      templates.add(_this._createCompiledTemplate(dirMeta, localModuleMeta));
	                      if (allComponentFactories) {
	                          var template = _this._createCompiledHostTemplate(dirMeta.type.reference, localModuleMeta);
	                          templates.add(template);
	                          allComponentFactories.push(template.proxyComponentFactory);
	                      }
	                  }
	              });
	          });
	          ngModule.transitiveModule.modules.forEach(function (localModuleSummary) {
	              var localModuleMeta = _this._metadataResolver.getNgModuleMetadata(localModuleSummary.type.reference);
	              localModuleMeta.declaredDirectives.forEach(function (dirIdentifier) {
	                  var dirMeta = _this._metadataResolver.getDirectiveMetadata(dirIdentifier.reference);
	                  if (dirMeta.isComponent) {
	                      dirMeta.entryComponents.forEach(function (entryComponentType) {
	                          var moduleMeta = moduleByDirective.get(entryComponentType.reference);
	                          templates.add(_this._createCompiledHostTemplate(entryComponentType.reference, moduleMeta));
	                      });
	                  }
	              });
	              localModuleMeta.entryComponents.forEach(function (entryComponentType) {
	                  var moduleMeta = moduleByDirective.get(entryComponentType.reference);
	                  templates.add(_this._createCompiledHostTemplate(entryComponentType.reference, moduleMeta));
	              });
	          });
	          templates.forEach(function (template) { return _this._compileTemplate(template); });
	      };
	      RuntimeCompiler.prototype.clearCacheFor = function (type) {
	          this._compiledNgModuleCache.delete(type);
	          this._metadataResolver.clearCacheFor(type);
	          this._compiledHostTemplateCache.delete(type);
	          var compiledTemplate = this._compiledTemplateCache.get(type);
	          if (compiledTemplate) {
	              this._compiledTemplateCache.delete(type);
	          }
	      };
	      RuntimeCompiler.prototype.clearCache = function () {
	          this._metadataResolver.clearCache();
	          this._compiledTemplateCache.clear();
	          this._compiledHostTemplateCache.clear();
	          this._compiledNgModuleCache.clear();
	      };
	      RuntimeCompiler.prototype._createCompiledHostTemplate = function (compType, ngModule) {
	          if (!ngModule) {
	              throw new Error("Component " + stringify(compType) + " is not part of any NgModule or the module has not been imported into your module.");
	          }
	          var compiledTemplate = this._compiledHostTemplateCache.get(compType);
	          if (!compiledTemplate) {
	              var compMeta = this._metadataResolver.getDirectiveMetadata(compType);
	              assertComponent(compMeta);
	              var hostMeta = createHostComponentMeta(compMeta);
	              compiledTemplate = new CompiledTemplate(true, compMeta.selector, compMeta.type, hostMeta, ngModule, [compMeta.type]);
	              this._compiledHostTemplateCache.set(compType, compiledTemplate);
	          }
	          return compiledTemplate;
	      };
	      RuntimeCompiler.prototype._createCompiledTemplate = function (compMeta, ngModule) {
	          var compiledTemplate = this._compiledTemplateCache.get(compMeta.type.reference);
	          if (!compiledTemplate) {
	              assertComponent(compMeta);
	              compiledTemplate = new CompiledTemplate(false, compMeta.selector, compMeta.type, compMeta, ngModule, ngModule.transitiveModule.directives);
	              this._compiledTemplateCache.set(compMeta.type.reference, compiledTemplate);
	          }
	          return compiledTemplate;
	      };
	      RuntimeCompiler.prototype._assertComponentKnown = function (compType, isHost) {
	          var compiledTemplate = isHost ? this._compiledHostTemplateCache.get(compType) :
	              this._compiledTemplateCache.get(compType);
	          if (!compiledTemplate) {
	              throw new Error("Illegal state: Compiled view for component " + stringify(compType) + " (host: " + isHost + ") does not exist!");
	          }
	          return compiledTemplate;
	      };
	      RuntimeCompiler.prototype._assertDirectiveWrapper = function (dirType) {
	          var dirWrapper = this._compiledDirectiveWrapperCache.get(dirType);
	          if (!dirWrapper) {
	              throw new Error("Illegal state: Directive wrapper for " + stringify(dirType) + " has not been compiled!");
	          }
	          return dirWrapper;
	      };
	      RuntimeCompiler.prototype._compileDirectiveWrapper = function (dirMeta, moduleMeta) {
	          var compileResult = this._directiveWrapperCompiler.compile(dirMeta);
	          var statements = compileResult.statements;
	          var directiveWrapperClass;
	          if (!this._compilerConfig.useJit) {
	              directiveWrapperClass = interpretStatements(statements, compileResult.dirWrapperClassVar);
	          }
	          else {
	              directiveWrapperClass = jitStatements("/" + moduleMeta.type.name + "/" + dirMeta.type.name + "/wrapper.ngfactory.js", statements, compileResult.dirWrapperClassVar);
	          }
	          this._compiledDirectiveWrapperCache.set(dirMeta.type.reference, directiveWrapperClass);
	      };
	      RuntimeCompiler.prototype._compileTemplate = function (template) {
	          var _this = this;
	          if (template.isCompiled) {
	              return;
	          }
	          var compMeta = template.compMeta;
	          var externalStylesheetsByModuleUrl = new Map();
	          var stylesCompileResult = this._styleCompiler.compileComponent(compMeta);
	          stylesCompileResult.externalStylesheets.forEach(function (r) { externalStylesheetsByModuleUrl.set(r.meta.moduleUrl, r); });
	          this._resolveStylesCompileResult(stylesCompileResult.componentStylesheet, externalStylesheetsByModuleUrl);
	          var parsedAnimations = this._animationParser.parseComponent(compMeta);
	          var directives = template.directives.map(function (dir) { return _this._metadataResolver.getDirectiveSummary(dir.reference); });
	          var pipes = template.ngModule.transitiveModule.pipes.map(function (pipe) { return _this._metadataResolver.getPipeSummary(pipe.reference); });
	          var parsedTemplate = this._templateParser.parse(compMeta, compMeta.template.template, directives, pipes, template.ngModule.schemas, compMeta.type.name);
	          var compiledAnimations = this._animationCompiler.compile(compMeta.type.name, parsedAnimations);
	          var compileResult = this._viewCompiler.compileComponent(compMeta, parsedTemplate, variable(stylesCompileResult.componentStylesheet.stylesVar), pipes, compiledAnimations);
	          compileResult.dependencies.forEach(function (dep) {
	              var depTemplate;
	              if (dep instanceof ViewClassDependency) {
	                  var vfd = dep;
	                  depTemplate = _this._assertComponentKnown(vfd.comp.reference, false);
	                  vfd.placeholder.reference = depTemplate.proxyViewClass;
	                  vfd.placeholder.name = "View_" + vfd.comp.name;
	              }
	              else if (dep instanceof ComponentFactoryDependency) {
	                  var cfd = dep;
	                  depTemplate = _this._assertComponentKnown(cfd.comp.reference, true);
	                  cfd.placeholder.reference = depTemplate.proxyComponentFactory;
	                  cfd.placeholder.name = "compFactory_" + cfd.comp.name;
	              }
	              else if (dep instanceof DirectiveWrapperDependency) {
	                  var dwd = dep;
	                  dwd.placeholder.reference = _this._assertDirectiveWrapper(dwd.dir.reference);
	              }
	          });
	          var statements = (_a = stylesCompileResult.componentStylesheet.statements).concat.apply(_a, compiledAnimations.map(function (ca) { return ca.statements; }))
	              .concat(compileResult.statements);
	          var viewClass;
	          if (!this._compilerConfig.useJit) {
	              viewClass = interpretStatements(statements, compileResult.viewClassVar);
	          }
	          else {
	              viewClass = jitStatements("/" + template.ngModule.type.name + "/" + template.compType.name + "/" + (template.isHost ? 'host' : 'component') + ".ngfactory.js", statements, compileResult.viewClassVar);
	          }
	          template.compiled(viewClass);
	          var _a;
	      };
	      RuntimeCompiler.prototype._resolveStylesCompileResult = function (result, externalStylesheetsByModuleUrl) {
	          var _this = this;
	          result.dependencies.forEach(function (dep, i) {
	              var nestedCompileResult = externalStylesheetsByModuleUrl.get(dep.moduleUrl);
	              var nestedStylesArr = _this._resolveAndEvalStylesCompileResult(nestedCompileResult, externalStylesheetsByModuleUrl);
	              dep.valuePlaceholder.reference = nestedStylesArr;
	              dep.valuePlaceholder.name = "importedStyles" + i;
	          });
	      };
	      RuntimeCompiler.prototype._resolveAndEvalStylesCompileResult = function (result, externalStylesheetsByModuleUrl) {
	          this._resolveStylesCompileResult(result, externalStylesheetsByModuleUrl);
	          if (!this._compilerConfig.useJit) {
	              return interpretStatements(result.statements, result.stylesVar);
	          }
	          else {
	              return jitStatements("/" + result.meta.moduleUrl + ".css.js", result.statements, result.stylesVar);
	          }
	      };
	      RuntimeCompiler.decorators = [
	          { type: _angular_core.Injectable },
	      ];
	      /** @nocollapse */
	      RuntimeCompiler.ctorParameters = [
	          { type: _angular_core.Injector, },
	          { type: CompileMetadataResolver, },
	          { type: TemplateParser, },
	          { type: StyleCompiler, },
	          { type: ViewCompiler, },
	          { type: NgModuleCompiler, },
	          { type: DirectiveWrapperCompiler, },
	          { type: CompilerConfig, },
	          { type: AnimationParser, },
	      ];
	      return RuntimeCompiler;
	  }());
	  var CompiledTemplate = (function () {
	      function CompiledTemplate(isHost, selector, compType, compMeta, ngModule, directives) {
	          this.isHost = isHost;
	          this.compType = compType;
	          this.compMeta = compMeta;
	          this.ngModule = ngModule;
	          this.directives = directives;
	          this._viewClass = null;
	          this.isCompiled = false;
	          var self = this;
	          this.proxyViewClass = function () {
	              if (!self._viewClass) {
	                  throw new Error("Illegal state: CompiledTemplate for " + stringify(self.compType) + " is not compiled yet!");
	              }
	              return self._viewClass.apply(this, arguments);
	          };
	          this.proxyComponentFactory = isHost ?
	              new _angular_core.ComponentFactory(selector, this.proxyViewClass, compType.reference) :
	              null;
	      }
	      CompiledTemplate.prototype.compiled = function (viewClass) {
	          this._viewClass = viewClass;
	          this.proxyViewClass.prototype = viewClass.prototype;
	          this.isCompiled = true;
	      };
	      return CompiledTemplate;
	  }());
	  function assertComponent(meta) {
	      if (!meta.isComponent) {
	          throw new Error("Could not compile '" + meta.type.name + "' because it is not a component.");
	      }
	  }
	  /**
	   * Implements `Compiler` by delegating to the RuntimeCompiler using a known module.
	   */
	  var ModuleBoundCompiler = (function () {
	      function ModuleBoundCompiler(_delegate, _ngModule) {
	          this._delegate = _delegate;
	          this._ngModule = _ngModule;
	      }
	      Object.defineProperty(ModuleBoundCompiler.prototype, "_injector", {
	          get: function () { return this._delegate.injector; },
	          enumerable: true,
	          configurable: true
	      });
	      ModuleBoundCompiler.prototype.compileModuleSync = function (moduleType) {
	          return this._delegate.compileModuleSync(moduleType);
	      };
	      ModuleBoundCompiler.prototype.compileModuleAsync = function (moduleType) {
	          return this._delegate.compileModuleAsync(moduleType);
	      };
	      ModuleBoundCompiler.prototype.compileModuleAndAllComponentsSync = function (moduleType) {
	          return this._delegate.compileModuleAndAllComponentsSync(moduleType);
	      };
	      ModuleBoundCompiler.prototype.compileModuleAndAllComponentsAsync = function (moduleType) {
	          return this._delegate.compileModuleAndAllComponentsAsync(moduleType);
	      };
	      /**
	       * Clears all caches
	       */
	      ModuleBoundCompiler.prototype.clearCache = function () { this._delegate.clearCache(); };
	      /**
	       * Clears the cache for the given component/ngModule.
	       */
	      ModuleBoundCompiler.prototype.clearCacheFor = function (type) { this._delegate.clearCacheFor(type); };
	      return ModuleBoundCompiler;
	  }());

	  // =================================================================================================
	  // =================================================================================================
	  // =========== S T O P   -  S T O P   -  S T O P   -  S T O P   -  S T O P   -  S T O P  ===========
	  // =================================================================================================
	  // =================================================================================================
	  //
	  //        DO NOT EDIT THIS LIST OF SECURITY SENSITIVE PROPERTIES WITHOUT A SECURITY REVIEW!
	  //                               Reach out to mprobst for details.
	  //
	  // =================================================================================================
	  /** Map from tagName|propertyName SecurityContext. Properties applying to all tags use '*'. */
	  var SECURITY_SCHEMA = {};
	  function registerContext(ctx, specs) {
	      for (var _i = 0, specs_1 = specs; _i < specs_1.length; _i++) {
	          var spec = specs_1[_i];
	          SECURITY_SCHEMA[spec.toLowerCase()] = ctx;
	      }
	  }
	  // Case is insignificant below, all element and attribute names are lower-cased for lookup.
	  registerContext(_angular_core.SecurityContext.HTML, [
	      'iframe|srcdoc',
	      '*|innerHTML',
	      '*|outerHTML',
	  ]);
	  registerContext(_angular_core.SecurityContext.STYLE, ['*|style']);
	  // NB: no SCRIPT contexts here, they are never allowed due to the parser stripping them.
	  registerContext(_angular_core.SecurityContext.URL, [
	      '*|formAction', 'area|href', 'area|ping', 'audio|src', 'a|href',
	      'a|ping', 'blockquote|cite', 'body|background', 'del|cite', 'form|action',
	      'img|src', 'img|srcset', 'input|src', 'ins|cite', 'q|cite',
	      'source|src', 'source|srcset', 'track|src', 'video|poster', 'video|src',
	  ]);
	  registerContext(_angular_core.SecurityContext.RESOURCE_URL, [
	      'applet|code',
	      'applet|codebase',
	      'base|href',
	      'embed|src',
	      'frame|src',
	      'head|profile',
	      'html|manifest',
	      'iframe|src',
	      'link|href',
	      'media|src',
	      'object|codebase',
	      'object|data',
	      'script|src',
	  ]);

	  /**
	   * @license
	   * Copyright Google Inc. All Rights Reserved.
	   *
	   * Use of this source code is governed by an MIT-style license that can be
	   * found in the LICENSE file at https://angular.io/license
	   */
	  var __extends$21 = (this && this.__extends) || function (d, b) {
	      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	      function __() { this.constructor = d; }
	      d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	  };
	  var BOOLEAN = 'boolean';
	  var NUMBER = 'number';
	  var STRING = 'string';
	  var OBJECT = 'object';
	  /**
	   * This array represents the DOM schema. It encodes inheritance, properties, and events.
	   *
	   * ## Overview
	   *
	   * Each line represents one kind of element. The `element_inheritance` and properties are joined
	   * using `element_inheritance|properties` syntax.
	   *
	   * ## Element Inheritance
	   *
	   * The `element_inheritance` can be further subdivided as `element1,element2,...^parentElement`.
	   * Here the individual elements are separated by `,` (commas). Every element in the list
	   * has identical properties.
	   *
	   * An `element` may inherit additional properties from `parentElement` If no `^parentElement` is
	   * specified then `""` (blank) element is assumed.
	   *
	   * NOTE: The blank element inherits from root `[Element]` element, the super element of all
	   * elements.
	   *
	   * NOTE an element prefix such as `:svg:` has no special meaning to the schema.
	   *
	   * ## Properties
	   *
	   * Each element has a set of properties separated by `,` (commas). Each property can be prefixed
	   * by a special character designating its type:
	   *
	   * - (no prefix): property is a string.
	   * - `*`: property represents an event.
	   * - `!`: property is a boolean.
	   * - `#`: property is a number.
	   * - `%`: property is an object.
	   *
	   * ## Query
	   *
	   * The class creates an internal squas representation which allows to easily answer the query of
	   * if a given property exist on a given element.
	   *
	   * NOTE: We don't yet support querying for types or events.
	   * NOTE: This schema is auto extracted from `schema_extractor.ts` located in the test folder,
	   *       see dom_element_schema_registry_spec.ts
	   */
	  // =================================================================================================
	  // =================================================================================================
	  // =========== S T O P   -  S T O P   -  S T O P   -  S T O P   -  S T O P   -  S T O P  ===========
	  // =================================================================================================
	  // =================================================================================================
	  //
	  //                       DO NOT EDIT THIS DOM SCHEMA WITHOUT A SECURITY REVIEW!
	  //
	  // Newly added properties must be security reviewed and assigned an appropriate SecurityContext in
	  // dom_security_schema.ts. Reach out to mprobst & rjamet for details.
	  //
	  // =================================================================================================
	  var SCHEMA = [
	      '[Element]|textContent,%classList,className,id,innerHTML,*beforecopy,*beforecut,*beforepaste,*copy,*cut,*paste,*search,*selectstart,*webkitfullscreenchange,*webkitfullscreenerror,*wheel,outerHTML,#scrollLeft,#scrollTop',
	      '[HTMLElement]^[Element]|accessKey,contentEditable,dir,!draggable,!hidden,innerText,lang,*abort,*beforecopy,*beforecut,*beforepaste,*blur,*cancel,*canplay,*canplaythrough,*change,*click,*close,*contextmenu,*copy,*cuechange,*cut,*dblclick,*drag,*dragend,*dragenter,*dragleave,*dragover,*dragstart,*drop,*durationchange,*emptied,*ended,*error,*focus,*input,*invalid,*keydown,*keypress,*keyup,*load,*loadeddata,*loadedmetadata,*loadstart,*message,*mousedown,*mouseenter,*mouseleave,*mousemove,*mouseout,*mouseover,*mouseup,*mousewheel,*mozfullscreenchange,*mozfullscreenerror,*mozpointerlockchange,*mozpointerlockerror,*paste,*pause,*play,*playing,*progress,*ratechange,*reset,*resize,*scroll,*search,*seeked,*seeking,*select,*selectstart,*show,*stalled,*submit,*suspend,*timeupdate,*toggle,*volumechange,*waiting,*webglcontextcreationerror,*webglcontextlost,*webglcontextrestored,*webkitfullscreenchange,*webkitfullscreenerror,*wheel,outerText,!spellcheck,%style,#tabIndex,title,!translate',
	      'abbr,address,article,aside,b,bdi,bdo,cite,code,dd,dfn,dt,em,figcaption,figure,footer,header,i,kbd,main,mark,nav,noscript,rb,rp,rt,rtc,ruby,s,samp,section,small,strong,sub,sup,u,var,wbr^[HTMLElement]|accessKey,contentEditable,dir,!draggable,!hidden,innerText,lang,*abort,*beforecopy,*beforecut,*beforepaste,*blur,*cancel,*canplay,*canplaythrough,*change,*click,*close,*contextmenu,*copy,*cuechange,*cut,*dblclick,*drag,*dragend,*dragenter,*dragleave,*dragover,*dragstart,*drop,*durationchange,*emptied,*ended,*error,*focus,*input,*invalid,*keydown,*keypress,*keyup,*load,*loadeddata,*loadedmetadata,*loadstart,*message,*mousedown,*mouseenter,*mouseleave,*mousemove,*mouseout,*mouseover,*mouseup,*mousewheel,*mozfullscreenchange,*mozfullscreenerror,*mozpointerlockchange,*mozpointerlockerror,*paste,*pause,*play,*playing,*progress,*ratechange,*reset,*resize,*scroll,*search,*seeked,*seeking,*select,*selectstart,*show,*stalled,*submit,*suspend,*timeupdate,*toggle,*volumechange,*waiting,*webglcontextcreationerror,*webglcontextlost,*webglcontextrestored,*webkitfullscreenchange,*webkitfullscreenerror,*wheel,outerText,!spellcheck,%style,#tabIndex,title,!translate',
	      'media^[HTMLElement]|!autoplay,!controls,%crossOrigin,#currentTime,!defaultMuted,#defaultPlaybackRate,!disableRemotePlayback,!loop,!muted,*encrypted,#playbackRate,preload,src,%srcObject,#volume',
	      ':svg:^[HTMLElement]|*abort,*blur,*cancel,*canplay,*canplaythrough,*change,*click,*close,*contextmenu,*cuechange,*dblclick,*drag,*dragend,*dragenter,*dragleave,*dragover,*dragstart,*drop,*durationchange,*emptied,*ended,*error,*focus,*input,*invalid,*keydown,*keypress,*keyup,*load,*loadeddata,*loadedmetadata,*loadstart,*mousedown,*mouseenter,*mouseleave,*mousemove,*mouseout,*mouseover,*mouseup,*mousewheel,*pause,*play,*playing,*progress,*ratechange,*reset,*resize,*scroll,*seeked,*seeking,*select,*show,*stalled,*submit,*suspend,*timeupdate,*toggle,*volumechange,*waiting,%style,#tabIndex',
	      ':svg:graphics^:svg:|',
	      ':svg:animation^:svg:|*begin,*end,*repeat',
	      ':svg:geometry^:svg:|',
	      ':svg:componentTransferFunction^:svg:|',
	      ':svg:gradient^:svg:|',
	      ':svg:textContent^:svg:graphics|',
	      ':svg:textPositioning^:svg:textContent|',
	      'a^[HTMLElement]|charset,coords,download,hash,host,hostname,href,hreflang,name,password,pathname,ping,port,protocol,referrerPolicy,rel,rev,search,shape,target,text,type,username',
	      'area^[HTMLElement]|alt,coords,hash,host,hostname,href,!noHref,password,pathname,ping,port,protocol,referrerPolicy,search,shape,target,username',
	      'audio^media|',
	      'br^[HTMLElement]|clear',
	      'base^[HTMLElement]|href,target',
	      'body^[HTMLElement]|aLink,background,bgColor,link,*beforeunload,*blur,*error,*focus,*hashchange,*languagechange,*load,*message,*offline,*online,*pagehide,*pageshow,*popstate,*rejectionhandled,*resize,*scroll,*storage,*unhandledrejection,*unload,text,vLink',
	      'button^[HTMLElement]|!autofocus,!disabled,formAction,formEnctype,formMethod,!formNoValidate,formTarget,name,type,value',
	      'canvas^[HTMLElement]|#height,#width',
	      'content^[HTMLElement]|select',
	      'dl^[HTMLElement]|!compact',
	      'datalist^[HTMLElement]|',
	      'details^[HTMLElement]|!open',
	      'dialog^[HTMLElement]|!open,returnValue',
	      'dir^[HTMLElement]|!compact',
	      'div^[HTMLElement]|align',
	      'embed^[HTMLElement]|align,height,name,src,type,width',
	      'fieldset^[HTMLElement]|!disabled,name',
	      'font^[HTMLElement]|color,face,size',
	      'form^[HTMLElement]|acceptCharset,action,autocomplete,encoding,enctype,method,name,!noValidate,target',
	      'frame^[HTMLElement]|frameBorder,longDesc,marginHeight,marginWidth,name,!noResize,scrolling,src',
	      'frameset^[HTMLElement]|cols,*beforeunload,*blur,*error,*focus,*hashchange,*languagechange,*load,*message,*offline,*online,*pagehide,*pageshow,*popstate,*rejectionhandled,*resize,*scroll,*storage,*unhandledrejection,*unload,rows',
	      'hr^[HTMLElement]|align,color,!noShade,size,width',
	      'head^[HTMLElement]|',
	      'h1,h2,h3,h4,h5,h6^[HTMLElement]|align',
	      'html^[HTMLElement]|version',
	      'iframe^[HTMLElement]|align,!allowFullscreen,frameBorder,height,longDesc,marginHeight,marginWidth,name,referrerPolicy,%sandbox,scrolling,src,srcdoc,width',
	      'img^[HTMLElement]|align,alt,border,%crossOrigin,#height,#hspace,!isMap,longDesc,lowsrc,name,referrerPolicy,sizes,src,srcset,useMap,#vspace,#width',
	      'input^[HTMLElement]|accept,align,alt,autocapitalize,autocomplete,!autofocus,!checked,!defaultChecked,defaultValue,dirName,!disabled,%files,formAction,formEnctype,formMethod,!formNoValidate,formTarget,#height,!incremental,!indeterminate,max,#maxLength,min,#minLength,!multiple,name,pattern,placeholder,!readOnly,!required,selectionDirection,#selectionEnd,#selectionStart,#size,src,step,type,useMap,value,%valueAsDate,#valueAsNumber,#width',
	      'keygen^[HTMLElement]|!autofocus,challenge,!disabled,keytype,name',
	      'li^[HTMLElement]|type,#value',
	      'label^[HTMLElement]|htmlFor',
	      'legend^[HTMLElement]|align',
	      'link^[HTMLElement]|as,charset,%crossOrigin,!disabled,href,hreflang,integrity,media,rel,%relList,rev,%sizes,target,type',
	      'map^[HTMLElement]|name',
	      'marquee^[HTMLElement]|behavior,bgColor,direction,height,#hspace,#loop,#scrollAmount,#scrollDelay,!trueSpeed,#vspace,width',
	      'menu^[HTMLElement]|!compact',
	      'meta^[HTMLElement]|content,httpEquiv,name,scheme',
	      'meter^[HTMLElement]|#high,#low,#max,#min,#optimum,#value',
	      'ins,del^[HTMLElement]|cite,dateTime',
	      'ol^[HTMLElement]|!compact,!reversed,#start,type',
	      'object^[HTMLElement]|align,archive,border,code,codeBase,codeType,data,!declare,height,#hspace,name,standby,type,useMap,#vspace,width',
	      'optgroup^[HTMLElement]|!disabled,label',
	      'option^[HTMLElement]|!defaultSelected,!disabled,label,!selected,text,value',
	      'output^[HTMLElement]|defaultValue,%htmlFor,name,value',
	      'p^[HTMLElement]|align',
	      'param^[HTMLElement]|name,type,value,valueType',
	      'picture^[HTMLElement]|',
	      'pre^[HTMLElement]|#width',
	      'progress^[HTMLElement]|#max,#value',
	      'q,blockquote,cite^[HTMLElement]|',
	      'script^[HTMLElement]|!async,charset,%crossOrigin,!defer,event,htmlFor,integrity,src,text,type',
	      'select^[HTMLElement]|!autofocus,!disabled,#length,!multiple,name,!required,#selectedIndex,#size,value',
	      'shadow^[HTMLElement]|',
	      'source^[HTMLElement]|media,sizes,src,srcset,type',
	      'span^[HTMLElement]|',
	      'style^[HTMLElement]|!disabled,media,type',
	      'caption^[HTMLElement]|align',
	      'th,td^[HTMLElement]|abbr,align,axis,bgColor,ch,chOff,#colSpan,headers,height,!noWrap,#rowSpan,scope,vAlign,width',
	      'col,colgroup^[HTMLElement]|align,ch,chOff,#span,vAlign,width',
	      'table^[HTMLElement]|align,bgColor,border,%caption,cellPadding,cellSpacing,frame,rules,summary,%tFoot,%tHead,width',
	      'tr^[HTMLElement]|align,bgColor,ch,chOff,vAlign',
	      'tfoot,thead,tbody^[HTMLElement]|align,ch,chOff,vAlign',
	      'template^[HTMLElement]|',
	      'textarea^[HTMLElement]|autocapitalize,!autofocus,#cols,defaultValue,dirName,!disabled,#maxLength,#minLength,name,placeholder,!readOnly,!required,#rows,selectionDirection,#selectionEnd,#selectionStart,value,wrap',
	      'title^[HTMLElement]|text',
	      'track^[HTMLElement]|!default,kind,label,src,srclang',
	      'ul^[HTMLElement]|!compact,type',
	      'unknown^[HTMLElement]|',
	      'video^media|#height,poster,#width',
	      ':svg:a^:svg:graphics|',
	      ':svg:animate^:svg:animation|',
	      ':svg:animateMotion^:svg:animation|',
	      ':svg:animateTransform^:svg:animation|',
	      ':svg:circle^:svg:geometry|',
	      ':svg:clipPath^:svg:graphics|',
	      ':svg:cursor^:svg:|',
	      ':svg:defs^:svg:graphics|',
	      ':svg:desc^:svg:|',
	      ':svg:discard^:svg:|',
	      ':svg:ellipse^:svg:geometry|',
	      ':svg:feBlend^:svg:|',
	      ':svg:feColorMatrix^:svg:|',
	      ':svg:feComponentTransfer^:svg:|',
	      ':svg:feComposite^:svg:|',
	      ':svg:feConvolveMatrix^:svg:|',
	      ':svg:feDiffuseLighting^:svg:|',
	      ':svg:feDisplacementMap^:svg:|',
	      ':svg:feDistantLight^:svg:|',
	      ':svg:feDropShadow^:svg:|',
	      ':svg:feFlood^:svg:|',
	      ':svg:feFuncA^:svg:componentTransferFunction|',
	      ':svg:feFuncB^:svg:componentTransferFunction|',
	      ':svg:feFuncG^:svg:componentTransferFunction|',
	      ':svg:feFuncR^:svg:componentTransferFunction|',
	      ':svg:feGaussianBlur^:svg:|',
	      ':svg:feImage^:svg:|',
	      ':svg:feMerge^:svg:|',
	      ':svg:feMergeNode^:svg:|',
	      ':svg:feMorphology^:svg:|',
	      ':svg:feOffset^:svg:|',
	      ':svg:fePointLight^:svg:|',
	      ':svg:feSpecularLighting^:svg:|',
	      ':svg:feSpotLight^:svg:|',
	      ':svg:feTile^:svg:|',
	      ':svg:feTurbulence^:svg:|',
	      ':svg:filter^:svg:|',
	      ':svg:foreignObject^:svg:graphics|',
	      ':svg:g^:svg:graphics|',
	      ':svg:image^:svg:graphics|',
	      ':svg:line^:svg:geometry|',
	      ':svg:linearGradient^:svg:gradient|',
	      ':svg:mpath^:svg:|',
	      ':svg:marker^:svg:|',
	      ':svg:mask^:svg:|',
	      ':svg:metadata^:svg:|',
	      ':svg:path^:svg:geometry|',
	      ':svg:pattern^:svg:|',
	      ':svg:polygon^:svg:geometry|',
	      ':svg:polyline^:svg:geometry|',
	      ':svg:radialGradient^:svg:gradient|',
	      ':svg:rect^:svg:geometry|',
	      ':svg:svg^:svg:graphics|#currentScale,#zoomAndPan',
	      ':svg:script^:svg:|type',
	      ':svg:set^:svg:animation|',
	      ':svg:stop^:svg:|',
	      ':svg:style^:svg:|!disabled,media,title,type',
	      ':svg:switch^:svg:graphics|',
	      ':svg:symbol^:svg:|',
	      ':svg:tspan^:svg:textPositioning|',
	      ':svg:text^:svg:textPositioning|',
	      ':svg:textPath^:svg:textContent|',
	      ':svg:title^:svg:|',
	      ':svg:use^:svg:graphics|',
	      ':svg:view^:svg:|#zoomAndPan',
	      'data^[HTMLElement]|value',
	      'menuitem^[HTMLElement]|type,label,icon,!disabled,!checked,radiogroup,!default',
	      'summary^[HTMLElement]|',
	      'time^[HTMLElement]|dateTime',
	  ];
	  var _ATTR_TO_PROP = {
	      'class': 'className',
	      'for': 'htmlFor',
	      'formaction': 'formAction',
	      'innerHtml': 'innerHTML',
	      'readonly': 'readOnly',
	      'tabindex': 'tabIndex',
	  };
	  var DomElementSchemaRegistry = (function (_super) {
	      __extends$21(DomElementSchemaRegistry, _super);
	      function DomElementSchemaRegistry() {
	          var _this = this;
	          _super.call(this);
	          this._schema = {};
	          SCHEMA.forEach(function (encodedType) {
	              var type = {};
	              var _a = encodedType.split('|'), strType = _a[0], strProperties = _a[1];
	              var properties = strProperties.split(',');
	              var _b = strType.split('^'), typeNames = _b[0], superName = _b[1];
	              typeNames.split(',').forEach(function (tag) { return _this._schema[tag.toLowerCase()] = type; });
	              var superType = superName && _this._schema[superName.toLowerCase()];
	              if (superType) {
	                  Object.keys(superType).forEach(function (prop) { type[prop] = superType[prop]; });
	              }
	              properties.forEach(function (property) {
	                  if (property.length > 0) {
	                      switch (property[0]) {
	                          case '*':
	                              // We don't yet support events.
	                              // If ever allowing to bind to events, GO THROUGH A SECURITY REVIEW, allowing events
	                              // will
	                              // almost certainly introduce bad XSS vulnerabilities.
	                              // type[property.substring(1)] = EVENT;
	                              break;
	                          case '!':
	                              type[property.substring(1)] = BOOLEAN;
	                              break;
	                          case '#':
	                              type[property.substring(1)] = NUMBER;
	                              break;
	                          case '%':
	                              type[property.substring(1)] = OBJECT;
	                              break;
	                          default:
	                              type[property] = STRING;
	                      }
	                  }
	              });
	          });
	      }
	      DomElementSchemaRegistry.prototype.hasProperty = function (tagName, propName, schemaMetas) {
	          if (schemaMetas.some(function (schema) { return schema.name === _angular_core.NO_ERRORS_SCHEMA.name; })) {
	              return true;
	          }
	          if (tagName.indexOf('-') > -1) {
	              if (tagName === 'ng-container' || tagName === 'ng-content') {
	                  return false;
	              }
	              if (schemaMetas.some(function (schema) { return schema.name === _angular_core.CUSTOM_ELEMENTS_SCHEMA.name; })) {
	                  // Can't tell now as we don't know which properties a custom element will get
	                  // once it is instantiated
	                  return true;
	              }
	          }
	          var elementProperties = this._schema[tagName.toLowerCase()] || this._schema['unknown'];
	          return !!elementProperties[propName];
	      };
	      DomElementSchemaRegistry.prototype.hasElement = function (tagName, schemaMetas) {
	          if (schemaMetas.some(function (schema) { return schema.name === _angular_core.NO_ERRORS_SCHEMA.name; })) {
	              return true;
	          }
	          if (tagName.indexOf('-') > -1) {
	              if (tagName === 'ng-container' || tagName === 'ng-content') {
	                  return true;
	              }
	              if (schemaMetas.some(function (schema) { return schema.name === _angular_core.CUSTOM_ELEMENTS_SCHEMA.name; })) {
	                  // Allow any custom elements
	                  return true;
	              }
	          }
	          return !!this._schema[tagName.toLowerCase()];
	      };
	      /**
	       * securityContext returns the security context for the given property on the given DOM tag.
	       *
	       * Tag and property name are statically known and cannot change at runtime, i.e. it is not
	       * possible to bind a value into a changing attribute or tag name.
	       *
	       * The filtering is white list based. All attributes in the schema above are assumed to have the
	       * 'NONE' security context, i.e. that they are safe inert string values. Only specific well known
	       * attack vectors are assigned their appropriate context.
	       */
	      DomElementSchemaRegistry.prototype.securityContext = function (tagName, propName, isAttribute) {
	          if (isAttribute) {
	              // NB: For security purposes, use the mapped property name, not the attribute name.
	              propName = this.getMappedPropName(propName);
	          }
	          // Make sure comparisons are case insensitive, so that case differences between attribute and
	          // property names do not have a security impact.
	          tagName = tagName.toLowerCase();
	          propName = propName.toLowerCase();
	          var ctx = SECURITY_SCHEMA[tagName + '|' + propName];
	          if (ctx) {
	              return ctx;
	          }
	          ctx = SECURITY_SCHEMA['*|' + propName];
	          return ctx ? ctx : _angular_core.SecurityContext.NONE;
	      };
	      DomElementSchemaRegistry.prototype.getMappedPropName = function (propName) { return _ATTR_TO_PROP[propName] || propName; };
	      DomElementSchemaRegistry.prototype.getDefaultComponentElementName = function () { return 'ng-component'; };
	      DomElementSchemaRegistry.prototype.validateProperty = function (name) {
	          if (name.toLowerCase().startsWith('on')) {
	              var msg = ("Binding to event property '" + name + "' is disallowed for security reasons, ") +
	                  ("please use (" + name.slice(2) + ")=...") +
	                  ("\nIf '" + name + "' is a directive input, make sure the directive is imported by the") +
	                  " current module.";
	              return { error: true, msg: msg };
	          }
	          else {
	              return { error: false };
	          }
	      };
	      DomElementSchemaRegistry.prototype.validateAttribute = function (name) {
	          if (name.toLowerCase().startsWith('on')) {
	              var msg = ("Binding to event attribute '" + name + "' is disallowed for security reasons, ") +
	                  ("please use (" + name.slice(2) + ")=...");
	              return { error: true, msg: msg };
	          }
	          else {
	              return { error: false };
	          }
	      };
	      DomElementSchemaRegistry.prototype.allKnownElementNames = function () { return Object.keys(this._schema); };
	      DomElementSchemaRegistry.prototype.normalizeAnimationStyleProperty = function (propName) {
	          return dashCaseToCamelCase(propName);
	      };
	      DomElementSchemaRegistry.prototype.normalizeAnimationStyleValue = function (camelCaseProp, userProvidedProp, val) {
	          var unit = '';
	          var strVal = val.toString().trim();
	          var errorMsg = null;
	          if (_isPixelDimensionStyle(camelCaseProp) && val !== 0 && val !== '0') {
	              if (typeof val === 'number') {
	                  unit = 'px';
	              }
	              else {
	                  var valAndSuffixMatch = val.match(/^[+-]?[\d\.]+([a-z]*)$/);
	                  if (valAndSuffixMatch && valAndSuffixMatch[1].length == 0) {
	                      errorMsg = "Please provide a CSS unit value for " + userProvidedProp + ":" + val;
	                  }
	              }
	          }
	          return { error: errorMsg, value: strVal + unit };
	      };
	      DomElementSchemaRegistry.decorators = [
	          { type: _angular_core.Injectable },
	      ];
	      /** @nocollapse */
	      DomElementSchemaRegistry.ctorParameters = [];
	      return DomElementSchemaRegistry;
	  }(ElementSchemaRegistry));
	  function _isPixelDimensionStyle(prop) {
	      switch (prop) {
	          case 'width':
	          case 'height':
	          case 'minWidth':
	          case 'minHeight':
	          case 'maxWidth':
	          case 'maxHeight':
	          case 'left':
	          case 'top':
	          case 'bottom':
	          case 'right':
	          case 'fontSize':
	          case 'outlineWidth':
	          case 'outlineOffset':
	          case 'paddingTop':
	          case 'paddingLeft':
	          case 'paddingBottom':
	          case 'paddingRight':
	          case 'marginTop':
	          case 'marginLeft':
	          case 'marginBottom':
	          case 'marginRight':
	          case 'borderRadius':
	          case 'borderWidth':
	          case 'borderTopWidth':
	          case 'borderLeftWidth':
	          case 'borderRightWidth':
	          case 'borderBottomWidth':
	          case 'textIndent':
	              return true;
	          default:
	              return false;
	      }
	  }

	  var _NO_RESOURCE_LOADER = {
	      get: function (url) {
	          throw new Error("No ResourceLoader implementation has been provided. Can't read the url \"" + url + "\"");
	      }
	  };
	  /**
	   * A set of providers that provide `RuntimeCompiler` and its dependencies to use for
	   * template compilation.
	   */
	  var COMPILER_PROVIDERS = [
	      { provide: Reflector, useValue: reflector },
	      { provide: ReflectorReader, useExisting: Reflector },
	      { provide: ResourceLoader, useValue: _NO_RESOURCE_LOADER },
	      Console,
	      Lexer,
	      Parser,
	      HtmlParser,
	      {
	          provide: I18NHtmlParser,
	          useFactory: function (parser, translations, format) {
	              return new I18NHtmlParser(parser, translations, format);
	          },
	          deps: [
	              HtmlParser,
	              [new _angular_core.Optional(), new _angular_core.Inject(_angular_core.TRANSLATIONS)],
	              [new _angular_core.Optional(), new _angular_core.Inject(_angular_core.TRANSLATIONS_FORMAT)],
	          ]
	      },
	      TemplateParser,
	      DirectiveNormalizer,
	      CompileMetadataResolver,
	      DEFAULT_PACKAGE_URL_PROVIDER,
	      StyleCompiler,
	      ViewCompiler,
	      NgModuleCompiler,
	      DirectiveWrapperCompiler,
	      { provide: CompilerConfig, useValue: new CompilerConfig() },
	      RuntimeCompiler,
	      { provide: _angular_core.Compiler, useExisting: RuntimeCompiler },
	      DomElementSchemaRegistry,
	      { provide: ElementSchemaRegistry, useExisting: DomElementSchemaRegistry },
	      UrlResolver,
	      DirectiveResolver,
	      PipeResolver,
	      NgModuleResolver,
	      AnimationParser
	  ];
	  var RuntimeCompilerFactory = (function () {
	      function RuntimeCompilerFactory(defaultOptions) {
	          this._defaultOptions = [{
	                  useDebug: _angular_core.isDevMode(),
	                  useJit: true,
	                  defaultEncapsulation: _angular_core.ViewEncapsulation.Emulated
	              }].concat(defaultOptions);
	      }
	      RuntimeCompilerFactory.prototype.createCompiler = function (options) {
	          if (options === void 0) { options = []; }
	          var mergedOptions = _mergeOptions(this._defaultOptions.concat(options));
	          var injector = _angular_core.ReflectiveInjector.resolveAndCreate([
	              COMPILER_PROVIDERS, {
	                  provide: CompilerConfig,
	                  useFactory: function () {
	                      return new CompilerConfig({
	                          // let explicit values from the compiler options overwrite options
	                          // from the app providers. E.g. important for the testing platform.
	                          genDebugInfo: mergedOptions.useDebug,
	                          // let explicit values from the compiler options overwrite options
	                          // from the app providers
	                          useJit: mergedOptions.useJit,
	                          // let explicit values from the compiler options overwrite options
	                          // from the app providers
	                          defaultEncapsulation: mergedOptions.defaultEncapsulation,
	                          logBindingUpdate: mergedOptions.useDebug
	                      });
	                  },
	                  deps: []
	              },
	              mergedOptions.providers
	          ]);
	          return injector.get(_angular_core.Compiler);
	      };
	      RuntimeCompilerFactory.decorators = [
	          { type: _angular_core.Injectable },
	      ];
	      /** @nocollapse */
	      RuntimeCompilerFactory.ctorParameters = [
	          { type: Array, decorators: [{ type: _angular_core.Inject, args: [_angular_core.COMPILER_OPTIONS,] },] },
	      ];
	      return RuntimeCompilerFactory;
	  }());
	  function _initReflector() {
	      reflector.reflectionCapabilities = new ReflectionCapabilities();
	  }
	  /**
	   * A platform that included corePlatform and the compiler.
	   *
	   * @experimental
	   */
	  var platformCoreDynamic = _angular_core.createPlatformFactory(_angular_core.platformCore, 'coreDynamic', [
	      { provide: _angular_core.COMPILER_OPTIONS, useValue: {}, multi: true },
	      { provide: _angular_core.CompilerFactory, useClass: RuntimeCompilerFactory },
	      { provide: _angular_core.PLATFORM_INITIALIZER, useValue: _initReflector, multi: true },
	  ]);
	  function _mergeOptions(optionsArr) {
	      return {
	          useDebug: _lastDefined(optionsArr.map(function (options) { return options.useDebug; })),
	          useJit: _lastDefined(optionsArr.map(function (options) { return options.useJit; })),
	          defaultEncapsulation: _lastDefined(optionsArr.map(function (options) { return options.defaultEncapsulation; })),
	          providers: _mergeArrays(optionsArr.map(function (options) { return options.providers; }))
	      };
	  }
	  function _lastDefined(args) {
	      for (var i = args.length - 1; i >= 0; i--) {
	          if (args[i] !== undefined) {
	              return args[i];
	          }
	      }
	      return undefined;
	  }
	  function _mergeArrays(parts) {
	      var result = [];
	      parts.forEach(function (part) { return part && result.push.apply(result, part); });
	      return result;
	  }

	  /**
	   * @license
	   * Copyright Google Inc. All Rights Reserved.
	   *
	   * Use of this source code is governed by an MIT-style license that can be
	   * found in the LICENSE file at https://angular.io/license
	   */
	  // asset:<package-name>/<realm>/<path-to-module>
	  var _ASSET_URL_RE = /asset:([^\/]+)\/([^\/]+)\/(.+)/;
	  /**
	   * Interface that defines how import statements should be generated.
	   */
	  var ImportGenerator = (function () {
	      function ImportGenerator() {
	      }
	      ImportGenerator.parseAssetUrl = function (url) { return AssetUrl.parse(url); };
	      return ImportGenerator;
	  }());
	  var AssetUrl = (function () {
	      function AssetUrl(packageName, firstLevelDir, modulePath) {
	          this.packageName = packageName;
	          this.firstLevelDir = firstLevelDir;
	          this.modulePath = modulePath;
	      }
	      AssetUrl.parse = function (url, allowNonMatching) {
	          if (allowNonMatching === void 0) { allowNonMatching = true; }
	          var match = url.match(_ASSET_URL_RE);
	          if (match !== null) {
	              return new AssetUrl(match[1], match[2], match[3]);
	          }
	          if (allowNonMatching) {
	              return null;
	          }
	          throw new Error("Url " + url + " is not a valid asset: url");
	      };
	      return AssetUrl;
	  }());

	  exports.TEMPLATE_TRANSFORMS = TEMPLATE_TRANSFORMS;
	  exports.CompilerConfig = CompilerConfig;
	  exports.RenderTypes = RenderTypes;
	  exports.RuntimeCompiler = RuntimeCompiler;
	  exports.DirectiveResolver = DirectiveResolver;
	  exports.PipeResolver = PipeResolver;
	  exports.NgModuleResolver = NgModuleResolver;
	  exports.DEFAULT_INTERPOLATION_CONFIG = DEFAULT_INTERPOLATION_CONFIG;
	  exports.InterpolationConfig = InterpolationConfig;
	  exports.NgModuleCompiler = NgModuleCompiler;
	  exports.DirectiveWrapperCompiler = DirectiveWrapperCompiler;
	  exports.ViewCompiler = ViewCompiler;
	  exports.AnimationParser = AnimationParser;
	  exports.TextAst = TextAst;
	  exports.BoundTextAst = BoundTextAst;
	  exports.AttrAst = AttrAst;
	  exports.BoundElementPropertyAst = BoundElementPropertyAst;
	  exports.BoundEventAst = BoundEventAst;
	  exports.ReferenceAst = ReferenceAst;
	  exports.VariableAst = VariableAst;
	  exports.ElementAst = ElementAst;
	  exports.EmbeddedTemplateAst = EmbeddedTemplateAst;
	  exports.BoundDirectivePropertyAst = BoundDirectivePropertyAst;
	  exports.DirectiveAst = DirectiveAst;
	  exports.ProviderAst = ProviderAst;
	  exports.NgContentAst = NgContentAst;
	  exports.templateVisitAll = templateVisitAll;
	  exports.CompileMetadataWithIdentifier = CompileMetadataWithIdentifier;
	  exports.CompileAnimationEntryMetadata = CompileAnimationEntryMetadata;
	  exports.CompileAnimationStateMetadata = CompileAnimationStateMetadata;
	  exports.CompileAnimationStateDeclarationMetadata = CompileAnimationStateDeclarationMetadata;
	  exports.CompileAnimationStateTransitionMetadata = CompileAnimationStateTransitionMetadata;
	  exports.CompileAnimationMetadata = CompileAnimationMetadata;
	  exports.CompileAnimationKeyframesSequenceMetadata = CompileAnimationKeyframesSequenceMetadata;
	  exports.CompileAnimationStyleMetadata = CompileAnimationStyleMetadata;
	  exports.CompileAnimationAnimateMetadata = CompileAnimationAnimateMetadata;
	  exports.CompileAnimationWithStepsMetadata = CompileAnimationWithStepsMetadata;
	  exports.CompileAnimationSequenceMetadata = CompileAnimationSequenceMetadata;
	  exports.CompileAnimationGroupMetadata = CompileAnimationGroupMetadata;
	  exports.CompileIdentifierMetadata = CompileIdentifierMetadata;
	  exports.CompileDiDependencyMetadata = CompileDiDependencyMetadata;
	  exports.CompileProviderMetadata = CompileProviderMetadata;
	  exports.CompileFactoryMetadata = CompileFactoryMetadata;
	  exports.CompileTokenMetadata = CompileTokenMetadata;
	  exports.CompileTypeMetadata = CompileTypeMetadata;
	  exports.CompileQueryMetadata = CompileQueryMetadata;
	  exports.CompileStylesheetMetadata = CompileStylesheetMetadata;
	  exports.CompileTemplateMetadata = CompileTemplateMetadata;
	  exports.CompileDirectiveMetadata = CompileDirectiveMetadata;
	  exports.createHostComponentMeta = createHostComponentMeta;
	  exports.CompilePipeMetadata = CompilePipeMetadata;
	  exports.CompileNgModuleMetadata = CompileNgModuleMetadata;
	  exports.TransitiveCompileNgModuleMetadata = TransitiveCompileNgModuleMetadata;
	  exports.removeIdentifierDuplicates = removeIdentifierDuplicates;
	  exports.isStaticSymbol = isStaticSymbol;
	  exports.ProviderMeta = ProviderMeta;
	  exports.SourceModule = SourceModule;
	  exports.analyzeNgModules = analyzeNgModules;
	  exports.analyzeAndValidateNgModules = analyzeAndValidateNgModules;
	  exports.loadNgModuleDirectives = loadNgModuleDirectives;
	  exports.OfflineCompiler = OfflineCompiler;
	  exports.createUrlResolverWithoutPackagePrefix = createUrlResolverWithoutPackagePrefix;
	  exports.createOfflineCompileUrlResolver = createOfflineCompileUrlResolver;
	  exports.DEFAULT_PACKAGE_URL_PROVIDER = DEFAULT_PACKAGE_URL_PROVIDER;
	  exports.UrlResolver = UrlResolver;
	  exports.getUrlScheme = getUrlScheme;
	  exports.ResourceLoader = ResourceLoader;
	  exports.COMPILER_PROVIDERS = COMPILER_PROVIDERS;
	  exports.RuntimeCompilerFactory = RuntimeCompilerFactory;
	  exports.platformCoreDynamic = platformCoreDynamic;
	  exports.ElementSchemaRegistry = ElementSchemaRegistry;
	  exports.I18NHtmlParser = I18NHtmlParser;
	  exports.MessageBundle = MessageBundle;
	  exports.Xliff = Xliff;
	  exports.Xmb = Xmb;
	  exports.Xtb = Xtb;
	  exports.DirectiveNormalizer = DirectiveNormalizer;
	  exports.Lexer = Lexer;
	  exports.Token = Token;
	  exports.EOF = EOF;
	  exports.isIdentifier = isIdentifier;
	  exports.isQuote = isQuote;
	  exports.SplitInterpolation = SplitInterpolation;
	  exports.TemplateBindingParseResult = TemplateBindingParseResult;
	  exports.Parser = Parser;
	  exports._ParseAST = _ParseAST;
	  exports.CompileMetadataResolver = CompileMetadataResolver;
	  exports.HtmlParser = HtmlParser;
	  exports.ParseTreeResult = ParseTreeResult;
	  exports.TreeError = TreeError;
	  exports.ImportGenerator = ImportGenerator;
	  exports.AssetUrl = AssetUrl;
	  exports.debugOutputAstAsTypeScript = debugOutputAstAsTypeScript;
	  exports.TypeScriptEmitter = TypeScriptEmitter;
	  exports.ParseLocation = ParseLocation;
	  exports.ParseSourceFile = ParseSourceFile;
	  exports.ParseSourceSpan = ParseSourceSpan;
	  exports.ParseError = ParseError;
	  exports.DomElementSchemaRegistry = DomElementSchemaRegistry;
	  exports.CssSelector = CssSelector;
	  exports.SelectorMatcher = SelectorMatcher;
	  exports.SelectorListContext = SelectorListContext;
	  exports.SelectorContext = SelectorContext;
	  exports.StylesCompileDependency = StylesCompileDependency;
	  exports.StylesCompileResult = StylesCompileResult;
	  exports.CompiledStylesheet = CompiledStylesheet;
	  exports.StyleCompiler = StyleCompiler;
	  exports.TemplateParseError = TemplateParseError;
	  exports.TemplateParseResult = TemplateParseResult;
	  exports.TemplateParser = TemplateParser;
	  exports.splitClasses = splitClasses;
	  exports.removeSummaryDuplicates = removeSummaryDuplicates;

	}));

/***/ },
/* 80 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {/**
	 * @license Angular v2.2.3
	 * (c) 2010-2016 Google, Inc. https://angular.io/
	 * License: MIT
	 */
	(function (global, factory) {
	     true ? factory(exports, __webpack_require__(81), __webpack_require__(82)) :
	    typeof define === 'function' && define.amd ? define(['exports', 'rxjs/Subject', 'rxjs/Observable'], factory) :
	    (factory((global.ng = global.ng || {}, global.ng.core = global.ng.core || {}),global.Rx,global.Rx));
	}(this, function (exports,rxjs_Subject,rxjs_Observable) { 'use strict';

	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    var globalScope;
	    if (typeof window === 'undefined') {
	        if (typeof WorkerGlobalScope !== 'undefined' && self instanceof WorkerGlobalScope) {
	            // TODO: Replace any with WorkerGlobalScope from lib.webworker.d.ts #3492
	            globalScope = self;
	        }
	        else {
	            globalScope = global;
	        }
	    }
	    else {
	        globalScope = window;
	    }
	    function scheduleMicroTask(fn) {
	        Zone.current.scheduleMicroTask('scheduleMicrotask', fn);
	    }
	    // Need to declare a new variable for global here since TypeScript
	    // exports the original value of the symbol.
	    var global$1 = globalScope;
	    function getTypeNameForDebugging(type) {
	        return type['name'] || typeof type;
	    }
	    // TODO: remove calls to assert in production environment
	    // Note: Can't just export this and import in in other files
	    // as `assert` is a reserved keyword in Dart
	    global$1.assert = function assert(condition) {
	        // TODO: to be fixed properly via #2830, noop for now
	    };
	    function isPresent(obj) {
	        return obj != null;
	    }
	    function isBlank(obj) {
	        return obj == null;
	    }
	    function stringify(token) {
	        if (typeof token === 'string') {
	            return token;
	        }
	        if (token == null) {
	            return '' + token;
	        }
	        if (token.overriddenName) {
	            return token.overriddenName;
	        }
	        if (token.name) {
	            return token.name;
	        }
	        var res = token.toString();
	        var newLineIndex = res.indexOf('\n');
	        return newLineIndex === -1 ? res : res.substring(0, newLineIndex);
	    }
	    // JS has NaN !== NaN
	    function looseIdentical(a, b) {
	        return a === b || typeof a === 'number' && typeof b === 'number' && isNaN(a) && isNaN(b);
	    }
	    function isJsObject(o) {
	        return o !== null && (typeof o === 'function' || typeof o === 'object');
	    }
	    function print(obj) {
	        console.log(obj);
	    }
	    function warn(obj) {
	        console.warn(obj);
	    }
	    var _symbolIterator = null;
	    function getSymbolIterator() {
	        if (!_symbolIterator) {
	            if (globalScope.Symbol && Symbol.iterator) {
	                _symbolIterator = Symbol.iterator;
	            }
	            else {
	                // es6-shim specific logic
	                var keys = Object.getOwnPropertyNames(Map.prototype);
	                for (var i = 0; i < keys.length; ++i) {
	                    var key = keys[i];
	                    if (key !== 'entries' && key !== 'size' &&
	                        Map.prototype[key] === Map.prototype['entries']) {
	                        _symbolIterator = key;
	                    }
	                }
	            }
	        }
	        return _symbolIterator;
	    }
	    function isPrimitive(obj) {
	        return !isJsObject(obj);
	    }

	    var _nextClassId = 0;
	    var Reflect = global$1.Reflect;
	    function extractAnnotation(annotation) {
	        if (typeof annotation === 'function' && annotation.hasOwnProperty('annotation')) {
	            // it is a decorator, extract annotation
	            annotation = annotation.annotation;
	        }
	        return annotation;
	    }
	    function applyParams(fnOrArray, key) {
	        if (fnOrArray === Object || fnOrArray === String || fnOrArray === Function ||
	            fnOrArray === Number || fnOrArray === Array) {
	            throw new Error("Can not use native " + stringify(fnOrArray) + " as constructor");
	        }
	        if (typeof fnOrArray === 'function') {
	            return fnOrArray;
	        }
	        if (Array.isArray(fnOrArray)) {
	            var annotations = fnOrArray;
	            var annoLength = annotations.length - 1;
	            var fn = fnOrArray[annoLength];
	            if (typeof fn !== 'function') {
	                throw new Error("Last position of Class method array must be Function in key " + key + " was '" + stringify(fn) + "'");
	            }
	            if (annoLength != fn.length) {
	                throw new Error("Number of annotations (" + annoLength + ") does not match number of arguments (" + fn.length + ") in the function: " + stringify(fn));
	            }
	            var paramsAnnotations = [];
	            for (var i = 0, ii = annotations.length - 1; i < ii; i++) {
	                var paramAnnotations = [];
	                paramsAnnotations.push(paramAnnotations);
	                var annotation = annotations[i];
	                if (Array.isArray(annotation)) {
	                    for (var j = 0; j < annotation.length; j++) {
	                        paramAnnotations.push(extractAnnotation(annotation[j]));
	                    }
	                }
	                else if (typeof annotation === 'function') {
	                    paramAnnotations.push(extractAnnotation(annotation));
	                }
	                else {
	                    paramAnnotations.push(annotation);
	                }
	            }
	            Reflect.defineMetadata('parameters', paramsAnnotations, fn);
	            return fn;
	        }
	        throw new Error("Only Function or Array is supported in Class definition for key '" + key + "' is '" + stringify(fnOrArray) + "'");
	    }
	    /**
	     * Provides a way for expressing ES6 classes with parameter annotations in ES5.
	     *
	     * ## Basic Example
	     *
	     * ```
	     * var Greeter = ng.Class({
	     *   constructor: function(name) {
	     *     this.name = name;
	     *   },
	     *
	     *   greet: function() {
	     *     alert('Hello ' + this.name + '!');
	     *   }
	     * });
	     * ```
	     *
	     * is equivalent to ES6:
	     *
	     * ```
	     * class Greeter {
	     *   constructor(name) {
	     *     this.name = name;
	     *   }
	     *
	     *   greet() {
	     *     alert('Hello ' + this.name + '!');
	     *   }
	     * }
	     * ```
	     *
	     * or equivalent to ES5:
	     *
	     * ```
	     * var Greeter = function (name) {
	     *   this.name = name;
	     * }
	     *
	     * Greeter.prototype.greet = function () {
	     *   alert('Hello ' + this.name + '!');
	     * }
	     * ```
	     *
	     * ### Example with parameter annotations
	     *
	     * ```
	     * var MyService = ng.Class({
	     *   constructor: [String, [new Optional(), Service], function(name, myService) {
	     *     ...
	     *   }]
	     * });
	     * ```
	     *
	     * is equivalent to ES6:
	     *
	     * ```
	     * class MyService {
	     *   constructor(name: string, @Optional() myService: Service) {
	     *     ...
	     *   }
	     * }
	     * ```
	     *
	     * ### Example with inheritance
	     *
	     * ```
	     * var Shape = ng.Class({
	     *   constructor: (color) {
	     *     this.color = color;
	     *   }
	     * });
	     *
	     * var Square = ng.Class({
	     *   extends: Shape,
	     *   constructor: function(color, size) {
	     *     Shape.call(this, color);
	     *     this.size = size;
	     *   }
	     * });
	     * ```
	     * @stable
	     */
	    function Class(clsDef) {
	        var constructor = applyParams(clsDef.hasOwnProperty('constructor') ? clsDef.constructor : undefined, 'constructor');
	        var proto = constructor.prototype;
	        if (clsDef.hasOwnProperty('extends')) {
	            if (typeof clsDef.extends === 'function') {
	                constructor.prototype = proto =
	                    Object.create(clsDef.extends.prototype);
	            }
	            else {
	                throw new Error("Class definition 'extends' property must be a constructor function was: " + stringify(clsDef.extends));
	            }
	        }
	        for (var key in clsDef) {
	            if (key !== 'extends' && key !== 'prototype' && clsDef.hasOwnProperty(key)) {
	                proto[key] = applyParams(clsDef[key], key);
	            }
	        }
	        if (this && this.annotations instanceof Array) {
	            Reflect.defineMetadata('annotations', this.annotations, constructor);
	        }
	        var constructorName = constructor['name'];
	        if (!constructorName || constructorName === 'constructor') {
	            constructor['overriddenName'] = "class" + _nextClassId++;
	        }
	        return constructor;
	    }
	    function makeDecorator(name, props, parentClass, chainFn) {
	        if (chainFn === void 0) { chainFn = null; }
	        var metaCtor = makeMetadataCtor([props]);
	        function DecoratorFactory(objOrType) {
	            if (!(Reflect && Reflect.getMetadata)) {
	                throw 'reflect-metadata shim is required when using class decorators';
	            }
	            if (this instanceof DecoratorFactory) {
	                metaCtor.call(this, objOrType);
	                return this;
	            }
	            var annotationInstance = new DecoratorFactory(objOrType);
	            var chainAnnotation = typeof this === 'function' && Array.isArray(this.annotations) ? this.annotations : [];
	            chainAnnotation.push(annotationInstance);
	            var TypeDecorator = function TypeDecorator(cls) {
	                var annotations = Reflect.getOwnMetadata('annotations', cls) || [];
	                annotations.push(annotationInstance);
	                Reflect.defineMetadata('annotations', annotations, cls);
	                return cls;
	            };
	            TypeDecorator.annotations = chainAnnotation;
	            TypeDecorator.Class = Class;
	            if (chainFn)
	                chainFn(TypeDecorator);
	            return TypeDecorator;
	        }
	        if (parentClass) {
	            DecoratorFactory.prototype = Object.create(parentClass.prototype);
	        }
	        DecoratorFactory.prototype.toString = function () { return ("@" + name); };
	        DecoratorFactory.annotationCls = DecoratorFactory;
	        return DecoratorFactory;
	    }
	    function makeMetadataCtor(props) {
	        return function ctor() {
	            var _this = this;
	            var args = [];
	            for (var _i = 0; _i < arguments.length; _i++) {
	                args[_i - 0] = arguments[_i];
	            }
	            props.forEach(function (prop, i) {
	                var argVal = args[i];
	                if (Array.isArray(prop)) {
	                    // plain parameter
	                    _this[prop[0]] = argVal === undefined ? prop[1] : argVal;
	                }
	                else {
	                    for (var propName in prop) {
	                        _this[propName] =
	                            argVal && argVal.hasOwnProperty(propName) ? argVal[propName] : prop[propName];
	                    }
	                }
	            });
	        };
	    }
	    function makeParamDecorator(name, props, parentClass) {
	        var metaCtor = makeMetadataCtor(props);
	        function ParamDecoratorFactory() {
	            var args = [];
	            for (var _i = 0; _i < arguments.length; _i++) {
	                args[_i - 0] = arguments[_i];
	            }
	            if (this instanceof ParamDecoratorFactory) {
	                metaCtor.apply(this, args);
	                return this;
	            }
	            var annotationInstance = new ((_a = ParamDecoratorFactory).bind.apply(_a, [void 0].concat(args)))();
	            ParamDecorator.annotation = annotationInstance;
	            return ParamDecorator;
	            function ParamDecorator(cls, unusedKey, index) {
	                var parameters = Reflect.getMetadata('parameters', cls) || [];
	                // there might be gaps if some in between parameters do not have annotations.
	                // we pad with nulls.
	                while (parameters.length <= index) {
	                    parameters.push(null);
	                }
	                parameters[index] = parameters[index] || [];
	                parameters[index].push(annotationInstance);
	                Reflect.defineMetadata('parameters', parameters, cls);
	                return cls;
	            }
	            var _a;
	        }
	        if (parentClass) {
	            ParamDecoratorFactory.prototype = Object.create(parentClass.prototype);
	        }
	        ParamDecoratorFactory.prototype.toString = function () { return ("@" + name); };
	        ParamDecoratorFactory.annotationCls = ParamDecoratorFactory;
	        return ParamDecoratorFactory;
	    }
	    function makePropDecorator(name, props, parentClass) {
	        var metaCtor = makeMetadataCtor(props);
	        function PropDecoratorFactory() {
	            var args = [];
	            for (var _i = 0; _i < arguments.length; _i++) {
	                args[_i - 0] = arguments[_i];
	            }
	            if (this instanceof PropDecoratorFactory) {
	                metaCtor.apply(this, args);
	                return this;
	            }
	            var decoratorInstance = new ((_a = PropDecoratorFactory).bind.apply(_a, [void 0].concat(args)))();
	            return function PropDecorator(target, name) {
	                var meta = Reflect.getOwnMetadata('propMetadata', target.constructor) || {};
	                meta[name] = meta.hasOwnProperty(name) && meta[name] || [];
	                meta[name].unshift(decoratorInstance);
	                Reflect.defineMetadata('propMetadata', meta, target.constructor);
	            };
	            var _a;
	        }
	        if (parentClass) {
	            PropDecoratorFactory.prototype = Object.create(parentClass.prototype);
	        }
	        PropDecoratorFactory.prototype.toString = function () { return ("@" + name); };
	        PropDecoratorFactory.annotationCls = PropDecoratorFactory;
	        return PropDecoratorFactory;
	    }

	    /**
	     * Inject decorator and metadata.
	     *
	     * @stable
	     * @Annotation
	     */
	    var Inject = makeParamDecorator('Inject', [['token', undefined]]);
	    /**
	     * Optional decorator and metadata.
	     *
	     * @stable
	     * @Annotation
	     */
	    var Optional = makeParamDecorator('Optional', []);
	    /**
	     * Injectable decorator and metadata.
	     *
	     * @stable
	     * @Annotation
	     */
	    var Injectable = makeParamDecorator('Injectable', []);
	    /**
	     * Self decorator and metadata.
	     *
	     * @stable
	     * @Annotation
	     */
	    var Self = makeParamDecorator('Self', []);
	    /**
	     * SkipSelf decorator and metadata.
	     *
	     * @stable
	     * @Annotation
	     */
	    var SkipSelf = makeParamDecorator('SkipSelf', []);
	    /**
	     * Host decorator and metadata.
	     *
	     * @stable
	     * @Annotation
	     */
	    var Host = makeParamDecorator('Host', []);

	    /**
	     * Creates a token that can be used in a DI Provider.
	     *
	     * ### Example ([live demo](http://plnkr.co/edit/Ys9ezXpj2Mnoy3Uc8KBp?p=preview))
	     *
	     * ```typescript
	     * var t = new OpaqueToken("value");
	     *
	     * var injector = Injector.resolveAndCreate([
	     *   {provide: t, useValue: "bindingValue"}
	     * ]);
	     *
	     * expect(injector.get(t)).toEqual("bindingValue");
	     * ```
	     *
	     * Using an `OpaqueToken` is preferable to using strings as tokens because of possible collisions
	     * caused by multiple providers using the same string as two different tokens.
	     *
	     * Using an `OpaqueToken` is preferable to using an `Object` as tokens because it provides better
	     * error messages.
	     * @stable
	     */
	    // so that metadata is gathered for this class
	    var OpaqueToken = (function () {
	        function OpaqueToken(_desc) {
	            this._desc = _desc;
	        }
	        OpaqueToken.prototype.toString = function () { return "Token " + this._desc; };
	        OpaqueToken.decorators = [
	            { type: Injectable },
	        ];
	        /** @nocollapse */
	        OpaqueToken.ctorParameters = [
	            null,
	        ];
	        return OpaqueToken;
	    }());

	    /**
	     * This token can be used to create a virtual provider that will populate the
	     * `entryComponents` fields of components and ng modules based on its `useValue`.
	     * All components that are referenced in the `useValue` value (either directly
	     * or in a nested array or map) will be added to the `entryComponents` property.
	     *
	     * ### Example
	     * The following example shows how the router can populate the `entryComponents`
	     * field of an NgModule based on the router configuration which refers
	     * to components.
	     *
	     * ```typescript
	     * // helper function inside the router
	     * function provideRoutes(routes) {
	     *   return [
	     *     {provide: ROUTES, useValue: routes},
	     *     {provide: ANALYZE_FOR_ENTRY_COMPONENTS, useValue: routes, multi: true}
	     *   ];
	     * }
	     *
	     * // user code
	     * let routes = [
	     *   {path: '/root', component: RootComp},
	     *   {path: '/teams', component: TeamsComp}
	     * ];
	     *
	     * @NgModule({
	     *   providers: [provideRoutes(routes)]
	     * })
	     * class ModuleWithRoutes {}
	     * ```
	     *
	     * @experimental
	     */
	    var ANALYZE_FOR_ENTRY_COMPONENTS = new OpaqueToken('AnalyzeForEntryComponents');
	    /**
	     * Attribute decorator and metadata.
	     *
	     * @stable
	     * @Annotation
	     */
	    var Attribute = makeParamDecorator('Attribute', [['attributeName', undefined]]);
	    /**
	     * Base class for query metadata.
	     *
	     * See {@link ContentChildren}, {@link ContentChild}, {@link ViewChildren}, {@link ViewChild} for
	     * more information.
	     *
	     * @stable
	     */
	    var Query = (function () {
	        function Query() {
	        }
	        return Query;
	    }());
	    /**
	     * ContentChildren decorator and metadata.
	     *
	     *  @stable
	     *  @Annotation
	     */
	    var ContentChildren = makePropDecorator('ContentChildren', [
	        ['selector', undefined], {
	            first: false,
	            isViewQuery: false,
	            descendants: false,
	            read: undefined,
	        }
	    ], Query);
	    /**
	     * @whatItDoes Configures a content query.
	     *
	     * @howToUse
	     *
	     * {@example core/di/ts/contentChild/content_child_howto.ts region='HowTo'}
	     *
	     * @description
	     *
	     * You can use ContentChild to get the first element or the directive matching the selector from the
	     * content DOM. If the content DOM changes, and a new child matches the selector,
	     * the property will be updated.
	     *
	     * Content queries are set before the `ngAfterContentInit` callback is called.
	     *
	     * **Metadata Properties**:
	     *
	     * * **selector** - the directive type or the name used for querying.
	     * * **read** - read a different token from the queried element.
	     *
	     * Let's look at an example:
	     *
	     * {@example core/di/ts/contentChild/content_child_example.ts region='Component'}
	     *
	     * **npm package**: `@angular/core`
	     *
	     * @stable
	     * @Annotation
	     */
	    var ContentChild = makePropDecorator('ContentChild', [
	        ['selector', undefined], {
	            first: true,
	            isViewQuery: false,
	            descendants: true,
	            read: undefined,
	        }
	    ], Query);
	    /**
	     * @whatItDoes Configures a view query.
	     *
	     * @howToUse
	     *
	     * {@example core/di/ts/viewChildren/view_children_howto.ts region='HowTo'}
	     *
	     * @description
	     *
	     * You can use ViewChildren to get the {@link QueryList} of elements or directives from the
	     * view DOM. Any time a child element is added, removed, or moved, the query list will be updated,
	     * and the changes observable of the query list will emit a new value.
	     *
	     * View queries are set before the `ngAfterViewInit` callback is called.
	     *
	     * **Metadata Properties**:
	     *
	     * * **selector** - the directive type or the name used for querying.
	     * * **read** - read a different token from the queried elements.
	     *
	     * Let's look at an example:
	     *
	     * {@example core/di/ts/viewChildren/view_children_example.ts region='Component'}
	     *
	     * **npm package**: `@angular/core`
	     *
	     * @stable
	     * @Annotation
	     */
	    var ViewChildren = makePropDecorator('ViewChildren', [
	        ['selector', undefined], {
	            first: false,
	            isViewQuery: true,
	            descendants: true,
	            read: undefined,
	        }
	    ], Query);
	    /**
	     * ViewChild decorator and metadata.
	     *
	     * @stable
	     * @Annotation
	     */
	    var ViewChild = makePropDecorator('ViewChild', [
	        ['selector', undefined], {
	            first: true,
	            isViewQuery: true,
	            descendants: true,
	            read: undefined,
	        }
	    ], Query);

	    /**
	     * Describes within the change detector which strategy will be used the next time change
	     * detection is triggered.
	     * @stable
	     */
	    exports.ChangeDetectionStrategy;
	    (function (ChangeDetectionStrategy) {
	        /**
	         * `OnPush` means that the change detector's mode will be set to `CheckOnce` during hydration.
	         */
	        ChangeDetectionStrategy[ChangeDetectionStrategy["OnPush"] = 0] = "OnPush";
	        /**
	         * `Default` means that the change detector's mode will be set to `CheckAlways` during hydration.
	         */
	        ChangeDetectionStrategy[ChangeDetectionStrategy["Default"] = 1] = "Default";
	    })(exports.ChangeDetectionStrategy || (exports.ChangeDetectionStrategy = {}));
	    /**
	     * Describes the status of the detector.
	     */
	    var ChangeDetectorStatus;
	    (function (ChangeDetectorStatus) {
	        /**
	         * `CheckOnce` means that after calling detectChanges the mode of the change detector
	         * will become `Checked`.
	         */
	        ChangeDetectorStatus[ChangeDetectorStatus["CheckOnce"] = 0] = "CheckOnce";
	        /**
	         * `Checked` means that the change detector should be skipped until its mode changes to
	         * `CheckOnce`.
	         */
	        ChangeDetectorStatus[ChangeDetectorStatus["Checked"] = 1] = "Checked";
	        /**
	         * `CheckAlways` means that after calling detectChanges the mode of the change detector
	         * will remain `CheckAlways`.
	         */
	        ChangeDetectorStatus[ChangeDetectorStatus["CheckAlways"] = 2] = "CheckAlways";
	        /**
	         * `Detached` means that the change detector sub tree is not a part of the main tree and
	         * should be skipped.
	         */
	        ChangeDetectorStatus[ChangeDetectorStatus["Detached"] = 3] = "Detached";
	        /**
	         * `Errored` means that the change detector encountered an error checking a binding
	         * or calling a directive lifecycle method and is now in an inconsistent state. Change
	         * detectors in this state will no longer detect changes.
	         */
	        ChangeDetectorStatus[ChangeDetectorStatus["Errored"] = 4] = "Errored";
	        /**
	         * `Destroyed` means that the change detector is destroyed.
	         */
	        ChangeDetectorStatus[ChangeDetectorStatus["Destroyed"] = 5] = "Destroyed";
	    })(ChangeDetectorStatus || (ChangeDetectorStatus = {}));
	    function isDefaultChangeDetectionStrategy(changeDetectionStrategy) {
	        return isBlank(changeDetectionStrategy) ||
	            changeDetectionStrategy === exports.ChangeDetectionStrategy.Default;
	    }

	    /**
	     * Directive decorator and metadata.
	     *
	     * @stable
	     * @Annotation
	     */
	    var Directive = makeDecorator('Directive', {
	        selector: undefined,
	        inputs: undefined,
	        outputs: undefined,
	        host: undefined,
	        providers: undefined,
	        exportAs: undefined,
	        queries: undefined
	    });
	    /**
	     * Component decorator and metadata.
	     *
	     * @stable
	     * @Annotation
	     */
	    var Component = makeDecorator('Component', {
	        selector: undefined,
	        inputs: undefined,
	        outputs: undefined,
	        host: undefined,
	        exportAs: undefined,
	        moduleId: undefined,
	        providers: undefined,
	        viewProviders: undefined,
	        changeDetection: exports.ChangeDetectionStrategy.Default,
	        queries: undefined,
	        templateUrl: undefined,
	        template: undefined,
	        styleUrls: undefined,
	        styles: undefined,
	        animations: undefined,
	        encapsulation: undefined,
	        interpolation: undefined,
	        entryComponents: undefined
	    }, Directive);
	    /**
	     * Pipe decorator and metadata.
	     *
	     * @stable
	     * @Annotation
	     */
	    var Pipe = makeDecorator('Pipe', {
	        name: undefined,
	        pure: true,
	    });
	    /**
	     * Input decorator and metadata.
	     *
	     * @stable
	     * @Annotation
	     */
	    var Input = makePropDecorator('Input', [['bindingPropertyName', undefined]]);
	    /**
	     * Output decorator and metadata.
	     *
	     * @stable
	     * @Annotation
	     */
	    var Output = makePropDecorator('Output', [['bindingPropertyName', undefined]]);
	    /**
	     * HostBinding decorator and metadata.
	     *
	     * @stable
	     * @Annotation
	     */
	    var HostBinding = makePropDecorator('HostBinding', [['hostPropertyName', undefined]]);
	    /**
	     * HostBinding decorator and metadata.
	     *
	     * @stable
	     * @Annotation
	     */
	    var HostListener = makePropDecorator('HostListener', [['eventName', undefined], ['args', []]]);

	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    /**
	     * @stable
	     */
	    var LifecycleHooks;
	    (function (LifecycleHooks) {
	        LifecycleHooks[LifecycleHooks["OnInit"] = 0] = "OnInit";
	        LifecycleHooks[LifecycleHooks["OnDestroy"] = 1] = "OnDestroy";
	        LifecycleHooks[LifecycleHooks["DoCheck"] = 2] = "DoCheck";
	        LifecycleHooks[LifecycleHooks["OnChanges"] = 3] = "OnChanges";
	        LifecycleHooks[LifecycleHooks["AfterContentInit"] = 4] = "AfterContentInit";
	        LifecycleHooks[LifecycleHooks["AfterContentChecked"] = 5] = "AfterContentChecked";
	        LifecycleHooks[LifecycleHooks["AfterViewInit"] = 6] = "AfterViewInit";
	        LifecycleHooks[LifecycleHooks["AfterViewChecked"] = 7] = "AfterViewChecked";
	    })(LifecycleHooks || (LifecycleHooks = {}));
	    var LIFECYCLE_HOOKS_VALUES = [
	        LifecycleHooks.OnInit, LifecycleHooks.OnDestroy, LifecycleHooks.DoCheck, LifecycleHooks.OnChanges,
	        LifecycleHooks.AfterContentInit, LifecycleHooks.AfterContentChecked, LifecycleHooks.AfterViewInit,
	        LifecycleHooks.AfterViewChecked
	    ];
	    /**
	     * @whatItDoes Lifecycle hook that is called when any data-bound property of a directive changes.
	     * @howToUse
	     * {@example core/ts/metadata/lifecycle_hooks_spec.ts region='OnChanges'}
	     *
	     * @description
	     * `ngOnChanges` is called right after the data-bound properties have been checked and before view
	     * and content children are checked if at least one of them has changed.
	     * The `changes` parameter contains the changed properties.
	     *
	     * See {@linkDocs guide/lifecycle-hooks#onchanges "Lifecycle Hooks Guide"}.
	     *
	     * @stable
	     */
	    var OnChanges = (function () {
	        function OnChanges() {
	        }
	        return OnChanges;
	    }());
	    /**
	     * @whatItDoes Lifecycle hook that is called after data-bound properties of a directive are
	     * initialized.
	     * @howToUse
	     * {@example core/ts/metadata/lifecycle_hooks_spec.ts region='OnInit'}
	     *
	     * @description
	     * `ngOnInit` is called right after the directive's data-bound properties have been checked for the
	     * first time, and before any of its children have been checked. It is invoked only once when the
	     * directive is instantiated.
	     *
	     * See {@linkDocs guide/lifecycle-hooks "Lifecycle Hooks Guide"}.
	     *
	     * @stable
	     */
	    var OnInit = (function () {
	        function OnInit() {
	        }
	        return OnInit;
	    }());
	    /**
	     * @whatItDoes Lifecycle hook that is called when Angular dirty checks a directive.
	     * @howToUse
	     * {@example core/ts/metadata/lifecycle_hooks_spec.ts region='DoCheck'}
	     *
	     * @description
	     * `ngDoCheck` gets called to check the changes in the directives in addition to the default
	     * algorithm. The default change detection algorithm looks for differences by comparing
	     * bound-property values by reference across change detection runs.
	     *
	     * Note that a directive typically should not use both `DoCheck` and {@link OnChanges} to respond to
	     * changes on the same input, as `ngOnChanges` will continue to be called when the default change
	     * detector detects changes.
	     *
	     * See {@link KeyValueDiffers} and {@link IterableDiffers} for implementing custom dirty checking
	     * for collections.
	     *
	     * See {@linkDocs guide/lifecycle-hooks#docheck "Lifecycle Hooks Guide"}.
	     *
	     * @stable
	     */
	    var DoCheck = (function () {
	        function DoCheck() {
	        }
	        return DoCheck;
	    }());
	    /**
	     * @whatItDoes Lifecycle hook that is called when a directive or pipe is destroyed.
	     * @howToUse
	     * {@example core/ts/metadata/lifecycle_hooks_spec.ts region='OnDestroy'}
	     *
	     * @description
	     * `ngOnDestroy` callback is typically used for any custom cleanup that needs to occur when the
	     * instance is destroyed.
	     *
	     * See {@linkDocs guide/lifecycle-hooks "Lifecycle Hooks Guide"}.
	     *
	     * @stable
	     */
	    var OnDestroy = (function () {
	        function OnDestroy() {
	        }
	        return OnDestroy;
	    }());
	    /**
	     *
	     * @whatItDoes Lifecycle hook that is called after a directive's content has been fully
	     * initialized.
	     * @howToUse
	     * {@example core/ts/metadata/lifecycle_hooks_spec.ts region='AfterContentInit'}
	     *
	     * @description
	     * See {@linkDocs guide/lifecycle-hooks#aftercontent "Lifecycle Hooks Guide"}.
	     *
	     * @stable
	     */
	    var AfterContentInit = (function () {
	        function AfterContentInit() {
	        }
	        return AfterContentInit;
	    }());
	    /**
	     * @whatItDoes Lifecycle hook that is called after every check of a directive's content.
	     * @howToUse
	     * {@example core/ts/metadata/lifecycle_hooks_spec.ts region='AfterContentChecked'}
	     *
	     * @description
	     * See {@linkDocs guide/lifecycle-hooks#aftercontent "Lifecycle Hooks Guide"}.
	     *
	     * @stable
	     */
	    var AfterContentChecked = (function () {
	        function AfterContentChecked() {
	        }
	        return AfterContentChecked;
	    }());
	    /**
	     * @whatItDoes Lifecycle hook that is called after a component's view has been fully
	     * initialized.
	     * @howToUse
	     * {@example core/ts/metadata/lifecycle_hooks_spec.ts region='AfterViewInit'}
	     *
	     * @description
	     * See {@linkDocs guide/lifecycle-hooks#afterview "Lifecycle Hooks Guide"}.
	     *
	     * @stable
	     */
	    var AfterViewInit = (function () {
	        function AfterViewInit() {
	        }
	        return AfterViewInit;
	    }());
	    /**
	     * @whatItDoes Lifecycle hook that is called after every check of a component's view.
	     * @howToUse
	     * {@example core/ts/metadata/lifecycle_hooks_spec.ts region='AfterViewChecked'}
	     *
	     * @description
	     * See {@linkDocs guide/lifecycle-hooks#afterview "Lifecycle Hooks Guide"}.
	     *
	     * @stable
	     */
	    var AfterViewChecked = (function () {
	        function AfterViewChecked() {
	        }
	        return AfterViewChecked;
	    }());

	    /**
	     * Defines a schema that will allow:
	     * - any non-Angular elements with a `-` in their name,
	     * - any properties on elements with a `-` in their name which is the common rule for custom
	     * elements.
	     *
	     * @stable
	     */
	    var CUSTOM_ELEMENTS_SCHEMA = {
	        name: 'custom-elements'
	    };
	    /**
	     * Defines a schema that will allow any property on any element.
	     *
	     * @experimental
	     */
	    var NO_ERRORS_SCHEMA = {
	        name: 'no-errors-schema'
	    };
	    /**
	     * NgModule decorator and metadata.
	     *
	     * @stable
	     * @Annotation
	     */
	    var NgModule = makeDecorator('NgModule', {
	        providers: undefined,
	        declarations: undefined,
	        imports: undefined,
	        exports: undefined,
	        entryComponents: undefined,
	        bootstrap: undefined,
	        schemas: undefined,
	        id: undefined,
	    });

	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    /**
	     * Defines template and style encapsulation options available for Component's {@link Component}.
	     *
	     * See {@link ViewMetadata#encapsulation}.
	     * @stable
	     */
	    exports.ViewEncapsulation;
	    (function (ViewEncapsulation) {
	        /**
	         * Emulate `Native` scoping of styles by adding an attribute containing surrogate id to the Host
	         * Element and pre-processing the style rules provided via
	         * {@link ViewMetadata#styles} or {@link ViewMetadata#stylesUrls}, and adding the new Host Element
	         * attribute to all selectors.
	         *
	         * This is the default option.
	         */
	        ViewEncapsulation[ViewEncapsulation["Emulated"] = 0] = "Emulated";
	        /**
	         * Use the native encapsulation mechanism of the renderer.
	         *
	         * For the DOM this means using [Shadow DOM](https://w3c.github.io/webcomponents/spec/shadow/) and
	         * creating a ShadowRoot for Component's Host Element.
	         */
	        ViewEncapsulation[ViewEncapsulation["Native"] = 1] = "Native";
	        /**
	         * Don't provide any template or style encapsulation.
	         */
	        ViewEncapsulation[ViewEncapsulation["None"] = 2] = "None";
	    })(exports.ViewEncapsulation || (exports.ViewEncapsulation = {}));
	    /**
	     * Metadata properties available for configuring Views.
	     *
	     * For details on the `@Component` annotation, see {@link Component}.
	     *
	     * ### Example
	     *
	     * ```
	     * @Component({
	     *   selector: 'greet',
	     *   template: 'Hello {{name}}!',
	     * })
	     * class Greet {
	     *   name: string;
	     *
	     *   constructor() {
	     *     this.name = 'World';
	     *   }
	     * }
	     * ```
	     *
	     * @deprecated Use Component instead.
	     *
	     * {@link Component}
	     */
	    var ViewMetadata = (function () {
	        function ViewMetadata(_a) {
	            var _b = _a === void 0 ? {} : _a, templateUrl = _b.templateUrl, template = _b.template, encapsulation = _b.encapsulation, styles = _b.styles, styleUrls = _b.styleUrls, animations = _b.animations, interpolation = _b.interpolation;
	            this.templateUrl = templateUrl;
	            this.template = template;
	            this.styleUrls = styleUrls;
	            this.styles = styles;
	            this.encapsulation = encapsulation;
	            this.animations = animations;
	            this.interpolation = interpolation;
	        }
	        return ViewMetadata;
	    }());

	    /**
	     * Allows to refer to references which are not yet defined.
	     *
	     * For instance, `forwardRef` is used when the `token` which we need to refer to for the purposes of
	     * DI is declared,
	     * but not yet defined. It is also used when the `token` which we use when creating a query is not
	     * yet defined.
	     *
	     * ### Example
	     * {@example core/di/ts/forward_ref/forward_ref_spec.ts region='forward_ref'}
	     * @experimental
	     */
	    function forwardRef(forwardRefFn) {
	        forwardRefFn.__forward_ref__ = forwardRef;
	        forwardRefFn.toString = function () { return stringify(this()); };
	        return forwardRefFn;
	    }
	    /**
	     * Lazily retrieves the reference value from a forwardRef.
	     *
	     * Acts as the identity function when given a non-forward-ref value.
	     *
	     * ### Example ([live demo](http://plnkr.co/edit/GU72mJrk1fiodChcmiDR?p=preview))
	     *
	     * {@example core/di/ts/forward_ref/forward_ref_spec.ts region='resolve_forward_ref'}
	     *
	     * See: {@link forwardRef}
	     * @experimental
	     */
	    function resolveForwardRef(type) {
	        if (typeof type === 'function' && type.hasOwnProperty('__forward_ref__') &&
	            type.__forward_ref__ === forwardRef) {
	            return type();
	        }
	        else {
	            return type;
	        }
	    }

	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    var __extends = (this && this.__extends) || function (d, b) {
	        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	    function unimplemented() {
	        throw new Error('unimplemented');
	    }
	    /**
	     * @stable
	     */
	    var BaseError = (function (_super) {
	        __extends(BaseError, _super);
	        function BaseError(message) {
	            // Errors don't use current this, instead they create a new instance.
	            // We have to do forward all of our api to the nativeInstance.
	            var nativeError = _super.call(this, message);
	            this._nativeError = nativeError;
	        }
	        Object.defineProperty(BaseError.prototype, "message", {
	            get: function () { return this._nativeError.message; },
	            set: function (message) { this._nativeError.message = message; },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(BaseError.prototype, "name", {
	            get: function () { return this._nativeError.name; },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(BaseError.prototype, "stack", {
	            get: function () { return this._nativeError.stack; },
	            set: function (value) { this._nativeError.stack = value; },
	            enumerable: true,
	            configurable: true
	        });
	        BaseError.prototype.toString = function () { return this._nativeError.toString(); };
	        return BaseError;
	    }(Error));
	    /**
	     * @stable
	     */
	    var WrappedError = (function (_super) {
	        __extends(WrappedError, _super);
	        function WrappedError(message, error) {
	            _super.call(this, message + " caused by: " + (error instanceof Error ? error.message : error));
	            this.originalError = error;
	        }
	        Object.defineProperty(WrappedError.prototype, "stack", {
	            get: function () {
	                return (this.originalError instanceof Error ? this.originalError : this._nativeError)
	                    .stack;
	            },
	            enumerable: true,
	            configurable: true
	        });
	        return WrappedError;
	    }(BaseError));

	    var _THROW_IF_NOT_FOUND = new Object();
	    var THROW_IF_NOT_FOUND = _THROW_IF_NOT_FOUND;
	    var _NullInjector = (function () {
	        function _NullInjector() {
	        }
	        _NullInjector.prototype.get = function (token, notFoundValue) {
	            if (notFoundValue === void 0) { notFoundValue = _THROW_IF_NOT_FOUND; }
	            if (notFoundValue === _THROW_IF_NOT_FOUND) {
	                throw new Error("No provider for " + stringify(token) + "!");
	            }
	            return notFoundValue;
	        };
	        return _NullInjector;
	    }());
	    /**
	     * @whatItDoes Injector interface
	     * @howToUse
	     * ```
	     * const injector: Injector = ...;
	     * injector.get(...);
	     * ```
	     *
	     * @description
	     * For more details, see the {@linkDocs guide/dependency-injection "Dependency Injection Guide"}.
	     *
	     * ### Example
	     *
	     * {@example core/di/ts/injector_spec.ts region='Injector'}
	     *
	     * `Injector` returns itself when given `Injector` as a token:
	     * {@example core/di/ts/injector_spec.ts region='injectInjector'}
	     *
	     * @stable
	     */
	    var Injector = (function () {
	        function Injector() {
	        }
	        /**
	         * Retrieves an instance from the injector based on the provided token.
	         * If not found:
	         * - Throws {@link NoProviderError} if no `notFoundValue` that is not equal to
	         * Injector.THROW_IF_NOT_FOUND is given
	         * - Returns the `notFoundValue` otherwise
	         */
	        Injector.prototype.get = function (token, notFoundValue) { return unimplemented(); };
	        Injector.THROW_IF_NOT_FOUND = _THROW_IF_NOT_FOUND;
	        Injector.NULL = new _NullInjector();
	        return Injector;
	    }());

	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    var __extends$1 = (this && this.__extends) || function (d, b) {
	        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	    function findFirstClosedCycle(keys) {
	        var res = [];
	        for (var i = 0; i < keys.length; ++i) {
	            if (res.indexOf(keys[i]) > -1) {
	                res.push(keys[i]);
	                return res;
	            }
	            res.push(keys[i]);
	        }
	        return res;
	    }
	    function constructResolvingPath(keys) {
	        if (keys.length > 1) {
	            var reversed = findFirstClosedCycle(keys.slice().reverse());
	            var tokenStrs = reversed.map(function (k) { return stringify(k.token); });
	            return ' (' + tokenStrs.join(' -> ') + ')';
	        }
	        return '';
	    }
	    /**
	     * Base class for all errors arising from misconfigured providers.
	     * @stable
	     */
	    var AbstractProviderError = (function (_super) {
	        __extends$1(AbstractProviderError, _super);
	        function AbstractProviderError(injector, key, constructResolvingMessage) {
	            _super.call(this, 'DI Error');
	            this.keys = [key];
	            this.injectors = [injector];
	            this.constructResolvingMessage = constructResolvingMessage;
	            this.message = this.constructResolvingMessage(this.keys);
	        }
	        AbstractProviderError.prototype.addKey = function (injector, key) {
	            this.injectors.push(injector);
	            this.keys.push(key);
	            this.message = this.constructResolvingMessage(this.keys);
	        };
	        return AbstractProviderError;
	    }(BaseError));
	    /**
	     * Thrown when trying to retrieve a dependency by key from {@link Injector}, but the
	     * {@link Injector} does not have a {@link Provider} for the given key.
	     *
	     * ### Example ([live demo](http://plnkr.co/edit/vq8D3FRB9aGbnWJqtEPE?p=preview))
	     *
	     * ```typescript
	     * class A {
	     *   constructor(b:B) {}
	     * }
	     *
	     * expect(() => Injector.resolveAndCreate([A])).toThrowError();
	     * ```
	     * @stable
	     */
	    var NoProviderError = (function (_super) {
	        __extends$1(NoProviderError, _super);
	        function NoProviderError(injector, key) {
	            _super.call(this, injector, key, function (keys) {
	                var first = stringify(keys[0].token);
	                return "No provider for " + first + "!" + constructResolvingPath(keys);
	            });
	        }
	        return NoProviderError;
	    }(AbstractProviderError));
	    /**
	     * Thrown when dependencies form a cycle.
	     *
	     * ### Example ([live demo](http://plnkr.co/edit/wYQdNos0Tzql3ei1EV9j?p=info))
	     *
	     * ```typescript
	     * var injector = Injector.resolveAndCreate([
	     *   {provide: "one", useFactory: (two) => "two", deps: [[new Inject("two")]]},
	     *   {provide: "two", useFactory: (one) => "one", deps: [[new Inject("one")]]}
	     * ]);
	     *
	     * expect(() => injector.get("one")).toThrowError();
	     * ```
	     *
	     * Retrieving `A` or `B` throws a `CyclicDependencyError` as the graph above cannot be constructed.
	     * @stable
	     */
	    var CyclicDependencyError = (function (_super) {
	        __extends$1(CyclicDependencyError, _super);
	        function CyclicDependencyError(injector, key) {
	            _super.call(this, injector, key, function (keys) {
	                return "Cannot instantiate cyclic dependency!" + constructResolvingPath(keys);
	            });
	        }
	        return CyclicDependencyError;
	    }(AbstractProviderError));
	    /**
	     * Thrown when a constructing type returns with an Error.
	     *
	     * The `InstantiationError` class contains the original error plus the dependency graph which caused
	     * this object to be instantiated.
	     *
	     * ### Example ([live demo](http://plnkr.co/edit/7aWYdcqTQsP0eNqEdUAf?p=preview))
	     *
	     * ```typescript
	     * class A {
	     *   constructor() {
	     *     throw new Error('message');
	     *   }
	     * }
	     *
	     * var injector = Injector.resolveAndCreate([A]);

	     * try {
	     *   injector.get(A);
	     * } catch (e) {
	     *   expect(e instanceof InstantiationError).toBe(true);
	     *   expect(e.originalException.message).toEqual("message");
	     *   expect(e.originalStack).toBeDefined();
	     * }
	     * ```
	     * @stable
	     */
	    var InstantiationError = (function (_super) {
	        __extends$1(InstantiationError, _super);
	        function InstantiationError(injector, originalException, originalStack, key) {
	            _super.call(this, 'DI Error', originalException);
	            this.keys = [key];
	            this.injectors = [injector];
	        }
	        InstantiationError.prototype.addKey = function (injector, key) {
	            this.injectors.push(injector);
	            this.keys.push(key);
	        };
	        Object.defineProperty(InstantiationError.prototype, "message", {
	            get: function () {
	                var first = stringify(this.keys[0].token);
	                return this.originalError.message + ": Error during instantiation of " + first + "!" + constructResolvingPath(this.keys) + ".";
	            },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(InstantiationError.prototype, "causeKey", {
	            get: function () { return this.keys[0]; },
	            enumerable: true,
	            configurable: true
	        });
	        return InstantiationError;
	    }(WrappedError));
	    /**
	     * Thrown when an object other then {@link Provider} (or `Type`) is passed to {@link Injector}
	     * creation.
	     *
	     * ### Example ([live demo](http://plnkr.co/edit/YatCFbPAMCL0JSSQ4mvH?p=preview))
	     *
	     * ```typescript
	     * expect(() => Injector.resolveAndCreate(["not a type"])).toThrowError();
	     * ```
	     * @stable
	     */
	    var InvalidProviderError = (function (_super) {
	        __extends$1(InvalidProviderError, _super);
	        function InvalidProviderError(provider) {
	            _super.call(this, "Invalid provider - only instances of Provider and Type are allowed, got: " + provider);
	        }
	        return InvalidProviderError;
	    }(BaseError));
	    /**
	     * Thrown when the class has no annotation information.
	     *
	     * Lack of annotation information prevents the {@link Injector} from determining which dependencies
	     * need to be injected into the constructor.
	     *
	     * ### Example ([live demo](http://plnkr.co/edit/rHnZtlNS7vJOPQ6pcVkm?p=preview))
	     *
	     * ```typescript
	     * class A {
	     *   constructor(b) {}
	     * }
	     *
	     * expect(() => Injector.resolveAndCreate([A])).toThrowError();
	     * ```
	     *
	     * This error is also thrown when the class not marked with {@link Injectable} has parameter types.
	     *
	     * ```typescript
	     * class B {}
	     *
	     * class A {
	     *   constructor(b:B) {} // no information about the parameter types of A is available at runtime.
	     * }
	     *
	     * expect(() => Injector.resolveAndCreate([A,B])).toThrowError();
	     * ```
	     * @stable
	     */
	    var NoAnnotationError = (function (_super) {
	        __extends$1(NoAnnotationError, _super);
	        function NoAnnotationError(typeOrFunc, params) {
	            _super.call(this, NoAnnotationError._genMessage(typeOrFunc, params));
	        }
	        NoAnnotationError._genMessage = function (typeOrFunc, params) {
	            var signature = [];
	            for (var i = 0, ii = params.length; i < ii; i++) {
	                var parameter = params[i];
	                if (!parameter || parameter.length == 0) {
	                    signature.push('?');
	                }
	                else {
	                    signature.push(parameter.map(stringify).join(' '));
	                }
	            }
	            return 'Cannot resolve all parameters for \'' + stringify(typeOrFunc) + '\'(' +
	                signature.join(', ') + '). ' +
	                'Make sure that all the parameters are decorated with Inject or have valid type annotations and that \'' +
	                stringify(typeOrFunc) + '\' is decorated with Injectable.';
	        };
	        return NoAnnotationError;
	    }(BaseError));
	    /**
	     * Thrown when getting an object by index.
	     *
	     * ### Example ([live demo](http://plnkr.co/edit/bRs0SX2OTQiJzqvjgl8P?p=preview))
	     *
	     * ```typescript
	     * class A {}
	     *
	     * var injector = Injector.resolveAndCreate([A]);
	     *
	     * expect(() => injector.getAt(100)).toThrowError();
	     * ```
	     * @stable
	     */
	    var OutOfBoundsError = (function (_super) {
	        __extends$1(OutOfBoundsError, _super);
	        function OutOfBoundsError(index) {
	            _super.call(this, "Index " + index + " is out-of-bounds.");
	        }
	        return OutOfBoundsError;
	    }(BaseError));
	    // TODO: add a working example after alpha38 is released
	    /**
	     * Thrown when a multi provider and a regular provider are bound to the same token.
	     *
	     * ### Example
	     *
	     * ```typescript
	     * expect(() => Injector.resolveAndCreate([
	     *   { provide: "Strings", useValue: "string1", multi: true},
	     *   { provide: "Strings", useValue: "string2", multi: false}
	     * ])).toThrowError();
	     * ```
	     */
	    var MixingMultiProvidersWithRegularProvidersError = (function (_super) {
	        __extends$1(MixingMultiProvidersWithRegularProvidersError, _super);
	        function MixingMultiProvidersWithRegularProvidersError(provider1, provider2) {
	            _super.call(this, 'Cannot mix multi providers and regular providers, got: ' + provider1.toString() + ' ' +
	                provider2.toString());
	        }
	        return MixingMultiProvidersWithRegularProvidersError;
	    }(BaseError));

	    /**
	     * A unique object used for retrieving items from the {@link ReflectiveInjector}.
	     *
	     * Keys have:
	     * - a system-wide unique `id`.
	     * - a `token`.
	     *
	     * `Key` is used internally by {@link ReflectiveInjector} because its system-wide unique `id` allows
	     * the
	     * injector to store created objects in a more efficient way.
	     *
	     * `Key` should not be created directly. {@link ReflectiveInjector} creates keys automatically when
	     * resolving
	     * providers.
	     * @experimental
	     */
	    var ReflectiveKey = (function () {
	        /**
	         * Private
	         */
	        function ReflectiveKey(token, id) {
	            this.token = token;
	            this.id = id;
	            if (!token) {
	                throw new Error('Token must be defined!');
	            }
	        }
	        Object.defineProperty(ReflectiveKey.prototype, "displayName", {
	            /**
	             * Returns a stringified token.
	             */
	            get: function () { return stringify(this.token); },
	            enumerable: true,
	            configurable: true
	        });
	        /**
	         * Retrieves a `Key` for a token.
	         */
	        ReflectiveKey.get = function (token) {
	            return _globalKeyRegistry.get(resolveForwardRef(token));
	        };
	        Object.defineProperty(ReflectiveKey, "numberOfKeys", {
	            /**
	             * @returns the number of keys registered in the system.
	             */
	            get: function () { return _globalKeyRegistry.numberOfKeys; },
	            enumerable: true,
	            configurable: true
	        });
	        return ReflectiveKey;
	    }());
	    /**
	     * @internal
	     */
	    var KeyRegistry = (function () {
	        function KeyRegistry() {
	            this._allKeys = new Map();
	        }
	        KeyRegistry.prototype.get = function (token) {
	            if (token instanceof ReflectiveKey)
	                return token;
	            if (this._allKeys.has(token)) {
	                return this._allKeys.get(token);
	            }
	            var newKey = new ReflectiveKey(token, ReflectiveKey.numberOfKeys);
	            this._allKeys.set(token, newKey);
	            return newKey;
	        };
	        Object.defineProperty(KeyRegistry.prototype, "numberOfKeys", {
	            get: function () { return this._allKeys.size; },
	            enumerable: true,
	            configurable: true
	        });
	        return KeyRegistry;
	    }());
	    var _globalKeyRegistry = new KeyRegistry();

	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    /**
	     * @whatItDoes Represents a type that a Component or other object is instances of.
	     *
	     * @description
	     *
	     * An example of a `Type` is `MyCustomComponent` class, which in JavaScript is be represented by
	     * the `MyCustomComponent` constructor function.
	     *
	     * @stable
	     */
	    var Type = Function;

	    var ReflectionCapabilities = (function () {
	        function ReflectionCapabilities(reflect) {
	            this._reflect = reflect || global$1.Reflect;
	        }
	        ReflectionCapabilities.prototype.isReflectionEnabled = function () { return true; };
	        ReflectionCapabilities.prototype.factory = function (t) { return function () {
	            var args = [];
	            for (var _i = 0; _i < arguments.length; _i++) {
	                args[_i - 0] = arguments[_i];
	            }
	            return new (t.bind.apply(t, [void 0].concat(args)))();
	        }; };
	        /** @internal */
	        ReflectionCapabilities.prototype._zipTypesAndAnnotations = function (paramTypes, paramAnnotations) {
	            var result;
	            if (typeof paramTypes === 'undefined') {
	                result = new Array(paramAnnotations.length);
	            }
	            else {
	                result = new Array(paramTypes.length);
	            }
	            for (var i = 0; i < result.length; i++) {
	                // TS outputs Object for parameters without types, while Traceur omits
	                // the annotations. For now we preserve the Traceur behavior to aid
	                // migration, but this can be revisited.
	                if (typeof paramTypes === 'undefined') {
	                    result[i] = [];
	                }
	                else if (paramTypes[i] != Object) {
	                    result[i] = [paramTypes[i]];
	                }
	                else {
	                    result[i] = [];
	                }
	                if (paramAnnotations && isPresent(paramAnnotations[i])) {
	                    result[i] = result[i].concat(paramAnnotations[i]);
	                }
	            }
	            return result;
	        };
	        ReflectionCapabilities.prototype.parameters = function (type) {
	            // Prefer the direct API.
	            if (type.parameters) {
	                return type.parameters;
	            }
	            // API of tsickle for lowering decorators to properties on the class.
	            var tsickleCtorParams = type.ctorParameters;
	            if (tsickleCtorParams) {
	                // Newer tsickle uses a function closure
	                // Retain the non-function case for compatibility with older tsickle
	                var ctorParameters = typeof tsickleCtorParams === 'function' ? tsickleCtorParams() : tsickleCtorParams;
	                var paramTypes = ctorParameters.map(function (ctorParam) { return ctorParam && ctorParam.type; });
	                var paramAnnotations = ctorParameters.map(function (ctorParam) {
	                    return ctorParam && convertTsickleDecoratorIntoMetadata(ctorParam.decorators);
	                });
	                return this._zipTypesAndAnnotations(paramTypes, paramAnnotations);
	            }
	            // API for metadata created by invoking the decorators.
	            if (isPresent(this._reflect) && isPresent(this._reflect.getMetadata)) {
	                var paramAnnotations = this._reflect.getMetadata('parameters', type);
	                var paramTypes = this._reflect.getMetadata('design:paramtypes', type);
	                if (paramTypes || paramAnnotations) {
	                    return this._zipTypesAndAnnotations(paramTypes, paramAnnotations);
	                }
	            }
	            // The array has to be filled with `undefined` because holes would be skipped by `some`
	            return new Array(type.length).fill(undefined);
	        };
	        ReflectionCapabilities.prototype.annotations = function (typeOrFunc) {
	            // Prefer the direct API.
	            if (typeOrFunc.annotations) {
	                var annotations = typeOrFunc.annotations;
	                if (typeof annotations === 'function' && annotations.annotations) {
	                    annotations = annotations.annotations;
	                }
	                return annotations;
	            }
	            // API of tsickle for lowering decorators to properties on the class.
	            if (typeOrFunc.decorators) {
	                return convertTsickleDecoratorIntoMetadata(typeOrFunc.decorators);
	            }
	            // API for metadata created by invoking the decorators.
	            if (this._reflect && this._reflect.getMetadata) {
	                var annotations = this._reflect.getMetadata('annotations', typeOrFunc);
	                if (annotations)
	                    return annotations;
	            }
	            return [];
	        };
	        ReflectionCapabilities.prototype.propMetadata = function (typeOrFunc) {
	            // Prefer the direct API.
	            if (typeOrFunc.propMetadata) {
	                var propMetadata = typeOrFunc.propMetadata;
	                if (typeof propMetadata === 'function' && propMetadata.propMetadata) {
	                    propMetadata = propMetadata.propMetadata;
	                }
	                return propMetadata;
	            }
	            // API of tsickle for lowering decorators to properties on the class.
	            if (typeOrFunc.propDecorators) {
	                var propDecorators_1 = typeOrFunc.propDecorators;
	                var propMetadata_1 = {};
	                Object.keys(propDecorators_1).forEach(function (prop) {
	                    propMetadata_1[prop] = convertTsickleDecoratorIntoMetadata(propDecorators_1[prop]);
	                });
	                return propMetadata_1;
	            }
	            // API for metadata created by invoking the decorators.
	            if (this._reflect && this._reflect.getMetadata) {
	                var propMetadata = this._reflect.getMetadata('propMetadata', typeOrFunc);
	                if (propMetadata)
	                    return propMetadata;
	            }
	            return {};
	        };
	        ReflectionCapabilities.prototype.hasLifecycleHook = function (type, lcProperty) {
	            return type instanceof Type && lcProperty in type.prototype;
	        };
	        ReflectionCapabilities.prototype.getter = function (name) { return new Function('o', 'return o.' + name + ';'); };
	        ReflectionCapabilities.prototype.setter = function (name) {
	            return new Function('o', 'v', 'return o.' + name + ' = v;');
	        };
	        ReflectionCapabilities.prototype.method = function (name) {
	            var functionBody = "if (!o." + name + ") throw new Error('\"" + name + "\" is undefined');\n        return o." + name + ".apply(o, args);";
	            return new Function('o', 'args', functionBody);
	        };
	        // There is not a concept of import uri in Js, but this is useful in developing Dart applications.
	        ReflectionCapabilities.prototype.importUri = function (type) {
	            // StaticSymbol
	            if (typeof type === 'object' && type['filePath']) {
	                return type['filePath'];
	            }
	            // Runtime type
	            return "./" + stringify(type);
	        };
	        ReflectionCapabilities.prototype.resolveIdentifier = function (name, moduleUrl, runtime) { return runtime; };
	        ReflectionCapabilities.prototype.resolveEnum = function (enumIdentifier, name) { return enumIdentifier[name]; };
	        return ReflectionCapabilities;
	    }());
	    function convertTsickleDecoratorIntoMetadata(decoratorInvocations) {
	        if (!decoratorInvocations) {
	            return [];
	        }
	        return decoratorInvocations.map(function (decoratorInvocation) {
	            var decoratorType = decoratorInvocation.type;
	            var annotationCls = decoratorType.annotationCls;
	            var annotationArgs = decoratorInvocation.args ? decoratorInvocation.args : [];
	            return new (annotationCls.bind.apply(annotationCls, [void 0].concat(annotationArgs)))();
	        });
	    }

	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    /**
	     * Provides read-only access to reflection data about symbols. Used internally by Angular
	     * to power dependency injection and compilation.
	     */
	    var ReflectorReader = (function () {
	        function ReflectorReader() {
	        }
	        return ReflectorReader;
	    }());

	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    var __extends$2 = (this && this.__extends) || function (d, b) {
	        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	    /**
	     * Provides access to reflection data about symbols. Used internally by Angular
	     * to power dependency injection and compilation.
	     */
	    var Reflector = (function (_super) {
	        __extends$2(Reflector, _super);
	        function Reflector(reflectionCapabilities) {
	            _super.call(this);
	            this.reflectionCapabilities = reflectionCapabilities;
	        }
	        Reflector.prototype.updateCapabilities = function (caps) { this.reflectionCapabilities = caps; };
	        Reflector.prototype.factory = function (type) { return this.reflectionCapabilities.factory(type); };
	        Reflector.prototype.parameters = function (typeOrFunc) {
	            return this.reflectionCapabilities.parameters(typeOrFunc);
	        };
	        Reflector.prototype.annotations = function (typeOrFunc) {
	            return this.reflectionCapabilities.annotations(typeOrFunc);
	        };
	        Reflector.prototype.propMetadata = function (typeOrFunc) {
	            return this.reflectionCapabilities.propMetadata(typeOrFunc);
	        };
	        Reflector.prototype.hasLifecycleHook = function (type, lcProperty) {
	            return this.reflectionCapabilities.hasLifecycleHook(type, lcProperty);
	        };
	        Reflector.prototype.getter = function (name) { return this.reflectionCapabilities.getter(name); };
	        Reflector.prototype.setter = function (name) { return this.reflectionCapabilities.setter(name); };
	        Reflector.prototype.method = function (name) { return this.reflectionCapabilities.method(name); };
	        Reflector.prototype.importUri = function (type) { return this.reflectionCapabilities.importUri(type); };
	        Reflector.prototype.resolveIdentifier = function (name, moduleUrl, runtime) {
	            return this.reflectionCapabilities.resolveIdentifier(name, moduleUrl, runtime);
	        };
	        Reflector.prototype.resolveEnum = function (identifier, name) {
	            return this.reflectionCapabilities.resolveEnum(identifier, name);
	        };
	        return Reflector;
	    }(ReflectorReader));

	    /**
	     * The {@link Reflector} used internally in Angular to access metadata
	     * about symbols.
	     */
	    var reflector = new Reflector(new ReflectionCapabilities());

	    /**
	     * `Dependency` is used by the framework to extend DI.
	     * This is internal to Angular and should not be used directly.
	     */
	    var ReflectiveDependency = (function () {
	        function ReflectiveDependency(key, optional, lowerBoundVisibility, upperBoundVisibility, properties) {
	            this.key = key;
	            this.optional = optional;
	            this.lowerBoundVisibility = lowerBoundVisibility;
	            this.upperBoundVisibility = upperBoundVisibility;
	            this.properties = properties;
	        }
	        ReflectiveDependency.fromKey = function (key) {
	            return new ReflectiveDependency(key, false, null, null, []);
	        };
	        return ReflectiveDependency;
	    }());
	    var _EMPTY_LIST = [];
	    var ResolvedReflectiveProvider_ = (function () {
	        function ResolvedReflectiveProvider_(key, resolvedFactories, multiProvider) {
	            this.key = key;
	            this.resolvedFactories = resolvedFactories;
	            this.multiProvider = multiProvider;
	        }
	        Object.defineProperty(ResolvedReflectiveProvider_.prototype, "resolvedFactory", {
	            get: function () { return this.resolvedFactories[0]; },
	            enumerable: true,
	            configurable: true
	        });
	        return ResolvedReflectiveProvider_;
	    }());
	    /**
	     * An internal resolved representation of a factory function created by resolving {@link
	     * Provider}.
	     * @experimental
	     */
	    var ResolvedReflectiveFactory = (function () {
	        function ResolvedReflectiveFactory(
	            /**
	             * Factory function which can return an instance of an object represented by a key.
	             */
	            factory, 
	            /**
	             * Arguments (dependencies) to the `factory` function.
	             */
	            dependencies) {
	            this.factory = factory;
	            this.dependencies = dependencies;
	        }
	        return ResolvedReflectiveFactory;
	    }());
	    /**
	     * Resolve a single provider.
	     */
	    function resolveReflectiveFactory(provider) {
	        var factoryFn;
	        var resolvedDeps;
	        if (provider.useClass) {
	            var useClass = resolveForwardRef(provider.useClass);
	            factoryFn = reflector.factory(useClass);
	            resolvedDeps = _dependenciesFor(useClass);
	        }
	        else if (provider.useExisting) {
	            factoryFn = function (aliasInstance) { return aliasInstance; };
	            resolvedDeps = [ReflectiveDependency.fromKey(ReflectiveKey.get(provider.useExisting))];
	        }
	        else if (provider.useFactory) {
	            factoryFn = provider.useFactory;
	            resolvedDeps = constructDependencies(provider.useFactory, provider.deps);
	        }
	        else {
	            factoryFn = function () { return provider.useValue; };
	            resolvedDeps = _EMPTY_LIST;
	        }
	        return new ResolvedReflectiveFactory(factoryFn, resolvedDeps);
	    }
	    /**
	     * Converts the {@link Provider} into {@link ResolvedProvider}.
	     *
	     * {@link Injector} internally only uses {@link ResolvedProvider}, {@link Provider} contains
	     * convenience provider syntax.
	     */
	    function resolveReflectiveProvider(provider) {
	        return new ResolvedReflectiveProvider_(ReflectiveKey.get(provider.provide), [resolveReflectiveFactory(provider)], provider.multi);
	    }
	    /**
	     * Resolve a list of Providers.
	     */
	    function resolveReflectiveProviders(providers) {
	        var normalized = _normalizeProviders(providers, []);
	        var resolved = normalized.map(resolveReflectiveProvider);
	        var resolvedProviderMap = mergeResolvedReflectiveProviders(resolved, new Map());
	        return Array.from(resolvedProviderMap.values());
	    }
	    /**
	     * Merges a list of ResolvedProviders into a list where
	     * each key is contained exactly once and multi providers
	     * have been merged.
	     */
	    function mergeResolvedReflectiveProviders(providers, normalizedProvidersMap) {
	        for (var i = 0; i < providers.length; i++) {
	            var provider = providers[i];
	            var existing = normalizedProvidersMap.get(provider.key.id);
	            if (existing) {
	                if (provider.multiProvider !== existing.multiProvider) {
	                    throw new MixingMultiProvidersWithRegularProvidersError(existing, provider);
	                }
	                if (provider.multiProvider) {
	                    for (var j = 0; j < provider.resolvedFactories.length; j++) {
	                        existing.resolvedFactories.push(provider.resolvedFactories[j]);
	                    }
	                }
	                else {
	                    normalizedProvidersMap.set(provider.key.id, provider);
	                }
	            }
	            else {
	                var resolvedProvider = void 0;
	                if (provider.multiProvider) {
	                    resolvedProvider = new ResolvedReflectiveProvider_(provider.key, provider.resolvedFactories.slice(), provider.multiProvider);
	                }
	                else {
	                    resolvedProvider = provider;
	                }
	                normalizedProvidersMap.set(provider.key.id, resolvedProvider);
	            }
	        }
	        return normalizedProvidersMap;
	    }
	    function _normalizeProviders(providers, res) {
	        providers.forEach(function (b) {
	            if (b instanceof Type) {
	                res.push({ provide: b, useClass: b });
	            }
	            else if (b && typeof b == 'object' && b.provide !== undefined) {
	                res.push(b);
	            }
	            else if (b instanceof Array) {
	                _normalizeProviders(b, res);
	            }
	            else {
	                throw new InvalidProviderError(b);
	            }
	        });
	        return res;
	    }
	    function constructDependencies(typeOrFunc, dependencies) {
	        if (!dependencies) {
	            return _dependenciesFor(typeOrFunc);
	        }
	        else {
	            var params_1 = dependencies.map(function (t) { return [t]; });
	            return dependencies.map(function (t) { return _extractToken(typeOrFunc, t, params_1); });
	        }
	    }
	    function _dependenciesFor(typeOrFunc) {
	        var params = reflector.parameters(typeOrFunc);
	        if (!params)
	            return [];
	        if (params.some(function (p) { return p == null; })) {
	            throw new NoAnnotationError(typeOrFunc, params);
	        }
	        return params.map(function (p) { return _extractToken(typeOrFunc, p, params); });
	    }
	    function _extractToken(typeOrFunc, metadata, params) {
	        var depProps = [];
	        var token = null;
	        var optional = false;
	        if (!Array.isArray(metadata)) {
	            if (metadata instanceof Inject) {
	                return _createDependency(metadata.token, optional, null, null, depProps);
	            }
	            else {
	                return _createDependency(metadata, optional, null, null, depProps);
	            }
	        }
	        var lowerBoundVisibility = null;
	        var upperBoundVisibility = null;
	        for (var i = 0; i < metadata.length; ++i) {
	            var paramMetadata = metadata[i];
	            if (paramMetadata instanceof Type) {
	                token = paramMetadata;
	            }
	            else if (paramMetadata instanceof Inject) {
	                token = paramMetadata.token;
	            }
	            else if (paramMetadata instanceof Optional) {
	                optional = true;
	            }
	            else if (paramMetadata instanceof Self) {
	                upperBoundVisibility = paramMetadata;
	            }
	            else if (paramMetadata instanceof Host) {
	                upperBoundVisibility = paramMetadata;
	            }
	            else if (paramMetadata instanceof SkipSelf) {
	                lowerBoundVisibility = paramMetadata;
	            }
	        }
	        token = resolveForwardRef(token);
	        if (token != null) {
	            return _createDependency(token, optional, lowerBoundVisibility, upperBoundVisibility, depProps);
	        }
	        else {
	            throw new NoAnnotationError(typeOrFunc, params);
	        }
	    }
	    function _createDependency(token, optional, lowerBoundVisibility, upperBoundVisibility, depProps) {
	        return new ReflectiveDependency(ReflectiveKey.get(token), optional, lowerBoundVisibility, upperBoundVisibility, depProps);
	    }

	    // Threshold for the dynamic version
	    var _MAX_CONSTRUCTION_COUNTER = 10;
	    var UNDEFINED = new Object();
	    var ReflectiveProtoInjectorInlineStrategy = (function () {
	        function ReflectiveProtoInjectorInlineStrategy(protoEI, providers) {
	            this.provider0 = null;
	            this.provider1 = null;
	            this.provider2 = null;
	            this.provider3 = null;
	            this.provider4 = null;
	            this.provider5 = null;
	            this.provider6 = null;
	            this.provider7 = null;
	            this.provider8 = null;
	            this.provider9 = null;
	            this.keyId0 = null;
	            this.keyId1 = null;
	            this.keyId2 = null;
	            this.keyId3 = null;
	            this.keyId4 = null;
	            this.keyId5 = null;
	            this.keyId6 = null;
	            this.keyId7 = null;
	            this.keyId8 = null;
	            this.keyId9 = null;
	            var length = providers.length;
	            if (length > 0) {
	                this.provider0 = providers[0];
	                this.keyId0 = providers[0].key.id;
	            }
	            if (length > 1) {
	                this.provider1 = providers[1];
	                this.keyId1 = providers[1].key.id;
	            }
	            if (length > 2) {
	                this.provider2 = providers[2];
	                this.keyId2 = providers[2].key.id;
	            }
	            if (length > 3) {
	                this.provider3 = providers[3];
	                this.keyId3 = providers[3].key.id;
	            }
	            if (length > 4) {
	                this.provider4 = providers[4];
	                this.keyId4 = providers[4].key.id;
	            }
	            if (length > 5) {
	                this.provider5 = providers[5];
	                this.keyId5 = providers[5].key.id;
	            }
	            if (length > 6) {
	                this.provider6 = providers[6];
	                this.keyId6 = providers[6].key.id;
	            }
	            if (length > 7) {
	                this.provider7 = providers[7];
	                this.keyId7 = providers[7].key.id;
	            }
	            if (length > 8) {
	                this.provider8 = providers[8];
	                this.keyId8 = providers[8].key.id;
	            }
	            if (length > 9) {
	                this.provider9 = providers[9];
	                this.keyId9 = providers[9].key.id;
	            }
	        }
	        ReflectiveProtoInjectorInlineStrategy.prototype.getProviderAtIndex = function (index) {
	            if (index == 0)
	                return this.provider0;
	            if (index == 1)
	                return this.provider1;
	            if (index == 2)
	                return this.provider2;
	            if (index == 3)
	                return this.provider3;
	            if (index == 4)
	                return this.provider4;
	            if (index == 5)
	                return this.provider5;
	            if (index == 6)
	                return this.provider6;
	            if (index == 7)
	                return this.provider7;
	            if (index == 8)
	                return this.provider8;
	            if (index == 9)
	                return this.provider9;
	            throw new OutOfBoundsError(index);
	        };
	        ReflectiveProtoInjectorInlineStrategy.prototype.createInjectorStrategy = function (injector) {
	            return new ReflectiveInjectorInlineStrategy(injector, this);
	        };
	        return ReflectiveProtoInjectorInlineStrategy;
	    }());
	    var ReflectiveProtoInjectorDynamicStrategy = (function () {
	        function ReflectiveProtoInjectorDynamicStrategy(protoInj, providers) {
	            this.providers = providers;
	            var len = providers.length;
	            this.keyIds = new Array(len);
	            for (var i = 0; i < len; i++) {
	                this.keyIds[i] = providers[i].key.id;
	            }
	        }
	        ReflectiveProtoInjectorDynamicStrategy.prototype.getProviderAtIndex = function (index) {
	            if (index < 0 || index >= this.providers.length) {
	                throw new OutOfBoundsError(index);
	            }
	            return this.providers[index];
	        };
	        ReflectiveProtoInjectorDynamicStrategy.prototype.createInjectorStrategy = function (ei) {
	            return new ReflectiveInjectorDynamicStrategy(this, ei);
	        };
	        return ReflectiveProtoInjectorDynamicStrategy;
	    }());
	    var ReflectiveProtoInjector = (function () {
	        function ReflectiveProtoInjector(providers) {
	            this.numberOfProviders = providers.length;
	            this._strategy = providers.length > _MAX_CONSTRUCTION_COUNTER ?
	                new ReflectiveProtoInjectorDynamicStrategy(this, providers) :
	                new ReflectiveProtoInjectorInlineStrategy(this, providers);
	        }
	        ReflectiveProtoInjector.fromResolvedProviders = function (providers) {
	            return new ReflectiveProtoInjector(providers);
	        };
	        ReflectiveProtoInjector.prototype.getProviderAtIndex = function (index) {
	            return this._strategy.getProviderAtIndex(index);
	        };
	        return ReflectiveProtoInjector;
	    }());
	    var ReflectiveInjectorInlineStrategy = (function () {
	        function ReflectiveInjectorInlineStrategy(injector, protoStrategy) {
	            this.injector = injector;
	            this.protoStrategy = protoStrategy;
	            this.obj0 = UNDEFINED;
	            this.obj1 = UNDEFINED;
	            this.obj2 = UNDEFINED;
	            this.obj3 = UNDEFINED;
	            this.obj4 = UNDEFINED;
	            this.obj5 = UNDEFINED;
	            this.obj6 = UNDEFINED;
	            this.obj7 = UNDEFINED;
	            this.obj8 = UNDEFINED;
	            this.obj9 = UNDEFINED;
	        }
	        ReflectiveInjectorInlineStrategy.prototype.resetConstructionCounter = function () { this.injector._constructionCounter = 0; };
	        ReflectiveInjectorInlineStrategy.prototype.instantiateProvider = function (provider) {
	            return this.injector._new(provider);
	        };
	        ReflectiveInjectorInlineStrategy.prototype.getObjByKeyId = function (keyId) {
	            var p = this.protoStrategy;
	            var inj = this.injector;
	            if (p.keyId0 === keyId) {
	                if (this.obj0 === UNDEFINED) {
	                    this.obj0 = inj._new(p.provider0);
	                }
	                return this.obj0;
	            }
	            if (p.keyId1 === keyId) {
	                if (this.obj1 === UNDEFINED) {
	                    this.obj1 = inj._new(p.provider1);
	                }
	                return this.obj1;
	            }
	            if (p.keyId2 === keyId) {
	                if (this.obj2 === UNDEFINED) {
	                    this.obj2 = inj._new(p.provider2);
	                }
	                return this.obj2;
	            }
	            if (p.keyId3 === keyId) {
	                if (this.obj3 === UNDEFINED) {
	                    this.obj3 = inj._new(p.provider3);
	                }
	                return this.obj3;
	            }
	            if (p.keyId4 === keyId) {
	                if (this.obj4 === UNDEFINED) {
	                    this.obj4 = inj._new(p.provider4);
	                }
	                return this.obj4;
	            }
	            if (p.keyId5 === keyId) {
	                if (this.obj5 === UNDEFINED) {
	                    this.obj5 = inj._new(p.provider5);
	                }
	                return this.obj5;
	            }
	            if (p.keyId6 === keyId) {
	                if (this.obj6 === UNDEFINED) {
	                    this.obj6 = inj._new(p.provider6);
	                }
	                return this.obj6;
	            }
	            if (p.keyId7 === keyId) {
	                if (this.obj7 === UNDEFINED) {
	                    this.obj7 = inj._new(p.provider7);
	                }
	                return this.obj7;
	            }
	            if (p.keyId8 === keyId) {
	                if (this.obj8 === UNDEFINED) {
	                    this.obj8 = inj._new(p.provider8);
	                }
	                return this.obj8;
	            }
	            if (p.keyId9 === keyId) {
	                if (this.obj9 === UNDEFINED) {
	                    this.obj9 = inj._new(p.provider9);
	                }
	                return this.obj9;
	            }
	            return UNDEFINED;
	        };
	        ReflectiveInjectorInlineStrategy.prototype.getObjAtIndex = function (index) {
	            if (index == 0)
	                return this.obj0;
	            if (index == 1)
	                return this.obj1;
	            if (index == 2)
	                return this.obj2;
	            if (index == 3)
	                return this.obj3;
	            if (index == 4)
	                return this.obj4;
	            if (index == 5)
	                return this.obj5;
	            if (index == 6)
	                return this.obj6;
	            if (index == 7)
	                return this.obj7;
	            if (index == 8)
	                return this.obj8;
	            if (index == 9)
	                return this.obj9;
	            throw new OutOfBoundsError(index);
	        };
	        ReflectiveInjectorInlineStrategy.prototype.getMaxNumberOfObjects = function () { return _MAX_CONSTRUCTION_COUNTER; };
	        return ReflectiveInjectorInlineStrategy;
	    }());
	    var ReflectiveInjectorDynamicStrategy = (function () {
	        function ReflectiveInjectorDynamicStrategy(protoStrategy, injector) {
	            this.protoStrategy = protoStrategy;
	            this.injector = injector;
	            this.objs = new Array(protoStrategy.providers.length).fill(UNDEFINED);
	        }
	        ReflectiveInjectorDynamicStrategy.prototype.resetConstructionCounter = function () { this.injector._constructionCounter = 0; };
	        ReflectiveInjectorDynamicStrategy.prototype.instantiateProvider = function (provider) {
	            return this.injector._new(provider);
	        };
	        ReflectiveInjectorDynamicStrategy.prototype.getObjByKeyId = function (keyId) {
	            var p = this.protoStrategy;
	            for (var i = 0; i < p.keyIds.length; i++) {
	                if (p.keyIds[i] === keyId) {
	                    if (this.objs[i] === UNDEFINED) {
	                        this.objs[i] = this.injector._new(p.providers[i]);
	                    }
	                    return this.objs[i];
	                }
	            }
	            return UNDEFINED;
	        };
	        ReflectiveInjectorDynamicStrategy.prototype.getObjAtIndex = function (index) {
	            if (index < 0 || index >= this.objs.length) {
	                throw new OutOfBoundsError(index);
	            }
	            return this.objs[index];
	        };
	        ReflectiveInjectorDynamicStrategy.prototype.getMaxNumberOfObjects = function () { return this.objs.length; };
	        return ReflectiveInjectorDynamicStrategy;
	    }());
	    /**
	     * A ReflectiveDependency injection container used for instantiating objects and resolving
	     * dependencies.
	     *
	     * An `Injector` is a replacement for a `new` operator, which can automatically resolve the
	     * constructor dependencies.
	     *
	     * In typical use, application code asks for the dependencies in the constructor and they are
	     * resolved by the `Injector`.
	     *
	     * ### Example ([live demo](http://plnkr.co/edit/jzjec0?p=preview))
	     *
	     * The following example creates an `Injector` configured to create `Engine` and `Car`.
	     *
	     * ```typescript
	     * @Injectable()
	     * class Engine {
	     * }
	     *
	     * @Injectable()
	     * class Car {
	     *   constructor(public engine:Engine) {}
	     * }
	     *
	     * var injector = ReflectiveInjector.resolveAndCreate([Car, Engine]);
	     * var car = injector.get(Car);
	     * expect(car instanceof Car).toBe(true);
	     * expect(car.engine instanceof Engine).toBe(true);
	     * ```
	     *
	     * Notice, we don't use the `new` operator because we explicitly want to have the `Injector`
	     * resolve all of the object's dependencies automatically.
	     *
	     * @stable
	     */
	    var ReflectiveInjector = (function () {
	        function ReflectiveInjector() {
	        }
	        /**
	         * Turns an array of provider definitions into an array of resolved providers.
	         *
	         * A resolution is a process of flattening multiple nested arrays and converting individual
	         * providers into an array of {@link ResolvedReflectiveProvider}s.
	         *
	         * ### Example ([live demo](http://plnkr.co/edit/AiXTHi?p=preview))
	         *
	         * ```typescript
	         * @Injectable()
	         * class Engine {
	         * }
	         *
	         * @Injectable()
	         * class Car {
	         *   constructor(public engine:Engine) {}
	         * }
	         *
	         * var providers = ReflectiveInjector.resolve([Car, [[Engine]]]);
	         *
	         * expect(providers.length).toEqual(2);
	         *
	         * expect(providers[0] instanceof ResolvedReflectiveProvider).toBe(true);
	         * expect(providers[0].key.displayName).toBe("Car");
	         * expect(providers[0].dependencies.length).toEqual(1);
	         * expect(providers[0].factory).toBeDefined();
	         *
	         * expect(providers[1].key.displayName).toBe("Engine");
	         * });
	         * ```
	         *
	         * See {@link ReflectiveInjector#fromResolvedProviders} for more info.
	         */
	        ReflectiveInjector.resolve = function (providers) {
	            return resolveReflectiveProviders(providers);
	        };
	        /**
	         * Resolves an array of providers and creates an injector from those providers.
	         *
	         * The passed-in providers can be an array of `Type`, {@link Provider},
	         * or a recursive array of more providers.
	         *
	         * ### Example ([live demo](http://plnkr.co/edit/ePOccA?p=preview))
	         *
	         * ```typescript
	         * @Injectable()
	         * class Engine {
	         * }
	         *
	         * @Injectable()
	         * class Car {
	         *   constructor(public engine:Engine) {}
	         * }
	         *
	         * var injector = ReflectiveInjector.resolveAndCreate([Car, Engine]);
	         * expect(injector.get(Car) instanceof Car).toBe(true);
	         * ```
	         *
	         * This function is slower than the corresponding `fromResolvedProviders`
	         * because it needs to resolve the passed-in providers first.
	         * See {@link Injector#resolve} and {@link Injector#fromResolvedProviders}.
	         */
	        ReflectiveInjector.resolveAndCreate = function (providers, parent) {
	            if (parent === void 0) { parent = null; }
	            var ResolvedReflectiveProviders = ReflectiveInjector.resolve(providers);
	            return ReflectiveInjector.fromResolvedProviders(ResolvedReflectiveProviders, parent);
	        };
	        /**
	         * Creates an injector from previously resolved providers.
	         *
	         * This API is the recommended way to construct injectors in performance-sensitive parts.
	         *
	         * ### Example ([live demo](http://plnkr.co/edit/KrSMci?p=preview))
	         *
	         * ```typescript
	         * @Injectable()
	         * class Engine {
	         * }
	         *
	         * @Injectable()
	         * class Car {
	         *   constructor(public engine:Engine) {}
	         * }
	         *
	         * var providers = ReflectiveInjector.resolve([Car, Engine]);
	         * var injector = ReflectiveInjector.fromResolvedProviders(providers);
	         * expect(injector.get(Car) instanceof Car).toBe(true);
	         * ```
	         * @experimental
	         */
	        ReflectiveInjector.fromResolvedProviders = function (providers, parent) {
	            if (parent === void 0) { parent = null; }
	            return new ReflectiveInjector_(ReflectiveProtoInjector.fromResolvedProviders(providers), parent);
	        };
	        Object.defineProperty(ReflectiveInjector.prototype, "parent", {
	            /**
	             * Parent of this injector.
	             *
	             * <!-- TODO: Add a link to the section of the user guide talking about hierarchical injection.
	             * -->
	             *
	             * ### Example ([live demo](http://plnkr.co/edit/eosMGo?p=preview))
	             *
	             * ```typescript
	             * var parent = ReflectiveInjector.resolveAndCreate([]);
	             * var child = parent.resolveAndCreateChild([]);
	             * expect(child.parent).toBe(parent);
	             * ```
	             */
	            get: function () { return unimplemented(); },
	            enumerable: true,
	            configurable: true
	        });
	        /**
	         * Resolves an array of providers and creates a child injector from those providers.
	         *
	         * <!-- TODO: Add a link to the section of the user guide talking about hierarchical injection.
	         * -->
	         *
	         * The passed-in providers can be an array of `Type`, {@link Provider},
	         * or a recursive array of more providers.
	         *
	         * ### Example ([live demo](http://plnkr.co/edit/opB3T4?p=preview))
	         *
	         * ```typescript
	         * class ParentProvider {}
	         * class ChildProvider {}
	         *
	         * var parent = ReflectiveInjector.resolveAndCreate([ParentProvider]);
	         * var child = parent.resolveAndCreateChild([ChildProvider]);
	         *
	         * expect(child.get(ParentProvider) instanceof ParentProvider).toBe(true);
	         * expect(child.get(ChildProvider) instanceof ChildProvider).toBe(true);
	         * expect(child.get(ParentProvider)).toBe(parent.get(ParentProvider));
	         * ```
	         *
	         * This function is slower than the corresponding `createChildFromResolved`
	         * because it needs to resolve the passed-in providers first.
	         * See {@link Injector#resolve} and {@link Injector#createChildFromResolved}.
	         */
	        ReflectiveInjector.prototype.resolveAndCreateChild = function (providers) { return unimplemented(); };
	        /**
	         * Creates a child injector from previously resolved providers.
	         *
	         * <!-- TODO: Add a link to the section of the user guide talking about hierarchical injection.
	         * -->
	         *
	         * This API is the recommended way to construct injectors in performance-sensitive parts.
	         *
	         * ### Example ([live demo](http://plnkr.co/edit/VhyfjN?p=preview))
	         *
	         * ```typescript
	         * class ParentProvider {}
	         * class ChildProvider {}
	         *
	         * var parentProviders = ReflectiveInjector.resolve([ParentProvider]);
	         * var childProviders = ReflectiveInjector.resolve([ChildProvider]);
	         *
	         * var parent = ReflectiveInjector.fromResolvedProviders(parentProviders);
	         * var child = parent.createChildFromResolved(childProviders);
	         *
	         * expect(child.get(ParentProvider) instanceof ParentProvider).toBe(true);
	         * expect(child.get(ChildProvider) instanceof ChildProvider).toBe(true);
	         * expect(child.get(ParentProvider)).toBe(parent.get(ParentProvider));
	         * ```
	         */
	        ReflectiveInjector.prototype.createChildFromResolved = function (providers) {
	            return unimplemented();
	        };
	        /**
	         * Resolves a provider and instantiates an object in the context of the injector.
	         *
	         * The created object does not get cached by the injector.
	         *
	         * ### Example ([live demo](http://plnkr.co/edit/yvVXoB?p=preview))
	         *
	         * ```typescript
	         * @Injectable()
	         * class Engine {
	         * }
	         *
	         * @Injectable()
	         * class Car {
	         *   constructor(public engine:Engine) {}
	         * }
	         *
	         * var injector = ReflectiveInjector.resolveAndCreate([Engine]);
	         *
	         * var car = injector.resolveAndInstantiate(Car);
	         * expect(car.engine).toBe(injector.get(Engine));
	         * expect(car).not.toBe(injector.resolveAndInstantiate(Car));
	         * ```
	         */
	        ReflectiveInjector.prototype.resolveAndInstantiate = function (provider) { return unimplemented(); };
	        /**
	         * Instantiates an object using a resolved provider in the context of the injector.
	         *
	         * The created object does not get cached by the injector.
	         *
	         * ### Example ([live demo](http://plnkr.co/edit/ptCImQ?p=preview))
	         *
	         * ```typescript
	         * @Injectable()
	         * class Engine {
	         * }
	         *
	         * @Injectable()
	         * class Car {
	         *   constructor(public engine:Engine) {}
	         * }
	         *
	         * var injector = ReflectiveInjector.resolveAndCreate([Engine]);
	         * var carProvider = ReflectiveInjector.resolve([Car])[0];
	         * var car = injector.instantiateResolved(carProvider);
	         * expect(car.engine).toBe(injector.get(Engine));
	         * expect(car).not.toBe(injector.instantiateResolved(carProvider));
	         * ```
	         */
	        ReflectiveInjector.prototype.instantiateResolved = function (provider) { return unimplemented(); };
	        return ReflectiveInjector;
	    }());
	    var ReflectiveInjector_ = (function () {
	        /**
	         * Private
	         */
	        function ReflectiveInjector_(_proto /* ProtoInjector */, _parent) {
	            if (_parent === void 0) { _parent = null; }
	            /** @internal */
	            this._constructionCounter = 0;
	            this._proto = _proto;
	            this._parent = _parent;
	            this._strategy = _proto._strategy.createInjectorStrategy(this);
	        }
	        ReflectiveInjector_.prototype.get = function (token, notFoundValue) {
	            if (notFoundValue === void 0) { notFoundValue = THROW_IF_NOT_FOUND; }
	            return this._getByKey(ReflectiveKey.get(token), null, null, notFoundValue);
	        };
	        ReflectiveInjector_.prototype.getAt = function (index) { return this._strategy.getObjAtIndex(index); };
	        Object.defineProperty(ReflectiveInjector_.prototype, "parent", {
	            get: function () { return this._parent; },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(ReflectiveInjector_.prototype, "internalStrategy", {
	            /**
	             * @internal
	             * Internal. Do not use.
	             * We return `any` not to export the InjectorStrategy type.
	             */
	            get: function () { return this._strategy; },
	            enumerable: true,
	            configurable: true
	        });
	        ReflectiveInjector_.prototype.resolveAndCreateChild = function (providers) {
	            var ResolvedReflectiveProviders = ReflectiveInjector.resolve(providers);
	            return this.createChildFromResolved(ResolvedReflectiveProviders);
	        };
	        ReflectiveInjector_.prototype.createChildFromResolved = function (providers) {
	            var proto = new ReflectiveProtoInjector(providers);
	            var inj = new ReflectiveInjector_(proto);
	            inj._parent = this;
	            return inj;
	        };
	        ReflectiveInjector_.prototype.resolveAndInstantiate = function (provider) {
	            return this.instantiateResolved(ReflectiveInjector.resolve([provider])[0]);
	        };
	        ReflectiveInjector_.prototype.instantiateResolved = function (provider) {
	            return this._instantiateProvider(provider);
	        };
	        /** @internal */
	        ReflectiveInjector_.prototype._new = function (provider) {
	            if (this._constructionCounter++ > this._strategy.getMaxNumberOfObjects()) {
	                throw new CyclicDependencyError(this, provider.key);
	            }
	            return this._instantiateProvider(provider);
	        };
	        ReflectiveInjector_.prototype._instantiateProvider = function (provider) {
	            if (provider.multiProvider) {
	                var res = new Array(provider.resolvedFactories.length);
	                for (var i = 0; i < provider.resolvedFactories.length; ++i) {
	                    res[i] = this._instantiate(provider, provider.resolvedFactories[i]);
	                }
	                return res;
	            }
	            else {
	                return this._instantiate(provider, provider.resolvedFactories[0]);
	            }
	        };
	        ReflectiveInjector_.prototype._instantiate = function (provider, ResolvedReflectiveFactory) {
	            var factory = ResolvedReflectiveFactory.factory;
	            var deps = ResolvedReflectiveFactory.dependencies;
	            var length = deps.length;
	            var d0;
	            var d1;
	            var d2;
	            var d3;
	            var d4;
	            var d5;
	            var d6;
	            var d7;
	            var d8;
	            var d9;
	            var d10;
	            var d11;
	            var d12;
	            var d13;
	            var d14;
	            var d15;
	            var d16;
	            var d17;
	            var d18;
	            var d19;
	            try {
	                d0 = length > 0 ? this._getByReflectiveDependency(provider, deps[0]) : null;
	                d1 = length > 1 ? this._getByReflectiveDependency(provider, deps[1]) : null;
	                d2 = length > 2 ? this._getByReflectiveDependency(provider, deps[2]) : null;
	                d3 = length > 3 ? this._getByReflectiveDependency(provider, deps[3]) : null;
	                d4 = length > 4 ? this._getByReflectiveDependency(provider, deps[4]) : null;
	                d5 = length > 5 ? this._getByReflectiveDependency(provider, deps[5]) : null;
	                d6 = length > 6 ? this._getByReflectiveDependency(provider, deps[6]) : null;
	                d7 = length > 7 ? this._getByReflectiveDependency(provider, deps[7]) : null;
	                d8 = length > 8 ? this._getByReflectiveDependency(provider, deps[8]) : null;
	                d9 = length > 9 ? this._getByReflectiveDependency(provider, deps[9]) : null;
	                d10 = length > 10 ? this._getByReflectiveDependency(provider, deps[10]) : null;
	                d11 = length > 11 ? this._getByReflectiveDependency(provider, deps[11]) : null;
	                d12 = length > 12 ? this._getByReflectiveDependency(provider, deps[12]) : null;
	                d13 = length > 13 ? this._getByReflectiveDependency(provider, deps[13]) : null;
	                d14 = length > 14 ? this._getByReflectiveDependency(provider, deps[14]) : null;
	                d15 = length > 15 ? this._getByReflectiveDependency(provider, deps[15]) : null;
	                d16 = length > 16 ? this._getByReflectiveDependency(provider, deps[16]) : null;
	                d17 = length > 17 ? this._getByReflectiveDependency(provider, deps[17]) : null;
	                d18 = length > 18 ? this._getByReflectiveDependency(provider, deps[18]) : null;
	                d19 = length > 19 ? this._getByReflectiveDependency(provider, deps[19]) : null;
	            }
	            catch (e) {
	                if (e instanceof AbstractProviderError || e instanceof InstantiationError) {
	                    e.addKey(this, provider.key);
	                }
	                throw e;
	            }
	            var obj;
	            try {
	                switch (length) {
	                    case 0:
	                        obj = factory();
	                        break;
	                    case 1:
	                        obj = factory(d0);
	                        break;
	                    case 2:
	                        obj = factory(d0, d1);
	                        break;
	                    case 3:
	                        obj = factory(d0, d1, d2);
	                        break;
	                    case 4:
	                        obj = factory(d0, d1, d2, d3);
	                        break;
	                    case 5:
	                        obj = factory(d0, d1, d2, d3, d4);
	                        break;
	                    case 6:
	                        obj = factory(d0, d1, d2, d3, d4, d5);
	                        break;
	                    case 7:
	                        obj = factory(d0, d1, d2, d3, d4, d5, d6);
	                        break;
	                    case 8:
	                        obj = factory(d0, d1, d2, d3, d4, d5, d6, d7);
	                        break;
	                    case 9:
	                        obj = factory(d0, d1, d2, d3, d4, d5, d6, d7, d8);
	                        break;
	                    case 10:
	                        obj = factory(d0, d1, d2, d3, d4, d5, d6, d7, d8, d9);
	                        break;
	                    case 11:
	                        obj = factory(d0, d1, d2, d3, d4, d5, d6, d7, d8, d9, d10);
	                        break;
	                    case 12:
	                        obj = factory(d0, d1, d2, d3, d4, d5, d6, d7, d8, d9, d10, d11);
	                        break;
	                    case 13:
	                        obj = factory(d0, d1, d2, d3, d4, d5, d6, d7, d8, d9, d10, d11, d12);
	                        break;
	                    case 14:
	                        obj = factory(d0, d1, d2, d3, d4, d5, d6, d7, d8, d9, d10, d11, d12, d13);
	                        break;
	                    case 15:
	                        obj = factory(d0, d1, d2, d3, d4, d5, d6, d7, d8, d9, d10, d11, d12, d13, d14);
	                        break;
	                    case 16:
	                        obj = factory(d0, d1, d2, d3, d4, d5, d6, d7, d8, d9, d10, d11, d12, d13, d14, d15);
	                        break;
	                    case 17:
	                        obj = factory(d0, d1, d2, d3, d4, d5, d6, d7, d8, d9, d10, d11, d12, d13, d14, d15, d16);
	                        break;
	                    case 18:
	                        obj = factory(d0, d1, d2, d3, d4, d5, d6, d7, d8, d9, d10, d11, d12, d13, d14, d15, d16, d17);
	                        break;
	                    case 19:
	                        obj = factory(d0, d1, d2, d3, d4, d5, d6, d7, d8, d9, d10, d11, d12, d13, d14, d15, d16, d17, d18);
	                        break;
	                    case 20:
	                        obj = factory(d0, d1, d2, d3, d4, d5, d6, d7, d8, d9, d10, d11, d12, d13, d14, d15, d16, d17, d18, d19);
	                        break;
	                    default:
	                        throw new Error("Cannot instantiate '" + provider.key.displayName + "' because it has more than 20 dependencies");
	                }
	            }
	            catch (e) {
	                throw new InstantiationError(this, e, e.stack, provider.key);
	            }
	            return obj;
	        };
	        ReflectiveInjector_.prototype._getByReflectiveDependency = function (provider, dep) {
	            return this._getByKey(dep.key, dep.lowerBoundVisibility, dep.upperBoundVisibility, dep.optional ? null : THROW_IF_NOT_FOUND);
	        };
	        ReflectiveInjector_.prototype._getByKey = function (key, lowerBoundVisibility, upperBoundVisibility, notFoundValue) {
	            if (key === INJECTOR_KEY) {
	                return this;
	            }
	            if (upperBoundVisibility instanceof Self) {
	                return this._getByKeySelf(key, notFoundValue);
	            }
	            else {
	                return this._getByKeyDefault(key, notFoundValue, lowerBoundVisibility);
	            }
	        };
	        /** @internal */
	        ReflectiveInjector_.prototype._throwOrNull = function (key, notFoundValue) {
	            if (notFoundValue !== THROW_IF_NOT_FOUND) {
	                return notFoundValue;
	            }
	            else {
	                throw new NoProviderError(this, key);
	            }
	        };
	        /** @internal */
	        ReflectiveInjector_.prototype._getByKeySelf = function (key, notFoundValue) {
	            var obj = this._strategy.getObjByKeyId(key.id);
	            return (obj !== UNDEFINED) ? obj : this._throwOrNull(key, notFoundValue);
	        };
	        /** @internal */
	        ReflectiveInjector_.prototype._getByKeyDefault = function (key, notFoundValue, lowerBoundVisibility) {
	            var inj;
	            if (lowerBoundVisibility instanceof SkipSelf) {
	                inj = this._parent;
	            }
	            else {
	                inj = this;
	            }
	            while (inj instanceof ReflectiveInjector_) {
	                var inj_ = inj;
	                var obj = inj_._strategy.getObjByKeyId(key.id);
	                if (obj !== UNDEFINED)
	                    return obj;
	                inj = inj_._parent;
	            }
	            if (inj !== null) {
	                return inj.get(key.token, notFoundValue);
	            }
	            else {
	                return this._throwOrNull(key, notFoundValue);
	            }
	        };
	        Object.defineProperty(ReflectiveInjector_.prototype, "displayName", {
	            get: function () {
	                var providers = _mapProviders(this, function (b) { return ' "' + b.key.displayName + '" '; })
	                    .join(', ');
	                return "ReflectiveInjector(providers: [" + providers + "])";
	            },
	            enumerable: true,
	            configurable: true
	        });
	        ReflectiveInjector_.prototype.toString = function () { return this.displayName; };
	        return ReflectiveInjector_;
	    }());
	    var INJECTOR_KEY = ReflectiveKey.get(Injector);
	    function _mapProviders(injector, fn) {
	        var res = new Array(injector._proto.numberOfProviders);
	        for (var i = 0; i < injector._proto.numberOfProviders; ++i) {
	            res[i] = fn(injector._proto.getProviderAtIndex(i));
	        }
	        return res;
	    }

	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    /**
	     * @whatItDoes Provides a hook for centralized exception handling.
	     *
	     * @description
	     *
	     * The default implementation of `ErrorHandler` prints error messages to the `console`. To
	     * intercept error handling, write a custom exception handler that replaces this default as
	     * appropriate for your app.
	     *
	     * ### Example
	     *
	     * ```
	     * class MyErrorHandler implements ErrorHandler {
	     *   handleError(error) {
	     *     // do something with the exception
	     *   }
	     * }
	     *
	     * @NgModule({
	     *   providers: [{provide: ErrorHandler, useClass: MyErrorHandler}]
	     * })
	     * class MyModule {}
	     * ```
	     *
	     * @stable
	     */
	    var ErrorHandler = (function () {
	        function ErrorHandler(rethrowError) {
	            if (rethrowError === void 0) { rethrowError = true; }
	            /**
	             * @internal
	             */
	            this._console = console;
	            this.rethrowError = rethrowError;
	        }
	        ErrorHandler.prototype.handleError = function (error) {
	            var originalError = this._findOriginalError(error);
	            var originalStack = this._findOriginalStack(error);
	            var context = this._findContext(error);
	            this._console.error("EXCEPTION: " + this._extractMessage(error));
	            if (originalError) {
	                this._console.error("ORIGINAL EXCEPTION: " + this._extractMessage(originalError));
	            }
	            if (originalStack) {
	                this._console.error('ORIGINAL STACKTRACE:');
	                this._console.error(originalStack);
	            }
	            if (context) {
	                this._console.error('ERROR CONTEXT:');
	                this._console.error(context);
	            }
	            // We rethrow exceptions, so operations like 'bootstrap' will result in an error
	            // when an error happens. If we do not rethrow, bootstrap will always succeed.
	            if (this.rethrowError)
	                throw error;
	        };
	        /** @internal */
	        ErrorHandler.prototype._extractMessage = function (error) {
	            return error instanceof Error ? error.message : error.toString();
	        };
	        /** @internal */
	        ErrorHandler.prototype._findContext = function (error) {
	            if (error) {
	                return error.context ? error.context :
	                    this._findContext(error.originalError);
	            }
	            return null;
	        };
	        /** @internal */
	        ErrorHandler.prototype._findOriginalError = function (error) {
	            var e = error.originalError;
	            while (e && e.originalError) {
	                e = e.originalError;
	            }
	            return e;
	        };
	        /** @internal */
	        ErrorHandler.prototype._findOriginalStack = function (error) {
	            if (!(error instanceof Error))
	                return null;
	            var e = error;
	            var stack = e.stack;
	            while (e instanceof Error && e.originalError) {
	                e = e.originalError;
	                if (e instanceof Error && e.stack) {
	                    stack = e.stack;
	                }
	            }
	            return stack;
	        };
	        return ErrorHandler;
	    }());

	    /**
	     * Wraps Javascript Objects
	     */
	    var StringMapWrapper = (function () {
	        function StringMapWrapper() {
	        }
	        StringMapWrapper.merge = function (m1, m2) {
	            var m = {};
	            for (var _i = 0, _a = Object.keys(m1); _i < _a.length; _i++) {
	                var k = _a[_i];
	                m[k] = m1[k];
	            }
	            for (var _b = 0, _c = Object.keys(m2); _b < _c.length; _b++) {
	                var k = _c[_b];
	                m[k] = m2[k];
	            }
	            return m;
	        };
	        StringMapWrapper.equals = function (m1, m2) {
	            var k1 = Object.keys(m1);
	            var k2 = Object.keys(m2);
	            if (k1.length != k2.length) {
	                return false;
	            }
	            for (var i = 0; i < k1.length; i++) {
	                var key = k1[i];
	                if (m1[key] !== m2[key]) {
	                    return false;
	                }
	            }
	            return true;
	        };
	        return StringMapWrapper;
	    }());
	    var ListWrapper = (function () {
	        function ListWrapper() {
	        }
	        ListWrapper.removeAll = function (list, items) {
	            for (var i = 0; i < items.length; ++i) {
	                var index = list.indexOf(items[i]);
	                if (index > -1) {
	                    list.splice(index, 1);
	                }
	            }
	        };
	        ListWrapper.remove = function (list, el) {
	            var index = list.indexOf(el);
	            if (index > -1) {
	                list.splice(index, 1);
	                return true;
	            }
	            return false;
	        };
	        ListWrapper.equals = function (a, b) {
	            if (a.length != b.length)
	                return false;
	            for (var i = 0; i < a.length; ++i) {
	                if (a[i] !== b[i])
	                    return false;
	            }
	            return true;
	        };
	        ListWrapper.flatten = function (list) {
	            return list.reduce(function (flat, item) {
	                var flatItem = Array.isArray(item) ? ListWrapper.flatten(item) : item;
	                return flat.concat(flatItem);
	            }, []);
	        };
	        return ListWrapper;
	    }());
	    function isListLikeIterable(obj) {
	        if (!isJsObject(obj))
	            return false;
	        return Array.isArray(obj) ||
	            (!(obj instanceof Map) &&
	                getSymbolIterator() in obj); // JS Iterable have a Symbol.iterator prop
	    }
	    function areIterablesEqual(a, b, comparator) {
	        var iterator1 = a[getSymbolIterator()]();
	        var iterator2 = b[getSymbolIterator()]();
	        while (true) {
	            var item1 = iterator1.next();
	            var item2 = iterator2.next();
	            if (item1.done && item2.done)
	                return true;
	            if (item1.done || item2.done)
	                return false;
	            if (!comparator(item1.value, item2.value))
	                return false;
	        }
	    }
	    function iterateListLike(obj, fn) {
	        if (Array.isArray(obj)) {
	            for (var i = 0; i < obj.length; i++) {
	                fn(obj[i]);
	            }
	        }
	        else {
	            var iterator = obj[getSymbolIterator()]();
	            var item = void 0;
	            while (!((item = iterator.next()).done)) {
	                fn(item.value);
	            }
	        }
	    }

	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    function isPromise(obj) {
	        // allow any Promise/A+ compliant thenable.
	        // It's up to the caller to ensure that obj.then conforms to the spec
	        return !!obj && typeof obj.then === 'function';
	    }

	    /**
	     * A function that will be executed when an application is initialized.
	     * @experimental
	     */
	    var APP_INITIALIZER = new OpaqueToken('Application Initializer');
	    /**
	     * A class that reflects the state of running {@link APP_INITIALIZER}s.
	     *
	     * @experimental
	     */
	    var ApplicationInitStatus = (function () {
	        function ApplicationInitStatus(appInits) {
	            var _this = this;
	            this._done = false;
	            var asyncInitPromises = [];
	            if (appInits) {
	                for (var i = 0; i < appInits.length; i++) {
	                    var initResult = appInits[i]();
	                    if (isPromise(initResult)) {
	                        asyncInitPromises.push(initResult);
	                    }
	                }
	            }
	            this._donePromise = Promise.all(asyncInitPromises).then(function () { _this._done = true; });
	            if (asyncInitPromises.length === 0) {
	                this._done = true;
	            }
	        }
	        Object.defineProperty(ApplicationInitStatus.prototype, "done", {
	            get: function () { return this._done; },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(ApplicationInitStatus.prototype, "donePromise", {
	            get: function () { return this._donePromise; },
	            enumerable: true,
	            configurable: true
	        });
	        ApplicationInitStatus.decorators = [
	            { type: Injectable },
	        ];
	        /** @nocollapse */
	        ApplicationInitStatus.ctorParameters = [
	            { type: Array, decorators: [{ type: Inject, args: [APP_INITIALIZER,] }, { type: Optional },] },
	        ];
	        return ApplicationInitStatus;
	    }());

	    /**
	     * A DI Token representing a unique string id assigned to the application by Angular and used
	     * primarily for prefixing application attributes and CSS styles when
	     * {@link ViewEncapsulation#Emulated} is being used.
	     *
	     * If you need to avoid randomly generated value to be used as an application id, you can provide
	     * a custom value via a DI provider <!-- TODO: provider --> configuring the root {@link Injector}
	     * using this token.
	     * @experimental
	     */
	    var APP_ID = new OpaqueToken('AppId');
	    function _appIdRandomProviderFactory() {
	        return "" + _randomChar() + _randomChar() + _randomChar();
	    }
	    /**
	     * Providers that will generate a random APP_ID_TOKEN.
	     * @experimental
	     */
	    var APP_ID_RANDOM_PROVIDER = {
	        provide: APP_ID,
	        useFactory: _appIdRandomProviderFactory,
	        deps: [],
	    };
	    function _randomChar() {
	        return String.fromCharCode(97 + Math.floor(Math.random() * 25));
	    }
	    /**
	     * A function that will be executed when a platform is initialized.
	     * @experimental
	     */
	    var PLATFORM_INITIALIZER = new OpaqueToken('Platform Initializer');
	    /**
	     * All callbacks provided via this token will be called for every component that is bootstrapped.
	     * Signature of the callback:
	     *
	     * `(componentRef: ComponentRef) => void`.
	     *
	     * @experimental
	     */
	    var APP_BOOTSTRAP_LISTENER = new OpaqueToken('appBootstrapListener');
	    /**
	     * A token which indicates the root directory of the application
	     * @experimental
	     */
	    var PACKAGE_ROOT_URL = new OpaqueToken('Application Packages Root URL');

	    var Console = (function () {
	        function Console() {
	        }
	        Console.prototype.log = function (message) { print(message); };
	        // Note: for reporting errors use `DOM.logError()` as it is platform specific
	        Console.prototype.warn = function (message) { warn(message); };
	        Console.decorators = [
	            { type: Injectable },
	        ];
	        /** @nocollapse */
	        Console.ctorParameters = [];
	        return Console;
	    }());

	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    var __extends$4 = (this && this.__extends) || function (d, b) {
	        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	    /**
	     * Indicates that a component is still being loaded in a synchronous compile.
	     *
	     * @stable
	     */
	    var ComponentStillLoadingError = (function (_super) {
	        __extends$4(ComponentStillLoadingError, _super);
	        function ComponentStillLoadingError(compType) {
	            _super.call(this, "Can't compile synchronously as " + stringify(compType) + " is still being loaded!");
	            this.compType = compType;
	        }
	        return ComponentStillLoadingError;
	    }(BaseError));
	    /**
	     * Combination of NgModuleFactory and ComponentFactorys.
	     *
	     * @experimental
	     */
	    var ModuleWithComponentFactories = (function () {
	        function ModuleWithComponentFactories(ngModuleFactory, componentFactories) {
	            this.ngModuleFactory = ngModuleFactory;
	            this.componentFactories = componentFactories;
	        }
	        return ModuleWithComponentFactories;
	    }());
	    function _throwError() {
	        throw new Error("Runtime compiler is not loaded");
	    }
	    /**
	     * Low-level service for running the angular compiler during runtime
	     * to create {@link ComponentFactory}s, which
	     * can later be used to create and render a Component instance.
	     *
	     * Each `@NgModule` provides an own `Compiler` to its injector,
	     * that will use the directives/pipes of the ng module for compilation
	     * of components.
	     * @stable
	     */
	    var Compiler = (function () {
	        function Compiler() {
	        }
	        /**
	         * Compiles the given NgModule and all of its components. All templates of the components listed
	         * in `entryComponents`
	         * have to be inlined. Otherwise throws a {@link ComponentStillLoadingError}.
	         */
	        Compiler.prototype.compileModuleSync = function (moduleType) { throw _throwError(); };
	        /**
	         * Compiles the given NgModule and all of its components
	         */
	        Compiler.prototype.compileModuleAsync = function (moduleType) { throw _throwError(); };
	        /**
	         * Same as {@link compileModuleSync} but also creates ComponentFactories for all components.
	         */
	        Compiler.prototype.compileModuleAndAllComponentsSync = function (moduleType) {
	            throw _throwError();
	        };
	        /**
	         * Same as {@link compileModuleAsync} but also creates ComponentFactories for all components.
	         */
	        Compiler.prototype.compileModuleAndAllComponentsAsync = function (moduleType) {
	            throw _throwError();
	        };
	        /**
	         * Clears all caches.
	         */
	        Compiler.prototype.clearCache = function () { };
	        /**
	         * Clears the cache for the given component/ngModule.
	         */
	        Compiler.prototype.clearCacheFor = function (type) { };
	        return Compiler;
	    }());
	    /**
	     * Token to provide CompilerOptions in the platform injector.
	     *
	     * @experimental
	     */
	    var COMPILER_OPTIONS = new OpaqueToken('compilerOptions');
	    /**
	     * A factory for creating a Compiler
	     *
	     * @experimental
	     */
	    var CompilerFactory = (function () {
	        function CompilerFactory() {
	        }
	        return CompilerFactory;
	    }());

	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    /**
	     * A wrapper around a native element inside of a View.
	     *
	     * An `ElementRef` is backed by a render-specific element. In the browser, this is usually a DOM
	     * element.
	     *
	     * @security Permitting direct access to the DOM can make your application more vulnerable to
	     * XSS attacks. Carefully review any use of `ElementRef` in your code. For more detail, see the
	     * [Security Guide](http://g.co/ng/security).
	     *
	     * @stable
	     */
	    // Note: We don't expose things like `Injector`, `ViewContainer`, ... here,
	    // i.e. users have to ask for what they need. With that, we can build better analysis tools
	    // and could do better codegen in the future.
	    var ElementRef = (function () {
	        function ElementRef(nativeElement) {
	            this.nativeElement = nativeElement;
	        }
	        return ElementRef;
	    }());

	    var DefaultIterableDifferFactory = (function () {
	        function DefaultIterableDifferFactory() {
	        }
	        DefaultIterableDifferFactory.prototype.supports = function (obj) { return isListLikeIterable(obj); };
	        DefaultIterableDifferFactory.prototype.create = function (cdRef, trackByFn) {
	            return new DefaultIterableDiffer(trackByFn);
	        };
	        return DefaultIterableDifferFactory;
	    }());
	    var trackByIdentity = function (index, item) { return item; };
	    /**
	     * @stable
	     */
	    var DefaultIterableDiffer = (function () {
	        function DefaultIterableDiffer(_trackByFn) {
	            this._trackByFn = _trackByFn;
	            this._length = null;
	            this._collection = null;
	            // Keeps track of the used records at any point in time (during & across `_check()` calls)
	            this._linkedRecords = null;
	            // Keeps track of the removed records at any point in time during `_check()` calls.
	            this._unlinkedRecords = null;
	            this._previousItHead = null;
	            this._itHead = null;
	            this._itTail = null;
	            this._additionsHead = null;
	            this._additionsTail = null;
	            this._movesHead = null;
	            this._movesTail = null;
	            this._removalsHead = null;
	            this._removalsTail = null;
	            // Keeps track of records where custom track by is the same, but item identity has changed
	            this._identityChangesHead = null;
	            this._identityChangesTail = null;
	            this._trackByFn = this._trackByFn || trackByIdentity;
	        }
	        Object.defineProperty(DefaultIterableDiffer.prototype, "collection", {
	            get: function () { return this._collection; },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(DefaultIterableDiffer.prototype, "length", {
	            get: function () { return this._length; },
	            enumerable: true,
	            configurable: true
	        });
	        DefaultIterableDiffer.prototype.forEachItem = function (fn) {
	            var record;
	            for (record = this._itHead; record !== null; record = record._next) {
	                fn(record);
	            }
	        };
	        DefaultIterableDiffer.prototype.forEachOperation = function (fn) {
	            var nextIt = this._itHead;
	            var nextRemove = this._removalsHead;
	            var addRemoveOffset = 0;
	            var moveOffsets = null;
	            while (nextIt || nextRemove) {
	                // Figure out which is the next record to process
	                // Order: remove, add, move
	                var record = !nextRemove ||
	                    nextIt &&
	                        nextIt.currentIndex < getPreviousIndex(nextRemove, addRemoveOffset, moveOffsets) ?
	                    nextIt :
	                    nextRemove;
	                var adjPreviousIndex = getPreviousIndex(record, addRemoveOffset, moveOffsets);
	                var currentIndex = record.currentIndex;
	                // consume the item, and adjust the addRemoveOffset and update moveDistance if necessary
	                if (record === nextRemove) {
	                    addRemoveOffset--;
	                    nextRemove = nextRemove._nextRemoved;
	                }
	                else {
	                    nextIt = nextIt._next;
	                    if (record.previousIndex == null) {
	                        addRemoveOffset++;
	                    }
	                    else {
	                        // INVARIANT:  currentIndex < previousIndex
	                        if (!moveOffsets)
	                            moveOffsets = [];
	                        var localMovePreviousIndex = adjPreviousIndex - addRemoveOffset;
	                        var localCurrentIndex = currentIndex - addRemoveOffset;
	                        if (localMovePreviousIndex != localCurrentIndex) {
	                            for (var i = 0; i < localMovePreviousIndex; i++) {
	                                var offset = i < moveOffsets.length ? moveOffsets[i] : (moveOffsets[i] = 0);
	                                var index = offset + i;
	                                if (localCurrentIndex <= index && index < localMovePreviousIndex) {
	                                    moveOffsets[i] = offset + 1;
	                                }
	                            }
	                            var previousIndex = record.previousIndex;
	                            moveOffsets[previousIndex] = localCurrentIndex - localMovePreviousIndex;
	                        }
	                    }
	                }
	                if (adjPreviousIndex !== currentIndex) {
	                    fn(record, adjPreviousIndex, currentIndex);
	                }
	            }
	        };
	        DefaultIterableDiffer.prototype.forEachPreviousItem = function (fn) {
	            var record;
	            for (record = this._previousItHead; record !== null; record = record._nextPrevious) {
	                fn(record);
	            }
	        };
	        DefaultIterableDiffer.prototype.forEachAddedItem = function (fn) {
	            var record;
	            for (record = this._additionsHead; record !== null; record = record._nextAdded) {
	                fn(record);
	            }
	        };
	        DefaultIterableDiffer.prototype.forEachMovedItem = function (fn) {
	            var record;
	            for (record = this._movesHead; record !== null; record = record._nextMoved) {
	                fn(record);
	            }
	        };
	        DefaultIterableDiffer.prototype.forEachRemovedItem = function (fn) {
	            var record;
	            for (record = this._removalsHead; record !== null; record = record._nextRemoved) {
	                fn(record);
	            }
	        };
	        DefaultIterableDiffer.prototype.forEachIdentityChange = function (fn) {
	            var record;
	            for (record = this._identityChangesHead; record !== null; record = record._nextIdentityChange) {
	                fn(record);
	            }
	        };
	        DefaultIterableDiffer.prototype.diff = function (collection) {
	            if (isBlank(collection))
	                collection = [];
	            if (!isListLikeIterable(collection)) {
	                throw new Error("Error trying to diff '" + collection + "'");
	            }
	            if (this.check(collection)) {
	                return this;
	            }
	            else {
	                return null;
	            }
	        };
	        DefaultIterableDiffer.prototype.onDestroy = function () { };
	        // todo(vicb): optim for UnmodifiableListView (frozen arrays)
	        DefaultIterableDiffer.prototype.check = function (collection) {
	            var _this = this;
	            this._reset();
	            var record = this._itHead;
	            var mayBeDirty = false;
	            var index;
	            var item;
	            var itemTrackBy;
	            if (Array.isArray(collection)) {
	                var list = collection;
	                this._length = collection.length;
	                for (var index_1 = 0; index_1 < this._length; index_1++) {
	                    item = list[index_1];
	                    itemTrackBy = this._trackByFn(index_1, item);
	                    if (record === null || !looseIdentical(record.trackById, itemTrackBy)) {
	                        record = this._mismatch(record, item, itemTrackBy, index_1);
	                        mayBeDirty = true;
	                    }
	                    else {
	                        if (mayBeDirty) {
	                            // TODO(misko): can we limit this to duplicates only?
	                            record = this._verifyReinsertion(record, item, itemTrackBy, index_1);
	                        }
	                        if (!looseIdentical(record.item, item))
	                            this._addIdentityChange(record, item);
	                    }
	                    record = record._next;
	                }
	            }
	            else {
	                index = 0;
	                iterateListLike(collection, function (item /** TODO #9100 */) {
	                    itemTrackBy = _this._trackByFn(index, item);
	                    if (record === null || !looseIdentical(record.trackById, itemTrackBy)) {
	                        record = _this._mismatch(record, item, itemTrackBy, index);
	                        mayBeDirty = true;
	                    }
	                    else {
	                        if (mayBeDirty) {
	                            // TODO(misko): can we limit this to duplicates only?
	                            record = _this._verifyReinsertion(record, item, itemTrackBy, index);
	                        }
	                        if (!looseIdentical(record.item, item))
	                            _this._addIdentityChange(record, item);
	                    }
	                    record = record._next;
	                    index++;
	                });
	                this._length = index;
	            }
	            this._truncate(record);
	            this._collection = collection;
	            return this.isDirty;
	        };
	        Object.defineProperty(DefaultIterableDiffer.prototype, "isDirty", {
	            /* CollectionChanges is considered dirty if it has any additions, moves, removals, or identity
	             * changes.
	             */
	            get: function () {
	                return this._additionsHead !== null || this._movesHead !== null ||
	                    this._removalsHead !== null || this._identityChangesHead !== null;
	            },
	            enumerable: true,
	            configurable: true
	        });
	        /**
	         * Reset the state of the change objects to show no changes. This means set previousKey to
	         * currentKey, and clear all of the queues (additions, moves, removals).
	         * Set the previousIndexes of moved and added items to their currentIndexes
	         * Reset the list of additions, moves and removals
	         *
	         * @internal
	         */
	        DefaultIterableDiffer.prototype._reset = function () {
	            if (this.isDirty) {
	                var record = void 0;
	                var nextRecord = void 0;
	                for (record = this._previousItHead = this._itHead; record !== null; record = record._next) {
	                    record._nextPrevious = record._next;
	                }
	                for (record = this._additionsHead; record !== null; record = record._nextAdded) {
	                    record.previousIndex = record.currentIndex;
	                }
	                this._additionsHead = this._additionsTail = null;
	                for (record = this._movesHead; record !== null; record = nextRecord) {
	                    record.previousIndex = record.currentIndex;
	                    nextRecord = record._nextMoved;
	                }
	                this._movesHead = this._movesTail = null;
	                this._removalsHead = this._removalsTail = null;
	                this._identityChangesHead = this._identityChangesTail = null;
	            }
	        };
	        /**
	         * This is the core function which handles differences between collections.
	         *
	         * - `record` is the record which we saw at this position last time. If null then it is a new
	         *   item.
	         * - `item` is the current item in the collection
	         * - `index` is the position of the item in the collection
	         *
	         * @internal
	         */
	        DefaultIterableDiffer.prototype._mismatch = function (record, item, itemTrackBy, index) {
	            // The previous record after which we will append the current one.
	            var previousRecord;
	            if (record === null) {
	                previousRecord = this._itTail;
	            }
	            else {
	                previousRecord = record._prev;
	                // Remove the record from the collection since we know it does not match the item.
	                this._remove(record);
	            }
	            // Attempt to see if we have seen the item before.
	            record = this._linkedRecords === null ? null : this._linkedRecords.get(itemTrackBy, index);
	            if (record !== null) {
	                // We have seen this before, we need to move it forward in the collection.
	                // But first we need to check if identity changed, so we can update in view if necessary
	                if (!looseIdentical(record.item, item))
	                    this._addIdentityChange(record, item);
	                this._moveAfter(record, previousRecord, index);
	            }
	            else {
	                // Never seen it, check evicted list.
	                record = this._unlinkedRecords === null ? null : this._unlinkedRecords.get(itemTrackBy);
	                if (record !== null) {
	                    // It is an item which we have evicted earlier: reinsert it back into the list.
	                    // But first we need to check if identity changed, so we can update in view if necessary
	                    if (!looseIdentical(record.item, item))
	                        this._addIdentityChange(record, item);
	                    this._reinsertAfter(record, previousRecord, index);
	                }
	                else {
	                    // It is a new item: add it.
	                    record =
	                        this._addAfter(new CollectionChangeRecord(item, itemTrackBy), previousRecord, index);
	                }
	            }
	            return record;
	        };
	        /**
	         * This check is only needed if an array contains duplicates. (Short circuit of nothing dirty)
	         *
	         * Use case: `[a, a]` => `[b, a, a]`
	         *
	         * If we did not have this check then the insertion of `b` would:
	         *   1) evict first `a`
	         *   2) insert `b` at `0` index.
	         *   3) leave `a` at index `1` as is. <-- this is wrong!
	         *   3) reinsert `a` at index 2. <-- this is wrong!
	         *
	         * The correct behavior is:
	         *   1) evict first `a`
	         *   2) insert `b` at `0` index.
	         *   3) reinsert `a` at index 1.
	         *   3) move `a` at from `1` to `2`.
	         *
	         *
	         * Double check that we have not evicted a duplicate item. We need to check if the item type may
	         * have already been removed:
	         * The insertion of b will evict the first 'a'. If we don't reinsert it now it will be reinserted
	         * at the end. Which will show up as the two 'a's switching position. This is incorrect, since a
	         * better way to think of it is as insert of 'b' rather then switch 'a' with 'b' and then add 'a'
	         * at the end.
	         *
	         * @internal
	         */
	        DefaultIterableDiffer.prototype._verifyReinsertion = function (record, item, itemTrackBy, index) {
	            var reinsertRecord = this._unlinkedRecords === null ? null : this._unlinkedRecords.get(itemTrackBy);
	            if (reinsertRecord !== null) {
	                record = this._reinsertAfter(reinsertRecord, record._prev, index);
	            }
	            else if (record.currentIndex != index) {
	                record.currentIndex = index;
	                this._addToMoves(record, index);
	            }
	            return record;
	        };
	        /**
	         * Get rid of any excess {@link CollectionChangeRecord}s from the previous collection
	         *
	         * - `record` The first excess {@link CollectionChangeRecord}.
	         *
	         * @internal
	         */
	        DefaultIterableDiffer.prototype._truncate = function (record) {
	            // Anything after that needs to be removed;
	            while (record !== null) {
	                var nextRecord = record._next;
	                this._addToRemovals(this._unlink(record));
	                record = nextRecord;
	            }
	            if (this._unlinkedRecords !== null) {
	                this._unlinkedRecords.clear();
	            }
	            if (this._additionsTail !== null) {
	                this._additionsTail._nextAdded = null;
	            }
	            if (this._movesTail !== null) {
	                this._movesTail._nextMoved = null;
	            }
	            if (this._itTail !== null) {
	                this._itTail._next = null;
	            }
	            if (this._removalsTail !== null) {
	                this._removalsTail._nextRemoved = null;
	            }
	            if (this._identityChangesTail !== null) {
	                this._identityChangesTail._nextIdentityChange = null;
	            }
	        };
	        /** @internal */
	        DefaultIterableDiffer.prototype._reinsertAfter = function (record, prevRecord, index) {
	            if (this._unlinkedRecords !== null) {
	                this._unlinkedRecords.remove(record);
	            }
	            var prev = record._prevRemoved;
	            var next = record._nextRemoved;
	            if (prev === null) {
	                this._removalsHead = next;
	            }
	            else {
	                prev._nextRemoved = next;
	            }
	            if (next === null) {
	                this._removalsTail = prev;
	            }
	            else {
	                next._prevRemoved = prev;
	            }
	            this._insertAfter(record, prevRecord, index);
	            this._addToMoves(record, index);
	            return record;
	        };
	        /** @internal */
	        DefaultIterableDiffer.prototype._moveAfter = function (record, prevRecord, index) {
	            this._unlink(record);
	            this._insertAfter(record, prevRecord, index);
	            this._addToMoves(record, index);
	            return record;
	        };
	        /** @internal */
	        DefaultIterableDiffer.prototype._addAfter = function (record, prevRecord, index) {
	            this._insertAfter(record, prevRecord, index);
	            if (this._additionsTail === null) {
	                // todo(vicb)
	                // assert(this._additionsHead === null);
	                this._additionsTail = this._additionsHead = record;
	            }
	            else {
	                // todo(vicb)
	                // assert(_additionsTail._nextAdded === null);
	                // assert(record._nextAdded === null);
	                this._additionsTail = this._additionsTail._nextAdded = record;
	            }
	            return record;
	        };
	        /** @internal */
	        DefaultIterableDiffer.prototype._insertAfter = function (record, prevRecord, index) {
	            // todo(vicb)
	            // assert(record != prevRecord);
	            // assert(record._next === null);
	            // assert(record._prev === null);
	            var next = prevRecord === null ? this._itHead : prevRecord._next;
	            // todo(vicb)
	            // assert(next != record);
	            // assert(prevRecord != record);
	            record._next = next;
	            record._prev = prevRecord;
	            if (next === null) {
	                this._itTail = record;
	            }
	            else {
	                next._prev = record;
	            }
	            if (prevRecord === null) {
	                this._itHead = record;
	            }
	            else {
	                prevRecord._next = record;
	            }
	            if (this._linkedRecords === null) {
	                this._linkedRecords = new _DuplicateMap();
	            }
	            this._linkedRecords.put(record);
	            record.currentIndex = index;
	            return record;
	        };
	        /** @internal */
	        DefaultIterableDiffer.prototype._remove = function (record) {
	            return this._addToRemovals(this._unlink(record));
	        };
	        /** @internal */
	        DefaultIterableDiffer.prototype._unlink = function (record) {
	            if (this._linkedRecords !== null) {
	                this._linkedRecords.remove(record);
	            }
	            var prev = record._prev;
	            var next = record._next;
	            // todo(vicb)
	            // assert((record._prev = null) === null);
	            // assert((record._next = null) === null);
	            if (prev === null) {
	                this._itHead = next;
	            }
	            else {
	                prev._next = next;
	            }
	            if (next === null) {
	                this._itTail = prev;
	            }
	            else {
	                next._prev = prev;
	            }
	            return record;
	        };
	        /** @internal */
	        DefaultIterableDiffer.prototype._addToMoves = function (record, toIndex) {
	            // todo(vicb)
	            // assert(record._nextMoved === null);
	            if (record.previousIndex === toIndex) {
	                return record;
	            }
	            if (this._movesTail === null) {
	                // todo(vicb)
	                // assert(_movesHead === null);
	                this._movesTail = this._movesHead = record;
	            }
	            else {
	                // todo(vicb)
	                // assert(_movesTail._nextMoved === null);
	                this._movesTail = this._movesTail._nextMoved = record;
	            }
	            return record;
	        };
	        /** @internal */
	        DefaultIterableDiffer.prototype._addToRemovals = function (record) {
	            if (this._unlinkedRecords === null) {
	                this._unlinkedRecords = new _DuplicateMap();
	            }
	            this._unlinkedRecords.put(record);
	            record.currentIndex = null;
	            record._nextRemoved = null;
	            if (this._removalsTail === null) {
	                // todo(vicb)
	                // assert(_removalsHead === null);
	                this._removalsTail = this._removalsHead = record;
	                record._prevRemoved = null;
	            }
	            else {
	                // todo(vicb)
	                // assert(_removalsTail._nextRemoved === null);
	                // assert(record._nextRemoved === null);
	                record._prevRemoved = this._removalsTail;
	                this._removalsTail = this._removalsTail._nextRemoved = record;
	            }
	            return record;
	        };
	        /** @internal */
	        DefaultIterableDiffer.prototype._addIdentityChange = function (record, item) {
	            record.item = item;
	            if (this._identityChangesTail === null) {
	                this._identityChangesTail = this._identityChangesHead = record;
	            }
	            else {
	                this._identityChangesTail = this._identityChangesTail._nextIdentityChange = record;
	            }
	            return record;
	        };
	        DefaultIterableDiffer.prototype.toString = function () {
	            var list = [];
	            this.forEachItem(function (record /** TODO #9100 */) { return list.push(record); });
	            var previous = [];
	            this.forEachPreviousItem(function (record /** TODO #9100 */) { return previous.push(record); });
	            var additions = [];
	            this.forEachAddedItem(function (record /** TODO #9100 */) { return additions.push(record); });
	            var moves = [];
	            this.forEachMovedItem(function (record /** TODO #9100 */) { return moves.push(record); });
	            var removals = [];
	            this.forEachRemovedItem(function (record /** TODO #9100 */) { return removals.push(record); });
	            var identityChanges = [];
	            this.forEachIdentityChange(function (record /** TODO #9100 */) { return identityChanges.push(record); });
	            return 'collection: ' + list.join(', ') + '\n' +
	                'previous: ' + previous.join(', ') + '\n' +
	                'additions: ' + additions.join(', ') + '\n' +
	                'moves: ' + moves.join(', ') + '\n' +
	                'removals: ' + removals.join(', ') + '\n' +
	                'identityChanges: ' + identityChanges.join(', ') + '\n';
	        };
	        return DefaultIterableDiffer;
	    }());
	    /**
	     * @stable
	     */
	    var CollectionChangeRecord = (function () {
	        function CollectionChangeRecord(item, trackById) {
	            this.item = item;
	            this.trackById = trackById;
	            this.currentIndex = null;
	            this.previousIndex = null;
	            /** @internal */
	            this._nextPrevious = null;
	            /** @internal */
	            this._prev = null;
	            /** @internal */
	            this._next = null;
	            /** @internal */
	            this._prevDup = null;
	            /** @internal */
	            this._nextDup = null;
	            /** @internal */
	            this._prevRemoved = null;
	            /** @internal */
	            this._nextRemoved = null;
	            /** @internal */
	            this._nextAdded = null;
	            /** @internal */
	            this._nextMoved = null;
	            /** @internal */
	            this._nextIdentityChange = null;
	        }
	        CollectionChangeRecord.prototype.toString = function () {
	            return this.previousIndex === this.currentIndex ? stringify(this.item) :
	                stringify(this.item) + '[' +
	                    stringify(this.previousIndex) + '->' + stringify(this.currentIndex) + ']';
	        };
	        return CollectionChangeRecord;
	    }());
	    // A linked list of CollectionChangeRecords with the same CollectionChangeRecord.item
	    var _DuplicateItemRecordList = (function () {
	        function _DuplicateItemRecordList() {
	            /** @internal */
	            this._head = null;
	            /** @internal */
	            this._tail = null;
	        }
	        /**
	         * Append the record to the list of duplicates.
	         *
	         * Note: by design all records in the list of duplicates hold the same value in record.item.
	         */
	        _DuplicateItemRecordList.prototype.add = function (record) {
	            if (this._head === null) {
	                this._head = this._tail = record;
	                record._nextDup = null;
	                record._prevDup = null;
	            }
	            else {
	                // todo(vicb)
	                // assert(record.item ==  _head.item ||
	                //       record.item is num && record.item.isNaN && _head.item is num && _head.item.isNaN);
	                this._tail._nextDup = record;
	                record._prevDup = this._tail;
	                record._nextDup = null;
	                this._tail = record;
	            }
	        };
	        // Returns a CollectionChangeRecord having CollectionChangeRecord.trackById == trackById and
	        // CollectionChangeRecord.currentIndex >= afterIndex
	        _DuplicateItemRecordList.prototype.get = function (trackById, afterIndex) {
	            var record;
	            for (record = this._head; record !== null; record = record._nextDup) {
	                if ((afterIndex === null || afterIndex < record.currentIndex) &&
	                    looseIdentical(record.trackById, trackById)) {
	                    return record;
	                }
	            }
	            return null;
	        };
	        /**
	         * Remove one {@link CollectionChangeRecord} from the list of duplicates.
	         *
	         * Returns whether the list of duplicates is empty.
	         */
	        _DuplicateItemRecordList.prototype.remove = function (record) {
	            // todo(vicb)
	            // assert(() {
	            //  // verify that the record being removed is in the list.
	            //  for (CollectionChangeRecord cursor = _head; cursor != null; cursor = cursor._nextDup) {
	            //    if (identical(cursor, record)) return true;
	            //  }
	            //  return false;
	            //});
	            var prev = record._prevDup;
	            var next = record._nextDup;
	            if (prev === null) {
	                this._head = next;
	            }
	            else {
	                prev._nextDup = next;
	            }
	            if (next === null) {
	                this._tail = prev;
	            }
	            else {
	                next._prevDup = prev;
	            }
	            return this._head === null;
	        };
	        return _DuplicateItemRecordList;
	    }());
	    var _DuplicateMap = (function () {
	        function _DuplicateMap() {
	            this.map = new Map();
	        }
	        _DuplicateMap.prototype.put = function (record) {
	            var key = record.trackById;
	            var duplicates = this.map.get(key);
	            if (!duplicates) {
	                duplicates = new _DuplicateItemRecordList();
	                this.map.set(key, duplicates);
	            }
	            duplicates.add(record);
	        };
	        /**
	         * Retrieve the `value` using key. Because the CollectionChangeRecord value may be one which we
	         * have already iterated over, we use the afterIndex to pretend it is not there.
	         *
	         * Use case: `[a, b, c, a, a]` if we are at index `3` which is the second `a` then asking if we
	         * have any more `a`s needs to return the last `a` not the first or second.
	         */
	        _DuplicateMap.prototype.get = function (trackById, afterIndex) {
	            if (afterIndex === void 0) { afterIndex = null; }
	            var key = trackById;
	            var recordList = this.map.get(key);
	            return recordList ? recordList.get(trackById, afterIndex) : null;
	        };
	        /**
	         * Removes a {@link CollectionChangeRecord} from the list of duplicates.
	         *
	         * The list of duplicates also is removed from the map if it gets empty.
	         */
	        _DuplicateMap.prototype.remove = function (record) {
	            var key = record.trackById;
	            var recordList = this.map.get(key);
	            // Remove the list of duplicates when it gets empty
	            if (recordList.remove(record)) {
	                this.map.delete(key);
	            }
	            return record;
	        };
	        Object.defineProperty(_DuplicateMap.prototype, "isEmpty", {
	            get: function () { return this.map.size === 0; },
	            enumerable: true,
	            configurable: true
	        });
	        _DuplicateMap.prototype.clear = function () { this.map.clear(); };
	        _DuplicateMap.prototype.toString = function () { return '_DuplicateMap(' + stringify(this.map) + ')'; };
	        return _DuplicateMap;
	    }());
	    function getPreviousIndex(item, addRemoveOffset, moveOffsets) {
	        var previousIndex = item.previousIndex;
	        if (previousIndex === null)
	            return previousIndex;
	        var moveOffset = 0;
	        if (moveOffsets && previousIndex < moveOffsets.length) {
	            moveOffset = moveOffsets[previousIndex];
	        }
	        return previousIndex + addRemoveOffset + moveOffset;
	    }

	    var DefaultKeyValueDifferFactory = (function () {
	        function DefaultKeyValueDifferFactory() {
	        }
	        DefaultKeyValueDifferFactory.prototype.supports = function (obj) { return obj instanceof Map || isJsObject(obj); };
	        DefaultKeyValueDifferFactory.prototype.create = function (cdRef) { return new DefaultKeyValueDiffer(); };
	        return DefaultKeyValueDifferFactory;
	    }());
	    var DefaultKeyValueDiffer = (function () {
	        function DefaultKeyValueDiffer() {
	            this._records = new Map();
	            this._mapHead = null;
	            this._previousMapHead = null;
	            this._changesHead = null;
	            this._changesTail = null;
	            this._additionsHead = null;
	            this._additionsTail = null;
	            this._removalsHead = null;
	            this._removalsTail = null;
	        }
	        Object.defineProperty(DefaultKeyValueDiffer.prototype, "isDirty", {
	            get: function () {
	                return this._additionsHead !== null || this._changesHead !== null ||
	                    this._removalsHead !== null;
	            },
	            enumerable: true,
	            configurable: true
	        });
	        DefaultKeyValueDiffer.prototype.forEachItem = function (fn) {
	            var record;
	            for (record = this._mapHead; record !== null; record = record._next) {
	                fn(record);
	            }
	        };
	        DefaultKeyValueDiffer.prototype.forEachPreviousItem = function (fn) {
	            var record;
	            for (record = this._previousMapHead; record !== null; record = record._nextPrevious) {
	                fn(record);
	            }
	        };
	        DefaultKeyValueDiffer.prototype.forEachChangedItem = function (fn) {
	            var record;
	            for (record = this._changesHead; record !== null; record = record._nextChanged) {
	                fn(record);
	            }
	        };
	        DefaultKeyValueDiffer.prototype.forEachAddedItem = function (fn) {
	            var record;
	            for (record = this._additionsHead; record !== null; record = record._nextAdded) {
	                fn(record);
	            }
	        };
	        DefaultKeyValueDiffer.prototype.forEachRemovedItem = function (fn) {
	            var record;
	            for (record = this._removalsHead; record !== null; record = record._nextRemoved) {
	                fn(record);
	            }
	        };
	        DefaultKeyValueDiffer.prototype.diff = function (map) {
	            if (!map) {
	                map = new Map();
	            }
	            else if (!(map instanceof Map || isJsObject(map))) {
	                throw new Error("Error trying to diff '" + map + "'");
	            }
	            return this.check(map) ? this : null;
	        };
	        DefaultKeyValueDiffer.prototype.onDestroy = function () { };
	        DefaultKeyValueDiffer.prototype.check = function (map) {
	            var _this = this;
	            this._reset();
	            var records = this._records;
	            var oldSeqRecord = this._mapHead;
	            var lastOldSeqRecord = null;
	            var lastNewSeqRecord = null;
	            var seqChanged = false;
	            this._forEach(map, function (value, key) {
	                var newSeqRecord;
	                if (oldSeqRecord && key === oldSeqRecord.key) {
	                    newSeqRecord = oldSeqRecord;
	                    _this._maybeAddToChanges(newSeqRecord, value);
	                }
	                else {
	                    seqChanged = true;
	                    if (oldSeqRecord !== null) {
	                        _this._removeFromSeq(lastOldSeqRecord, oldSeqRecord);
	                        _this._addToRemovals(oldSeqRecord);
	                    }
	                    if (records.has(key)) {
	                        newSeqRecord = records.get(key);
	                        _this._maybeAddToChanges(newSeqRecord, value);
	                    }
	                    else {
	                        newSeqRecord = new KeyValueChangeRecord(key);
	                        records.set(key, newSeqRecord);
	                        newSeqRecord.currentValue = value;
	                        _this._addToAdditions(newSeqRecord);
	                    }
	                }
	                if (seqChanged) {
	                    if (_this._isInRemovals(newSeqRecord)) {
	                        _this._removeFromRemovals(newSeqRecord);
	                    }
	                    if (lastNewSeqRecord == null) {
	                        _this._mapHead = newSeqRecord;
	                    }
	                    else {
	                        lastNewSeqRecord._next = newSeqRecord;
	                    }
	                }
	                lastOldSeqRecord = oldSeqRecord;
	                lastNewSeqRecord = newSeqRecord;
	                oldSeqRecord = oldSeqRecord && oldSeqRecord._next;
	            });
	            this._truncate(lastOldSeqRecord, oldSeqRecord);
	            return this.isDirty;
	        };
	        /** @internal */
	        DefaultKeyValueDiffer.prototype._reset = function () {
	            if (this.isDirty) {
	                var record = void 0;
	                // Record the state of the mapping
	                for (record = this._previousMapHead = this._mapHead; record !== null; record = record._next) {
	                    record._nextPrevious = record._next;
	                }
	                for (record = this._changesHead; record !== null; record = record._nextChanged) {
	                    record.previousValue = record.currentValue;
	                }
	                for (record = this._additionsHead; record != null; record = record._nextAdded) {
	                    record.previousValue = record.currentValue;
	                }
	                this._changesHead = this._changesTail = null;
	                this._additionsHead = this._additionsTail = null;
	                this._removalsHead = this._removalsTail = null;
	            }
	        };
	        /** @internal */
	        DefaultKeyValueDiffer.prototype._truncate = function (lastRecord, record) {
	            while (record !== null) {
	                if (lastRecord === null) {
	                    this._mapHead = null;
	                }
	                else {
	                    lastRecord._next = null;
	                }
	                var nextRecord = record._next;
	                this._addToRemovals(record);
	                lastRecord = record;
	                record = nextRecord;
	            }
	            for (var rec = this._removalsHead; rec !== null; rec = rec._nextRemoved) {
	                rec.previousValue = rec.currentValue;
	                rec.currentValue = null;
	                this._records.delete(rec.key);
	            }
	        };
	        DefaultKeyValueDiffer.prototype._maybeAddToChanges = function (record, newValue) {
	            if (!looseIdentical(newValue, record.currentValue)) {
	                record.previousValue = record.currentValue;
	                record.currentValue = newValue;
	                this._addToChanges(record);
	            }
	        };
	        /** @internal */
	        DefaultKeyValueDiffer.prototype._isInRemovals = function (record) {
	            return record === this._removalsHead || record._nextRemoved !== null ||
	                record._prevRemoved !== null;
	        };
	        /** @internal */
	        DefaultKeyValueDiffer.prototype._addToRemovals = function (record) {
	            if (this._removalsHead === null) {
	                this._removalsHead = this._removalsTail = record;
	            }
	            else {
	                this._removalsTail._nextRemoved = record;
	                record._prevRemoved = this._removalsTail;
	                this._removalsTail = record;
	            }
	        };
	        /** @internal */
	        DefaultKeyValueDiffer.prototype._removeFromSeq = function (prev, record) {
	            var next = record._next;
	            if (prev === null) {
	                this._mapHead = next;
	            }
	            else {
	                prev._next = next;
	            }
	            record._next = null;
	        };
	        /** @internal */
	        DefaultKeyValueDiffer.prototype._removeFromRemovals = function (record) {
	            var prev = record._prevRemoved;
	            var next = record._nextRemoved;
	            if (prev === null) {
	                this._removalsHead = next;
	            }
	            else {
	                prev._nextRemoved = next;
	            }
	            if (next === null) {
	                this._removalsTail = prev;
	            }
	            else {
	                next._prevRemoved = prev;
	            }
	            record._prevRemoved = record._nextRemoved = null;
	        };
	        /** @internal */
	        DefaultKeyValueDiffer.prototype._addToAdditions = function (record) {
	            if (this._additionsHead === null) {
	                this._additionsHead = this._additionsTail = record;
	            }
	            else {
	                this._additionsTail._nextAdded = record;
	                this._additionsTail = record;
	            }
	        };
	        /** @internal */
	        DefaultKeyValueDiffer.prototype._addToChanges = function (record) {
	            if (this._changesHead === null) {
	                this._changesHead = this._changesTail = record;
	            }
	            else {
	                this._changesTail._nextChanged = record;
	                this._changesTail = record;
	            }
	        };
	        DefaultKeyValueDiffer.prototype.toString = function () {
	            var items = [];
	            var previous = [];
	            var changes = [];
	            var additions = [];
	            var removals = [];
	            var record;
	            for (record = this._mapHead; record !== null; record = record._next) {
	                items.push(stringify(record));
	            }
	            for (record = this._previousMapHead; record !== null; record = record._nextPrevious) {
	                previous.push(stringify(record));
	            }
	            for (record = this._changesHead; record !== null; record = record._nextChanged) {
	                changes.push(stringify(record));
	            }
	            for (record = this._additionsHead; record !== null; record = record._nextAdded) {
	                additions.push(stringify(record));
	            }
	            for (record = this._removalsHead; record !== null; record = record._nextRemoved) {
	                removals.push(stringify(record));
	            }
	            return 'map: ' + items.join(', ') + '\n' +
	                'previous: ' + previous.join(', ') + '\n' +
	                'additions: ' + additions.join(', ') + '\n' +
	                'changes: ' + changes.join(', ') + '\n' +
	                'removals: ' + removals.join(', ') + '\n';
	        };
	        /** @internal */
	        DefaultKeyValueDiffer.prototype._forEach = function (obj, fn) {
	            if (obj instanceof Map) {
	                obj.forEach(fn);
	            }
	            else {
	                Object.keys(obj).forEach(function (k) { return fn(obj[k], k); });
	            }
	        };
	        return DefaultKeyValueDiffer;
	    }());
	    /**
	     * @stable
	     */
	    var KeyValueChangeRecord = (function () {
	        function KeyValueChangeRecord(key) {
	            this.key = key;
	            this.previousValue = null;
	            this.currentValue = null;
	            /** @internal */
	            this._nextPrevious = null;
	            /** @internal */
	            this._next = null;
	            /** @internal */
	            this._nextAdded = null;
	            /** @internal */
	            this._nextRemoved = null;
	            /** @internal */
	            this._prevRemoved = null;
	            /** @internal */
	            this._nextChanged = null;
	        }
	        KeyValueChangeRecord.prototype.toString = function () {
	            return looseIdentical(this.previousValue, this.currentValue) ?
	                stringify(this.key) :
	                (stringify(this.key) + '[' + stringify(this.previousValue) + '->' +
	                    stringify(this.currentValue) + ']');
	        };
	        return KeyValueChangeRecord;
	    }());

	    /**
	     * A repository of different iterable diffing strategies used by NgFor, NgClass, and others.
	     * @stable
	     */
	    var IterableDiffers = (function () {
	        function IterableDiffers(factories) {
	            this.factories = factories;
	        }
	        IterableDiffers.create = function (factories, parent) {
	            if (isPresent(parent)) {
	                var copied = parent.factories.slice();
	                factories = factories.concat(copied);
	                return new IterableDiffers(factories);
	            }
	            else {
	                return new IterableDiffers(factories);
	            }
	        };
	        /**
	         * Takes an array of {@link IterableDifferFactory} and returns a provider used to extend the
	         * inherited {@link IterableDiffers} instance with the provided factories and return a new
	         * {@link IterableDiffers} instance.
	         *
	         * The following example shows how to extend an existing list of factories,
	               * which will only be applied to the injector for this component and its children.
	               * This step is all that's required to make a new {@link IterableDiffer} available.
	         *
	         * ### Example
	         *
	         * ```
	         * @Component({
	         *   viewProviders: [
	         *     IterableDiffers.extend([new ImmutableListDiffer()])
	         *   ]
	         * })
	         * ```
	         */
	        IterableDiffers.extend = function (factories) {
	            return {
	                provide: IterableDiffers,
	                useFactory: function (parent) {
	                    if (!parent) {
	                        // Typically would occur when calling IterableDiffers.extend inside of dependencies passed
	                        // to
	                        // bootstrap(), which would override default pipes instead of extending them.
	                        throw new Error('Cannot extend IterableDiffers without a parent injector');
	                    }
	                    return IterableDiffers.create(factories, parent);
	                },
	                // Dependency technically isn't optional, but we can provide a better error message this way.
	                deps: [[IterableDiffers, new SkipSelf(), new Optional()]]
	            };
	        };
	        IterableDiffers.prototype.find = function (iterable) {
	            var factory = this.factories.find(function (f) { return f.supports(iterable); });
	            if (isPresent(factory)) {
	                return factory;
	            }
	            else {
	                throw new Error("Cannot find a differ supporting object '" + iterable + "' of type '" + getTypeNameForDebugging(iterable) + "'");
	            }
	        };
	        return IterableDiffers;
	    }());

	    /**
	     * A repository of different Map diffing strategies used by NgClass, NgStyle, and others.
	     * @stable
	     */
	    var KeyValueDiffers = (function () {
	        function KeyValueDiffers(factories) {
	            this.factories = factories;
	        }
	        KeyValueDiffers.create = function (factories, parent) {
	            if (isPresent(parent)) {
	                var copied = parent.factories.slice();
	                factories = factories.concat(copied);
	                return new KeyValueDiffers(factories);
	            }
	            else {
	                return new KeyValueDiffers(factories);
	            }
	        };
	        /**
	         * Takes an array of {@link KeyValueDifferFactory} and returns a provider used to extend the
	         * inherited {@link KeyValueDiffers} instance with the provided factories and return a new
	         * {@link KeyValueDiffers} instance.
	         *
	         * The following example shows how to extend an existing list of factories,
	               * which will only be applied to the injector for this component and its children.
	               * This step is all that's required to make a new {@link KeyValueDiffer} available.
	         *
	         * ### Example
	         *
	         * ```
	         * @Component({
	         *   viewProviders: [
	         *     KeyValueDiffers.extend([new ImmutableMapDiffer()])
	         *   ]
	         * })
	         * ```
	         */
	        KeyValueDiffers.extend = function (factories) {
	            return {
	                provide: KeyValueDiffers,
	                useFactory: function (parent) {
	                    if (!parent) {
	                        // Typically would occur when calling KeyValueDiffers.extend inside of dependencies passed
	                        // to
	                        // bootstrap(), which would override default pipes instead of extending them.
	                        throw new Error('Cannot extend KeyValueDiffers without a parent injector');
	                    }
	                    return KeyValueDiffers.create(factories, parent);
	                },
	                // Dependency technically isn't optional, but we can provide a better error message this way.
	                deps: [[KeyValueDiffers, new SkipSelf(), new Optional()]]
	            };
	        };
	        KeyValueDiffers.prototype.find = function (kv) {
	            var factory = this.factories.find(function (f) { return f.supports(kv); });
	            if (isPresent(factory)) {
	                return factory;
	            }
	            else {
	                throw new Error("Cannot find a differ supporting object '" + kv + "'");
	            }
	        };
	        return KeyValueDiffers;
	    }());

	    var UNINITIALIZED = {
	        toString: function () { return 'CD_INIT_VALUE'; }
	    };
	    function devModeEqual(a, b) {
	        if (isListLikeIterable(a) && isListLikeIterable(b)) {
	            return areIterablesEqual(a, b, devModeEqual);
	        }
	        else if (!isListLikeIterable(a) && !isPrimitive(a) && !isListLikeIterable(b) && !isPrimitive(b)) {
	            return true;
	        }
	        else {
	            return looseIdentical(a, b);
	        }
	    }
	    /**
	     * Indicates that the result of a {@link Pipe} transformation has changed even though the
	     * reference
	     * has not changed.
	     *
	     * The wrapped value will be unwrapped by change detection, and the unwrapped value will be stored.
	     *
	     * Example:
	     *
	     * ```
	     * if (this._latestValue === this._latestReturnedValue) {
	     *    return this._latestReturnedValue;
	     *  } else {
	     *    this._latestReturnedValue = this._latestValue;
	     *    return WrappedValue.wrap(this._latestValue); // this will force update
	     *  }
	     * ```
	     * @stable
	     */
	    var WrappedValue = (function () {
	        function WrappedValue(wrapped) {
	            this.wrapped = wrapped;
	        }
	        WrappedValue.wrap = function (value) { return new WrappedValue(value); };
	        return WrappedValue;
	    }());
	    /**
	     * Helper class for unwrapping WrappedValue s
	     */
	    var ValueUnwrapper = (function () {
	        function ValueUnwrapper() {
	            this.hasWrappedValue = false;
	        }
	        ValueUnwrapper.prototype.unwrap = function (value) {
	            if (value instanceof WrappedValue) {
	                this.hasWrappedValue = true;
	                return value.wrapped;
	            }
	            return value;
	        };
	        ValueUnwrapper.prototype.reset = function () { this.hasWrappedValue = false; };
	        return ValueUnwrapper;
	    }());
	    /**
	     * Represents a basic change from a previous to a new value.
	     * @stable
	     */
	    var SimpleChange = (function () {
	        function SimpleChange(previousValue, currentValue) {
	            this.previousValue = previousValue;
	            this.currentValue = currentValue;
	        }
	        /**
	         * Check whether the new value is the first value assigned.
	         */
	        SimpleChange.prototype.isFirstChange = function () { return this.previousValue === UNINITIALIZED; };
	        return SimpleChange;
	    }());

	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    /**
	     * @stable
	     */
	    var ChangeDetectorRef = (function () {
	        function ChangeDetectorRef() {
	        }
	        return ChangeDetectorRef;
	    }());

	    /**
	     * Structural diffing for `Object`s and `Map`s.
	     */
	    var keyValDiff = [new DefaultKeyValueDifferFactory()];
	    /**
	     * Structural diffing for `Iterable` types such as `Array`s.
	     */
	    var iterableDiff = [new DefaultIterableDifferFactory()];
	    var defaultIterableDiffers = new IterableDiffers(iterableDiff);
	    var defaultKeyValueDiffers = new KeyValueDiffers(keyValDiff);

	    /**
	     * @experimental
	     */
	    // TODO (matsko): add typing for the animation function
	    var RenderComponentType = (function () {
	        function RenderComponentType(id, templateUrl, slotCount, encapsulation, styles, animations) {
	            this.id = id;
	            this.templateUrl = templateUrl;
	            this.slotCount = slotCount;
	            this.encapsulation = encapsulation;
	            this.styles = styles;
	            this.animations = animations;
	        }
	        return RenderComponentType;
	    }());
	    var RenderDebugInfo = (function () {
	        function RenderDebugInfo() {
	        }
	        Object.defineProperty(RenderDebugInfo.prototype, "injector", {
	            get: function () { return unimplemented(); },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(RenderDebugInfo.prototype, "component", {
	            get: function () { return unimplemented(); },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(RenderDebugInfo.prototype, "providerTokens", {
	            get: function () { return unimplemented(); },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(RenderDebugInfo.prototype, "references", {
	            get: function () { return unimplemented(); },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(RenderDebugInfo.prototype, "context", {
	            get: function () { return unimplemented(); },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(RenderDebugInfo.prototype, "source", {
	            get: function () { return unimplemented(); },
	            enumerable: true,
	            configurable: true
	        });
	        return RenderDebugInfo;
	    }());
	    /**
	     * @experimental
	     */
	    var Renderer = (function () {
	        function Renderer() {
	        }
	        return Renderer;
	    }());
	    /**
	     * Injectable service that provides a low-level interface for modifying the UI.
	     *
	     * Use this service to bypass Angular's templating and make custom UI changes that can't be
	     * expressed declaratively. For example if you need to set a property or an attribute whose name is
	     * not statically known, use {@link #setElementProperty} or {@link #setElementAttribute}
	     * respectively.
	     *
	     * If you are implementing a custom renderer, you must implement this interface.
	     *
	     * The default Renderer implementation is `DomRenderer`. Also available is `WebWorkerRenderer`.
	     * @experimental
	     */
	    var RootRenderer = (function () {
	        function RootRenderer() {
	        }
	        return RootRenderer;
	    }());

	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    /**
	     * A SecurityContext marks a location that has dangerous security implications, e.g. a DOM property
	     * like `innerHTML` that could cause Cross Site Scripting (XSS) security bugs when improperly
	     * handled.
	     *
	     * See DomSanitizer for more details on security in Angular applications.
	     *
	     * @stable
	     */
	    exports.SecurityContext;
	    (function (SecurityContext) {
	        SecurityContext[SecurityContext["NONE"] = 0] = "NONE";
	        SecurityContext[SecurityContext["HTML"] = 1] = "HTML";
	        SecurityContext[SecurityContext["STYLE"] = 2] = "STYLE";
	        SecurityContext[SecurityContext["SCRIPT"] = 3] = "SCRIPT";
	        SecurityContext[SecurityContext["URL"] = 4] = "URL";
	        SecurityContext[SecurityContext["RESOURCE_URL"] = 5] = "RESOURCE_URL";
	    })(exports.SecurityContext || (exports.SecurityContext = {}));
	    /**
	     * Sanitizer is used by the views to sanitize potentially dangerous values.
	     *
	     * @stable
	     */
	    var Sanitizer = (function () {
	        function Sanitizer() {
	        }
	        return Sanitizer;
	    }());

	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    var __extends$6 = (this && this.__extends) || function (d, b) {
	        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	    /**
	     * An error thrown if application changes model breaking the top-down data flow.
	     *
	     * This exception is only thrown in dev mode.
	     *
	     * <!-- TODO: Add a link once the dev mode option is configurable -->
	     *
	     * ### Example
	     *
	     * ```typescript
	     * @Component({
	     *   selector: 'parent',
	     *   template: '<child [prop]="parentProp"></child>',
	     * })
	     * class Parent {
	     *   parentProp = 'init';
	     * }
	     *
	     * @Directive({selector: 'child', inputs: ['prop']})
	     * class Child {
	     *   constructor(public parent: Parent) {}
	     *
	     *   set prop(v) {
	     *     // this updates the parent property, which is disallowed during change detection
	     *     // this will result in ExpressionChangedAfterItHasBeenCheckedError
	     *     this.parent.parentProp = 'updated';
	     *   }
	     * }
	     * ```
	     * @stable
	     */
	    var ExpressionChangedAfterItHasBeenCheckedError = (function (_super) {
	        __extends$6(ExpressionChangedAfterItHasBeenCheckedError, _super);
	        function ExpressionChangedAfterItHasBeenCheckedError(oldValue, currValue) {
	            var msg = "Expression has changed after it was checked. Previous value: '" + oldValue + "'. Current value: '" + currValue + "'.";
	            if (oldValue === UNINITIALIZED) {
	                msg +=
	                    " It seems like the view has been created after its parent and its children have been dirty checked." +
	                        " Has it been created in a change detection hook ?";
	            }
	            _super.call(this, msg);
	        }
	        return ExpressionChangedAfterItHasBeenCheckedError;
	    }(BaseError));
	    /**
	     * Thrown when an exception was raised during view creation, change detection or destruction.
	     *
	     * This error wraps the original exception to attach additional contextual information that can
	     * be useful for debugging.
	     * @stable
	     */
	    var ViewWrappedError = (function (_super) {
	        __extends$6(ViewWrappedError, _super);
	        function ViewWrappedError(originalError, context) {
	            _super.call(this, "Error in " + context.source, originalError);
	            this.context = context;
	        }
	        return ViewWrappedError;
	    }(WrappedError));
	    /**
	     * Thrown when a destroyed view is used.
	     *
	     * This error indicates a bug in the framework.
	     *
	     * This is an internal Angular error.
	     * @stable
	     */
	    var ViewDestroyedError = (function (_super) {
	        __extends$6(ViewDestroyedError, _super);
	        function ViewDestroyedError(details) {
	            _super.call(this, "Attempt to use a destroyed view: " + details);
	        }
	        return ViewDestroyedError;
	    }(BaseError));

	    var ViewUtils = (function () {
	        function ViewUtils(_renderer, sanitizer) {
	            this._renderer = _renderer;
	            this._nextCompTypeId = 0;
	            this.sanitizer = sanitizer;
	        }
	        /** @internal */
	        ViewUtils.prototype.renderComponent = function (renderComponentType) {
	            return this._renderer.renderComponent(renderComponentType);
	        };
	        ViewUtils.decorators = [
	            { type: Injectable },
	        ];
	        /** @nocollapse */
	        ViewUtils.ctorParameters = [
	            { type: RootRenderer, },
	            { type: Sanitizer, },
	        ];
	        return ViewUtils;
	    }());
	    var nextRenderComponentTypeId = 0;
	    function createRenderComponentType(templateUrl, slotCount, encapsulation, styles, animations) {
	        return new RenderComponentType("" + nextRenderComponentTypeId++, templateUrl, slotCount, encapsulation, styles, animations);
	    }
	    function addToArray(e, array) {
	        array.push(e);
	    }
	    function interpolate(valueCount, constAndInterp) {
	        var result = '';
	        for (var i = 0; i < valueCount * 2; i = i + 2) {
	            result = result + constAndInterp[i] + _toStringWithNull(constAndInterp[i + 1]);
	        }
	        return result + constAndInterp[valueCount * 2];
	    }
	    function inlineInterpolate(valueCount, c0, a1, c1, a2, c2, a3, c3, a4, c4, a5, c5, a6, c6, a7, c7, a8, c8, a9, c9) {
	        switch (valueCount) {
	            case 1:
	                return c0 + _toStringWithNull(a1) + c1;
	            case 2:
	                return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2;
	            case 3:
	                return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) +
	                    c3;
	            case 4:
	                return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) +
	                    c3 + _toStringWithNull(a4) + c4;
	            case 5:
	                return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) +
	                    c3 + _toStringWithNull(a4) + c4 + _toStringWithNull(a5) + c5;
	            case 6:
	                return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) +
	                    c3 + _toStringWithNull(a4) + c4 + _toStringWithNull(a5) + c5 + _toStringWithNull(a6) + c6;
	            case 7:
	                return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) +
	                    c3 + _toStringWithNull(a4) + c4 + _toStringWithNull(a5) + c5 + _toStringWithNull(a6) +
	                    c6 + _toStringWithNull(a7) + c7;
	            case 8:
	                return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) +
	                    c3 + _toStringWithNull(a4) + c4 + _toStringWithNull(a5) + c5 + _toStringWithNull(a6) +
	                    c6 + _toStringWithNull(a7) + c7 + _toStringWithNull(a8) + c8;
	            case 9:
	                return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) +
	                    c3 + _toStringWithNull(a4) + c4 + _toStringWithNull(a5) + c5 + _toStringWithNull(a6) +
	                    c6 + _toStringWithNull(a7) + c7 + _toStringWithNull(a8) + c8 + _toStringWithNull(a9) + c9;
	            default:
	                throw new Error("Does not support more than 9 expressions");
	        }
	    }
	    function _toStringWithNull(v) {
	        return v != null ? v.toString() : '';
	    }
	    function checkBinding(throwOnChange, oldValue, newValue) {
	        if (throwOnChange) {
	            if (!devModeEqual(oldValue, newValue)) {
	                throw new ExpressionChangedAfterItHasBeenCheckedError(oldValue, newValue);
	            }
	            return false;
	        }
	        else {
	            return !looseIdentical(oldValue, newValue);
	        }
	    }
	    function castByValue(input, value) {
	        return input;
	    }
	    var EMPTY_ARRAY = [];
	    var EMPTY_MAP = {};
	    function pureProxy1(fn) {
	        var result;
	        var v0 = UNINITIALIZED;
	        return function (p0) {
	            if (!looseIdentical(v0, p0)) {
	                v0 = p0;
	                result = fn(p0);
	            }
	            return result;
	        };
	    }
	    function pureProxy2(fn) {
	        var result;
	        var v0 = UNINITIALIZED;
	        var v1 = UNINITIALIZED;
	        return function (p0, p1) {
	            if (!looseIdentical(v0, p0) || !looseIdentical(v1, p1)) {
	                v0 = p0;
	                v1 = p1;
	                result = fn(p0, p1);
	            }
	            return result;
	        };
	    }
	    function pureProxy3(fn) {
	        var result;
	        var v0 = UNINITIALIZED;
	        var v1 = UNINITIALIZED;
	        var v2 = UNINITIALIZED;
	        return function (p0, p1, p2) {
	            if (!looseIdentical(v0, p0) || !looseIdentical(v1, p1) || !looseIdentical(v2, p2)) {
	                v0 = p0;
	                v1 = p1;
	                v2 = p2;
	                result = fn(p0, p1, p2);
	            }
	            return result;
	        };
	    }
	    function pureProxy4(fn) {
	        var result;
	        var v0, v1, v2, v3;
	        v0 = v1 = v2 = v3 = UNINITIALIZED;
	        return function (p0, p1, p2, p3) {
	            if (!looseIdentical(v0, p0) || !looseIdentical(v1, p1) || !looseIdentical(v2, p2) ||
	                !looseIdentical(v3, p3)) {
	                v0 = p0;
	                v1 = p1;
	                v2 = p2;
	                v3 = p3;
	                result = fn(p0, p1, p2, p3);
	            }
	            return result;
	        };
	    }
	    function pureProxy5(fn) {
	        var result;
	        var v0, v1, v2, v3, v4;
	        v0 = v1 = v2 = v3 = v4 = UNINITIALIZED;
	        return function (p0, p1, p2, p3, p4) {
	            if (!looseIdentical(v0, p0) || !looseIdentical(v1, p1) || !looseIdentical(v2, p2) ||
	                !looseIdentical(v3, p3) || !looseIdentical(v4, p4)) {
	                v0 = p0;
	                v1 = p1;
	                v2 = p2;
	                v3 = p3;
	                v4 = p4;
	                result = fn(p0, p1, p2, p3, p4);
	            }
	            return result;
	        };
	    }
	    function pureProxy6(fn) {
	        var result;
	        var v0, v1, v2, v3, v4, v5;
	        v0 = v1 = v2 = v3 = v4 = v5 = UNINITIALIZED;
	        return function (p0, p1, p2, p3, p4, p5) {
	            if (!looseIdentical(v0, p0) || !looseIdentical(v1, p1) || !looseIdentical(v2, p2) ||
	                !looseIdentical(v3, p3) || !looseIdentical(v4, p4) || !looseIdentical(v5, p5)) {
	                v0 = p0;
	                v1 = p1;
	                v2 = p2;
	                v3 = p3;
	                v4 = p4;
	                v5 = p5;
	                result = fn(p0, p1, p2, p3, p4, p5);
	            }
	            return result;
	        };
	    }
	    function pureProxy7(fn) {
	        var result;
	        var v0, v1, v2, v3, v4, v5, v6;
	        v0 = v1 = v2 = v3 = v4 = v5 = v6 = UNINITIALIZED;
	        return function (p0, p1, p2, p3, p4, p5, p6) {
	            if (!looseIdentical(v0, p0) || !looseIdentical(v1, p1) || !looseIdentical(v2, p2) ||
	                !looseIdentical(v3, p3) || !looseIdentical(v4, p4) || !looseIdentical(v5, p5) ||
	                !looseIdentical(v6, p6)) {
	                v0 = p0;
	                v1 = p1;
	                v2 = p2;
	                v3 = p3;
	                v4 = p4;
	                v5 = p5;
	                v6 = p6;
	                result = fn(p0, p1, p2, p3, p4, p5, p6);
	            }
	            return result;
	        };
	    }
	    function pureProxy8(fn) {
	        var result;
	        var v0, v1, v2, v3, v4, v5, v6, v7;
	        v0 = v1 = v2 = v3 = v4 = v5 = v6 = v7 = UNINITIALIZED;
	        return function (p0, p1, p2, p3, p4, p5, p6, p7) {
	            if (!looseIdentical(v0, p0) || !looseIdentical(v1, p1) || !looseIdentical(v2, p2) ||
	                !looseIdentical(v3, p3) || !looseIdentical(v4, p4) || !looseIdentical(v5, p5) ||
	                !looseIdentical(v6, p6) || !looseIdentical(v7, p7)) {
	                v0 = p0;
	                v1 = p1;
	                v2 = p2;
	                v3 = p3;
	                v4 = p4;
	                v5 = p5;
	                v6 = p6;
	                v7 = p7;
	                result = fn(p0, p1, p2, p3, p4, p5, p6, p7);
	            }
	            return result;
	        };
	    }
	    function pureProxy9(fn) {
	        var result;
	        var v0, v1, v2, v3, v4, v5, v6, v7, v8;
	        v0 = v1 = v2 = v3 = v4 = v5 = v6 = v7 = v8 = UNINITIALIZED;
	        return function (p0, p1, p2, p3, p4, p5, p6, p7, p8) {
	            if (!looseIdentical(v0, p0) || !looseIdentical(v1, p1) || !looseIdentical(v2, p2) ||
	                !looseIdentical(v3, p3) || !looseIdentical(v4, p4) || !looseIdentical(v5, p5) ||
	                !looseIdentical(v6, p6) || !looseIdentical(v7, p7) || !looseIdentical(v8, p8)) {
	                v0 = p0;
	                v1 = p1;
	                v2 = p2;
	                v3 = p3;
	                v4 = p4;
	                v5 = p5;
	                v6 = p6;
	                v7 = p7;
	                v8 = p8;
	                result = fn(p0, p1, p2, p3, p4, p5, p6, p7, p8);
	            }
	            return result;
	        };
	    }
	    function pureProxy10(fn) {
	        var result;
	        var v0, v1, v2, v3, v4, v5, v6, v7, v8, v9;
	        v0 = v1 = v2 = v3 = v4 = v5 = v6 = v7 = v8 = v9 = UNINITIALIZED;
	        return function (p0, p1, p2, p3, p4, p5, p6, p7, p8, p9) {
	            if (!looseIdentical(v0, p0) || !looseIdentical(v1, p1) || !looseIdentical(v2, p2) ||
	                !looseIdentical(v3, p3) || !looseIdentical(v4, p4) || !looseIdentical(v5, p5) ||
	                !looseIdentical(v6, p6) || !looseIdentical(v7, p7) || !looseIdentical(v8, p8) ||
	                !looseIdentical(v9, p9)) {
	                v0 = p0;
	                v1 = p1;
	                v2 = p2;
	                v3 = p3;
	                v4 = p4;
	                v5 = p5;
	                v6 = p6;
	                v7 = p7;
	                v8 = p8;
	                v9 = p9;
	                result = fn(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9);
	            }
	            return result;
	        };
	    }
	    function setBindingDebugInfoForChanges(renderer, el, changes) {
	        Object.keys(changes).forEach(function (propName) {
	            setBindingDebugInfo(renderer, el, propName, changes[propName].currentValue);
	        });
	    }
	    function setBindingDebugInfo(renderer, el, propName, value) {
	        try {
	            renderer.setBindingDebugInfo(el, "ng-reflect-" + camelCaseToDashCase(propName), value ? value.toString() : null);
	        }
	        catch (e) {
	            renderer.setBindingDebugInfo(el, "ng-reflect-" + camelCaseToDashCase(propName), '[ERROR] Exception while trying to serialize the value');
	        }
	    }
	    var CAMEL_CASE_REGEXP = /([A-Z])/g;
	    function camelCaseToDashCase(input) {
	        return input.replace(CAMEL_CASE_REGEXP, function () {
	            var m = [];
	            for (var _i = 0; _i < arguments.length; _i++) {
	                m[_i - 0] = arguments[_i];
	            }
	            return '-' + m[1].toLowerCase();
	        });
	    }
	    function createRenderElement(renderer, parentElement, name, attrs, debugInfo) {
	        var el = renderer.createElement(parentElement, name, debugInfo);
	        for (var i = 0; i < attrs.length; i += 2) {
	            renderer.setElementAttribute(el, attrs.get(i), attrs.get(i + 1));
	        }
	        return el;
	    }
	    function selectOrCreateRenderHostElement(renderer, elementName, attrs, rootSelectorOrNode, debugInfo) {
	        var hostElement;
	        if (isPresent(rootSelectorOrNode)) {
	            hostElement = renderer.selectRootElement(rootSelectorOrNode, debugInfo);
	            for (var i = 0; i < attrs.length; i += 2) {
	                renderer.setElementAttribute(hostElement, attrs.get(i), attrs.get(i + 1));
	            }
	        }
	        else {
	            hostElement = createRenderElement(renderer, null, elementName, attrs, debugInfo);
	        }
	        return hostElement;
	    }
	    function subscribeToRenderElement(view, element, eventNamesAndTargets, listener) {
	        var disposables = createEmptyInlineArray(eventNamesAndTargets.length / 2);
	        for (var i = 0; i < eventNamesAndTargets.length; i += 2) {
	            var eventName = eventNamesAndTargets.get(i);
	            var eventTarget = eventNamesAndTargets.get(i + 1);
	            var disposable = void 0;
	            if (eventTarget) {
	                disposable = view.renderer.listenGlobal(eventTarget, eventName, listener.bind(view, eventTarget + ":" + eventName));
	            }
	            else {
	                disposable = view.renderer.listen(element, eventName, listener.bind(view, eventName));
	            }
	            disposables.set(i / 2, disposable);
	        }
	        return disposeInlineArray.bind(null, disposables);
	    }
	    function disposeInlineArray(disposables) {
	        for (var i = 0; i < disposables.length; i++) {
	            disposables.get(i)();
	        }
	    }
	    function noop() { }
	    function createEmptyInlineArray(length) {
	        var ctor;
	        if (length <= 2) {
	            ctor = InlineArray2;
	        }
	        else if (length <= 4) {
	            ctor = InlineArray4;
	        }
	        else if (length <= 8) {
	            ctor = InlineArray8;
	        }
	        else if (length <= 16) {
	            ctor = InlineArray16;
	        }
	        else {
	            ctor = InlineArrayDynamic;
	        }
	        return new ctor(length);
	    }
	    var InlineArray0 = (function () {
	        function InlineArray0() {
	            this.length = 0;
	        }
	        InlineArray0.prototype.get = function (index) { return undefined; };
	        InlineArray0.prototype.set = function (index, value) { };
	        return InlineArray0;
	    }());
	    var InlineArray2 = (function () {
	        function InlineArray2(length, _v0, _v1) {
	            this.length = length;
	            this._v0 = _v0;
	            this._v1 = _v1;
	        }
	        InlineArray2.prototype.get = function (index) {
	            switch (index) {
	                case 0:
	                    return this._v0;
	                case 1:
	                    return this._v1;
	                default:
	                    return undefined;
	            }
	        };
	        InlineArray2.prototype.set = function (index, value) {
	            switch (index) {
	                case 0:
	                    this._v0 = value;
	                    break;
	                case 1:
	                    this._v1 = value;
	                    break;
	            }
	        };
	        return InlineArray2;
	    }());
	    var InlineArray4 = (function () {
	        function InlineArray4(length, _v0, _v1, _v2, _v3) {
	            this.length = length;
	            this._v0 = _v0;
	            this._v1 = _v1;
	            this._v2 = _v2;
	            this._v3 = _v3;
	        }
	        InlineArray4.prototype.get = function (index) {
	            switch (index) {
	                case 0:
	                    return this._v0;
	                case 1:
	                    return this._v1;
	                case 2:
	                    return this._v2;
	                case 3:
	                    return this._v3;
	                default:
	                    return undefined;
	            }
	        };
	        InlineArray4.prototype.set = function (index, value) {
	            switch (index) {
	                case 0:
	                    this._v0 = value;
	                    break;
	                case 1:
	                    this._v1 = value;
	                    break;
	                case 2:
	                    this._v2 = value;
	                    break;
	                case 3:
	                    this._v3 = value;
	                    break;
	            }
	        };
	        return InlineArray4;
	    }());
	    var InlineArray8 = (function () {
	        function InlineArray8(length, _v0, _v1, _v2, _v3, _v4, _v5, _v6, _v7) {
	            this.length = length;
	            this._v0 = _v0;
	            this._v1 = _v1;
	            this._v2 = _v2;
	            this._v3 = _v3;
	            this._v4 = _v4;
	            this._v5 = _v5;
	            this._v6 = _v6;
	            this._v7 = _v7;
	        }
	        InlineArray8.prototype.get = function (index) {
	            switch (index) {
	                case 0:
	                    return this._v0;
	                case 1:
	                    return this._v1;
	                case 2:
	                    return this._v2;
	                case 3:
	                    return this._v3;
	                case 4:
	                    return this._v4;
	                case 5:
	                    return this._v5;
	                case 6:
	                    return this._v6;
	                case 7:
	                    return this._v7;
	                default:
	                    return undefined;
	            }
	        };
	        InlineArray8.prototype.set = function (index, value) {
	            switch (index) {
	                case 0:
	                    this._v0 = value;
	                    break;
	                case 1:
	                    this._v1 = value;
	                    break;
	                case 2:
	                    this._v2 = value;
	                    break;
	                case 3:
	                    this._v3 = value;
	                    break;
	                case 4:
	                    this._v4 = value;
	                    break;
	                case 5:
	                    this._v5 = value;
	                    break;
	                case 6:
	                    this._v6 = value;
	                    break;
	                case 7:
	                    this._v7 = value;
	                    break;
	            }
	        };
	        return InlineArray8;
	    }());
	    var InlineArray16 = (function () {
	        function InlineArray16(length, _v0, _v1, _v2, _v3, _v4, _v5, _v6, _v7, _v8, _v9, _v10, _v11, _v12, _v13, _v14, _v15) {
	            this.length = length;
	            this._v0 = _v0;
	            this._v1 = _v1;
	            this._v2 = _v2;
	            this._v3 = _v3;
	            this._v4 = _v4;
	            this._v5 = _v5;
	            this._v6 = _v6;
	            this._v7 = _v7;
	            this._v8 = _v8;
	            this._v9 = _v9;
	            this._v10 = _v10;
	            this._v11 = _v11;
	            this._v12 = _v12;
	            this._v13 = _v13;
	            this._v14 = _v14;
	            this._v15 = _v15;
	        }
	        InlineArray16.prototype.get = function (index) {
	            switch (index) {
	                case 0:
	                    return this._v0;
	                case 1:
	                    return this._v1;
	                case 2:
	                    return this._v2;
	                case 3:
	                    return this._v3;
	                case 4:
	                    return this._v4;
	                case 5:
	                    return this._v5;
	                case 6:
	                    return this._v6;
	                case 7:
	                    return this._v7;
	                case 8:
	                    return this._v8;
	                case 9:
	                    return this._v9;
	                case 10:
	                    return this._v10;
	                case 11:
	                    return this._v11;
	                case 12:
	                    return this._v12;
	                case 13:
	                    return this._v13;
	                case 14:
	                    return this._v14;
	                case 15:
	                    return this._v15;
	                default:
	                    return undefined;
	            }
	        };
	        InlineArray16.prototype.set = function (index, value) {
	            switch (index) {
	                case 0:
	                    this._v0 = value;
	                    break;
	                case 1:
	                    this._v1 = value;
	                    break;
	                case 2:
	                    this._v2 = value;
	                    break;
	                case 3:
	                    this._v3 = value;
	                    break;
	                case 4:
	                    this._v4 = value;
	                    break;
	                case 5:
	                    this._v5 = value;
	                    break;
	                case 6:
	                    this._v6 = value;
	                    break;
	                case 7:
	                    this._v7 = value;
	                    break;
	                case 8:
	                    this._v8 = value;
	                    break;
	                case 9:
	                    this._v9 = value;
	                    break;
	                case 10:
	                    this._v10 = value;
	                    break;
	                case 11:
	                    this._v11 = value;
	                    break;
	                case 12:
	                    this._v12 = value;
	                    break;
	                case 13:
	                    this._v13 = value;
	                    break;
	                case 14:
	                    this._v14 = value;
	                    break;
	                case 15:
	                    this._v15 = value;
	                    break;
	            }
	        };
	        return InlineArray16;
	    }());
	    var InlineArrayDynamic = (function () {
	        // Note: We still take the length argument so this class can be created
	        // in the same ways as the other classes!
	        function InlineArrayDynamic(length) {
	            var values = [];
	            for (var _i = 1; _i < arguments.length; _i++) {
	                values[_i - 1] = arguments[_i];
	            }
	            this.length = length;
	            this._values = values;
	        }
	        InlineArrayDynamic.prototype.get = function (index) { return this._values[index]; };
	        InlineArrayDynamic.prototype.set = function (index, value) { this._values[index] = value; };
	        return InlineArrayDynamic;
	    }());
	    var EMPTY_INLINE_ARRAY = new InlineArray0();


	    var view_utils = Object.freeze({
	        ViewUtils: ViewUtils,
	        createRenderComponentType: createRenderComponentType,
	        addToArray: addToArray,
	        interpolate: interpolate,
	        inlineInterpolate: inlineInterpolate,
	        checkBinding: checkBinding,
	        castByValue: castByValue,
	        EMPTY_ARRAY: EMPTY_ARRAY,
	        EMPTY_MAP: EMPTY_MAP,
	        pureProxy1: pureProxy1,
	        pureProxy2: pureProxy2,
	        pureProxy3: pureProxy3,
	        pureProxy4: pureProxy4,
	        pureProxy5: pureProxy5,
	        pureProxy6: pureProxy6,
	        pureProxy7: pureProxy7,
	        pureProxy8: pureProxy8,
	        pureProxy9: pureProxy9,
	        pureProxy10: pureProxy10,
	        setBindingDebugInfoForChanges: setBindingDebugInfoForChanges,
	        setBindingDebugInfo: setBindingDebugInfo,
	        createRenderElement: createRenderElement,
	        selectOrCreateRenderHostElement: selectOrCreateRenderHostElement,
	        subscribeToRenderElement: subscribeToRenderElement,
	        noop: noop,
	        InlineArray2: InlineArray2,
	        InlineArray4: InlineArray4,
	        InlineArray8: InlineArray8,
	        InlineArray16: InlineArray16,
	        InlineArrayDynamic: InlineArrayDynamic,
	        EMPTY_INLINE_ARRAY: EMPTY_INLINE_ARRAY
	    });

	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    var __extends$5 = (this && this.__extends) || function (d, b) {
	        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	    /**
	     * Represents an instance of a Component created via a {@link ComponentFactory}.
	     *
	     * `ComponentRef` provides access to the Component Instance as well other objects related to this
	     * Component Instance and allows you to destroy the Component Instance via the {@link #destroy}
	     * method.
	     * @stable
	     */
	    var ComponentRef = (function () {
	        function ComponentRef() {
	        }
	        Object.defineProperty(ComponentRef.prototype, "location", {
	            /**
	             * Location of the Host Element of this Component Instance.
	             */
	            get: function () { return unimplemented(); },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(ComponentRef.prototype, "injector", {
	            /**
	             * The injector on which the component instance exists.
	             */
	            get: function () { return unimplemented(); },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(ComponentRef.prototype, "instance", {
	            /**
	             * The instance of the Component.
	             */
	            get: function () { return unimplemented(); },
	            enumerable: true,
	            configurable: true
	        });
	        ;
	        Object.defineProperty(ComponentRef.prototype, "hostView", {
	            /**
	             * The {@link ViewRef} of the Host View of this Component instance.
	             */
	            get: function () { return unimplemented(); },
	            enumerable: true,
	            configurable: true
	        });
	        ;
	        Object.defineProperty(ComponentRef.prototype, "changeDetectorRef", {
	            /**
	             * The {@link ChangeDetectorRef} of the Component instance.
	             */
	            get: function () { return unimplemented(); },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(ComponentRef.prototype, "componentType", {
	            /**
	             * The component type.
	             */
	            get: function () { return unimplemented(); },
	            enumerable: true,
	            configurable: true
	        });
	        return ComponentRef;
	    }());
	    var ComponentRef_ = (function (_super) {
	        __extends$5(ComponentRef_, _super);
	        function ComponentRef_(_index, _parentView, _nativeElement, _component) {
	            _super.call(this);
	            this._index = _index;
	            this._parentView = _parentView;
	            this._nativeElement = _nativeElement;
	            this._component = _component;
	        }
	        Object.defineProperty(ComponentRef_.prototype, "location", {
	            get: function () { return new ElementRef(this._nativeElement); },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(ComponentRef_.prototype, "injector", {
	            get: function () { return this._parentView.injector(this._index); },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(ComponentRef_.prototype, "instance", {
	            get: function () { return this._component; },
	            enumerable: true,
	            configurable: true
	        });
	        ;
	        Object.defineProperty(ComponentRef_.prototype, "hostView", {
	            get: function () { return this._parentView.ref; },
	            enumerable: true,
	            configurable: true
	        });
	        ;
	        Object.defineProperty(ComponentRef_.prototype, "changeDetectorRef", {
	            get: function () { return this._parentView.ref; },
	            enumerable: true,
	            configurable: true
	        });
	        ;
	        Object.defineProperty(ComponentRef_.prototype, "componentType", {
	            get: function () { return this._component.constructor; },
	            enumerable: true,
	            configurable: true
	        });
	        ComponentRef_.prototype.destroy = function () { this._parentView.detachAndDestroy(); };
	        ComponentRef_.prototype.onDestroy = function (callback) { this.hostView.onDestroy(callback); };
	        return ComponentRef_;
	    }(ComponentRef));
	    /**
	     * @stable
	     */
	    var ComponentFactory = (function () {
	        function ComponentFactory(selector, _viewClass, _componentType) {
	            this.selector = selector;
	            this._viewClass = _viewClass;
	            this._componentType = _componentType;
	        }
	        Object.defineProperty(ComponentFactory.prototype, "componentType", {
	            get: function () { return this._componentType; },
	            enumerable: true,
	            configurable: true
	        });
	        /**
	         * Creates a new component.
	         */
	        ComponentFactory.prototype.create = function (injector, projectableNodes, rootSelectorOrNode) {
	            if (projectableNodes === void 0) { projectableNodes = null; }
	            if (rootSelectorOrNode === void 0) { rootSelectorOrNode = null; }
	            var vu = injector.get(ViewUtils);
	            if (!projectableNodes) {
	                projectableNodes = [];
	            }
	            var hostView = new this._viewClass(vu, null, null, null);
	            return hostView.createHostView(rootSelectorOrNode, injector, projectableNodes);
	        };
	        return ComponentFactory;
	    }());

	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    var __extends$7 = (this && this.__extends) || function (d, b) {
	        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	    /**
	     * @stable
	     */
	    var NoComponentFactoryError = (function (_super) {
	        __extends$7(NoComponentFactoryError, _super);
	        function NoComponentFactoryError(component) {
	            _super.call(this, "No component factory found for " + stringify(component));
	            this.component = component;
	        }
	        return NoComponentFactoryError;
	    }(BaseError));
	    var _NullComponentFactoryResolver = (function () {
	        function _NullComponentFactoryResolver() {
	        }
	        _NullComponentFactoryResolver.prototype.resolveComponentFactory = function (component) {
	            throw new NoComponentFactoryError(component);
	        };
	        return _NullComponentFactoryResolver;
	    }());
	    /**
	     * @stable
	     */
	    var ComponentFactoryResolver = (function () {
	        function ComponentFactoryResolver() {
	        }
	        ComponentFactoryResolver.NULL = new _NullComponentFactoryResolver();
	        return ComponentFactoryResolver;
	    }());
	    var CodegenComponentFactoryResolver = (function () {
	        function CodegenComponentFactoryResolver(factories, _parent) {
	            this._parent = _parent;
	            this._factories = new Map();
	            for (var i = 0; i < factories.length; i++) {
	                var factory = factories[i];
	                this._factories.set(factory.componentType, factory);
	            }
	        }
	        CodegenComponentFactoryResolver.prototype.resolveComponentFactory = function (component) {
	            var result = this._factories.get(component);
	            if (!result) {
	                result = this._parent.resolveComponentFactory(component);
	            }
	            return result;
	        };
	        return CodegenComponentFactoryResolver;
	    }());

	    var trace;
	    var events;
	    function detectWTF() {
	        var wtf = global$1['wtf'];
	        if (wtf) {
	            trace = wtf['trace'];
	            if (trace) {
	                events = trace['events'];
	                return true;
	            }
	        }
	        return false;
	    }
	    function createScope(signature, flags) {
	        if (flags === void 0) { flags = null; }
	        return events.createScope(signature, flags);
	    }
	    function leave(scope, returnValue) {
	        trace.leaveScope(scope, returnValue);
	        return returnValue;
	    }
	    function startTimeRange(rangeType, action) {
	        return trace.beginTimeRange(rangeType, action);
	    }
	    function endTimeRange(range) {
	        trace.endTimeRange(range);
	    }

	    /**
	     * True if WTF is enabled.
	     */
	    var wtfEnabled = detectWTF();
	    function noopScope(arg0, arg1) {
	        return null;
	    }
	    /**
	     * Create trace scope.
	     *
	     * Scopes must be strictly nested and are analogous to stack frames, but
	     * do not have to follow the stack frames. Instead it is recommended that they follow logical
	     * nesting. You may want to use
	     * [Event
	     * Signatures](http://google.github.io/tracing-framework/instrumenting-code.html#custom-events)
	     * as they are defined in WTF.
	     *
	     * Used to mark scope entry. The return value is used to leave the scope.
	     *
	     *     var myScope = wtfCreateScope('MyClass#myMethod(ascii someVal)');
	     *
	     *     someMethod() {
	     *        var s = myScope('Foo'); // 'Foo' gets stored in tracing UI
	     *        // DO SOME WORK HERE
	     *        return wtfLeave(s, 123); // Return value 123
	     *     }
	     *
	     * Note, adding try-finally block around the work to ensure that `wtfLeave` gets called can
	     * negatively impact the performance of your application. For this reason we recommend that
	     * you don't add them to ensure that `wtfLeave` gets called. In production `wtfLeave` is a noop and
	     * so try-finally block has no value. When debugging perf issues, skipping `wtfLeave`, do to
	     * exception, will produce incorrect trace, but presence of exception signifies logic error which
	     * needs to be fixed before the app should be profiled. Add try-finally only when you expect that
	     * an exception is expected during normal execution while profiling.
	     *
	     * @experimental
	     */
	    var wtfCreateScope = wtfEnabled ? createScope : function (signature, flags) { return noopScope; };
	    /**
	     * Used to mark end of Scope.
	     *
	     * - `scope` to end.
	     * - `returnValue` (optional) to be passed to the WTF.
	     *
	     * Returns the `returnValue for easy chaining.
	     * @experimental
	     */
	    var wtfLeave = wtfEnabled ? leave : function (s, r) { return r; };
	    /**
	     * Used to mark Async start. Async are similar to scope but they don't have to be strictly nested.
	     * The return value is used in the call to [endAsync]. Async ranges only work if WTF has been
	     * enabled.
	     *
	     *     someMethod() {
	     *        var s = wtfStartTimeRange('HTTP:GET', 'some.url');
	     *        var future = new Future.delay(5).then((_) {
	     *          wtfEndTimeRange(s);
	     *        });
	     *     }
	     * @experimental
	     */
	    var wtfStartTimeRange = wtfEnabled ? startTimeRange : function (rangeType, action) { return null; };
	    /**
	     * Ends a async time range operation.
	     * [range] is the return value from [wtfStartTimeRange] Async ranges only work if WTF has been
	     * enabled.
	     * @experimental
	     */
	    var wtfEndTimeRange = wtfEnabled ? endTimeRange : function (r) { return null; };

	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    var __extends$8 = (this && this.__extends) || function (d, b) {
	        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	    /**
	     * Use by directives and components to emit custom Events.
	     *
	     * ### Examples
	     *
	     * In the following example, `Zippy` alternatively emits `open` and `close` events when its
	     * title gets clicked:
	     *
	     * ```
	     * @Component({
	     *   selector: 'zippy',
	     *   template: `
	     *   <div class="zippy">
	     *     <div (click)="toggle()">Toggle</div>
	     *     <div [hidden]="!visible">
	     *       <ng-content></ng-content>
	     *     </div>
	     *  </div>`})
	     * export class Zippy {
	     *   visible: boolean = true;
	     *   @Output() open: EventEmitter<any> = new EventEmitter();
	     *   @Output() close: EventEmitter<any> = new EventEmitter();
	     *
	     *   toggle() {
	     *     this.visible = !this.visible;
	     *     if (this.visible) {
	     *       this.open.emit(null);
	     *     } else {
	     *       this.close.emit(null);
	     *     }
	     *   }
	     * }
	     * ```
	     *
	     * The events payload can be accessed by the parameter `$event` on the components output event
	     * handler:
	     *
	     * ```
	     * <zippy (open)="onOpen($event)" (close)="onClose($event)"></zippy>
	     * ```
	     *
	     * Uses Rx.Observable but provides an adapter to make it work as specified here:
	     * https://github.com/jhusain/observable-spec
	     *
	     * Once a reference implementation of the spec is available, switch to it.
	     * @stable
	     */
	    var EventEmitter = (function (_super) {
	        __extends$8(EventEmitter, _super);
	        /**
	         * Creates an instance of [EventEmitter], which depending on [isAsync],
	         * delivers events synchronously or asynchronously.
	         */
	        function EventEmitter(isAsync) {
	            if (isAsync === void 0) { isAsync = false; }
	            _super.call(this);
	            this.__isAsync = isAsync;
	        }
	        EventEmitter.prototype.emit = function (value) { _super.prototype.next.call(this, value); };
	        EventEmitter.prototype.subscribe = function (generatorOrNext, error, complete) {
	            var schedulerFn;
	            var errorFn = function (err) { return null; };
	            var completeFn = function () { return null; };
	            if (generatorOrNext && typeof generatorOrNext === 'object') {
	                schedulerFn = this.__isAsync ? function (value) {
	                    setTimeout(function () { return generatorOrNext.next(value); });
	                } : function (value) { generatorOrNext.next(value); };
	                if (generatorOrNext.error) {
	                    errorFn = this.__isAsync ? function (err) { setTimeout(function () { return generatorOrNext.error(err); }); } :
	                        function (err) { generatorOrNext.error(err); };
	                }
	                if (generatorOrNext.complete) {
	                    completeFn = this.__isAsync ? function () { setTimeout(function () { return generatorOrNext.complete(); }); } :
	                        function () { generatorOrNext.complete(); };
	                }
	            }
	            else {
	                schedulerFn = this.__isAsync ? function (value) { setTimeout(function () { return generatorOrNext(value); }); } :
	                    function (value) { generatorOrNext(value); };
	                if (error) {
	                    errorFn =
	                        this.__isAsync ? function (err) { setTimeout(function () { return error(err); }); } : function (err) { error(err); };
	                }
	                if (complete) {
	                    completeFn =
	                        this.__isAsync ? function () { setTimeout(function () { return complete(); }); } : function () { complete(); };
	                }
	            }
	            return _super.prototype.subscribe.call(this, schedulerFn, errorFn, completeFn);
	        };
	        return EventEmitter;
	    }(rxjs_Subject.Subject));

	    /**
	     * An injectable service for executing work inside or outside of the Angular zone.
	     *
	     * The most common use of this service is to optimize performance when starting a work consisting of
	     * one or more asynchronous tasks that don't require UI updates or error handling to be handled by
	     * Angular. Such tasks can be kicked off via {@link runOutsideAngular} and if needed, these tasks
	     * can reenter the Angular zone via {@link run}.
	     *
	     * <!-- TODO: add/fix links to:
	     *   - docs explaining zones and the use of zones in Angular and change-detection
	     *   - link to runOutsideAngular/run (throughout this file!)
	     *   -->
	     *
	     * ### Example
	     * ```
	     * import {Component, NgZone} from '@angular/core';
	     * import {NgIf} from '@angular/common';
	     *
	     * @Component({
	     *   selector: 'ng-zone-demo'.
	     *   template: `
	     *     <h2>Demo: NgZone</h2>
	     *
	     *     <p>Progress: {{progress}}%</p>
	     *     <p *ngIf="progress >= 100">Done processing {{label}} of Angular zone!</p>
	     *
	     *     <button (click)="processWithinAngularZone()">Process within Angular zone</button>
	     *     <button (click)="processOutsideOfAngularZone()">Process outside of Angular zone</button>
	     *   `,
	     * })
	     * export class NgZoneDemo {
	     *   progress: number = 0;
	     *   label: string;
	     *
	     *   constructor(private _ngZone: NgZone) {}
	     *
	     *   // Loop inside the Angular zone
	     *   // so the UI DOES refresh after each setTimeout cycle
	     *   processWithinAngularZone() {
	     *     this.label = 'inside';
	     *     this.progress = 0;
	     *     this._increaseProgress(() => console.log('Inside Done!'));
	     *   }
	     *
	     *   // Loop outside of the Angular zone
	     *   // so the UI DOES NOT refresh after each setTimeout cycle
	     *   processOutsideOfAngularZone() {
	     *     this.label = 'outside';
	     *     this.progress = 0;
	     *     this._ngZone.runOutsideAngular(() => {
	     *       this._increaseProgress(() => {
	     *       // reenter the Angular zone and display done
	     *       this._ngZone.run(() => {console.log('Outside Done!') });
	     *     }}));
	     *   }
	     *
	     *   _increaseProgress(doneCallback: () => void) {
	     *     this.progress += 1;
	     *     console.log(`Current progress: ${this.progress}%`);
	     *
	     *     if (this.progress < 100) {
	     *       window.setTimeout(() => this._increaseProgress(doneCallback)), 10)
	     *     } else {
	     *       doneCallback();
	     *     }
	     *   }
	     * }
	     * ```
	     * @experimental
	     */
	    var NgZone = (function () {
	        function NgZone(_a) {
	            var _b = _a.enableLongStackTrace, enableLongStackTrace = _b === void 0 ? false : _b;
	            this._hasPendingMicrotasks = false;
	            this._hasPendingMacrotasks = false;
	            this._isStable = true;
	            this._nesting = 0;
	            this._onUnstable = new EventEmitter(false);
	            this._onMicrotaskEmpty = new EventEmitter(false);
	            this._onStable = new EventEmitter(false);
	            this._onErrorEvents = new EventEmitter(false);
	            if (typeof Zone == 'undefined') {
	                throw new Error('Angular requires Zone.js prolyfill.');
	            }
	            Zone.assertZonePatched();
	            this.outer = this.inner = Zone.current;
	            if (Zone['wtfZoneSpec']) {
	                this.inner = this.inner.fork(Zone['wtfZoneSpec']);
	            }
	            if (enableLongStackTrace && Zone['longStackTraceZoneSpec']) {
	                this.inner = this.inner.fork(Zone['longStackTraceZoneSpec']);
	            }
	            this.forkInnerZoneWithAngularBehavior();
	        }
	        NgZone.isInAngularZone = function () { return Zone.current.get('isAngularZone') === true; };
	        NgZone.assertInAngularZone = function () {
	            if (!NgZone.isInAngularZone()) {
	                throw new Error('Expected to be in Angular Zone, but it is not!');
	            }
	        };
	        NgZone.assertNotInAngularZone = function () {
	            if (NgZone.isInAngularZone()) {
	                throw new Error('Expected to not be in Angular Zone, but it is!');
	            }
	        };
	        /**
	         * Executes the `fn` function synchronously within the Angular zone and returns value returned by
	         * the function.
	         *
	         * Running functions via `run` allows you to reenter Angular zone from a task that was executed
	         * outside of the Angular zone (typically started via {@link runOutsideAngular}).
	         *
	         * Any future tasks or microtasks scheduled from within this function will continue executing from
	         * within the Angular zone.
	         *
	         * If a synchronous error happens it will be rethrown and not reported via `onError`.
	         */
	        NgZone.prototype.run = function (fn) { return this.inner.run(fn); };
	        /**
	         * Same as `run`, except that synchronous errors are caught and forwarded via `onError` and not
	         * rethrown.
	         */
	        NgZone.prototype.runGuarded = function (fn) { return this.inner.runGuarded(fn); };
	        /**
	         * Executes the `fn` function synchronously in Angular's parent zone and returns value returned by
	         * the function.
	         *
	         * Running functions via `runOutsideAngular` allows you to escape Angular's zone and do work that
	         * doesn't trigger Angular change-detection or is subject to Angular's error handling.
	         *
	         * Any future tasks or microtasks scheduled from within this function will continue executing from
	         * outside of the Angular zone.
	         *
	         * Use {@link run} to reenter the Angular zone and do work that updates the application model.
	         */
	        NgZone.prototype.runOutsideAngular = function (fn) { return this.outer.run(fn); };
	        Object.defineProperty(NgZone.prototype, "onUnstable", {
	            /**
	             * Notifies when code enters Angular Zone. This gets fired first on VM Turn.
	             */
	            get: function () { return this._onUnstable; },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(NgZone.prototype, "onMicrotaskEmpty", {
	            /**
	             * Notifies when there is no more microtasks enqueue in the current VM Turn.
	             * This is a hint for Angular to do change detection, which may enqueue more microtasks.
	             * For this reason this event can fire multiple times per VM Turn.
	             */
	            get: function () { return this._onMicrotaskEmpty; },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(NgZone.prototype, "onStable", {
	            /**
	             * Notifies when the last `onMicrotaskEmpty` has run and there are no more microtasks, which
	             * implies we are about to relinquish VM turn.
	             * This event gets called just once.
	             */
	            get: function () { return this._onStable; },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(NgZone.prototype, "onError", {
	            /**
	             * Notify that an error has been delivered.
	             */
	            get: function () { return this._onErrorEvents; },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(NgZone.prototype, "isStable", {
	            /**
	             * Whether there are no outstanding microtasks or macrotasks.
	             */
	            get: function () { return this._isStable; },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(NgZone.prototype, "hasPendingMicrotasks", {
	            get: function () { return this._hasPendingMicrotasks; },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(NgZone.prototype, "hasPendingMacrotasks", {
	            get: function () { return this._hasPendingMacrotasks; },
	            enumerable: true,
	            configurable: true
	        });
	        NgZone.prototype.checkStable = function () {
	            var _this = this;
	            if (this._nesting == 0 && !this._hasPendingMicrotasks && !this._isStable) {
	                try {
	                    this._nesting++;
	                    this._onMicrotaskEmpty.emit(null);
	                }
	                finally {
	                    this._nesting--;
	                    if (!this._hasPendingMicrotasks) {
	                        try {
	                            this.runOutsideAngular(function () { return _this._onStable.emit(null); });
	                        }
	                        finally {
	                            this._isStable = true;
	                        }
	                    }
	                }
	            }
	        };
	        NgZone.prototype.forkInnerZoneWithAngularBehavior = function () {
	            var _this = this;
	            this.inner = this.inner.fork({
	                name: 'angular',
	                properties: { 'isAngularZone': true },
	                onInvokeTask: function (delegate, current, target, task, applyThis, applyArgs) {
	                    try {
	                        _this.onEnter();
	                        return delegate.invokeTask(target, task, applyThis, applyArgs);
	                    }
	                    finally {
	                        _this.onLeave();
	                    }
	                },
	                onInvoke: function (delegate, current, target, callback, applyThis, applyArgs, source) {
	                    try {
	                        _this.onEnter();
	                        return delegate.invoke(target, callback, applyThis, applyArgs, source);
	                    }
	                    finally {
	                        _this.onLeave();
	                    }
	                },
	                onHasTask: function (delegate, current, target, hasTaskState) {
	                    delegate.hasTask(target, hasTaskState);
	                    if (current === target) {
	                        // We are only interested in hasTask events which originate from our zone
	                        // (A child hasTask event is not interesting to us)
	                        if (hasTaskState.change == 'microTask') {
	                            _this.setHasMicrotask(hasTaskState.microTask);
	                        }
	                        else if (hasTaskState.change == 'macroTask') {
	                            _this.setHasMacrotask(hasTaskState.macroTask);
	                        }
	                    }
	                },
	                onHandleError: function (delegate, current, target, error) {
	                    delegate.handleError(target, error);
	                    _this.triggerError(error);
	                    return false;
	                }
	            });
	        };
	        NgZone.prototype.onEnter = function () {
	            this._nesting++;
	            if (this._isStable) {
	                this._isStable = false;
	                this._onUnstable.emit(null);
	            }
	        };
	        NgZone.prototype.onLeave = function () {
	            this._nesting--;
	            this.checkStable();
	        };
	        NgZone.prototype.setHasMicrotask = function (hasMicrotasks) {
	            this._hasPendingMicrotasks = hasMicrotasks;
	            this.checkStable();
	        };
	        NgZone.prototype.setHasMacrotask = function (hasMacrotasks) { this._hasPendingMacrotasks = hasMacrotasks; };
	        NgZone.prototype.triggerError = function (error) { this._onErrorEvents.emit(error); };
	        return NgZone;
	    }());

	    /**
	     * The Testability service provides testing hooks that can be accessed from
	     * the browser and by services such as Protractor. Each bootstrapped Angular
	     * application on the page will have an instance of Testability.
	     * @experimental
	     */
	    var Testability = (function () {
	        function Testability(_ngZone) {
	            this._ngZone = _ngZone;
	            /** @internal */
	            this._pendingCount = 0;
	            /** @internal */
	            this._isZoneStable = true;
	            /**
	             * Whether any work was done since the last 'whenStable' callback. This is
	             * useful to detect if this could have potentially destabilized another
	             * component while it is stabilizing.
	             * @internal
	             */
	            this._didWork = false;
	            /** @internal */
	            this._callbacks = [];
	            this._watchAngularEvents();
	        }
	        /** @internal */
	        Testability.prototype._watchAngularEvents = function () {
	            var _this = this;
	            this._ngZone.onUnstable.subscribe({
	                next: function () {
	                    _this._didWork = true;
	                    _this._isZoneStable = false;
	                }
	            });
	            this._ngZone.runOutsideAngular(function () {
	                _this._ngZone.onStable.subscribe({
	                    next: function () {
	                        NgZone.assertNotInAngularZone();
	                        scheduleMicroTask(function () {
	                            _this._isZoneStable = true;
	                            _this._runCallbacksIfReady();
	                        });
	                    }
	                });
	            });
	        };
	        Testability.prototype.increasePendingRequestCount = function () {
	            this._pendingCount += 1;
	            this._didWork = true;
	            return this._pendingCount;
	        };
	        Testability.prototype.decreasePendingRequestCount = function () {
	            this._pendingCount -= 1;
	            if (this._pendingCount < 0) {
	                throw new Error('pending async requests below zero');
	            }
	            this._runCallbacksIfReady();
	            return this._pendingCount;
	        };
	        Testability.prototype.isStable = function () {
	            return this._isZoneStable && this._pendingCount == 0 && !this._ngZone.hasPendingMacrotasks;
	        };
	        /** @internal */
	        Testability.prototype._runCallbacksIfReady = function () {
	            var _this = this;
	            if (this.isStable()) {
	                // Schedules the call backs in a new frame so that it is always async.
	                scheduleMicroTask(function () {
	                    while (_this._callbacks.length !== 0) {
	                        (_this._callbacks.pop())(_this._didWork);
	                    }
	                    _this._didWork = false;
	                });
	            }
	            else {
	                // Not Ready
	                this._didWork = true;
	            }
	        };
	        Testability.prototype.whenStable = function (callback) {
	            this._callbacks.push(callback);
	            this._runCallbacksIfReady();
	        };
	        Testability.prototype.getPendingRequestCount = function () { return this._pendingCount; };
	        /** @deprecated use findProviders */
	        Testability.prototype.findBindings = function (using, provider, exactMatch) {
	            // TODO(juliemr): implement.
	            return [];
	        };
	        Testability.prototype.findProviders = function (using, provider, exactMatch) {
	            // TODO(juliemr): implement.
	            return [];
	        };
	        Testability.decorators = [
	            { type: Injectable },
	        ];
	        /** @nocollapse */
	        Testability.ctorParameters = [
	            { type: NgZone, },
	        ];
	        return Testability;
	    }());
	    /**
	     * A global registry of {@link Testability} instances for specific elements.
	     * @experimental
	     */
	    var TestabilityRegistry = (function () {
	        function TestabilityRegistry() {
	            /** @internal */
	            this._applications = new Map();
	            _testabilityGetter.addToWindow(this);
	        }
	        TestabilityRegistry.prototype.registerApplication = function (token, testability) {
	            this._applications.set(token, testability);
	        };
	        TestabilityRegistry.prototype.getTestability = function (elem) { return this._applications.get(elem); };
	        TestabilityRegistry.prototype.getAllTestabilities = function () { return Array.from(this._applications.values()); };
	        TestabilityRegistry.prototype.getAllRootElements = function () { return Array.from(this._applications.keys()); };
	        TestabilityRegistry.prototype.findTestabilityInTree = function (elem, findInAncestors) {
	            if (findInAncestors === void 0) { findInAncestors = true; }
	            return _testabilityGetter.findTestabilityInTree(this, elem, findInAncestors);
	        };
	        TestabilityRegistry.decorators = [
	            { type: Injectable },
	        ];
	        /** @nocollapse */
	        TestabilityRegistry.ctorParameters = [];
	        return TestabilityRegistry;
	    }());
	    var _NoopGetTestability = (function () {
	        function _NoopGetTestability() {
	        }
	        _NoopGetTestability.prototype.addToWindow = function (registry) { };
	        _NoopGetTestability.prototype.findTestabilityInTree = function (registry, elem, findInAncestors) {
	            return null;
	        };
	        return _NoopGetTestability;
	    }());
	    /**
	     * Set the {@link GetTestability} implementation used by the Angular testing framework.
	     * @experimental
	     */
	    function setTestabilityGetter(getter) {
	        _testabilityGetter = getter;
	    }
	    var _testabilityGetter = new _NoopGetTestability();

	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    var __extends$3 = (this && this.__extends) || function (d, b) {
	        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	    var _devMode = true;
	    var _runModeLocked = false;
	    var _platform;
	    /**
	     * Disable Angular's development mode, which turns off assertions and other
	     * checks within the framework.
	     *
	     * One important assertion this disables verifies that a change detection pass
	     * does not result in additional changes to any bindings (also known as
	     * unidirectional data flow).
	     *
	     * @stable
	     */
	    function enableProdMode() {
	        if (_runModeLocked) {
	            throw new Error('Cannot enable prod mode after platform setup.');
	        }
	        _devMode = false;
	    }
	    /**
	     * Returns whether Angular is in development mode. After called once,
	     * the value is locked and won't change any more.
	     *
	     * By default, this is true, unless a user calls `enableProdMode` before calling this.
	     *
	     * @experimental APIs related to application bootstrap are currently under review.
	     */
	    function isDevMode() {
	        _runModeLocked = true;
	        return _devMode;
	    }
	    /**
	     * Creates a platform.
	     * Platforms have to be eagerly created via this function.
	     *
	     * @experimental APIs related to application bootstrap are currently under review.
	     */
	    function createPlatform(injector) {
	        if (_platform && !_platform.destroyed) {
	            throw new Error('There can be only one platform. Destroy the previous one to create a new one.');
	        }
	        _platform = injector.get(PlatformRef);
	        var inits = injector.get(PLATFORM_INITIALIZER, null);
	        if (inits)
	            inits.forEach(function (init) { return init(); });
	        return _platform;
	    }
	    /**
	     * Creates a factory for a platform
	     *
	     * @experimental APIs related to application bootstrap are currently under review.
	     */
	    function createPlatformFactory(parentPlaformFactory, name, providers) {
	        if (providers === void 0) { providers = []; }
	        var marker = new OpaqueToken("Platform: " + name);
	        return function (extraProviders) {
	            if (extraProviders === void 0) { extraProviders = []; }
	            if (!getPlatform()) {
	                if (parentPlaformFactory) {
	                    parentPlaformFactory(providers.concat(extraProviders).concat({ provide: marker, useValue: true }));
	                }
	                else {
	                    createPlatform(ReflectiveInjector.resolveAndCreate(providers.concat(extraProviders).concat({ provide: marker, useValue: true })));
	                }
	            }
	            return assertPlatform(marker);
	        };
	    }
	    /**
	     * Checks that there currently is a platform
	     * which contains the given token as a provider.
	     *
	     * @experimental APIs related to application bootstrap are currently under review.
	     */
	    function assertPlatform(requiredToken) {
	        var platform = getPlatform();
	        if (!platform) {
	            throw new Error('No platform exists!');
	        }
	        if (!platform.injector.get(requiredToken, null)) {
	            throw new Error('A platform with a different configuration has been created. Please destroy it first.');
	        }
	        return platform;
	    }
	    /**
	     * Destroy the existing platform.
	     *
	     * @experimental APIs related to application bootstrap are currently under review.
	     */
	    function destroyPlatform() {
	        if (_platform && !_platform.destroyed) {
	            _platform.destroy();
	        }
	    }
	    /**
	     * Returns the current platform.
	     *
	     * @experimental APIs related to application bootstrap are currently under review.
	     */
	    function getPlatform() {
	        return _platform && !_platform.destroyed ? _platform : null;
	    }
	    /**
	     * The Angular platform is the entry point for Angular on a web page. Each page
	     * has exactly one platform, and services (such as reflection) which are common
	     * to every Angular application running on the page are bound in its scope.
	     *
	     * A page's platform is initialized implicitly when {@link bootstrap}() is called, or
	     * explicitly by calling {@link createPlatform}().
	     *
	     * @stable
	     */
	    var PlatformRef = (function () {
	        function PlatformRef() {
	        }
	        /**
	         * Creates an instance of an `@NgModule` for the given platform
	         * for offline compilation.
	         *
	         * ## Simple Example
	         *
	         * ```typescript
	         * my_module.ts:
	         *
	         * @NgModule({
	         *   imports: [BrowserModule]
	         * })
	         * class MyModule {}
	         *
	         * main.ts:
	         * import {MyModuleNgFactory} from './my_module.ngfactory';
	         * import {platformBrowser} from '@angular/platform-browser';
	         *
	         * let moduleRef = platformBrowser().bootstrapModuleFactory(MyModuleNgFactory);
	         * ```
	         *
	         * @experimental APIs related to application bootstrap are currently under review.
	         */
	        PlatformRef.prototype.bootstrapModuleFactory = function (moduleFactory) {
	            throw unimplemented();
	        };
	        /**
	         * Creates an instance of an `@NgModule` for a given platform using the given runtime compiler.
	         *
	         * ## Simple Example
	         *
	         * ```typescript
	         * @NgModule({
	         *   imports: [BrowserModule]
	         * })
	         * class MyModule {}
	         *
	         * let moduleRef = platformBrowser().bootstrapModule(MyModule);
	         * ```
	         * @stable
	         */
	        PlatformRef.prototype.bootstrapModule = function (moduleType, compilerOptions) {
	            if (compilerOptions === void 0) { compilerOptions = []; }
	            throw unimplemented();
	        };
	        Object.defineProperty(PlatformRef.prototype, "injector", {
	            /**
	             * Retrieve the platform {@link Injector}, which is the parent injector for
	             * every Angular application on the page and provides singleton providers.
	             */
	            get: function () { throw unimplemented(); },
	            enumerable: true,
	            configurable: true
	        });
	        ;
	        Object.defineProperty(PlatformRef.prototype, "destroyed", {
	            get: function () { throw unimplemented(); },
	            enumerable: true,
	            configurable: true
	        });
	        return PlatformRef;
	    }());
	    function _callAndReportToErrorHandler(errorHandler, callback) {
	        try {
	            var result = callback();
	            if (isPromise(result)) {
	                return result.catch(function (e) {
	                    errorHandler.handleError(e);
	                    // rethrow as the exception handler might not do it
	                    throw e;
	                });
	            }
	            return result;
	        }
	        catch (e) {
	            errorHandler.handleError(e);
	            // rethrow as the exception handler might not do it
	            throw e;
	        }
	    }
	    var PlatformRef_ = (function (_super) {
	        __extends$3(PlatformRef_, _super);
	        function PlatformRef_(_injector) {
	            _super.call(this);
	            this._injector = _injector;
	            this._modules = [];
	            this._destroyListeners = [];
	            this._destroyed = false;
	        }
	        PlatformRef_.prototype.onDestroy = function (callback) { this._destroyListeners.push(callback); };
	        Object.defineProperty(PlatformRef_.prototype, "injector", {
	            get: function () { return this._injector; },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(PlatformRef_.prototype, "destroyed", {
	            get: function () { return this._destroyed; },
	            enumerable: true,
	            configurable: true
	        });
	        PlatformRef_.prototype.destroy = function () {
	            if (this._destroyed) {
	                throw new Error('The platform has already been destroyed!');
	            }
	            this._modules.slice().forEach(function (module) { return module.destroy(); });
	            this._destroyListeners.forEach(function (listener) { return listener(); });
	            this._destroyed = true;
	        };
	        PlatformRef_.prototype.bootstrapModuleFactory = function (moduleFactory) {
	            return this._bootstrapModuleFactoryWithZone(moduleFactory, null);
	        };
	        PlatformRef_.prototype._bootstrapModuleFactoryWithZone = function (moduleFactory, ngZone) {
	            var _this = this;
	            // Note: We need to create the NgZone _before_ we instantiate the module,
	            // as instantiating the module creates some providers eagerly.
	            // So we create a mini parent injector that just contains the new NgZone and
	            // pass that as parent to the NgModuleFactory.
	            if (!ngZone)
	                ngZone = new NgZone({ enableLongStackTrace: isDevMode() });
	            // Attention: Don't use ApplicationRef.run here,
	            // as we want to be sure that all possible constructor calls are inside `ngZone.run`!
	            return ngZone.run(function () {
	                var ngZoneInjector = ReflectiveInjector.resolveAndCreate([{ provide: NgZone, useValue: ngZone }], _this.injector);
	                var moduleRef = moduleFactory.create(ngZoneInjector);
	                var exceptionHandler = moduleRef.injector.get(ErrorHandler, null);
	                if (!exceptionHandler) {
	                    throw new Error('No ErrorHandler. Is platform module (BrowserModule) included?');
	                }
	                moduleRef.onDestroy(function () { return ListWrapper.remove(_this._modules, moduleRef); });
	                ngZone.onError.subscribe({ next: function (error) { exceptionHandler.handleError(error); } });
	                return _callAndReportToErrorHandler(exceptionHandler, function () {
	                    var initStatus = moduleRef.injector.get(ApplicationInitStatus);
	                    return initStatus.donePromise.then(function () {
	                        _this._moduleDoBootstrap(moduleRef);
	                        return moduleRef;
	                    });
	                });
	            });
	        };
	        PlatformRef_.prototype.bootstrapModule = function (moduleType, compilerOptions) {
	            if (compilerOptions === void 0) { compilerOptions = []; }
	            return this._bootstrapModuleWithZone(moduleType, compilerOptions, null);
	        };
	        PlatformRef_.prototype._bootstrapModuleWithZone = function (moduleType, compilerOptions, ngZone, componentFactoryCallback) {
	            var _this = this;
	            if (compilerOptions === void 0) { compilerOptions = []; }
	            var compilerFactory = this.injector.get(CompilerFactory);
	            var compiler = compilerFactory.createCompiler(Array.isArray(compilerOptions) ? compilerOptions : [compilerOptions]);
	            // ugly internal api hack: generate host component factories for all declared components and
	            // pass the factories into the callback - this is used by UpdateAdapter to get hold of all
	            // factories.
	            if (componentFactoryCallback) {
	                return compiler.compileModuleAndAllComponentsAsync(moduleType)
	                    .then(function (_a) {
	                    var ngModuleFactory = _a.ngModuleFactory, componentFactories = _a.componentFactories;
	                    componentFactoryCallback(componentFactories);
	                    return _this._bootstrapModuleFactoryWithZone(ngModuleFactory, ngZone);
	                });
	            }
	            return compiler.compileModuleAsync(moduleType)
	                .then(function (moduleFactory) { return _this._bootstrapModuleFactoryWithZone(moduleFactory, ngZone); });
	        };
	        PlatformRef_.prototype._moduleDoBootstrap = function (moduleRef) {
	            var appRef = moduleRef.injector.get(ApplicationRef);
	            if (moduleRef.bootstrapFactories.length > 0) {
	                moduleRef.bootstrapFactories.forEach(function (compFactory) { return appRef.bootstrap(compFactory); });
	            }
	            else if (moduleRef.instance.ngDoBootstrap) {
	                moduleRef.instance.ngDoBootstrap(appRef);
	            }
	            else {
	                throw new Error(("The module " + stringify(moduleRef.instance.constructor) + " was bootstrapped, but it does not declare \"@NgModule.bootstrap\" components nor a \"ngDoBootstrap\" method. ") +
	                    "Please define one of these.");
	            }
	        };
	        PlatformRef_.decorators = [
	            { type: Injectable },
	        ];
	        /** @nocollapse */
	        PlatformRef_.ctorParameters = [
	            { type: Injector, },
	        ];
	        return PlatformRef_;
	    }(PlatformRef));
	    /**
	     * A reference to an Angular application running on a page.
	     *
	     * For more about Angular applications, see the documentation for {@link bootstrap}.
	     *
	     * @stable
	     */
	    var ApplicationRef = (function () {
	        function ApplicationRef() {
	        }
	        Object.defineProperty(ApplicationRef.prototype, "componentTypes", {
	            /**
	             * Get a list of component types registered to this application.
	             * This list is populated even before the component is created.
	             */
	            get: function () { return unimplemented(); },
	            enumerable: true,
	            configurable: true
	        });
	        ;
	        Object.defineProperty(ApplicationRef.prototype, "components", {
	            /**
	             * Get a list of components registered to this application.
	             */
	            get: function () { return unimplemented(); },
	            enumerable: true,
	            configurable: true
	        });
	        ;
	        return ApplicationRef;
	    }());
	    var ApplicationRef_ = (function (_super) {
	        __extends$3(ApplicationRef_, _super);
	        function ApplicationRef_(_zone, _console, _injector, _exceptionHandler, _componentFactoryResolver, _initStatus, _testabilityRegistry, _testability) {
	            var _this = this;
	            _super.call(this);
	            this._zone = _zone;
	            this._console = _console;
	            this._injector = _injector;
	            this._exceptionHandler = _exceptionHandler;
	            this._componentFactoryResolver = _componentFactoryResolver;
	            this._initStatus = _initStatus;
	            this._testabilityRegistry = _testabilityRegistry;
	            this._testability = _testability;
	            this._bootstrapListeners = [];
	            this._rootComponents = [];
	            this._rootComponentTypes = [];
	            this._changeDetectorRefs = [];
	            this._runningTick = false;
	            this._enforceNoNewChanges = false;
	            this._enforceNoNewChanges = isDevMode();
	            this._zone.onMicrotaskEmpty.subscribe({ next: function () { _this._zone.run(function () { _this.tick(); }); } });
	        }
	        ApplicationRef_.prototype.registerChangeDetector = function (changeDetector) {
	            this._changeDetectorRefs.push(changeDetector);
	        };
	        ApplicationRef_.prototype.unregisterChangeDetector = function (changeDetector) {
	            ListWrapper.remove(this._changeDetectorRefs, changeDetector);
	        };
	        ApplicationRef_.prototype.bootstrap = function (componentOrFactory) {
	            var _this = this;
	            if (!this._initStatus.done) {
	                throw new Error('Cannot bootstrap as there are still asynchronous initializers running. Bootstrap components in the `ngDoBootstrap` method of the root module.');
	            }
	            var componentFactory;
	            if (componentOrFactory instanceof ComponentFactory) {
	                componentFactory = componentOrFactory;
	            }
	            else {
	                componentFactory = this._componentFactoryResolver.resolveComponentFactory(componentOrFactory);
	            }
	            this._rootComponentTypes.push(componentFactory.componentType);
	            var compRef = componentFactory.create(this._injector, [], componentFactory.selector);
	            compRef.onDestroy(function () { _this._unloadComponent(compRef); });
	            var testability = compRef.injector.get(Testability, null);
	            if (testability) {
	                compRef.injector.get(TestabilityRegistry)
	                    .registerApplication(compRef.location.nativeElement, testability);
	            }
	            this._loadComponent(compRef);
	            if (isDevMode()) {
	                this._console.log("Angular 2 is running in the development mode. Call enableProdMode() to enable the production mode.");
	            }
	            return compRef;
	        };
	        /** @internal */
	        ApplicationRef_.prototype._loadComponent = function (componentRef) {
	            this._changeDetectorRefs.push(componentRef.changeDetectorRef);
	            this.tick();
	            this._rootComponents.push(componentRef);
	            // Get the listeners lazily to prevent DI cycles.
	            var listeners = this._injector.get(APP_BOOTSTRAP_LISTENER, [])
	                .concat(this._bootstrapListeners);
	            listeners.forEach(function (listener) { return listener(componentRef); });
	        };
	        /** @internal */
	        ApplicationRef_.prototype._unloadComponent = function (componentRef) {
	            if (this._rootComponents.indexOf(componentRef) == -1) {
	                return;
	            }
	            this.unregisterChangeDetector(componentRef.changeDetectorRef);
	            ListWrapper.remove(this._rootComponents, componentRef);
	        };
	        ApplicationRef_.prototype.tick = function () {
	            if (this._runningTick) {
	                throw new Error('ApplicationRef.tick is called recursively');
	            }
	            var scope = ApplicationRef_._tickScope();
	            try {
	                this._runningTick = true;
	                this._changeDetectorRefs.forEach(function (detector) { return detector.detectChanges(); });
	                if (this._enforceNoNewChanges) {
	                    this._changeDetectorRefs.forEach(function (detector) { return detector.checkNoChanges(); });
	                }
	            }
	            finally {
	                this._runningTick = false;
	                wtfLeave(scope);
	            }
	        };
	        ApplicationRef_.prototype.ngOnDestroy = function () {
	            // TODO(alxhub): Dispose of the NgZone.
	            this._rootComponents.slice().forEach(function (component) { return component.destroy(); });
	        };
	        Object.defineProperty(ApplicationRef_.prototype, "componentTypes", {
	            get: function () { return this._rootComponentTypes; },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(ApplicationRef_.prototype, "components", {
	            get: function () { return this._rootComponents; },
	            enumerable: true,
	            configurable: true
	        });
	        /** @internal */
	        ApplicationRef_._tickScope = wtfCreateScope('ApplicationRef#tick()');
	        ApplicationRef_.decorators = [
	            { type: Injectable },
	        ];
	        /** @nocollapse */
	        ApplicationRef_.ctorParameters = [
	            { type: NgZone, },
	            { type: Console, },
	            { type: Injector, },
	            { type: ErrorHandler, },
	            { type: ComponentFactoryResolver, },
	            { type: ApplicationInitStatus, },
	            { type: TestabilityRegistry, decorators: [{ type: Optional },] },
	            { type: Testability, decorators: [{ type: Optional },] },
	        ];
	        return ApplicationRef_;
	    }(ApplicationRef));

	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    var __extends$9 = (this && this.__extends) || function (d, b) {
	        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	    /**
	     * Represents an instance of an NgModule created via a {@link NgModuleFactory}.
	     *
	     * `NgModuleRef` provides access to the NgModule Instance as well other objects related to this
	     * NgModule Instance.
	     *
	     * @stable
	     */
	    var NgModuleRef = (function () {
	        function NgModuleRef() {
	        }
	        Object.defineProperty(NgModuleRef.prototype, "injector", {
	            /**
	             * The injector that contains all of the providers of the NgModule.
	             */
	            get: function () { return unimplemented(); },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(NgModuleRef.prototype, "componentFactoryResolver", {
	            /**
	             * The ComponentFactoryResolver to get hold of the ComponentFactories
	             * declared in the `entryComponents` property of the module.
	             */
	            get: function () { return unimplemented(); },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(NgModuleRef.prototype, "instance", {
	            /**
	             * The NgModule instance.
	             */
	            get: function () { return unimplemented(); },
	            enumerable: true,
	            configurable: true
	        });
	        return NgModuleRef;
	    }());
	    /**
	     * @experimental
	     */
	    var NgModuleFactory = (function () {
	        function NgModuleFactory(_injectorClass, _moduleType) {
	            this._injectorClass = _injectorClass;
	            this._moduleType = _moduleType;
	        }
	        Object.defineProperty(NgModuleFactory.prototype, "moduleType", {
	            get: function () { return this._moduleType; },
	            enumerable: true,
	            configurable: true
	        });
	        NgModuleFactory.prototype.create = function (parentInjector) {
	            if (!parentInjector) {
	                parentInjector = Injector.NULL;
	            }
	            var instance = new this._injectorClass(parentInjector);
	            instance.create();
	            return instance;
	        };
	        return NgModuleFactory;
	    }());
	    var _UNDEFINED = new Object();
	    var NgModuleInjector = (function (_super) {
	        __extends$9(NgModuleInjector, _super);
	        function NgModuleInjector(parent, factories, bootstrapFactories) {
	            _super.call(this, factories, parent.get(ComponentFactoryResolver, ComponentFactoryResolver.NULL));
	            this.parent = parent;
	            this.bootstrapFactories = bootstrapFactories;
	            this._destroyListeners = [];
	            this._destroyed = false;
	        }
	        NgModuleInjector.prototype.create = function () { this.instance = this.createInternal(); };
	        NgModuleInjector.prototype.get = function (token, notFoundValue) {
	            if (notFoundValue === void 0) { notFoundValue = THROW_IF_NOT_FOUND; }
	            if (token === Injector || token === ComponentFactoryResolver) {
	                return this;
	            }
	            var result = this.getInternal(token, _UNDEFINED);
	            return result === _UNDEFINED ? this.parent.get(token, notFoundValue) : result;
	        };
	        Object.defineProperty(NgModuleInjector.prototype, "injector", {
	            get: function () { return this; },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(NgModuleInjector.prototype, "componentFactoryResolver", {
	            get: function () { return this; },
	            enumerable: true,
	            configurable: true
	        });
	        NgModuleInjector.prototype.destroy = function () {
	            if (this._destroyed) {
	                throw new Error("The ng module " + stringify(this.instance.constructor) + " has already been destroyed.");
	            }
	            this._destroyed = true;
	            this.destroyInternal();
	            this._destroyListeners.forEach(function (listener) { return listener(); });
	        };
	        NgModuleInjector.prototype.onDestroy = function (callback) { this._destroyListeners.push(callback); };
	        return NgModuleInjector;
	    }(CodegenComponentFactoryResolver));

	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    /**
	     * Used to load ng module factories.
	     * @stable
	     */
	    var NgModuleFactoryLoader = (function () {
	        function NgModuleFactoryLoader() {
	        }
	        return NgModuleFactoryLoader;
	    }());
	    var moduleFactories = new Map();
	    /**
	     * Registers a loaded module. Should only be called from generated NgModuleFactory code.
	     * @experimental
	     */
	    function registerModuleFactory(id, factory) {
	        var existing = moduleFactories.get(id);
	        if (existing) {
	            throw new Error("Duplicate module registered for " + id + " - " + existing.moduleType.name + " vs " + factory.moduleType.name);
	        }
	        moduleFactories.set(id, factory);
	    }
	    /**
	     * Returns the NgModuleFactory with the given id, if it exists and has been loaded.
	     * Factories for modules that do not specify an `id` cannot be retrieved. Throws if the module
	     * cannot be found.
	     * @experimental
	     */
	    function getModuleFactory(id) {
	        var factory = moduleFactories.get(id);
	        if (!factory)
	            throw new Error("No module with ID " + id + " loaded");
	        return factory;
	    }

	    /**
	     * An unmodifiable list of items that Angular keeps up to date when the state
	     * of the application changes.
	     *
	     * The type of object that {@link Query} and {@link ViewQueryMetadata} provide.
	     *
	     * Implements an iterable interface, therefore it can be used in both ES6
	     * javascript `for (var i of items)` loops as well as in Angular templates with
	     * `*ngFor="let i of myList"`.
	     *
	     * Changes can be observed by subscribing to the changes `Observable`.
	     *
	     * NOTE: In the future this class will implement an `Observable` interface.
	     *
	     * ### Example ([live demo](http://plnkr.co/edit/RX8sJnQYl9FWuSCWme5z?p=preview))
	     * ```typescript
	     * @Component({...})
	     * class Container {
	     *   @ViewChildren(Item) items:QueryList<Item>;
	     * }
	     * ```
	     * @stable
	     */
	    var QueryList = (function () {
	        function QueryList() {
	            this._dirty = true;
	            this._results = [];
	            this._emitter = new EventEmitter();
	        }
	        Object.defineProperty(QueryList.prototype, "changes", {
	            get: function () { return this._emitter; },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(QueryList.prototype, "length", {
	            get: function () { return this._results.length; },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(QueryList.prototype, "first", {
	            get: function () { return this._results[0]; },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(QueryList.prototype, "last", {
	            get: function () { return this._results[this.length - 1]; },
	            enumerable: true,
	            configurable: true
	        });
	        /**
	         * See
	         * [Array.map](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map)
	         */
	        QueryList.prototype.map = function (fn) { return this._results.map(fn); };
	        /**
	         * See
	         * [Array.filter](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter)
	         */
	        QueryList.prototype.filter = function (fn) {
	            return this._results.filter(fn);
	        };
	        /**
	         * See
	         * [Array.find](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find)
	         */
	        QueryList.prototype.find = function (fn) { return this._results.find(fn); };
	        /**
	         * See
	         * [Array.reduce](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce)
	         */
	        QueryList.prototype.reduce = function (fn, init) {
	            return this._results.reduce(fn, init);
	        };
	        /**
	         * See
	         * [Array.forEach](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach)
	         */
	        QueryList.prototype.forEach = function (fn) { this._results.forEach(fn); };
	        /**
	         * See
	         * [Array.some](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some)
	         */
	        QueryList.prototype.some = function (fn) {
	            return this._results.some(fn);
	        };
	        QueryList.prototype.toArray = function () { return this._results.slice(); };
	        QueryList.prototype[getSymbolIterator()] = function () { return this._results[getSymbolIterator()](); };
	        QueryList.prototype.toString = function () { return this._results.toString(); };
	        QueryList.prototype.reset = function (res) {
	            this._results = ListWrapper.flatten(res);
	            this._dirty = false;
	        };
	        QueryList.prototype.notifyOnChanges = function () { this._emitter.emit(this); };
	        /** internal */
	        QueryList.prototype.setDirty = function () { this._dirty = true; };
	        Object.defineProperty(QueryList.prototype, "dirty", {
	            /** internal */
	            get: function () { return this._dirty; },
	            enumerable: true,
	            configurable: true
	        });
	        return QueryList;
	    }());

	    var _SEPARATOR = '#';
	    var FACTORY_CLASS_SUFFIX = 'NgFactory';
	    /**
	     * Configuration for SystemJsNgModuleLoader.
	     * token.
	     *
	     * @experimental
	     */
	    var SystemJsNgModuleLoaderConfig = (function () {
	        function SystemJsNgModuleLoaderConfig() {
	        }
	        return SystemJsNgModuleLoaderConfig;
	    }());
	    var DEFAULT_CONFIG = {
	        factoryPathPrefix: '',
	        factoryPathSuffix: '.ngfactory',
	    };
	    /**
	     * NgModuleFactoryLoader that uses SystemJS to load NgModuleFactory
	     * @experimental
	     */
	    var SystemJsNgModuleLoader = (function () {
	        function SystemJsNgModuleLoader(_compiler, config) {
	            this._compiler = _compiler;
	            this._config = config || DEFAULT_CONFIG;
	        }
	        SystemJsNgModuleLoader.prototype.load = function (path) {
	            var offlineMode = this._compiler instanceof Compiler;
	            return offlineMode ? this.loadFactory(path) : this.loadAndCompile(path);
	        };
	        SystemJsNgModuleLoader.prototype.loadAndCompile = function (path) {
	            var _this = this;
	            var _a = path.split(_SEPARATOR), module = _a[0], exportName = _a[1];
	            if (exportName === undefined) {
	                exportName = 'default';
	            }
	            return System.import(module)
	                .then(function (module) { return module[exportName]; })
	                .then(function (type) { return checkNotEmpty(type, module, exportName); })
	                .then(function (type) { return _this._compiler.compileModuleAsync(type); });
	        };
	        SystemJsNgModuleLoader.prototype.loadFactory = function (path) {
	            var _a = path.split(_SEPARATOR), module = _a[0], exportName = _a[1];
	            var factoryClassSuffix = FACTORY_CLASS_SUFFIX;
	            if (exportName === undefined) {
	                exportName = 'default';
	                factoryClassSuffix = '';
	            }
	            return System.import(this._config.factoryPathPrefix + module + this._config.factoryPathSuffix)
	                .then(function (module) { return module[exportName + factoryClassSuffix]; })
	                .then(function (factory) { return checkNotEmpty(factory, module, exportName); });
	        };
	        SystemJsNgModuleLoader.decorators = [
	            { type: Injectable },
	        ];
	        /** @nocollapse */
	        SystemJsNgModuleLoader.ctorParameters = [
	            { type: Compiler, },
	            { type: SystemJsNgModuleLoaderConfig, decorators: [{ type: Optional },] },
	        ];
	        return SystemJsNgModuleLoader;
	    }());
	    function checkNotEmpty(value, modulePath, exportName) {
	        if (!value) {
	            throw new Error("Cannot find '" + exportName + "' in '" + modulePath + "'");
	        }
	        return value;
	    }

	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    var __extends$10 = (this && this.__extends) || function (d, b) {
	        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	    /**
	     * Represents an Embedded Template that can be used to instantiate Embedded Views.
	     *
	     * You can access a `TemplateRef`, in two ways. Via a directive placed on a `<template>` element (or
	     * directive prefixed with `*`) and have the `TemplateRef` for this Embedded View injected into the
	     * constructor of the directive using the `TemplateRef` Token. Alternatively you can query for the
	     * `TemplateRef` from a Component or a Directive via {@link Query}.
	     *
	     * To instantiate Embedded Views based on a Template, use
	     * {@link ViewContainerRef#createEmbeddedView}, which will create the View and attach it to the
	     * View Container.
	     * @stable
	     */
	    var TemplateRef = (function () {
	        function TemplateRef() {
	        }
	        Object.defineProperty(TemplateRef.prototype, "elementRef", {
	            /**
	             * The location in the View where the Embedded View logically belongs to.
	             *
	             * The data-binding and injection contexts of Embedded Views created from this `TemplateRef`
	             * inherit from the contexts of this location.
	             *
	             * Typically new Embedded Views are attached to the View Container of this location, but in
	             * advanced use-cases, the View can be attached to a different container while keeping the
	             * data-binding and injection context from the original location.
	             *
	             */
	            // TODO(i): rename to anchor or location
	            get: function () { return null; },
	            enumerable: true,
	            configurable: true
	        });
	        return TemplateRef;
	    }());
	    var TemplateRef_ = (function (_super) {
	        __extends$10(TemplateRef_, _super);
	        function TemplateRef_(_parentView, _nodeIndex, _nativeElement) {
	            _super.call(this);
	            this._parentView = _parentView;
	            this._nodeIndex = _nodeIndex;
	            this._nativeElement = _nativeElement;
	        }
	        TemplateRef_.prototype.createEmbeddedView = function (context) {
	            var view = this._parentView.createEmbeddedViewInternal(this._nodeIndex);
	            view.create(context || {});
	            return view.ref;
	        };
	        Object.defineProperty(TemplateRef_.prototype, "elementRef", {
	            get: function () { return new ElementRef(this._nativeElement); },
	            enumerable: true,
	            configurable: true
	        });
	        return TemplateRef_;
	    }(TemplateRef));

	    /**
	     * Represents a container where one or more Views can be attached.
	     *
	     * The container can contain two kinds of Views. Host Views, created by instantiating a
	     * {@link Component} via {@link #createComponent}, and Embedded Views, created by instantiating an
	     * {@link TemplateRef Embedded Template} via {@link #createEmbeddedView}.
	     *
	     * The location of the View Container within the containing View is specified by the Anchor
	     * `element`. Each View Container can have only one Anchor Element and each Anchor Element can only
	     * have a single View Container.
	     *
	     * Root elements of Views attached to this container become siblings of the Anchor Element in
	     * the Rendered View.
	     *
	     * To access a `ViewContainerRef` of an Element, you can either place a {@link Directive} injected
	     * with `ViewContainerRef` on the Element, or you obtain it via a {@link ViewChild} query.
	     * @stable
	     */
	    var ViewContainerRef = (function () {
	        function ViewContainerRef() {
	        }
	        Object.defineProperty(ViewContainerRef.prototype, "element", {
	            /**
	             * Anchor element that specifies the location of this container in the containing View.
	             * <!-- TODO: rename to anchorElement -->
	             */
	            get: function () { return unimplemented(); },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(ViewContainerRef.prototype, "injector", {
	            get: function () { return unimplemented(); },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(ViewContainerRef.prototype, "parentInjector", {
	            get: function () { return unimplemented(); },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(ViewContainerRef.prototype, "length", {
	            /**
	             * Returns the number of Views currently attached to this container.
	             */
	            get: function () { return unimplemented(); },
	            enumerable: true,
	            configurable: true
	        });
	        ;
	        return ViewContainerRef;
	    }());
	    var ViewContainerRef_ = (function () {
	        function ViewContainerRef_(_element) {
	            this._element = _element;
	            /** @internal */
	            this._createComponentInContainerScope = wtfCreateScope('ViewContainerRef#createComponent()');
	            /** @internal */
	            this._insertScope = wtfCreateScope('ViewContainerRef#insert()');
	            /** @internal */
	            this._removeScope = wtfCreateScope('ViewContainerRef#remove()');
	            /** @internal */
	            this._detachScope = wtfCreateScope('ViewContainerRef#detach()');
	        }
	        ViewContainerRef_.prototype.get = function (index) { return this._element.nestedViews[index].ref; };
	        Object.defineProperty(ViewContainerRef_.prototype, "length", {
	            get: function () {
	                var views = this._element.nestedViews;
	                return isPresent(views) ? views.length : 0;
	            },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(ViewContainerRef_.prototype, "element", {
	            get: function () { return this._element.elementRef; },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(ViewContainerRef_.prototype, "injector", {
	            get: function () { return this._element.injector; },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(ViewContainerRef_.prototype, "parentInjector", {
	            get: function () { return this._element.parentInjector; },
	            enumerable: true,
	            configurable: true
	        });
	        // TODO(rado): profile and decide whether bounds checks should be added
	        // to the methods below.
	        ViewContainerRef_.prototype.createEmbeddedView = function (templateRef, context, index) {
	            if (context === void 0) { context = null; }
	            if (index === void 0) { index = -1; }
	            var viewRef = templateRef.createEmbeddedView(context);
	            this.insert(viewRef, index);
	            return viewRef;
	        };
	        ViewContainerRef_.prototype.createComponent = function (componentFactory, index, injector, projectableNodes) {
	            if (index === void 0) { index = -1; }
	            if (injector === void 0) { injector = null; }
	            if (projectableNodes === void 0) { projectableNodes = null; }
	            var s = this._createComponentInContainerScope();
	            var contextInjector = injector || this._element.parentInjector;
	            var componentRef = componentFactory.create(contextInjector, projectableNodes);
	            this.insert(componentRef.hostView, index);
	            return wtfLeave(s, componentRef);
	        };
	        // TODO(i): refactor insert+remove into move
	        ViewContainerRef_.prototype.insert = function (viewRef, index) {
	            if (index === void 0) { index = -1; }
	            var s = this._insertScope();
	            if (index == -1)
	                index = this.length;
	            var viewRef_ = viewRef;
	            this._element.attachView(viewRef_.internalView, index);
	            return wtfLeave(s, viewRef_);
	        };
	        ViewContainerRef_.prototype.move = function (viewRef, currentIndex) {
	            var s = this._insertScope();
	            if (currentIndex == -1)
	                return;
	            var viewRef_ = viewRef;
	            this._element.moveView(viewRef_.internalView, currentIndex);
	            return wtfLeave(s, viewRef_);
	        };
	        ViewContainerRef_.prototype.indexOf = function (viewRef) {
	            return this._element.nestedViews.indexOf(viewRef.internalView);
	        };
	        // TODO(i): rename to destroy
	        ViewContainerRef_.prototype.remove = function (index) {
	            if (index === void 0) { index = -1; }
	            var s = this._removeScope();
	            if (index == -1)
	                index = this.length - 1;
	            var view = this._element.detachView(index);
	            view.destroy();
	            // view is intentionally not returned to the client.
	            wtfLeave(s);
	        };
	        // TODO(i): refactor insert+remove into move
	        ViewContainerRef_.prototype.detach = function (index) {
	            if (index === void 0) { index = -1; }
	            var s = this._detachScope();
	            if (index == -1)
	                index = this.length - 1;
	            var view = this._element.detachView(index);
	            return wtfLeave(s, view.ref);
	        };
	        ViewContainerRef_.prototype.clear = function () {
	            for (var i = this.length - 1; i >= 0; i--) {
	                this.remove(i);
	            }
	        };
	        return ViewContainerRef_;
	    }());

	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    var _queuedAnimations = [];
	    /** @internal */
	    function queueAnimationGlobally(player) {
	        _queuedAnimations.push(player);
	    }
	    /** @internal */
	    function triggerQueuedAnimations() {
	        // this code is wrapped into a single promise such that the
	        // onStart and onDone player callbacks are triggered outside
	        // of the digest cycle of animations
	        if (_queuedAnimations.length) {
	            Promise.resolve(null).then(_triggerAnimations);
	        }
	    }
	    function _triggerAnimations() {
	        for (var i = 0; i < _queuedAnimations.length; i++) {
	            var player = _queuedAnimations[i];
	            player.play();
	        }
	        _queuedAnimations = [];
	    }

	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    var __extends$11 = (this && this.__extends) || function (d, b) {
	        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	    /**
	     * @stable
	     */
	    var ViewRef = (function () {
	        function ViewRef() {
	        }
	        Object.defineProperty(ViewRef.prototype, "destroyed", {
	            get: function () { return unimplemented(); },
	            enumerable: true,
	            configurable: true
	        });
	        return ViewRef;
	    }());
	    /**
	     * Represents an Angular View.
	     *
	     * <!-- TODO: move the next two paragraphs to the dev guide -->
	     * A View is a fundamental building block of the application UI. It is the smallest grouping of
	     * Elements which are created and destroyed together.
	     *
	     * Properties of elements in a View can change, but the structure (number and order) of elements in
	     * a View cannot. Changing the structure of Elements can only be done by inserting, moving or
	     * removing nested Views via a {@link ViewContainerRef}. Each View can contain many View Containers.
	     * <!-- /TODO -->
	     *
	     * ### Example
	     *
	     * Given this template...
	     *
	     * ```
	     * Count: {{items.length}}
	     * <ul>
	     *   <li *ngFor="let  item of items">{{item}}</li>
	     * </ul>
	     * ```
	     *
	     * We have two {@link TemplateRef}s:
	     *
	     * Outer {@link TemplateRef}:
	     * ```
	     * Count: {{items.length}}
	     * <ul>
	     *   <template ngFor let-item [ngForOf]="items"></template>
	     * </ul>
	     * ```
	     *
	     * Inner {@link TemplateRef}:
	     * ```
	     *   <li>{{item}}</li>
	     * ```
	     *
	     * Notice that the original template is broken down into two separate {@link TemplateRef}s.
	     *
	     * The outer/inner {@link TemplateRef}s are then assembled into views like so:
	     *
	     * ```
	     * <!-- ViewRef: outer-0 -->
	     * Count: 2
	     * <ul>
	     *   <template view-container-ref></template>
	     *   <!-- ViewRef: inner-1 --><li>first</li><!-- /ViewRef: inner-1 -->
	     *   <!-- ViewRef: inner-2 --><li>second</li><!-- /ViewRef: inner-2 -->
	     * </ul>
	     * <!-- /ViewRef: outer-0 -->
	     * ```
	     * @experimental
	     */
	    var EmbeddedViewRef = (function (_super) {
	        __extends$11(EmbeddedViewRef, _super);
	        function EmbeddedViewRef() {
	            _super.apply(this, arguments);
	        }
	        Object.defineProperty(EmbeddedViewRef.prototype, "context", {
	            get: function () { return unimplemented(); },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(EmbeddedViewRef.prototype, "rootNodes", {
	            get: function () { return unimplemented(); },
	            enumerable: true,
	            configurable: true
	        });
	        ;
	        return EmbeddedViewRef;
	    }(ViewRef));
	    var ViewRef_ = (function () {
	        function ViewRef_(_view) {
	            this._view = _view;
	            this._view = _view;
	            this._originalMode = this._view.cdMode;
	        }
	        Object.defineProperty(ViewRef_.prototype, "internalView", {
	            get: function () { return this._view; },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(ViewRef_.prototype, "rootNodes", {
	            get: function () { return this._view.flatRootNodes; },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(ViewRef_.prototype, "context", {
	            get: function () { return this._view.context; },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(ViewRef_.prototype, "destroyed", {
	            get: function () { return this._view.destroyed; },
	            enumerable: true,
	            configurable: true
	        });
	        ViewRef_.prototype.markForCheck = function () { this._view.markPathToRootAsCheckOnce(); };
	        ViewRef_.prototype.detach = function () { this._view.cdMode = ChangeDetectorStatus.Detached; };
	        ViewRef_.prototype.detectChanges = function () {
	            this._view.detectChanges(false);
	            triggerQueuedAnimations();
	        };
	        ViewRef_.prototype.checkNoChanges = function () { this._view.detectChanges(true); };
	        ViewRef_.prototype.reattach = function () {
	            this._view.cdMode = this._originalMode;
	            this.markForCheck();
	        };
	        ViewRef_.prototype.onDestroy = function (callback) {
	            if (!this._view.disposables) {
	                this._view.disposables = [];
	            }
	            this._view.disposables.push(callback);
	        };
	        ViewRef_.prototype.destroy = function () { this._view.detachAndDestroy(); };
	        return ViewRef_;
	    }());

	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    var __extends$12 = (this && this.__extends) || function (d, b) {
	        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	    var EventListener = (function () {
	        function EventListener(name, callback) {
	            this.name = name;
	            this.callback = callback;
	        }
	        ;
	        return EventListener;
	    }());
	    /**
	     * @experimental All debugging apis are currently experimental.
	     */
	    var DebugNode = (function () {
	        function DebugNode(nativeNode, parent, _debugInfo) {
	            this._debugInfo = _debugInfo;
	            this.nativeNode = nativeNode;
	            if (parent && parent instanceof DebugElement) {
	                parent.addChild(this);
	            }
	            else {
	                this.parent = null;
	            }
	            this.listeners = [];
	        }
	        Object.defineProperty(DebugNode.prototype, "injector", {
	            get: function () { return this._debugInfo ? this._debugInfo.injector : null; },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(DebugNode.prototype, "componentInstance", {
	            get: function () { return this._debugInfo ? this._debugInfo.component : null; },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(DebugNode.prototype, "context", {
	            get: function () { return this._debugInfo ? this._debugInfo.context : null; },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(DebugNode.prototype, "references", {
	            get: function () {
	                return this._debugInfo ? this._debugInfo.references : null;
	            },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(DebugNode.prototype, "providerTokens", {
	            get: function () { return this._debugInfo ? this._debugInfo.providerTokens : null; },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(DebugNode.prototype, "source", {
	            get: function () { return this._debugInfo ? this._debugInfo.source : null; },
	            enumerable: true,
	            configurable: true
	        });
	        return DebugNode;
	    }());
	    /**
	     * @experimental All debugging apis are currently experimental.
	     */
	    var DebugElement = (function (_super) {
	        __extends$12(DebugElement, _super);
	        function DebugElement(nativeNode, parent, _debugInfo) {
	            _super.call(this, nativeNode, parent, _debugInfo);
	            this.properties = {};
	            this.attributes = {};
	            this.classes = {};
	            this.styles = {};
	            this.childNodes = [];
	            this.nativeElement = nativeNode;
	        }
	        DebugElement.prototype.addChild = function (child) {
	            if (child) {
	                this.childNodes.push(child);
	                child.parent = this;
	            }
	        };
	        DebugElement.prototype.removeChild = function (child) {
	            var childIndex = this.childNodes.indexOf(child);
	            if (childIndex !== -1) {
	                child.parent = null;
	                this.childNodes.splice(childIndex, 1);
	            }
	        };
	        DebugElement.prototype.insertChildrenAfter = function (child, newChildren) {
	            var siblingIndex = this.childNodes.indexOf(child);
	            if (siblingIndex !== -1) {
	                var previousChildren = this.childNodes.slice(0, siblingIndex + 1);
	                var nextChildren = this.childNodes.slice(siblingIndex + 1);
	                this.childNodes = previousChildren.concat(newChildren, nextChildren);
	                for (var i = 0; i < newChildren.length; ++i) {
	                    var newChild = newChildren[i];
	                    if (newChild.parent) {
	                        newChild.parent.removeChild(newChild);
	                    }
	                    newChild.parent = this;
	                }
	            }
	        };
	        DebugElement.prototype.query = function (predicate) {
	            var results = this.queryAll(predicate);
	            return results[0] || null;
	        };
	        DebugElement.prototype.queryAll = function (predicate) {
	            var matches = [];
	            _queryElementChildren(this, predicate, matches);
	            return matches;
	        };
	        DebugElement.prototype.queryAllNodes = function (predicate) {
	            var matches = [];
	            _queryNodeChildren(this, predicate, matches);
	            return matches;
	        };
	        Object.defineProperty(DebugElement.prototype, "children", {
	            get: function () {
	                return this.childNodes.filter(function (node) { return node instanceof DebugElement; });
	            },
	            enumerable: true,
	            configurable: true
	        });
	        DebugElement.prototype.triggerEventHandler = function (eventName, eventObj) {
	            this.listeners.forEach(function (listener) {
	                if (listener.name == eventName) {
	                    listener.callback(eventObj);
	                }
	            });
	        };
	        return DebugElement;
	    }(DebugNode));
	    /**
	     * @experimental
	     */
	    function asNativeElements(debugEls) {
	        return debugEls.map(function (el) { return el.nativeElement; });
	    }
	    function _queryElementChildren(element, predicate, matches) {
	        element.childNodes.forEach(function (node) {
	            if (node instanceof DebugElement) {
	                if (predicate(node)) {
	                    matches.push(node);
	                }
	                _queryElementChildren(node, predicate, matches);
	            }
	        });
	    }
	    function _queryNodeChildren(parentNode, predicate, matches) {
	        if (parentNode instanceof DebugElement) {
	            parentNode.childNodes.forEach(function (node) {
	                if (predicate(node)) {
	                    matches.push(node);
	                }
	                if (node instanceof DebugElement) {
	                    _queryNodeChildren(node, predicate, matches);
	                }
	            });
	        }
	    }
	    // Need to keep the nodes in a global Map so that multiple angular apps are supported.
	    var _nativeNodeToDebugNode = new Map();
	    /**
	     * @experimental
	     */
	    function getDebugNode(nativeNode) {
	        return _nativeNodeToDebugNode.get(nativeNode);
	    }
	    function indexDebugNode(node) {
	        _nativeNodeToDebugNode.set(node.nativeNode, node);
	    }
	    function removeDebugNodeFromIndex(node) {
	        _nativeNodeToDebugNode.delete(node.nativeNode);
	    }

	    function _reflector() {
	        return reflector;
	    }
	    var _CORE_PLATFORM_PROVIDERS = [
	        PlatformRef_,
	        { provide: PlatformRef, useExisting: PlatformRef_ },
	        { provide: Reflector, useFactory: _reflector, deps: [] },
	        { provide: ReflectorReader, useExisting: Reflector },
	        TestabilityRegistry,
	        Console,
	    ];
	    /**
	     * This platform has to be included in any other platform
	     *
	     * @experimental
	     */
	    var platformCore = createPlatformFactory(null, 'core', _CORE_PLATFORM_PROVIDERS);

	    /**
	     * @experimental i18n support is experimental.
	     */
	    var LOCALE_ID = new OpaqueToken('LocaleId');
	    /**
	     * @experimental i18n support is experimental.
	     */
	    var TRANSLATIONS = new OpaqueToken('Translations');
	    /**
	     * @experimental i18n support is experimental.
	     */
	    var TRANSLATIONS_FORMAT = new OpaqueToken('TranslationsFormat');

	    function _iterableDiffersFactory() {
	        return defaultIterableDiffers;
	    }
	    function _keyValueDiffersFactory() {
	        return defaultKeyValueDiffers;
	    }
	    /**
	     * This module includes the providers of @angular/core that are needed
	     * to bootstrap components via `ApplicationRef`.
	     *
	     * @experimental
	     */
	    var ApplicationModule = (function () {
	        function ApplicationModule() {
	        }
	        ApplicationModule.decorators = [
	            { type: NgModule, args: [{
	                        providers: [
	                            ApplicationRef_,
	                            { provide: ApplicationRef, useExisting: ApplicationRef_ },
	                            ApplicationInitStatus,
	                            Compiler,
	                            APP_ID_RANDOM_PROVIDER,
	                            ViewUtils,
	                            { provide: IterableDiffers, useFactory: _iterableDiffersFactory },
	                            { provide: KeyValueDiffers, useFactory: _keyValueDiffersFactory },
	                            { provide: LOCALE_ID, useValue: 'en-US' },
	                        ]
	                    },] },
	        ];
	        /** @nocollapse */
	        ApplicationModule.ctorParameters = [];
	        return ApplicationModule;
	    }());

	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    var FILL_STYLE_FLAG = 'true'; // TODO (matsko): change to boolean
	    var ANY_STATE = '*';
	    var DEFAULT_STATE = '*';
	    var EMPTY_STATE = 'void';

	    var AnimationGroupPlayer = (function () {
	        function AnimationGroupPlayer(_players) {
	            var _this = this;
	            this._players = _players;
	            this._onDoneFns = [];
	            this._onStartFns = [];
	            this._finished = false;
	            this._started = false;
	            this._destroyed = false;
	            this.parentPlayer = null;
	            var count = 0;
	            var total = this._players.length;
	            if (total == 0) {
	                scheduleMicroTask(function () { return _this._onFinish(); });
	            }
	            else {
	                this._players.forEach(function (player) {
	                    player.parentPlayer = _this;
	                    player.onDone(function () {
	                        if (++count >= total) {
	                            _this._onFinish();
	                        }
	                    });
	                });
	            }
	        }
	        AnimationGroupPlayer.prototype._onFinish = function () {
	            if (!this._finished) {
	                this._finished = true;
	                this._onDoneFns.forEach(function (fn) { return fn(); });
	                this._onDoneFns = [];
	            }
	        };
	        AnimationGroupPlayer.prototype.init = function () { this._players.forEach(function (player) { return player.init(); }); };
	        AnimationGroupPlayer.prototype.onStart = function (fn) { this._onStartFns.push(fn); };
	        AnimationGroupPlayer.prototype.onDone = function (fn) { this._onDoneFns.push(fn); };
	        AnimationGroupPlayer.prototype.hasStarted = function () { return this._started; };
	        AnimationGroupPlayer.prototype.play = function () {
	            if (!isPresent(this.parentPlayer)) {
	                this.init();
	            }
	            if (!this.hasStarted()) {
	                this._onStartFns.forEach(function (fn) { return fn(); });
	                this._onStartFns = [];
	                this._started = true;
	            }
	            this._players.forEach(function (player) { return player.play(); });
	        };
	        AnimationGroupPlayer.prototype.pause = function () { this._players.forEach(function (player) { return player.pause(); }); };
	        AnimationGroupPlayer.prototype.restart = function () { this._players.forEach(function (player) { return player.restart(); }); };
	        AnimationGroupPlayer.prototype.finish = function () {
	            this._onFinish();
	            this._players.forEach(function (player) { return player.finish(); });
	        };
	        AnimationGroupPlayer.prototype.destroy = function () {
	            if (!this._destroyed) {
	                this._onFinish();
	                this._players.forEach(function (player) { return player.destroy(); });
	                this._destroyed = true;
	            }
	        };
	        AnimationGroupPlayer.prototype.reset = function () {
	            this._players.forEach(function (player) { return player.reset(); });
	            this._destroyed = false;
	            this._finished = false;
	            this._started = false;
	        };
	        AnimationGroupPlayer.prototype.setPosition = function (p) {
	            this._players.forEach(function (player) { player.setPosition(p); });
	        };
	        AnimationGroupPlayer.prototype.getPosition = function () {
	            var min = 0;
	            this._players.forEach(function (player) {
	                var p = player.getPosition();
	                min = Math.min(p, min);
	            });
	            return min;
	        };
	        Object.defineProperty(AnimationGroupPlayer.prototype, "players", {
	            get: function () { return this._players; },
	            enumerable: true,
	            configurable: true
	        });
	        return AnimationGroupPlayer;
	    }());

	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    var AnimationKeyframe = (function () {
	        function AnimationKeyframe(offset, styles) {
	            this.offset = offset;
	            this.styles = styles;
	        }
	        return AnimationKeyframe;
	    }());

	    /**
	     * @experimental Animation support is experimental.
	     */
	    var AnimationPlayer = (function () {
	        function AnimationPlayer() {
	        }
	        Object.defineProperty(AnimationPlayer.prototype, "parentPlayer", {
	            get: function () { throw new Error('NOT IMPLEMENTED: Base Class'); },
	            set: function (player) { throw new Error('NOT IMPLEMENTED: Base Class'); },
	            enumerable: true,
	            configurable: true
	        });
	        return AnimationPlayer;
	    }());
	    var NoOpAnimationPlayer = (function () {
	        function NoOpAnimationPlayer() {
	            var _this = this;
	            this._onDoneFns = [];
	            this._onStartFns = [];
	            this._started = false;
	            this.parentPlayer = null;
	            scheduleMicroTask(function () { return _this._onFinish(); });
	        }
	        /** @internal */
	        NoOpAnimationPlayer.prototype._onFinish = function () {
	            this._onDoneFns.forEach(function (fn) { return fn(); });
	            this._onDoneFns = [];
	        };
	        NoOpAnimationPlayer.prototype.onStart = function (fn) { this._onStartFns.push(fn); };
	        NoOpAnimationPlayer.prototype.onDone = function (fn) { this._onDoneFns.push(fn); };
	        NoOpAnimationPlayer.prototype.hasStarted = function () { return this._started; };
	        NoOpAnimationPlayer.prototype.init = function () { };
	        NoOpAnimationPlayer.prototype.play = function () {
	            if (!this.hasStarted()) {
	                this._onStartFns.forEach(function (fn) { return fn(); });
	                this._onStartFns = [];
	            }
	            this._started = true;
	        };
	        NoOpAnimationPlayer.prototype.pause = function () { };
	        NoOpAnimationPlayer.prototype.restart = function () { };
	        NoOpAnimationPlayer.prototype.finish = function () { this._onFinish(); };
	        NoOpAnimationPlayer.prototype.destroy = function () { };
	        NoOpAnimationPlayer.prototype.reset = function () { };
	        NoOpAnimationPlayer.prototype.setPosition = function (p) { };
	        NoOpAnimationPlayer.prototype.getPosition = function () { return 0; };
	        return NoOpAnimationPlayer;
	    }());

	    var AnimationSequencePlayer = (function () {
	        function AnimationSequencePlayer(_players) {
	            var _this = this;
	            this._players = _players;
	            this._currentIndex = 0;
	            this._onDoneFns = [];
	            this._onStartFns = [];
	            this._finished = false;
	            this._started = false;
	            this._destroyed = false;
	            this.parentPlayer = null;
	            this._players.forEach(function (player) { player.parentPlayer = _this; });
	            this._onNext(false);
	        }
	        AnimationSequencePlayer.prototype._onNext = function (start) {
	            var _this = this;
	            if (this._finished)
	                return;
	            if (this._players.length == 0) {
	                this._activePlayer = new NoOpAnimationPlayer();
	                scheduleMicroTask(function () { return _this._onFinish(); });
	            }
	            else if (this._currentIndex >= this._players.length) {
	                this._activePlayer = new NoOpAnimationPlayer();
	                this._onFinish();
	            }
	            else {
	                var player = this._players[this._currentIndex++];
	                player.onDone(function () { return _this._onNext(true); });
	                this._activePlayer = player;
	                if (start) {
	                    player.play();
	                }
	            }
	        };
	        AnimationSequencePlayer.prototype._onFinish = function () {
	            if (!this._finished) {
	                this._finished = true;
	                this._onDoneFns.forEach(function (fn) { return fn(); });
	                this._onDoneFns = [];
	            }
	        };
	        AnimationSequencePlayer.prototype.init = function () { this._players.forEach(function (player) { return player.init(); }); };
	        AnimationSequencePlayer.prototype.onStart = function (fn) { this._onStartFns.push(fn); };
	        AnimationSequencePlayer.prototype.onDone = function (fn) { this._onDoneFns.push(fn); };
	        AnimationSequencePlayer.prototype.hasStarted = function () { return this._started; };
	        AnimationSequencePlayer.prototype.play = function () {
	            if (!isPresent(this.parentPlayer)) {
	                this.init();
	            }
	            if (!this.hasStarted()) {
	                this._onStartFns.forEach(function (fn) { return fn(); });
	                this._onStartFns = [];
	                this._started = true;
	            }
	            this._activePlayer.play();
	        };
	        AnimationSequencePlayer.prototype.pause = function () { this._activePlayer.pause(); };
	        AnimationSequencePlayer.prototype.restart = function () {
	            this.reset();
	            if (this._players.length > 0) {
	                this._players[0].restart();
	            }
	        };
	        AnimationSequencePlayer.prototype.reset = function () {
	            this._players.forEach(function (player) { return player.reset(); });
	            this._destroyed = false;
	            this._finished = false;
	            this._started = false;
	        };
	        AnimationSequencePlayer.prototype.finish = function () {
	            this._onFinish();
	            this._players.forEach(function (player) { return player.finish(); });
	        };
	        AnimationSequencePlayer.prototype.destroy = function () {
	            if (!this._destroyed) {
	                this._onFinish();
	                this._players.forEach(function (player) { return player.destroy(); });
	                this._destroyed = true;
	                this._activePlayer = new NoOpAnimationPlayer();
	            }
	        };
	        AnimationSequencePlayer.prototype.setPosition = function (p) { this._players[0].setPosition(p); };
	        AnimationSequencePlayer.prototype.getPosition = function () { return this._players[0].getPosition(); };
	        Object.defineProperty(AnimationSequencePlayer.prototype, "players", {
	            get: function () { return this._players; },
	            enumerable: true,
	            configurable: true
	        });
	        return AnimationSequencePlayer;
	    }());

	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    var __extends$13 = (this && this.__extends) || function (d, b) {
	        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	    /**
	     * @experimental Animation support is experimental.
	     */
	    var AUTO_STYLE = '*';
	    /**
	     * Metadata representing the entry of animations.
	     * Instances of this class are provided via the animation DSL when the {@link trigger trigger
	     * animation function} is called.
	     *
	     * @experimental Animation support is experimental.
	     */
	    var AnimationEntryMetadata = (function () {
	        function AnimationEntryMetadata(name, definitions) {
	            this.name = name;
	            this.definitions = definitions;
	        }
	        return AnimationEntryMetadata;
	    }());
	    /**
	     * @experimental Animation support is experimental.
	     */
	    var AnimationStateMetadata = (function () {
	        function AnimationStateMetadata() {
	        }
	        return AnimationStateMetadata;
	    }());
	    /**
	     * Metadata representing the entry of animations.
	     * Instances of this class are provided via the animation DSL when the {@link state state animation
	     * function} is called.
	     *
	     * @experimental Animation support is experimental.
	     */
	    var AnimationStateDeclarationMetadata = (function (_super) {
	        __extends$13(AnimationStateDeclarationMetadata, _super);
	        function AnimationStateDeclarationMetadata(stateNameExpr, styles) {
	            _super.call(this);
	            this.stateNameExpr = stateNameExpr;
	            this.styles = styles;
	        }
	        return AnimationStateDeclarationMetadata;
	    }(AnimationStateMetadata));
	    /**
	     * Metadata representing the entry of animations.
	     * Instances of this class are provided via the animation DSL when the
	     * {@link transition transition animation function} is called.
	     *
	     * @experimental Animation support is experimental.
	     */
	    var AnimationStateTransitionMetadata = (function (_super) {
	        __extends$13(AnimationStateTransitionMetadata, _super);
	        function AnimationStateTransitionMetadata(stateChangeExpr, steps) {
	            _super.call(this);
	            this.stateChangeExpr = stateChangeExpr;
	            this.steps = steps;
	        }
	        return AnimationStateTransitionMetadata;
	    }(AnimationStateMetadata));
	    /**
	     * @experimental Animation support is experimental.
	     */
	    var AnimationMetadata = (function () {
	        function AnimationMetadata() {
	        }
	        return AnimationMetadata;
	    }());
	    /**
	     * Metadata representing the entry of animations.
	     * Instances of this class are provided via the animation DSL when the {@link keyframes keyframes
	     * animation function} is called.
	     *
	     * @experimental Animation support is experimental.
	     */
	    var AnimationKeyframesSequenceMetadata = (function (_super) {
	        __extends$13(AnimationKeyframesSequenceMetadata, _super);
	        function AnimationKeyframesSequenceMetadata(steps) {
	            _super.call(this);
	            this.steps = steps;
	        }
	        return AnimationKeyframesSequenceMetadata;
	    }(AnimationMetadata));
	    /**
	     * Metadata representing the entry of animations.
	     * Instances of this class are provided via the animation DSL when the {@link style style animation
	     * function} is called.
	     *
	     * @experimental Animation support is experimental.
	     */
	    var AnimationStyleMetadata = (function (_super) {
	        __extends$13(AnimationStyleMetadata, _super);
	        function AnimationStyleMetadata(styles, offset) {
	            if (offset === void 0) { offset = null; }
	            _super.call(this);
	            this.styles = styles;
	            this.offset = offset;
	        }
	        return AnimationStyleMetadata;
	    }(AnimationMetadata));
	    /**
	     * Metadata representing the entry of animations.
	     * Instances of this class are provided via the animation DSL when the {@link animate animate
	     * animation function} is called.
	     *
	     * @experimental Animation support is experimental.
	     */
	    var AnimationAnimateMetadata = (function (_super) {
	        __extends$13(AnimationAnimateMetadata, _super);
	        function AnimationAnimateMetadata(timings, styles) {
	            _super.call(this);
	            this.timings = timings;
	            this.styles = styles;
	        }
	        return AnimationAnimateMetadata;
	    }(AnimationMetadata));
	    /**
	     * @experimental Animation support is experimental.
	     */
	    var AnimationWithStepsMetadata = (function (_super) {
	        __extends$13(AnimationWithStepsMetadata, _super);
	        function AnimationWithStepsMetadata() {
	            _super.call(this);
	        }
	        Object.defineProperty(AnimationWithStepsMetadata.prototype, "steps", {
	            get: function () { throw new Error('NOT IMPLEMENTED: Base Class'); },
	            enumerable: true,
	            configurable: true
	        });
	        return AnimationWithStepsMetadata;
	    }(AnimationMetadata));
	    /**
	     * Metadata representing the entry of animations.
	     * Instances of this class are provided via the animation DSL when the {@link sequence sequence
	     * animation function} is called.
	     *
	     * @experimental Animation support is experimental.
	     */
	    var AnimationSequenceMetadata = (function (_super) {
	        __extends$13(AnimationSequenceMetadata, _super);
	        function AnimationSequenceMetadata(_steps) {
	            _super.call(this);
	            this._steps = _steps;
	        }
	        Object.defineProperty(AnimationSequenceMetadata.prototype, "steps", {
	            get: function () { return this._steps; },
	            enumerable: true,
	            configurable: true
	        });
	        return AnimationSequenceMetadata;
	    }(AnimationWithStepsMetadata));
	    /**
	     * Metadata representing the entry of animations.
	     * Instances of this class are provided via the animation DSL when the {@link group group animation
	     * function} is called.
	     *
	     * @experimental Animation support is experimental.
	     */
	    var AnimationGroupMetadata = (function (_super) {
	        __extends$13(AnimationGroupMetadata, _super);
	        function AnimationGroupMetadata(_steps) {
	            _super.call(this);
	            this._steps = _steps;
	        }
	        Object.defineProperty(AnimationGroupMetadata.prototype, "steps", {
	            get: function () { return this._steps; },
	            enumerable: true,
	            configurable: true
	        });
	        return AnimationGroupMetadata;
	    }(AnimationWithStepsMetadata));
	    /**
	     * `animate` is an animation-specific function that is designed to be used inside of Angular2's
	     * animation
	     * DSL language. If this information is new, please navigate to the
	     * {@link Component#animations-anchor component animations metadata
	     * page} to gain a better understanding of how animations in Angular2 are used.
	     *
	     * `animate` specifies an animation step that will apply the provided `styles` data for a given
	     * amount of
	     * time based on the provided `timing` expression value. Calls to `animate` are expected to be
	     * used within {@link sequence an animation sequence}, {@link group group}, or {@link transition
	     * transition}.
	     *
	     * ### Usage
	     *
	     * The `animate` function accepts two input parameters: `timing` and `styles`:
	     *
	     * - `timing` is a string based value that can be a combination of a duration with optional
	     * delay and easing values. The format for the expression breaks down to `duration delay easing`
	     * (therefore a value such as `1s 100ms ease-out` will be parse itself into `duration=1000,
	     * delay=100, easing=ease-out`.
	     * If a numeric value is provided then that will be used as the `duration` value in millisecond
	     * form.
	     * - `styles` is the style input data which can either be a call to {@link style style} or {@link
	     * keyframes keyframes}.
	     * If left empty then the styles from the destination state will be collected and used (this is
	     * useful when
	     * describing an animation step that will complete an animation by {@link
	     * transition#the-final-animate-call animating to the final state}).
	     *
	     * ```typescript
	     * // various functions for specifying timing data
	     * animate(500, style(...))
	     * animate("1s", style(...))
	     * animate("100ms 0.5s", style(...))
	     * animate("5s ease", style(...))
	     * animate("5s 10ms cubic-bezier(.17,.67,.88,.1)", style(...))
	     *
	     * // either style() of keyframes() can be used
	     * animate(500, style({ background: "red" }))
	     * animate(500, keyframes([
	     *   style({ background: "blue" })),
	     *   style({ background: "red" }))
	     * ])
	     * ```
	     *
	     * ### Example ([live demo](http://plnkr.co/edit/Kez8XGWBxWue7qP7nNvF?p=preview))
	     *
	     * {@example core/animation/ts/dsl/animation_example.ts region='Component'}
	     *
	     * @experimental Animation support is experimental.
	     */
	    function animate(timing, styles) {
	        if (styles === void 0) { styles = null; }
	        var stylesEntry = styles;
	        if (!isPresent(stylesEntry)) {
	            var EMPTY_STYLE = {};
	            stylesEntry = new AnimationStyleMetadata([EMPTY_STYLE], 1);
	        }
	        return new AnimationAnimateMetadata(timing, stylesEntry);
	    }
	    /**
	     * `group` is an animation-specific function that is designed to be used inside of Angular2's
	     * animation
	     * DSL language. If this information is new, please navigate to the
	     * {@link Component#animations-anchor component animations metadata
	     * page} to gain a better understanding of how animations in Angular2 are used.
	     *
	     * `group` specifies a list of animation steps that are all run in parallel. Grouped animations
	     * are useful when a series of styles must be animated/closed off
	     * at different statrting/ending times.
	     *
	     * The `group` function can either be used within a {@link sequence sequence} or a {@link transition
	     * transition}
	     * and it will only continue to the next instruction once all of the inner animation steps
	     * have completed.
	     *
	     * ### Usage
	     *
	     * The `steps` data that is passed into the `group` animation function can either consist
	     * of {@link style style} or {@link animate animate} function calls. Each call to `style()` or
	     * `animate()`
	     * within a group will be executed instantly (use {@link keyframes keyframes} or a
	     * {@link animate#usage animate() with a delay value} to offset styles to be applied at a later
	     * time).
	     *
	     * ```typescript
	     * group([
	     *   animate("1s", { background: "black" }))
	     *   animate("2s", { color: "white" }))
	     * ])
	     * ```
	     *
	     * ### Example ([live demo](http://plnkr.co/edit/Kez8XGWBxWue7qP7nNvF?p=preview))
	     *
	     * {@example core/animation/ts/dsl/animation_example.ts region='Component'}
	     *
	     * @experimental Animation support is experimental.
	     */
	    function group(steps) {
	        return new AnimationGroupMetadata(steps);
	    }
	    /**
	     * `sequence` is an animation-specific function that is designed to be used inside of Angular2's
	     * animation
	     * DSL language. If this information is new, please navigate to the
	     * {@link Component#animations-anchor component animations metadata
	     * page} to gain a better understanding of how animations in Angular2 are used.
	     *
	     * `sequence` Specifies a list of animation steps that are run one by one. (`sequence` is used
	     * by default when an array is passed as animation data into {@link transition transition}.)
	     *
	     * The `sequence` function can either be used within a {@link group group} or a {@link transition
	     * transition}
	     * and it will only continue to the next instruction once each of the inner animation steps
	     * have completed.
	     *
	     * To perform animation styling in parallel with other animation steps then
	     * have a look at the {@link group group} animation function.
	     *
	     * ### Usage
	     *
	     * The `steps` data that is passed into the `sequence` animation function can either consist
	     * of {@link style style} or {@link animate animate} function calls. A call to `style()` will apply
	     * the
	     * provided styling data immediately while a call to `animate()` will apply its styling
	     * data over a given time depending on its timing data.
	     *
	     * ```typescript
	     * sequence([
	     *   style({ opacity: 0 })),
	     *   animate("1s", { opacity: 1 }))
	     * ])
	     * ```
	     *
	     * ### Example ([live demo](http://plnkr.co/edit/Kez8XGWBxWue7qP7nNvF?p=preview))
	     *
	     * {@example core/animation/ts/dsl/animation_example.ts region='Component'}
	     *
	     * @experimental Animation support is experimental.
	     */
	    function sequence(steps) {
	        return new AnimationSequenceMetadata(steps);
	    }
	    /**
	     * `style` is an animation-specific function that is designed to be used inside of Angular2's
	     * animation
	     * DSL language. If this information is new, please navigate to the
	     * {@link Component#animations-anchor component animations metadata
	     * page} to gain a better understanding of how animations in Angular2 are used.
	     *
	     * `style` declares a key/value object containing CSS properties/styles that can then
	     * be used for {@link state animation states}, within an {@link sequence animation sequence}, or as
	     * styling data for both {@link animate animate} and {@link keyframes keyframes}.
	     *
	     * ### Usage
	     *
	     * `style` takes in a key/value string map as data and expects one or more CSS property/value
	     * pairs to be defined.
	     *
	     * ```typescript
	     * // string values are used for css properties
	     * style({ background: "red", color: "blue" })
	     *
	     * // numerical (pixel) values are also supported
	     * style({ width: 100, height: 0 })
	     * ```
	     *
	     * #### Auto-styles (using `*`)
	     *
	     * When an asterix (`*`) character is used as a value then it will be detected from the element
	     * being animated
	     * and applied as animation data when the animation starts.
	     *
	     * This feature proves useful for a state depending on layout and/or environment factors; in such
	     * cases
	     * the styles are calculated just before the animation starts.
	     *
	     * ```typescript
	     * // the steps below will animate from 0 to the
	     * // actual height of the element
	     * style({ height: 0 }),
	     * animate("1s", style({ height: "*" }))
	     * ```
	     *
	     * ### Example ([live demo](http://plnkr.co/edit/Kez8XGWBxWue7qP7nNvF?p=preview))
	     *
	     * {@example core/animation/ts/dsl/animation_example.ts region='Component'}
	     *
	     * @experimental Animation support is experimental.
	     */
	    function style(tokens) {
	        var input;
	        var offset = null;
	        if (typeof tokens === 'string') {
	            input = [tokens];
	        }
	        else {
	            if (Array.isArray(tokens)) {
	                input = tokens;
	            }
	            else {
	                input = [tokens];
	            }
	            input.forEach(function (entry) {
	                var entryOffset = entry['offset'];
	                if (isPresent(entryOffset)) {
	                    offset = offset == null ? parseFloat(entryOffset) : offset;
	                }
	            });
	        }
	        return new AnimationStyleMetadata(input, offset);
	    }
	    /**
	     * `state` is an animation-specific function that is designed to be used inside of Angular2's
	     * animation
	     * DSL language. If this information is new, please navigate to the
	     * {@link Component#animations-anchor component animations metadata
	     * page} to gain a better understanding of how animations in Angular2 are used.
	     *
	     * `state` declares an animation state within the given trigger. When a state is
	     * active within a component then its associated styles will persist on
	     * the element that the trigger is attached to (even when the animation ends).
	     *
	     * To animate between states, have a look at the animation {@link transition transition}
	     * DSL function. To register states to an animation trigger please have a look
	     * at the {@link trigger trigger} function.
	     *
	     * #### The `void` state
	     *
	     * The `void` state value is a reserved word that angular uses to determine when the element is not
	     * apart
	     * of the application anymore (e.g. when an `ngIf` evaluates to false then the state of the
	     * associated element
	     * is void).
	     *
	     * #### The `*` (default) state
	     *
	     * The `*` state (when styled) is a fallback state that will be used if
	     * the state that is being animated is not declared within the trigger.
	     *
	     * ### Usage
	     *
	     * `state` will declare an animation state with its associated styles
	     * within the given trigger.
	     *
	     * - `stateNameExpr` can be one or more state names separated by commas.
	     * - `styles` refers to the {@link style styling data} that will be persisted on the element once
	     * the state
	     * has been reached.
	     *
	     * ```typescript
	     * // "void" is a reserved name for a state and is used to represent
	     * // the state in which an element is detached from from the application.
	     * state("void", style({ height: 0 }))
	     *
	     * // user-defined states
	     * state("closed", style({ height: 0 }))
	     * state("open, visible", style({ height: "*" }))
	     * ```
	     *
	     * ### Example ([live demo](http://plnkr.co/edit/Kez8XGWBxWue7qP7nNvF?p=preview))
	     *
	     * {@example core/animation/ts/dsl/animation_example.ts region='Component'}
	     *
	     * @experimental Animation support is experimental.
	     */
	    function state(stateNameExpr, styles) {
	        return new AnimationStateDeclarationMetadata(stateNameExpr, styles);
	    }
	    /**
	     * `keyframes` is an animation-specific function that is designed to be used inside of Angular2's
	     * animation
	     * DSL language. If this information is new, please navigate to the
	     * {@link Component#animations-anchor component animations metadata
	     * page} to gain a better understanding of how animations in Angular2 are used.
	     *
	     * `keyframes` specifies a collection of {@link style style} entries each optionally characterized
	     * by an `offset` value.
	     *
	     * ### Usage
	     *
	     * The `keyframes` animation function is designed to be used alongside the {@link animate animate}
	     * animation function. Instead of applying animations from where they are
	     * currently to their destination, keyframes can describe how each style entry is applied
	     * and at what point within the animation arc (much like CSS Keyframe Animations do).
	     *
	     * For each `style()` entry an `offset` value can be set. Doing so allows to specifiy at
	     * what percentage of the animate time the styles will be applied.
	     *
	     * ```typescript
	     * // the provided offset values describe when each backgroundColor value is applied.
	     * animate("5s", keyframes([
	     *   style({ backgroundColor: "red", offset: 0 }),
	     *   style({ backgroundColor: "blue", offset: 0.2 }),
	     *   style({ backgroundColor: "orange", offset: 0.3 }),
	     *   style({ backgroundColor: "black", offset: 1 })
	     * ]))
	     * ```
	     *
	     * Alternatively, if there are no `offset` values used within the style entries then the offsets
	     * will
	     * be calculated automatically.
	     *
	     * ```typescript
	     * animate("5s", keyframes([
	     *   style({ backgroundColor: "red" }) // offset = 0
	     *   style({ backgroundColor: "blue" }) // offset = 0.33
	     *   style({ backgroundColor: "orange" }) // offset = 0.66
	     *   style({ backgroundColor: "black" }) // offset = 1
	     * ]))
	     * ```
	     *
	     * ### Example ([live demo](http://plnkr.co/edit/Kez8XGWBxWue7qP7nNvF?p=preview))
	     *
	     * {@example core/animation/ts/dsl/animation_example.ts region='Component'}
	     *
	     * @experimental Animation support is experimental.
	     */
	    function keyframes(steps) {
	        return new AnimationKeyframesSequenceMetadata(steps);
	    }
	    /**
	     * `transition` is an animation-specific function that is designed to be used inside of Angular2's
	     * animation
	     * DSL language. If this information is new, please navigate to the
	     * {@link Component#animations-anchor component animations metadata
	     * page} to gain a better understanding of how animations in Angular2 are used.
	     *
	     * `transition` declares the {@link sequence sequence of animation steps} that will be run when the
	     * provided
	     * `stateChangeExpr` value is satisfied. The `stateChangeExpr` consists of a `state1 => state2`
	     * which consists
	     * of two known states (use an asterix (`*`) to refer to a dynamic starting and/or ending state).
	     *
	     * Animation transitions are placed within an {@link trigger animation trigger}. For an transition
	     * to animate to
	     * a state value and persist its styles then one or more {@link state animation states} is expected
	     * to be defined.
	     *
	     * ### Usage
	     *
	     * An animation transition is kicked off the `stateChangeExpr` predicate evaluates to true based on
	     * what the
	     * previous state is and what the current state has become. In other words, if a transition is
	     * defined that
	     * matches the old/current state criteria then the associated animation will be triggered.
	     *
	     * ```typescript
	     * // all transition/state changes are defined within an animation trigger
	     * trigger("myAnimationTrigger", [
	     *   // if a state is defined then its styles will be persisted when the
	     *   // animation has fully completed itself
	     *   state("on", style({ background: "green" })),
	     *   state("off", style({ background: "grey" })),
	     *
	     *   // a transition animation that will be kicked off when the state value
	     *   // bound to "myAnimationTrigger" changes from "on" to "off"
	     *   transition("on => off", animate(500)),
	     *
	     *   // it is also possible to do run the same animation for both directions
	     *   transition("on <=> off", animate(500)),
	     *
	     *   // or to define multiple states pairs separated by commas
	     *   transition("on => off, off => void", animate(500)),
	     *
	     *   // this is a catch-all state change for when an element is inserted into
	     *   // the page and the destination state is unknown
	     *   transition("void => *", [
	     *     style({ opacity: 0 }),
	     *     animate(500)
	     *   ]),
	     *
	     *   // this will capture a state change between any states
	     *   transition("* => *", animate("1s 0s")),
	     * ])
	     * ```
	     *
	     * The template associated with this component will make use of the `myAnimationTrigger`
	     * animation trigger by binding to an element within its template code.
	     *
	     * ```html
	     * <!-- somewhere inside of my-component-tpl.html -->
	     * <div [@myAnimationTrigger]="myStatusExp">...</div>
	     * ```
	     *
	     * #### The final `animate` call
	     *
	     * If the final step within the transition steps is a call to `animate()` that **only**
	     * uses a timing value with **no style data** then it will be automatically used as the final
	     * animation
	     * arc for the element to animate itself to the final state. This involves an automatic mix of
	     * adding/removing CSS styles so that the element will be in the exact state it should be for the
	     * applied state to be presented correctly.
	     *
	     * ```
	     * // start off by hiding the element, but make sure that it animates properly to whatever state
	     * // is currently active for "myAnimationTrigger"
	     * transition("void => *", [
	     *   style({ opacity: 0 }),
	     *   animate(500)
	     * ])
	     * ```
	     *
	     * ### Transition Aliases (`:enter` and `:leave`)
	     *
	     * Given that enter (insertion) and leave (removal) animations are so common,
	     * the `transition` function accepts both `:enter` and `:leave` values which
	     * are aliases for the `void => *` and `* => void` state changes.
	     *
	     * ```
	     * transition(":enter", [
	     *   style({ opacity: 0 }),
	     *   animate(500, style({ opacity: 1 }))
	     * ])
	     * transition(":leave", [
	     *   animate(500, style({ opacity: 0 }))
	     * ])
	     * ```
	     *
	     * ### Example ([live demo](http://plnkr.co/edit/Kez8XGWBxWue7qP7nNvF?p=preview))
	     *
	     * {@example core/animation/ts/dsl/animation_example.ts region='Component'}
	     *
	     * @experimental Animation support is experimental.
	     */
	    function transition(stateChangeExpr, steps) {
	        var animationData = Array.isArray(steps) ? new AnimationSequenceMetadata(steps) : steps;
	        return new AnimationStateTransitionMetadata(stateChangeExpr, animationData);
	    }
	    /**
	     * `trigger` is an animation-specific function that is designed to be used inside of Angular2's
	     * animation
	     * DSL language. If this information is new, please navigate to the
	     * {@link Component#animations-anchor component animations metadata
	     * page} to gain a better understanding of how animations in Angular2 are used.
	     *
	     * `trigger` Creates an animation trigger which will a list of {@link state state} and {@link
	     * transition transition}
	     * entries that will be evaluated when the expression bound to the trigger changes.
	     *
	     * Triggers are registered within the component annotation data under the
	     * {@link Component#animations-anchor animations section}. An animation trigger can
	     * be placed on an element within a template by referencing the name of the
	     * trigger followed by the expression value that the trigger is bound to
	     * (in the form of `[@triggerName]="expression"`.
	     *
	     * ### Usage
	     *
	     * `trigger` will create an animation trigger reference based on the provided `name` value.
	     * The provided `animation` value is expected to be an array consisting of {@link state state} and
	     * {@link transition transition}
	     * declarations.
	     *
	     * ```typescript
	     * @Component({
	     *   selector: 'my-component',
	     *   templateUrl: 'my-component-tpl.html',
	     *   animations: [
	     *     trigger("myAnimationTrigger", [
	     *       state(...),
	     *       state(...),
	     *       transition(...),
	     *       transition(...)
	     *     ])
	     *   ]
	     * })
	     * class MyComponent {
	     *   myStatusExp = "something";
	     * }
	     * ```
	     *
	     * The template associated with this component will make use of the `myAnimationTrigger`
	     * animation trigger by binding to an element within its template code.
	     *
	     * ```html
	     * <!-- somewhere inside of my-component-tpl.html -->
	     * <div [@myAnimationTrigger]="myStatusExp">...</div>
	     * ```
	     *
	     * ### Example ([live demo](http://plnkr.co/edit/Kez8XGWBxWue7qP7nNvF?p=preview))
	     *
	     * {@example core/animation/ts/dsl/animation_example.ts region='Component'}
	     *
	     * @experimental Animation support is experimental.
	     */
	    function trigger(name, animation) {
	        return new AnimationEntryMetadata(name, animation);
	    }

	    function prepareFinalAnimationStyles(previousStyles, newStyles, nullValue) {
	        if (nullValue === void 0) { nullValue = null; }
	        var finalStyles = {};
	        Object.keys(newStyles).forEach(function (prop) {
	            var value = newStyles[prop];
	            finalStyles[prop] = value == AUTO_STYLE ? nullValue : value.toString();
	        });
	        Object.keys(previousStyles).forEach(function (prop) {
	            if (!isPresent(finalStyles[prop])) {
	                finalStyles[prop] = nullValue;
	            }
	        });
	        return finalStyles;
	    }
	    function balanceAnimationKeyframes(collectedStyles, finalStateStyles, keyframes) {
	        var limit = keyframes.length - 1;
	        var firstKeyframe = keyframes[0];
	        // phase 1: copy all the styles from the first keyframe into the lookup map
	        var flatenedFirstKeyframeStyles = flattenStyles(firstKeyframe.styles.styles);
	        var extraFirstKeyframeStyles = {};
	        var hasExtraFirstStyles = false;
	        Object.keys(collectedStyles).forEach(function (prop) {
	            var value = collectedStyles[prop];
	            // if the style is already defined in the first keyframe then
	            // we do not replace it.
	            if (!flatenedFirstKeyframeStyles[prop]) {
	                flatenedFirstKeyframeStyles[prop] = value;
	                extraFirstKeyframeStyles[prop] = value;
	                hasExtraFirstStyles = true;
	            }
	        });
	        var keyframeCollectedStyles = StringMapWrapper.merge({}, flatenedFirstKeyframeStyles);
	        // phase 2: normalize the final keyframe
	        var finalKeyframe = keyframes[limit];
	        finalKeyframe.styles.styles.unshift(finalStateStyles);
	        var flatenedFinalKeyframeStyles = flattenStyles(finalKeyframe.styles.styles);
	        var extraFinalKeyframeStyles = {};
	        var hasExtraFinalStyles = false;
	        Object.keys(keyframeCollectedStyles).forEach(function (prop) {
	            if (!isPresent(flatenedFinalKeyframeStyles[prop])) {
	                extraFinalKeyframeStyles[prop] = AUTO_STYLE;
	                hasExtraFinalStyles = true;
	            }
	        });
	        if (hasExtraFinalStyles) {
	            finalKeyframe.styles.styles.push(extraFinalKeyframeStyles);
	        }
	        Object.keys(flatenedFinalKeyframeStyles).forEach(function (prop) {
	            if (!isPresent(flatenedFirstKeyframeStyles[prop])) {
	                extraFirstKeyframeStyles[prop] = AUTO_STYLE;
	                hasExtraFirstStyles = true;
	            }
	        });
	        if (hasExtraFirstStyles) {
	            firstKeyframe.styles.styles.push(extraFirstKeyframeStyles);
	        }
	        collectAndResolveStyles(collectedStyles, [finalStateStyles]);
	        return keyframes;
	    }
	    function clearStyles(styles) {
	        var finalStyles = {};
	        Object.keys(styles).forEach(function (key) { finalStyles[key] = null; });
	        return finalStyles;
	    }
	    function collectAndResolveStyles(collection, styles) {
	        return styles.map(function (entry) {
	            var stylesObj = {};
	            Object.keys(entry).forEach(function (prop) {
	                var value = entry[prop];
	                if (value == FILL_STYLE_FLAG) {
	                    value = collection[prop];
	                    if (!isPresent(value)) {
	                        value = AUTO_STYLE;
	                    }
	                }
	                collection[prop] = value;
	                stylesObj[prop] = value;
	            });
	            return stylesObj;
	        });
	    }
	    function renderStyles(element, renderer, styles) {
	        Object.keys(styles).forEach(function (prop) { renderer.setElementStyle(element, prop, styles[prop]); });
	    }
	    function flattenStyles(styles) {
	        var finalStyles = {};
	        styles.forEach(function (entry) {
	            Object.keys(entry).forEach(function (prop) { finalStyles[prop] = entry[prop]; });
	        });
	        return finalStyles;
	    }

	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    var AnimationStyles = (function () {
	        function AnimationStyles(styles) {
	            this.styles = styles;
	        }
	        return AnimationStyles;
	    }());

	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    /**
	     * An instance of this class is returned as an event parameter when an animation
	     * callback is captured for an animation either during the start or done phase.
	     *
	     * ```typescript
	     * @Component({
	     *   host: {
	     *     '[@myAnimationTrigger]': 'someExpression',
	     *     '(@myAnimationTrigger.start)': 'captureStartEvent($event)',
	     *     '(@myAnimationTrigger.done)': 'captureDoneEvent($event)',
	     *   },
	     *   animations: [
	     *     trigger("myAnimationTrigger", [
	     *        // ...
	     *     ])
	     *   ]
	     * })
	     * class MyComponent {
	     *   someExpression: any = false;
	     *   captureStartEvent(event: AnimationTransitionEvent) {
	     *     // the toState, fromState and totalTime data is accessible from the event variable
	     *   }
	     *
	     *   captureDoneEvent(event: AnimationTransitionEvent) {
	     *     // the toState, fromState and totalTime data is accessible from the event variable
	     *   }
	     * }
	     * ```
	     *
	     * @experimental Animation support is experimental.
	     */
	    var AnimationTransitionEvent = (function () {
	        function AnimationTransitionEvent(_a) {
	            var fromState = _a.fromState, toState = _a.toState, totalTime = _a.totalTime, phaseName = _a.phaseName;
	            this.fromState = fromState;
	            this.toState = toState;
	            this.totalTime = totalTime;
	            this.phaseName = phaseName;
	        }
	        return AnimationTransitionEvent;
	    }());

	    var AnimationTransition = (function () {
	        function AnimationTransition(_player, _fromState, _toState, _totalTime) {
	            this._player = _player;
	            this._fromState = _fromState;
	            this._toState = _toState;
	            this._totalTime = _totalTime;
	        }
	        AnimationTransition.prototype._createEvent = function (phaseName) {
	            return new AnimationTransitionEvent({
	                fromState: this._fromState,
	                toState: this._toState,
	                totalTime: this._totalTime,
	                phaseName: phaseName
	            });
	        };
	        AnimationTransition.prototype.onStart = function (callback) {
	            var event = this._createEvent('start');
	            this._player.onStart(function () { return callback(event); });
	        };
	        AnimationTransition.prototype.onDone = function (callback) {
	            var event = this._createEvent('done');
	            this._player.onDone(function () { return callback(event); });
	        };
	        return AnimationTransition;
	    }());

	    var DebugDomRootRenderer = (function () {
	        function DebugDomRootRenderer(_delegate) {
	            this._delegate = _delegate;
	        }
	        DebugDomRootRenderer.prototype.renderComponent = function (componentProto) {
	            return new DebugDomRenderer(this._delegate.renderComponent(componentProto));
	        };
	        return DebugDomRootRenderer;
	    }());
	    var DebugDomRenderer = (function () {
	        function DebugDomRenderer(_delegate) {
	            this._delegate = _delegate;
	        }
	        DebugDomRenderer.prototype.selectRootElement = function (selectorOrNode, debugInfo) {
	            var nativeEl = this._delegate.selectRootElement(selectorOrNode, debugInfo);
	            var debugEl = new DebugElement(nativeEl, null, debugInfo);
	            indexDebugNode(debugEl);
	            return nativeEl;
	        };
	        DebugDomRenderer.prototype.createElement = function (parentElement, name, debugInfo) {
	            var nativeEl = this._delegate.createElement(parentElement, name, debugInfo);
	            var debugEl = new DebugElement(nativeEl, getDebugNode(parentElement), debugInfo);
	            debugEl.name = name;
	            indexDebugNode(debugEl);
	            return nativeEl;
	        };
	        DebugDomRenderer.prototype.createViewRoot = function (hostElement) { return this._delegate.createViewRoot(hostElement); };
	        DebugDomRenderer.prototype.createTemplateAnchor = function (parentElement, debugInfo) {
	            var comment = this._delegate.createTemplateAnchor(parentElement, debugInfo);
	            var debugEl = new DebugNode(comment, getDebugNode(parentElement), debugInfo);
	            indexDebugNode(debugEl);
	            return comment;
	        };
	        DebugDomRenderer.prototype.createText = function (parentElement, value, debugInfo) {
	            var text = this._delegate.createText(parentElement, value, debugInfo);
	            var debugEl = new DebugNode(text, getDebugNode(parentElement), debugInfo);
	            indexDebugNode(debugEl);
	            return text;
	        };
	        DebugDomRenderer.prototype.projectNodes = function (parentElement, nodes) {
	            var debugParent = getDebugNode(parentElement);
	            if (isPresent(debugParent) && debugParent instanceof DebugElement) {
	                var debugElement_1 = debugParent;
	                nodes.forEach(function (node) { debugElement_1.addChild(getDebugNode(node)); });
	            }
	            this._delegate.projectNodes(parentElement, nodes);
	        };
	        DebugDomRenderer.prototype.attachViewAfter = function (node, viewRootNodes) {
	            var debugNode = getDebugNode(node);
	            if (isPresent(debugNode)) {
	                var debugParent = debugNode.parent;
	                if (viewRootNodes.length > 0 && isPresent(debugParent)) {
	                    var debugViewRootNodes_1 = [];
	                    viewRootNodes.forEach(function (rootNode) { return debugViewRootNodes_1.push(getDebugNode(rootNode)); });
	                    debugParent.insertChildrenAfter(debugNode, debugViewRootNodes_1);
	                }
	            }
	            this._delegate.attachViewAfter(node, viewRootNodes);
	        };
	        DebugDomRenderer.prototype.detachView = function (viewRootNodes) {
	            viewRootNodes.forEach(function (node) {
	                var debugNode = getDebugNode(node);
	                if (isPresent(debugNode) && isPresent(debugNode.parent)) {
	                    debugNode.parent.removeChild(debugNode);
	                }
	            });
	            this._delegate.detachView(viewRootNodes);
	        };
	        DebugDomRenderer.prototype.destroyView = function (hostElement, viewAllNodes) {
	            viewAllNodes = viewAllNodes || [];
	            viewAllNodes.forEach(function (node) { removeDebugNodeFromIndex(getDebugNode(node)); });
	            this._delegate.destroyView(hostElement, viewAllNodes);
	        };
	        DebugDomRenderer.prototype.listen = function (renderElement, name, callback) {
	            var debugEl = getDebugNode(renderElement);
	            if (isPresent(debugEl)) {
	                debugEl.listeners.push(new EventListener(name, callback));
	            }
	            return this._delegate.listen(renderElement, name, callback);
	        };
	        DebugDomRenderer.prototype.listenGlobal = function (target, name, callback) {
	            return this._delegate.listenGlobal(target, name, callback);
	        };
	        DebugDomRenderer.prototype.setElementProperty = function (renderElement, propertyName, propertyValue) {
	            var debugEl = getDebugNode(renderElement);
	            if (isPresent(debugEl) && debugEl instanceof DebugElement) {
	                debugEl.properties[propertyName] = propertyValue;
	            }
	            this._delegate.setElementProperty(renderElement, propertyName, propertyValue);
	        };
	        DebugDomRenderer.prototype.setElementAttribute = function (renderElement, attributeName, attributeValue) {
	            var debugEl = getDebugNode(renderElement);
	            if (isPresent(debugEl) && debugEl instanceof DebugElement) {
	                debugEl.attributes[attributeName] = attributeValue;
	            }
	            this._delegate.setElementAttribute(renderElement, attributeName, attributeValue);
	        };
	        DebugDomRenderer.prototype.setBindingDebugInfo = function (renderElement, propertyName, propertyValue) {
	            this._delegate.setBindingDebugInfo(renderElement, propertyName, propertyValue);
	        };
	        DebugDomRenderer.prototype.setElementClass = function (renderElement, className, isAdd) {
	            var debugEl = getDebugNode(renderElement);
	            if (isPresent(debugEl) && debugEl instanceof DebugElement) {
	                debugEl.classes[className] = isAdd;
	            }
	            this._delegate.setElementClass(renderElement, className, isAdd);
	        };
	        DebugDomRenderer.prototype.setElementStyle = function (renderElement, styleName, styleValue) {
	            var debugEl = getDebugNode(renderElement);
	            if (isPresent(debugEl) && debugEl instanceof DebugElement) {
	                debugEl.styles[styleName] = styleValue;
	            }
	            this._delegate.setElementStyle(renderElement, styleName, styleValue);
	        };
	        DebugDomRenderer.prototype.invokeElementMethod = function (renderElement, methodName, args) {
	            this._delegate.invokeElementMethod(renderElement, methodName, args);
	        };
	        DebugDomRenderer.prototype.setText = function (renderNode, text) { this._delegate.setText(renderNode, text); };
	        DebugDomRenderer.prototype.animate = function (element, startingStyles, keyframes, duration, delay, easing, previousPlayers) {
	            if (previousPlayers === void 0) { previousPlayers = []; }
	            return this._delegate.animate(element, startingStyles, keyframes, duration, delay, easing, previousPlayers);
	        };
	        return DebugDomRenderer;
	    }());

	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    var ViewType;
	    (function (ViewType) {
	        // A view that contains the host element with bound component directive.
	        // Contains a COMPONENT view
	        ViewType[ViewType["HOST"] = 0] = "HOST";
	        // The view of the component
	        // Can contain 0 to n EMBEDDED views
	        ViewType[ViewType["COMPONENT"] = 1] = "COMPONENT";
	        // A view that is embedded into another View via a <template> element
	        // inside of a COMPONENT view
	        ViewType[ViewType["EMBEDDED"] = 2] = "EMBEDDED";
	    })(ViewType || (ViewType = {}));

	    var StaticNodeDebugInfo = (function () {
	        function StaticNodeDebugInfo(providerTokens, componentToken, refTokens) {
	            this.providerTokens = providerTokens;
	            this.componentToken = componentToken;
	            this.refTokens = refTokens;
	        }
	        return StaticNodeDebugInfo;
	    }());
	    var DebugContext = (function () {
	        function DebugContext(_view, _nodeIndex, _tplRow, _tplCol) {
	            this._view = _view;
	            this._nodeIndex = _nodeIndex;
	            this._tplRow = _tplRow;
	            this._tplCol = _tplCol;
	        }
	        Object.defineProperty(DebugContext.prototype, "_staticNodeInfo", {
	            get: function () {
	                return isPresent(this._nodeIndex) ? this._view.staticNodeDebugInfos[this._nodeIndex] : null;
	            },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(DebugContext.prototype, "context", {
	            get: function () { return this._view.context; },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(DebugContext.prototype, "component", {
	            get: function () {
	                var staticNodeInfo = this._staticNodeInfo;
	                if (isPresent(staticNodeInfo) && isPresent(staticNodeInfo.componentToken)) {
	                    return this.injector.get(staticNodeInfo.componentToken);
	                }
	                return null;
	            },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(DebugContext.prototype, "componentRenderElement", {
	            get: function () {
	                var componentView = this._view;
	                while (isPresent(componentView.parentView) && componentView.type !== ViewType.COMPONENT) {
	                    componentView = componentView.parentView;
	                }
	                return componentView.parentElement;
	            },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(DebugContext.prototype, "injector", {
	            get: function () { return this._view.injector(this._nodeIndex); },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(DebugContext.prototype, "renderNode", {
	            get: function () {
	                if (isPresent(this._nodeIndex) && this._view.allNodes) {
	                    return this._view.allNodes[this._nodeIndex];
	                }
	                else {
	                    return null;
	                }
	            },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(DebugContext.prototype, "providerTokens", {
	            get: function () {
	                var staticNodeInfo = this._staticNodeInfo;
	                return isPresent(staticNodeInfo) ? staticNodeInfo.providerTokens : null;
	            },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(DebugContext.prototype, "source", {
	            get: function () {
	                return this._view.componentType.templateUrl + ":" + this._tplRow + ":" + this._tplCol;
	            },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(DebugContext.prototype, "references", {
	            get: function () {
	                var _this = this;
	                var varValues = {};
	                var staticNodeInfo = this._staticNodeInfo;
	                if (isPresent(staticNodeInfo)) {
	                    var refs_1 = staticNodeInfo.refTokens;
	                    Object.keys(refs_1).forEach(function (refName) {
	                        var refToken = refs_1[refName];
	                        var varValue;
	                        if (isBlank(refToken)) {
	                            varValue = _this._view.allNodes ? _this._view.allNodes[_this._nodeIndex] : null;
	                        }
	                        else {
	                            varValue = _this._view.injectorGet(refToken, _this._nodeIndex, null);
	                        }
	                        varValues[refName] = varValue;
	                    });
	                }
	                return varValues;
	            },
	            enumerable: true,
	            configurable: true
	        });
	        return DebugContext;
	    }());

	    var ViewAnimationMap = (function () {
	        function ViewAnimationMap() {
	            this._map = new Map();
	            this._allPlayers = [];
	        }
	        ViewAnimationMap.prototype.find = function (element, animationName) {
	            var playersByAnimation = this._map.get(element);
	            if (isPresent(playersByAnimation)) {
	                return playersByAnimation[animationName];
	            }
	        };
	        ViewAnimationMap.prototype.findAllPlayersByElement = function (element) {
	            var el = this._map.get(element);
	            return el ? Object.keys(el).map(function (k) { return el[k]; }) : [];
	        };
	        ViewAnimationMap.prototype.set = function (element, animationName, player) {
	            var playersByAnimation = this._map.get(element);
	            if (!isPresent(playersByAnimation)) {
	                playersByAnimation = {};
	            }
	            var existingEntry = playersByAnimation[animationName];
	            if (isPresent(existingEntry)) {
	                this.remove(element, animationName);
	            }
	            playersByAnimation[animationName] = player;
	            this._allPlayers.push(player);
	            this._map.set(element, playersByAnimation);
	        };
	        ViewAnimationMap.prototype.getAllPlayers = function () { return this._allPlayers; };
	        ViewAnimationMap.prototype.remove = function (element, animationName) {
	            var playersByAnimation = this._map.get(element);
	            if (playersByAnimation) {
	                var player = playersByAnimation[animationName];
	                delete playersByAnimation[animationName];
	                var index = this._allPlayers.indexOf(player);
	                this._allPlayers.splice(index, 1);
	                if (Object.keys(playersByAnimation).length === 0) {
	                    this._map.delete(element);
	                }
	            }
	        };
	        return ViewAnimationMap;
	    }());

	    var AnimationViewContext = (function () {
	        function AnimationViewContext() {
	            this._players = new ViewAnimationMap();
	        }
	        AnimationViewContext.prototype.onAllActiveAnimationsDone = function (callback) {
	            var activeAnimationPlayers = this._players.getAllPlayers();
	            // we check for the length to avoid having GroupAnimationPlayer
	            // issue an unnecessary microtask when zero players are passed in
	            if (activeAnimationPlayers.length) {
	                new AnimationGroupPlayer(activeAnimationPlayers).onDone(function () { return callback(); });
	            }
	            else {
	                callback();
	            }
	        };
	        AnimationViewContext.prototype.queueAnimation = function (element, animationName, player) {
	            queueAnimationGlobally(player);
	            this._players.set(element, animationName, player);
	        };
	        AnimationViewContext.prototype.getAnimationPlayers = function (element, animationName, removeAllAnimations) {
	            if (removeAllAnimations === void 0) { removeAllAnimations = false; }
	            var players = [];
	            if (removeAllAnimations) {
	                this._players.findAllPlayersByElement(element).forEach(function (player) { _recursePlayers(player, players); });
	            }
	            else {
	                var currentPlayer = this._players.find(element, animationName);
	                if (currentPlayer) {
	                    _recursePlayers(currentPlayer, players);
	                }
	            }
	            return players;
	        };
	        return AnimationViewContext;
	    }());
	    function _recursePlayers(player, collectedPlayers) {
	        if ((player instanceof AnimationGroupPlayer) || (player instanceof AnimationSequencePlayer)) {
	            player.players.forEach(function (player) { return _recursePlayers(player, collectedPlayers); });
	        }
	        else {
	            collectedPlayers.push(player);
	        }
	    }

	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    var __extends$15 = (this && this.__extends) || function (d, b) {
	        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	    var ElementInjector = (function (_super) {
	        __extends$15(ElementInjector, _super);
	        function ElementInjector(_view, _nodeIndex) {
	            _super.call(this);
	            this._view = _view;
	            this._nodeIndex = _nodeIndex;
	        }
	        ElementInjector.prototype.get = function (token, notFoundValue) {
	            if (notFoundValue === void 0) { notFoundValue = THROW_IF_NOT_FOUND; }
	            return this._view.injectorGet(token, this._nodeIndex, notFoundValue);
	        };
	        return ElementInjector;
	    }(Injector));

	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    var __extends$14 = (this && this.__extends) || function (d, b) {
	        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	    var _scope_check = wtfCreateScope("AppView#check(ascii id)");
	    /**
	     * @experimental
	     */
	    var EMPTY_CONTEXT$1 = new Object();
	    var UNDEFINED$1 = new Object();
	    /**
	     * Cost of making objects: http://jsperf.com/instantiate-size-of-object
	     *
	     */
	    var AppView = (function () {
	        function AppView(clazz, componentType, type, viewUtils, parentView, parentIndex, parentElement, cdMode, declaredViewContainer) {
	            if (declaredViewContainer === void 0) { declaredViewContainer = null; }
	            this.clazz = clazz;
	            this.componentType = componentType;
	            this.type = type;
	            this.viewUtils = viewUtils;
	            this.parentView = parentView;
	            this.parentIndex = parentIndex;
	            this.parentElement = parentElement;
	            this.cdMode = cdMode;
	            this.declaredViewContainer = declaredViewContainer;
	            this.viewContainer = null;
	            this.numberOfChecks = 0;
	            this.ref = new ViewRef_(this);
	            if (type === ViewType.COMPONENT || type === ViewType.HOST) {
	                this.renderer = viewUtils.renderComponent(componentType);
	            }
	            else {
	                this.renderer = parentView.renderer;
	            }
	            this._directRenderer = this.renderer.directRenderer;
	        }
	        Object.defineProperty(AppView.prototype, "animationContext", {
	            get: function () {
	                if (!this._animationContext) {
	                    this._animationContext = new AnimationViewContext();
	                }
	                return this._animationContext;
	            },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(AppView.prototype, "destroyed", {
	            get: function () { return this.cdMode === ChangeDetectorStatus.Destroyed; },
	            enumerable: true,
	            configurable: true
	        });
	        AppView.prototype.create = function (context) {
	            this.context = context;
	            return this.createInternal(null);
	        };
	        AppView.prototype.createHostView = function (rootSelectorOrNode, hostInjector, projectableNodes) {
	            this.context = EMPTY_CONTEXT$1;
	            this._hasExternalHostElement = isPresent(rootSelectorOrNode);
	            this._hostInjector = hostInjector;
	            this._hostProjectableNodes = projectableNodes;
	            return this.createInternal(rootSelectorOrNode);
	        };
	        /**
	         * Overwritten by implementations.
	         * Returns the ComponentRef for the host element for ViewType.HOST.
	         */
	        AppView.prototype.createInternal = function (rootSelectorOrNode) { return null; };
	        /**
	         * Overwritten by implementations.
	         */
	        AppView.prototype.createEmbeddedViewInternal = function (templateNodeIndex) { return null; };
	        AppView.prototype.init = function (lastRootNode, allNodes, disposables) {
	            this.lastRootNode = lastRootNode;
	            this.allNodes = allNodes;
	            this.disposables = disposables;
	            if (this.type === ViewType.COMPONENT) {
	                this.dirtyParentQueriesInternal();
	            }
	        };
	        AppView.prototype.injectorGet = function (token, nodeIndex, notFoundValue) {
	            if (notFoundValue === void 0) { notFoundValue = THROW_IF_NOT_FOUND; }
	            var result = UNDEFINED$1;
	            var view = this;
	            while (result === UNDEFINED$1) {
	                if (isPresent(nodeIndex)) {
	                    result = view.injectorGetInternal(token, nodeIndex, UNDEFINED$1);
	                }
	                if (result === UNDEFINED$1 && view.type === ViewType.HOST) {
	                    result = view._hostInjector.get(token, notFoundValue);
	                }
	                nodeIndex = view.parentIndex;
	                view = view.parentView;
	            }
	            return result;
	        };
	        /**
	         * Overwritten by implementations
	         */
	        AppView.prototype.injectorGetInternal = function (token, nodeIndex, notFoundResult) {
	            return notFoundResult;
	        };
	        AppView.prototype.injector = function (nodeIndex) { return new ElementInjector(this, nodeIndex); };
	        AppView.prototype.detachAndDestroy = function () {
	            if (this._hasExternalHostElement) {
	                this.detach();
	            }
	            else if (isPresent(this.viewContainer)) {
	                this.viewContainer.detachView(this.viewContainer.nestedViews.indexOf(this));
	            }
	            this.destroy();
	        };
	        AppView.prototype.destroy = function () {
	            var _this = this;
	            if (this.cdMode === ChangeDetectorStatus.Destroyed) {
	                return;
	            }
	            var hostElement = this.type === ViewType.COMPONENT ? this.parentElement : null;
	            if (this.disposables) {
	                for (var i = 0; i < this.disposables.length; i++) {
	                    this.disposables[i]();
	                }
	            }
	            this.destroyInternal();
	            this.dirtyParentQueriesInternal();
	            if (this._animationContext) {
	                this._animationContext.onAllActiveAnimationsDone(function () { return _this.renderer.destroyView(hostElement, _this.allNodes); });
	            }
	            else {
	                this.renderer.destroyView(hostElement, this.allNodes);
	            }
	            this.cdMode = ChangeDetectorStatus.Destroyed;
	        };
	        /**
	         * Overwritten by implementations
	         */
	        AppView.prototype.destroyInternal = function () { };
	        /**
	         * Overwritten by implementations
	         */
	        AppView.prototype.detachInternal = function () { };
	        AppView.prototype.detach = function () {
	            var _this = this;
	            this.detachInternal();
	            if (this._animationContext) {
	                this._animationContext.onAllActiveAnimationsDone(function () { return _this._renderDetach(); });
	            }
	            else {
	                this._renderDetach();
	            }
	            if (this.declaredViewContainer && this.declaredViewContainer !== this.viewContainer) {
	                var projectedViews = this.declaredViewContainer.projectedViews;
	                var index = projectedViews.indexOf(this);
	                // perf: pop is faster than splice!
	                if (index >= projectedViews.length - 1) {
	                    projectedViews.pop();
	                }
	                else {
	                    projectedViews.splice(index, 1);
	                }
	            }
	            this.viewContainer = null;
	            this.dirtyParentQueriesInternal();
	        };
	        AppView.prototype._renderDetach = function () {
	            if (this._directRenderer) {
	                this.visitRootNodesInternal(this._directRenderer.remove, null);
	            }
	            else {
	                this.renderer.detachView(this.flatRootNodes);
	            }
	        };
	        AppView.prototype.attachAfter = function (viewContainer, prevView) {
	            this._renderAttach(viewContainer, prevView);
	            this.viewContainer = viewContainer;
	            if (this.declaredViewContainer && this.declaredViewContainer !== viewContainer) {
	                if (!this.declaredViewContainer.projectedViews) {
	                    this.declaredViewContainer.projectedViews = [];
	                }
	                this.declaredViewContainer.projectedViews.push(this);
	            }
	            this.dirtyParentQueriesInternal();
	        };
	        AppView.prototype.moveAfter = function (viewContainer, prevView) {
	            this._renderAttach(viewContainer, prevView);
	            this.dirtyParentQueriesInternal();
	        };
	        AppView.prototype._renderAttach = function (viewContainer, prevView) {
	            var prevNode = prevView ? prevView.lastRootNode : viewContainer.nativeElement;
	            if (this._directRenderer) {
	                var nextSibling = this._directRenderer.nextSibling(prevNode);
	                if (nextSibling) {
	                    this.visitRootNodesInternal(this._directRenderer.insertBefore, nextSibling);
	                }
	                else {
	                    var parentElement = this._directRenderer.parentElement(prevNode);
	                    if (parentElement) {
	                        this.visitRootNodesInternal(this._directRenderer.appendChild, parentElement);
	                    }
	                }
	            }
	            else {
	                this.renderer.attachViewAfter(prevNode, this.flatRootNodes);
	            }
	        };
	        Object.defineProperty(AppView.prototype, "changeDetectorRef", {
	            get: function () { return this.ref; },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(AppView.prototype, "flatRootNodes", {
	            get: function () {
	                var nodes = [];
	                this.visitRootNodesInternal(addToArray, nodes);
	                return nodes;
	            },
	            enumerable: true,
	            configurable: true
	        });
	        AppView.prototype.projectNodes = function (parentElement, ngContentIndex) {
	            if (this._directRenderer) {
	                this.visitProjectedNodes(ngContentIndex, this._directRenderer.appendChild, parentElement);
	            }
	            else {
	                var nodes = [];
	                this.visitProjectedNodes(ngContentIndex, addToArray, nodes);
	                this.renderer.projectNodes(parentElement, nodes);
	            }
	        };
	        AppView.prototype.visitProjectedNodes = function (ngContentIndex, cb, c) {
	            switch (this.type) {
	                case ViewType.EMBEDDED:
	                    this.parentView.visitProjectedNodes(ngContentIndex, cb, c);
	                    break;
	                case ViewType.COMPONENT:
	                    if (this.parentView.type === ViewType.HOST) {
	                        var nodes = this.parentView._hostProjectableNodes[ngContentIndex] || [];
	                        for (var i = 0; i < nodes.length; i++) {
	                            cb(nodes[i], c);
	                        }
	                    }
	                    else {
	                        this.parentView.visitProjectableNodesInternal(this.parentIndex, ngContentIndex, cb, c);
	                    }
	                    break;
	            }
	        };
	        /**
	         * Overwritten by implementations
	         */
	        AppView.prototype.visitRootNodesInternal = function (cb, c) { };
	        /**
	         * Overwritten by implementations
	         */
	        AppView.prototype.visitProjectableNodesInternal = function (nodeIndex, ngContentIndex, cb, c) { };
	        /**
	         * Overwritten by implementations
	         */
	        AppView.prototype.dirtyParentQueriesInternal = function () { };
	        AppView.prototype.detectChanges = function (throwOnChange) {
	            var s = _scope_check(this.clazz);
	            if (this.cdMode === ChangeDetectorStatus.Checked ||
	                this.cdMode === ChangeDetectorStatus.Errored ||
	                this.cdMode === ChangeDetectorStatus.Detached)
	                return;
	            if (this.cdMode === ChangeDetectorStatus.Destroyed) {
	                this.throwDestroyedError('detectChanges');
	            }
	            this.detectChangesInternal(throwOnChange);
	            if (this.cdMode === ChangeDetectorStatus.CheckOnce)
	                this.cdMode = ChangeDetectorStatus.Checked;
	            this.numberOfChecks++;
	            wtfLeave(s);
	        };
	        /**
	         * Overwritten by implementations
	         */
	        AppView.prototype.detectChangesInternal = function (throwOnChange) { };
	        AppView.prototype.markAsCheckOnce = function () { this.cdMode = ChangeDetectorStatus.CheckOnce; };
	        AppView.prototype.markPathToRootAsCheckOnce = function () {
	            var c = this;
	            while (isPresent(c) && c.cdMode !== ChangeDetectorStatus.Detached) {
	                if (c.cdMode === ChangeDetectorStatus.Checked) {
	                    c.cdMode = ChangeDetectorStatus.CheckOnce;
	                }
	                if (c.type === ViewType.COMPONENT) {
	                    c = c.parentView;
	                }
	                else {
	                    c = c.viewContainer ? c.viewContainer.parentView : null;
	                }
	            }
	        };
	        AppView.prototype.eventHandler = function (cb) {
	            return cb;
	        };
	        AppView.prototype.throwDestroyedError = function (details) { throw new ViewDestroyedError(details); };
	        return AppView;
	    }());
	    var DebugAppView = (function (_super) {
	        __extends$14(DebugAppView, _super);
	        function DebugAppView(clazz, componentType, type, viewUtils, parentView, parentIndex, parentNode, cdMode, staticNodeDebugInfos, declaredViewContainer) {
	            if (declaredViewContainer === void 0) { declaredViewContainer = null; }
	            _super.call(this, clazz, componentType, type, viewUtils, parentView, parentIndex, parentNode, cdMode, declaredViewContainer);
	            this.staticNodeDebugInfos = staticNodeDebugInfos;
	            this._currentDebugContext = null;
	        }
	        DebugAppView.prototype.create = function (context) {
	            this._resetDebug();
	            try {
	                return _super.prototype.create.call(this, context);
	            }
	            catch (e) {
	                this._rethrowWithContext(e);
	                throw e;
	            }
	        };
	        DebugAppView.prototype.createHostView = function (rootSelectorOrNode, injector, projectableNodes) {
	            if (projectableNodes === void 0) { projectableNodes = null; }
	            this._resetDebug();
	            try {
	                return _super.prototype.createHostView.call(this, rootSelectorOrNode, injector, projectableNodes);
	            }
	            catch (e) {
	                this._rethrowWithContext(e);
	                throw e;
	            }
	        };
	        DebugAppView.prototype.injectorGet = function (token, nodeIndex, notFoundResult) {
	            this._resetDebug();
	            try {
	                return _super.prototype.injectorGet.call(this, token, nodeIndex, notFoundResult);
	            }
	            catch (e) {
	                this._rethrowWithContext(e);
	                throw e;
	            }
	        };
	        DebugAppView.prototype.detach = function () {
	            this._resetDebug();
	            try {
	                _super.prototype.detach.call(this);
	            }
	            catch (e) {
	                this._rethrowWithContext(e);
	                throw e;
	            }
	        };
	        DebugAppView.prototype.destroy = function () {
	            this._resetDebug();
	            try {
	                _super.prototype.destroy.call(this);
	            }
	            catch (e) {
	                this._rethrowWithContext(e);
	                throw e;
	            }
	        };
	        DebugAppView.prototype.detectChanges = function (throwOnChange) {
	            this._resetDebug();
	            try {
	                _super.prototype.detectChanges.call(this, throwOnChange);
	            }
	            catch (e) {
	                this._rethrowWithContext(e);
	                throw e;
	            }
	        };
	        DebugAppView.prototype._resetDebug = function () { this._currentDebugContext = null; };
	        DebugAppView.prototype.debug = function (nodeIndex, rowNum, colNum) {
	            return this._currentDebugContext = new DebugContext(this, nodeIndex, rowNum, colNum);
	        };
	        DebugAppView.prototype._rethrowWithContext = function (e) {
	            if (!(e instanceof ViewWrappedError)) {
	                if (!(e instanceof ExpressionChangedAfterItHasBeenCheckedError)) {
	                    this.cdMode = ChangeDetectorStatus.Errored;
	                }
	                if (isPresent(this._currentDebugContext)) {
	                    throw new ViewWrappedError(e, this._currentDebugContext);
	                }
	            }
	        };
	        DebugAppView.prototype.eventHandler = function (cb) {
	            var _this = this;
	            var superHandler = _super.prototype.eventHandler.call(this, cb);
	            return function (eventName, event) {
	                _this._resetDebug();
	                try {
	                    return superHandler.call(_this, eventName, event);
	                }
	                catch (e) {
	                    _this._rethrowWithContext(e);
	                    throw e;
	                }
	            };
	        };
	        return DebugAppView;
	    }(AppView));

	    /**
	     * A ViewContainer is created for elements that have a ViewContainerRef
	     * to keep track of the nested views.
	     */
	    var ViewContainer = (function () {
	        function ViewContainer(index, parentIndex, parentView, nativeElement) {
	            this.index = index;
	            this.parentIndex = parentIndex;
	            this.parentView = parentView;
	            this.nativeElement = nativeElement;
	        }
	        Object.defineProperty(ViewContainer.prototype, "elementRef", {
	            get: function () { return new ElementRef(this.nativeElement); },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(ViewContainer.prototype, "vcRef", {
	            get: function () { return new ViewContainerRef_(this); },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(ViewContainer.prototype, "parentInjector", {
	            get: function () { return this.parentView.injector(this.parentIndex); },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(ViewContainer.prototype, "injector", {
	            get: function () { return this.parentView.injector(this.index); },
	            enumerable: true,
	            configurable: true
	        });
	        ViewContainer.prototype.detectChangesInNestedViews = function (throwOnChange) {
	            if (this.nestedViews) {
	                for (var i = 0; i < this.nestedViews.length; i++) {
	                    this.nestedViews[i].detectChanges(throwOnChange);
	                }
	            }
	        };
	        ViewContainer.prototype.destroyNestedViews = function () {
	            if (this.nestedViews) {
	                for (var i = 0; i < this.nestedViews.length; i++) {
	                    this.nestedViews[i].destroy();
	                }
	            }
	        };
	        ViewContainer.prototype.visitNestedViewRootNodes = function (cb, c) {
	            if (this.nestedViews) {
	                for (var i = 0; i < this.nestedViews.length; i++) {
	                    this.nestedViews[i].visitRootNodesInternal(cb, c);
	                }
	            }
	        };
	        ViewContainer.prototype.mapNestedViews = function (nestedViewClass, callback) {
	            var result = [];
	            if (this.nestedViews) {
	                for (var i = 0; i < this.nestedViews.length; i++) {
	                    var nestedView = this.nestedViews[i];
	                    if (nestedView.clazz === nestedViewClass) {
	                        result.push(callback(nestedView));
	                    }
	                }
	            }
	            if (this.projectedViews) {
	                for (var i = 0; i < this.projectedViews.length; i++) {
	                    var projectedView = this.projectedViews[i];
	                    if (projectedView.clazz === nestedViewClass) {
	                        result.push(callback(projectedView));
	                    }
	                }
	            }
	            return result;
	        };
	        ViewContainer.prototype.moveView = function (view, currentIndex) {
	            var previousIndex = this.nestedViews.indexOf(view);
	            if (view.type === ViewType.COMPONENT) {
	                throw new Error("Component views can't be moved!");
	            }
	            var nestedViews = this.nestedViews;
	            if (nestedViews == null) {
	                nestedViews = [];
	                this.nestedViews = nestedViews;
	            }
	            nestedViews.splice(previousIndex, 1);
	            nestedViews.splice(currentIndex, 0, view);
	            var prevView = currentIndex > 0 ? nestedViews[currentIndex - 1] : null;
	            view.moveAfter(this, prevView);
	        };
	        ViewContainer.prototype.attachView = function (view, viewIndex) {
	            if (view.type === ViewType.COMPONENT) {
	                throw new Error("Component views can't be moved!");
	            }
	            var nestedViews = this.nestedViews;
	            if (nestedViews == null) {
	                nestedViews = [];
	                this.nestedViews = nestedViews;
	            }
	            // perf: array.push is faster than array.splice!
	            if (viewIndex >= nestedViews.length) {
	                nestedViews.push(view);
	            }
	            else {
	                nestedViews.splice(viewIndex, 0, view);
	            }
	            var prevView = viewIndex > 0 ? nestedViews[viewIndex - 1] : null;
	            view.attachAfter(this, prevView);
	        };
	        ViewContainer.prototype.detachView = function (viewIndex) {
	            var view = this.nestedViews[viewIndex];
	            // perf: array.pop is faster than array.splice!
	            if (viewIndex >= this.nestedViews.length - 1) {
	                this.nestedViews.pop();
	            }
	            else {
	                this.nestedViews.splice(viewIndex, 1);
	            }
	            if (view.type === ViewType.COMPONENT) {
	                throw new Error("Component views can't be moved!");
	            }
	            view.detach();
	            return view;
	        };
	        return ViewContainer;
	    }());

	    var __core_private__ = {
	        isDefaultChangeDetectionStrategy: isDefaultChangeDetectionStrategy,
	        ChangeDetectorStatus: ChangeDetectorStatus,
	        constructDependencies: constructDependencies,
	        LifecycleHooks: LifecycleHooks,
	        LIFECYCLE_HOOKS_VALUES: LIFECYCLE_HOOKS_VALUES,
	        ReflectorReader: ReflectorReader,
	        CodegenComponentFactoryResolver: CodegenComponentFactoryResolver,
	        ComponentRef_: ComponentRef_,
	        ViewContainer: ViewContainer,
	        AppView: AppView,
	        DebugAppView: DebugAppView,
	        NgModuleInjector: NgModuleInjector,
	        registerModuleFactory: registerModuleFactory,
	        ViewType: ViewType,
	        view_utils: view_utils,
	        ViewMetadata: ViewMetadata,
	        DebugContext: DebugContext,
	        StaticNodeDebugInfo: StaticNodeDebugInfo,
	        devModeEqual: devModeEqual,
	        UNINITIALIZED: UNINITIALIZED,
	        ValueUnwrapper: ValueUnwrapper,
	        RenderDebugInfo: RenderDebugInfo,
	        TemplateRef_: TemplateRef_,
	        ReflectionCapabilities: ReflectionCapabilities,
	        makeDecorator: makeDecorator,
	        DebugDomRootRenderer: DebugDomRootRenderer,
	        Console: Console,
	        reflector: reflector,
	        Reflector: Reflector,
	        NoOpAnimationPlayer: NoOpAnimationPlayer,
	        AnimationPlayer: AnimationPlayer,
	        AnimationSequencePlayer: AnimationSequencePlayer,
	        AnimationGroupPlayer: AnimationGroupPlayer,
	        AnimationKeyframe: AnimationKeyframe,
	        prepareFinalAnimationStyles: prepareFinalAnimationStyles,
	        balanceAnimationKeyframes: balanceAnimationKeyframes,
	        flattenStyles: flattenStyles,
	        clearStyles: clearStyles,
	        renderStyles: renderStyles,
	        collectAndResolveStyles: collectAndResolveStyles,
	        APP_ID_RANDOM_PROVIDER: APP_ID_RANDOM_PROVIDER,
	        AnimationStyles: AnimationStyles,
	        ANY_STATE: ANY_STATE,
	        DEFAULT_STATE: DEFAULT_STATE,
	        EMPTY_STATE: EMPTY_STATE,
	        FILL_STYLE_FLAG: FILL_STYLE_FLAG,
	        ComponentStillLoadingError: ComponentStillLoadingError,
	        isPromise: isPromise,
	        AnimationTransition: AnimationTransition
	    };

	    exports.createPlatform = createPlatform;
	    exports.assertPlatform = assertPlatform;
	    exports.destroyPlatform = destroyPlatform;
	    exports.getPlatform = getPlatform;
	    exports.PlatformRef = PlatformRef;
	    exports.ApplicationRef = ApplicationRef;
	    exports.enableProdMode = enableProdMode;
	    exports.isDevMode = isDevMode;
	    exports.createPlatformFactory = createPlatformFactory;
	    exports.APP_ID = APP_ID;
	    exports.PACKAGE_ROOT_URL = PACKAGE_ROOT_URL;
	    exports.PLATFORM_INITIALIZER = PLATFORM_INITIALIZER;
	    exports.APP_BOOTSTRAP_LISTENER = APP_BOOTSTRAP_LISTENER;
	    exports.APP_INITIALIZER = APP_INITIALIZER;
	    exports.ApplicationInitStatus = ApplicationInitStatus;
	    exports.DebugElement = DebugElement;
	    exports.DebugNode = DebugNode;
	    exports.asNativeElements = asNativeElements;
	    exports.getDebugNode = getDebugNode;
	    exports.Testability = Testability;
	    exports.TestabilityRegistry = TestabilityRegistry;
	    exports.setTestabilityGetter = setTestabilityGetter;
	    exports.TRANSLATIONS = TRANSLATIONS;
	    exports.TRANSLATIONS_FORMAT = TRANSLATIONS_FORMAT;
	    exports.LOCALE_ID = LOCALE_ID;
	    exports.ApplicationModule = ApplicationModule;
	    exports.wtfCreateScope = wtfCreateScope;
	    exports.wtfLeave = wtfLeave;
	    exports.wtfStartTimeRange = wtfStartTimeRange;
	    exports.wtfEndTimeRange = wtfEndTimeRange;
	    exports.Type = Type;
	    exports.EventEmitter = EventEmitter;
	    exports.ErrorHandler = ErrorHandler;
	    exports.AnimationTransitionEvent = AnimationTransitionEvent;
	    exports.AnimationPlayer = AnimationPlayer;
	    exports.Sanitizer = Sanitizer;
	    exports.ANALYZE_FOR_ENTRY_COMPONENTS = ANALYZE_FOR_ENTRY_COMPONENTS;
	    exports.Attribute = Attribute;
	    exports.ContentChild = ContentChild;
	    exports.ContentChildren = ContentChildren;
	    exports.Query = Query;
	    exports.ViewChild = ViewChild;
	    exports.ViewChildren = ViewChildren;
	    exports.Component = Component;
	    exports.Directive = Directive;
	    exports.HostBinding = HostBinding;
	    exports.HostListener = HostListener;
	    exports.Input = Input;
	    exports.Output = Output;
	    exports.Pipe = Pipe;
	    exports.AfterContentChecked = AfterContentChecked;
	    exports.AfterContentInit = AfterContentInit;
	    exports.AfterViewChecked = AfterViewChecked;
	    exports.AfterViewInit = AfterViewInit;
	    exports.DoCheck = DoCheck;
	    exports.OnChanges = OnChanges;
	    exports.OnDestroy = OnDestroy;
	    exports.OnInit = OnInit;
	    exports.CUSTOM_ELEMENTS_SCHEMA = CUSTOM_ELEMENTS_SCHEMA;
	    exports.NO_ERRORS_SCHEMA = NO_ERRORS_SCHEMA;
	    exports.NgModule = NgModule;
	    exports.Class = Class;
	    exports.forwardRef = forwardRef;
	    exports.resolveForwardRef = resolveForwardRef;
	    exports.Injector = Injector;
	    exports.ReflectiveInjector = ReflectiveInjector;
	    exports.ResolvedReflectiveFactory = ResolvedReflectiveFactory;
	    exports.ReflectiveKey = ReflectiveKey;
	    exports.OpaqueToken = OpaqueToken;
	    exports.Inject = Inject;
	    exports.Optional = Optional;
	    exports.Injectable = Injectable;
	    exports.Self = Self;
	    exports.SkipSelf = SkipSelf;
	    exports.Host = Host;
	    exports.NgZone = NgZone;
	    exports.RenderComponentType = RenderComponentType;
	    exports.Renderer = Renderer;
	    exports.RootRenderer = RootRenderer;
	    exports.COMPILER_OPTIONS = COMPILER_OPTIONS;
	    exports.Compiler = Compiler;
	    exports.CompilerFactory = CompilerFactory;
	    exports.ModuleWithComponentFactories = ModuleWithComponentFactories;
	    exports.ComponentFactory = ComponentFactory;
	    exports.ComponentRef = ComponentRef;
	    exports.ComponentFactoryResolver = ComponentFactoryResolver;
	    exports.ElementRef = ElementRef;
	    exports.NgModuleFactory = NgModuleFactory;
	    exports.NgModuleRef = NgModuleRef;
	    exports.NgModuleFactoryLoader = NgModuleFactoryLoader;
	    exports.getModuleFactory = getModuleFactory;
	    exports.QueryList = QueryList;
	    exports.SystemJsNgModuleLoader = SystemJsNgModuleLoader;
	    exports.SystemJsNgModuleLoaderConfig = SystemJsNgModuleLoaderConfig;
	    exports.TemplateRef = TemplateRef;
	    exports.ViewContainerRef = ViewContainerRef;
	    exports.EmbeddedViewRef = EmbeddedViewRef;
	    exports.ViewRef = ViewRef;
	    exports.ChangeDetectorRef = ChangeDetectorRef;
	    exports.CollectionChangeRecord = CollectionChangeRecord;
	    exports.DefaultIterableDiffer = DefaultIterableDiffer;
	    exports.IterableDiffers = IterableDiffers;
	    exports.KeyValueChangeRecord = KeyValueChangeRecord;
	    exports.KeyValueDiffers = KeyValueDiffers;
	    exports.SimpleChange = SimpleChange;
	    exports.WrappedValue = WrappedValue;
	    exports.platformCore = platformCore;
	    exports.__core_private__ = __core_private__;
	    exports.AUTO_STYLE = AUTO_STYLE;
	    exports.AnimationEntryMetadata = AnimationEntryMetadata;
	    exports.AnimationStateMetadata = AnimationStateMetadata;
	    exports.AnimationStateDeclarationMetadata = AnimationStateDeclarationMetadata;
	    exports.AnimationStateTransitionMetadata = AnimationStateTransitionMetadata;
	    exports.AnimationMetadata = AnimationMetadata;
	    exports.AnimationKeyframesSequenceMetadata = AnimationKeyframesSequenceMetadata;
	    exports.AnimationStyleMetadata = AnimationStyleMetadata;
	    exports.AnimationAnimateMetadata = AnimationAnimateMetadata;
	    exports.AnimationWithStepsMetadata = AnimationWithStepsMetadata;
	    exports.AnimationSequenceMetadata = AnimationSequenceMetadata;
	    exports.AnimationGroupMetadata = AnimationGroupMetadata;
	    exports.animate = animate;
	    exports.group = group;
	    exports.sequence = sequence;
	    exports.style = style;
	    exports.state = state;
	    exports.keyframes = keyframes;
	    exports.transition = transition;
	    exports.trigger = trigger;

	}));
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 81 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var Observable_1 = __webpack_require__(82);
	var Subscriber_1 = __webpack_require__(85);
	var Subscription_1 = __webpack_require__(87);
	var ObjectUnsubscribedError_1 = __webpack_require__(96);
	var SubjectSubscription_1 = __webpack_require__(97);
	var rxSubscriber_1 = __webpack_require__(94);
	/**
	 * @class SubjectSubscriber<T>
	 */
	var SubjectSubscriber = (function (_super) {
	    __extends(SubjectSubscriber, _super);
	    function SubjectSubscriber(destination) {
	        _super.call(this, destination);
	        this.destination = destination;
	    }
	    return SubjectSubscriber;
	}(Subscriber_1.Subscriber));
	exports.SubjectSubscriber = SubjectSubscriber;
	/**
	 * @class Subject<T>
	 */
	var Subject = (function (_super) {
	    __extends(Subject, _super);
	    function Subject() {
	        _super.call(this);
	        this.observers = [];
	        this.closed = false;
	        this.isStopped = false;
	        this.hasError = false;
	        this.thrownError = null;
	    }
	    Subject.prototype[rxSubscriber_1.$$rxSubscriber] = function () {
	        return new SubjectSubscriber(this);
	    };
	    Subject.prototype.lift = function (operator) {
	        var subject = new AnonymousSubject(this, this);
	        subject.operator = operator;
	        return subject;
	    };
	    Subject.prototype.next = function (value) {
	        if (this.closed) {
	            throw new ObjectUnsubscribedError_1.ObjectUnsubscribedError();
	        }
	        if (!this.isStopped) {
	            var observers = this.observers;
	            var len = observers.length;
	            var copy = observers.slice();
	            for (var i = 0; i < len; i++) {
	                copy[i].next(value);
	            }
	        }
	    };
	    Subject.prototype.error = function (err) {
	        if (this.closed) {
	            throw new ObjectUnsubscribedError_1.ObjectUnsubscribedError();
	        }
	        this.hasError = true;
	        this.thrownError = err;
	        this.isStopped = true;
	        var observers = this.observers;
	        var len = observers.length;
	        var copy = observers.slice();
	        for (var i = 0; i < len; i++) {
	            copy[i].error(err);
	        }
	        this.observers.length = 0;
	    };
	    Subject.prototype.complete = function () {
	        if (this.closed) {
	            throw new ObjectUnsubscribedError_1.ObjectUnsubscribedError();
	        }
	        this.isStopped = true;
	        var observers = this.observers;
	        var len = observers.length;
	        var copy = observers.slice();
	        for (var i = 0; i < len; i++) {
	            copy[i].complete();
	        }
	        this.observers.length = 0;
	    };
	    Subject.prototype.unsubscribe = function () {
	        this.isStopped = true;
	        this.closed = true;
	        this.observers = null;
	    };
	    Subject.prototype._subscribe = function (subscriber) {
	        if (this.closed) {
	            throw new ObjectUnsubscribedError_1.ObjectUnsubscribedError();
	        }
	        else if (this.hasError) {
	            subscriber.error(this.thrownError);
	            return Subscription_1.Subscription.EMPTY;
	        }
	        else if (this.isStopped) {
	            subscriber.complete();
	            return Subscription_1.Subscription.EMPTY;
	        }
	        else {
	            this.observers.push(subscriber);
	            return new SubjectSubscription_1.SubjectSubscription(this, subscriber);
	        }
	    };
	    Subject.prototype.asObservable = function () {
	        var observable = new Observable_1.Observable();
	        observable.source = this;
	        return observable;
	    };
	    Subject.create = function (destination, source) {
	        return new AnonymousSubject(destination, source);
	    };
	    return Subject;
	}(Observable_1.Observable));
	exports.Subject = Subject;
	/**
	 * @class AnonymousSubject<T>
	 */
	var AnonymousSubject = (function (_super) {
	    __extends(AnonymousSubject, _super);
	    function AnonymousSubject(destination, source) {
	        _super.call(this);
	        this.destination = destination;
	        this.source = source;
	    }
	    AnonymousSubject.prototype.next = function (value) {
	        var destination = this.destination;
	        if (destination && destination.next) {
	            destination.next(value);
	        }
	    };
	    AnonymousSubject.prototype.error = function (err) {
	        var destination = this.destination;
	        if (destination && destination.error) {
	            this.destination.error(err);
	        }
	    };
	    AnonymousSubject.prototype.complete = function () {
	        var destination = this.destination;
	        if (destination && destination.complete) {
	            this.destination.complete();
	        }
	    };
	    AnonymousSubject.prototype._subscribe = function (subscriber) {
	        var source = this.source;
	        if (source) {
	            return this.source.subscribe(subscriber);
	        }
	        else {
	            return Subscription_1.Subscription.EMPTY;
	        }
	    };
	    return AnonymousSubject;
	}(Subject));
	exports.AnonymousSubject = AnonymousSubject;
	//# sourceMappingURL=Subject.js.map

/***/ },
/* 82 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var root_1 = __webpack_require__(83);
	var toSubscriber_1 = __webpack_require__(84);
	var observable_1 = __webpack_require__(95);
	/**
	 * A representation of any set of values over any amount of time. This the most basic building block
	 * of RxJS.
	 *
	 * @class Observable<T>
	 */
	var Observable = (function () {
	    /**
	     * @constructor
	     * @param {Function} subscribe the function that is  called when the Observable is
	     * initially subscribed to. This function is given a Subscriber, to which new values
	     * can be `next`ed, or an `error` method can be called to raise an error, or
	     * `complete` can be called to notify of a successful completion.
	     */
	    function Observable(subscribe) {
	        this._isScalar = false;
	        if (subscribe) {
	            this._subscribe = subscribe;
	        }
	    }
	    /**
	     * Creates a new Observable, with this Observable as the source, and the passed
	     * operator defined as the new observable's operator.
	     * @method lift
	     * @param {Operator} operator the operator defining the operation to take on the observable
	     * @return {Observable} a new observable with the Operator applied
	     */
	    Observable.prototype.lift = function (operator) {
	        var observable = new Observable();
	        observable.source = this;
	        observable.operator = operator;
	        return observable;
	    };
	    /**
	     * Registers handlers for handling emitted values, error and completions from the observable, and
	     *  executes the observable's subscriber function, which will take action to set up the underlying data stream
	     * @method subscribe
	     * @param {PartialObserver|Function} observerOrNext (optional) either an observer defining all functions to be called,
	     *  or the first of three possible handlers, which is the handler for each value emitted from the observable.
	     * @param {Function} error (optional) a handler for a terminal event resulting from an error. If no error handler is provided,
	     *  the error will be thrown as unhandled
	     * @param {Function} complete (optional) a handler for a terminal event resulting from successful completion.
	     * @return {ISubscription} a subscription reference to the registered handlers
	     */
	    Observable.prototype.subscribe = function (observerOrNext, error, complete) {
	        var operator = this.operator;
	        var sink = toSubscriber_1.toSubscriber(observerOrNext, error, complete);
	        if (operator) {
	            operator.call(sink, this);
	        }
	        else {
	            sink.add(this._subscribe(sink));
	        }
	        if (sink.syncErrorThrowable) {
	            sink.syncErrorThrowable = false;
	            if (sink.syncErrorThrown) {
	                throw sink.syncErrorValue;
	            }
	        }
	        return sink;
	    };
	    /**
	     * @method forEach
	     * @param {Function} next a handler for each value emitted by the observable
	     * @param {PromiseConstructor} [PromiseCtor] a constructor function used to instantiate the Promise
	     * @return {Promise} a promise that either resolves on observable completion or
	     *  rejects with the handled error
	     */
	    Observable.prototype.forEach = function (next, PromiseCtor) {
	        var _this = this;
	        if (!PromiseCtor) {
	            if (root_1.root.Rx && root_1.root.Rx.config && root_1.root.Rx.config.Promise) {
	                PromiseCtor = root_1.root.Rx.config.Promise;
	            }
	            else if (root_1.root.Promise) {
	                PromiseCtor = root_1.root.Promise;
	            }
	        }
	        if (!PromiseCtor) {
	            throw new Error('no Promise impl found');
	        }
	        return new PromiseCtor(function (resolve, reject) {
	            var subscription = _this.subscribe(function (value) {
	                if (subscription) {
	                    // if there is a subscription, then we can surmise
	                    // the next handling is asynchronous. Any errors thrown
	                    // need to be rejected explicitly and unsubscribe must be
	                    // called manually
	                    try {
	                        next(value);
	                    }
	                    catch (err) {
	                        reject(err);
	                        subscription.unsubscribe();
	                    }
	                }
	                else {
	                    // if there is NO subscription, then we're getting a nexted
	                    // value synchronously during subscription. We can just call it.
	                    // If it errors, Observable's `subscribe` will ensure the
	                    // unsubscription logic is called, then synchronously rethrow the error.
	                    // After that, Promise will trap the error and send it
	                    // down the rejection path.
	                    next(value);
	                }
	            }, reject, resolve);
	        });
	    };
	    Observable.prototype._subscribe = function (subscriber) {
	        return this.source.subscribe(subscriber);
	    };
	    /**
	     * An interop point defined by the es7-observable spec https://github.com/zenparsing/es-observable
	     * @method Symbol.observable
	     * @return {Observable} this instance of the observable
	     */
	    Observable.prototype[observable_1.$$observable] = function () {
	        return this;
	    };
	    // HACK: Since TypeScript inherits static properties too, we have to
	    // fight against TypeScript here so Subject can have a different static create signature
	    /**
	     * Creates a new cold Observable by calling the Observable constructor
	     * @static true
	     * @owner Observable
	     * @method create
	     * @param {Function} subscribe? the subscriber function to be passed to the Observable constructor
	     * @return {Observable} a new cold observable
	     */
	    Observable.create = function (subscribe) {
	        return new Observable(subscribe);
	    };
	    return Observable;
	}());
	exports.Observable = Observable;
	//# sourceMappingURL=Observable.js.map

/***/ },
/* 83 */
/***/ function(module, exports) {

	/* WEBPACK VAR INJECTION */(function(global) {"use strict";
	var objectTypes = {
	    'boolean': false,
	    'function': true,
	    'object': true,
	    'number': false,
	    'string': false,
	    'undefined': false
	};
	exports.root = (objectTypes[typeof self] && self) || (objectTypes[typeof window] && window);
	var freeGlobal = objectTypes[typeof global] && global;
	if (freeGlobal && (freeGlobal.global === freeGlobal || freeGlobal.window === freeGlobal)) {
	    exports.root = freeGlobal;
	}
	//# sourceMappingURL=root.js.map
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 84 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var Subscriber_1 = __webpack_require__(85);
	var rxSubscriber_1 = __webpack_require__(94);
	function toSubscriber(nextOrObserver, error, complete) {
	    if (nextOrObserver) {
	        if (nextOrObserver instanceof Subscriber_1.Subscriber) {
	            return nextOrObserver;
	        }
	        if (nextOrObserver[rxSubscriber_1.$$rxSubscriber]) {
	            return nextOrObserver[rxSubscriber_1.$$rxSubscriber]();
	        }
	    }
	    if (!nextOrObserver && !error && !complete) {
	        return new Subscriber_1.Subscriber();
	    }
	    return new Subscriber_1.Subscriber(nextOrObserver, error, complete);
	}
	exports.toSubscriber = toSubscriber;
	//# sourceMappingURL=toSubscriber.js.map

/***/ },
/* 85 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var isFunction_1 = __webpack_require__(86);
	var Subscription_1 = __webpack_require__(87);
	var Observer_1 = __webpack_require__(93);
	var rxSubscriber_1 = __webpack_require__(94);
	/**
	 * Implements the {@link Observer} interface and extends the
	 * {@link Subscription} class. While the {@link Observer} is the public API for
	 * consuming the values of an {@link Observable}, all Observers get converted to
	 * a Subscriber, in order to provide Subscription-like capabilities such as
	 * `unsubscribe`. Subscriber is a common type in RxJS, and crucial for
	 * implementing operators, but it is rarely used as a public API.
	 *
	 * @class Subscriber<T>
	 */
	var Subscriber = (function (_super) {
	    __extends(Subscriber, _super);
	    /**
	     * @param {Observer|function(value: T): void} [destinationOrNext] A partially
	     * defined Observer or a `next` callback function.
	     * @param {function(e: ?any): void} [error] The `error` callback of an
	     * Observer.
	     * @param {function(): void} [complete] The `complete` callback of an
	     * Observer.
	     */
	    function Subscriber(destinationOrNext, error, complete) {
	        _super.call(this);
	        this.syncErrorValue = null;
	        this.syncErrorThrown = false;
	        this.syncErrorThrowable = false;
	        this.isStopped = false;
	        switch (arguments.length) {
	            case 0:
	                this.destination = Observer_1.empty;
	                break;
	            case 1:
	                if (!destinationOrNext) {
	                    this.destination = Observer_1.empty;
	                    break;
	                }
	                if (typeof destinationOrNext === 'object') {
	                    if (destinationOrNext instanceof Subscriber) {
	                        this.destination = destinationOrNext;
	                        this.destination.add(this);
	                    }
	                    else {
	                        this.syncErrorThrowable = true;
	                        this.destination = new SafeSubscriber(this, destinationOrNext);
	                    }
	                    break;
	                }
	            default:
	                this.syncErrorThrowable = true;
	                this.destination = new SafeSubscriber(this, destinationOrNext, error, complete);
	                break;
	        }
	    }
	    Subscriber.prototype[rxSubscriber_1.$$rxSubscriber] = function () { return this; };
	    /**
	     * A static factory for a Subscriber, given a (potentially partial) definition
	     * of an Observer.
	     * @param {function(x: ?T): void} [next] The `next` callback of an Observer.
	     * @param {function(e: ?any): void} [error] The `error` callback of an
	     * Observer.
	     * @param {function(): void} [complete] The `complete` callback of an
	     * Observer.
	     * @return {Subscriber<T>} A Subscriber wrapping the (partially defined)
	     * Observer represented by the given arguments.
	     */
	    Subscriber.create = function (next, error, complete) {
	        var subscriber = new Subscriber(next, error, complete);
	        subscriber.syncErrorThrowable = false;
	        return subscriber;
	    };
	    /**
	     * The {@link Observer} callback to receive notifications of type `next` from
	     * the Observable, with a value. The Observable may call this method 0 or more
	     * times.
	     * @param {T} [value] The `next` value.
	     * @return {void}
	     */
	    Subscriber.prototype.next = function (value) {
	        if (!this.isStopped) {
	            this._next(value);
	        }
	    };
	    /**
	     * The {@link Observer} callback to receive notifications of type `error` from
	     * the Observable, with an attached {@link Error}. Notifies the Observer that
	     * the Observable has experienced an error condition.
	     * @param {any} [err] The `error` exception.
	     * @return {void}
	     */
	    Subscriber.prototype.error = function (err) {
	        if (!this.isStopped) {
	            this.isStopped = true;
	            this._error(err);
	        }
	    };
	    /**
	     * The {@link Observer} callback to receive a valueless notification of type
	     * `complete` from the Observable. Notifies the Observer that the Observable
	     * has finished sending push-based notifications.
	     * @return {void}
	     */
	    Subscriber.prototype.complete = function () {
	        if (!this.isStopped) {
	            this.isStopped = true;
	            this._complete();
	        }
	    };
	    Subscriber.prototype.unsubscribe = function () {
	        if (this.closed) {
	            return;
	        }
	        this.isStopped = true;
	        _super.prototype.unsubscribe.call(this);
	    };
	    Subscriber.prototype._next = function (value) {
	        this.destination.next(value);
	    };
	    Subscriber.prototype._error = function (err) {
	        this.destination.error(err);
	        this.unsubscribe();
	    };
	    Subscriber.prototype._complete = function () {
	        this.destination.complete();
	        this.unsubscribe();
	    };
	    return Subscriber;
	}(Subscription_1.Subscription));
	exports.Subscriber = Subscriber;
	/**
	 * We need this JSDoc comment for affecting ESDoc.
	 * @ignore
	 * @extends {Ignored}
	 */
	var SafeSubscriber = (function (_super) {
	    __extends(SafeSubscriber, _super);
	    function SafeSubscriber(_parent, observerOrNext, error, complete) {
	        _super.call(this);
	        this._parent = _parent;
	        var next;
	        var context = this;
	        if (isFunction_1.isFunction(observerOrNext)) {
	            next = observerOrNext;
	        }
	        else if (observerOrNext) {
	            context = observerOrNext;
	            next = observerOrNext.next;
	            error = observerOrNext.error;
	            complete = observerOrNext.complete;
	            if (isFunction_1.isFunction(context.unsubscribe)) {
	                this.add(context.unsubscribe.bind(context));
	            }
	            context.unsubscribe = this.unsubscribe.bind(this);
	        }
	        this._context = context;
	        this._next = next;
	        this._error = error;
	        this._complete = complete;
	    }
	    SafeSubscriber.prototype.next = function (value) {
	        if (!this.isStopped && this._next) {
	            var _parent = this._parent;
	            if (!_parent.syncErrorThrowable) {
	                this.__tryOrUnsub(this._next, value);
	            }
	            else if (this.__tryOrSetError(_parent, this._next, value)) {
	                this.unsubscribe();
	            }
	        }
	    };
	    SafeSubscriber.prototype.error = function (err) {
	        if (!this.isStopped) {
	            var _parent = this._parent;
	            if (this._error) {
	                if (!_parent.syncErrorThrowable) {
	                    this.__tryOrUnsub(this._error, err);
	                    this.unsubscribe();
	                }
	                else {
	                    this.__tryOrSetError(_parent, this._error, err);
	                    this.unsubscribe();
	                }
	            }
	            else if (!_parent.syncErrorThrowable) {
	                this.unsubscribe();
	                throw err;
	            }
	            else {
	                _parent.syncErrorValue = err;
	                _parent.syncErrorThrown = true;
	                this.unsubscribe();
	            }
	        }
	    };
	    SafeSubscriber.prototype.complete = function () {
	        if (!this.isStopped) {
	            var _parent = this._parent;
	            if (this._complete) {
	                if (!_parent.syncErrorThrowable) {
	                    this.__tryOrUnsub(this._complete);
	                    this.unsubscribe();
	                }
	                else {
	                    this.__tryOrSetError(_parent, this._complete);
	                    this.unsubscribe();
	                }
	            }
	            else {
	                this.unsubscribe();
	            }
	        }
	    };
	    SafeSubscriber.prototype.__tryOrUnsub = function (fn, value) {
	        try {
	            fn.call(this._context, value);
	        }
	        catch (err) {
	            this.unsubscribe();
	            throw err;
	        }
	    };
	    SafeSubscriber.prototype.__tryOrSetError = function (parent, fn, value) {
	        try {
	            fn.call(this._context, value);
	        }
	        catch (err) {
	            parent.syncErrorValue = err;
	            parent.syncErrorThrown = true;
	            return true;
	        }
	        return false;
	    };
	    SafeSubscriber.prototype._unsubscribe = function () {
	        var _parent = this._parent;
	        this._context = null;
	        this._parent = null;
	        _parent.unsubscribe();
	    };
	    return SafeSubscriber;
	}(Subscriber));
	//# sourceMappingURL=Subscriber.js.map

/***/ },
/* 86 */
/***/ function(module, exports) {

	"use strict";
	function isFunction(x) {
	    return typeof x === 'function';
	}
	exports.isFunction = isFunction;
	//# sourceMappingURL=isFunction.js.map

/***/ },
/* 87 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var isArray_1 = __webpack_require__(88);
	var isObject_1 = __webpack_require__(89);
	var isFunction_1 = __webpack_require__(86);
	var tryCatch_1 = __webpack_require__(90);
	var errorObject_1 = __webpack_require__(91);
	var UnsubscriptionError_1 = __webpack_require__(92);
	/**
	 * Represents a disposable resource, such as the execution of an Observable. A
	 * Subscription has one important method, `unsubscribe`, that takes no argument
	 * and just disposes the resource held by the subscription.
	 *
	 * Additionally, subscriptions may be grouped together through the `add()`
	 * method, which will attach a child Subscription to the current Subscription.
	 * When a Subscription is unsubscribed, all its children (and its grandchildren)
	 * will be unsubscribed as well.
	 *
	 * @class Subscription
	 */
	var Subscription = (function () {
	    /**
	     * @param {function(): void} [unsubscribe] A function describing how to
	     * perform the disposal of resources when the `unsubscribe` method is called.
	     */
	    function Subscription(unsubscribe) {
	        /**
	         * A flag to indicate whether this Subscription has already been unsubscribed.
	         * @type {boolean}
	         */
	        this.closed = false;
	        if (unsubscribe) {
	            this._unsubscribe = unsubscribe;
	        }
	    }
	    /**
	     * Disposes the resources held by the subscription. May, for instance, cancel
	     * an ongoing Observable execution or cancel any other type of work that
	     * started when the Subscription was created.
	     * @return {void}
	     */
	    Subscription.prototype.unsubscribe = function () {
	        var hasErrors = false;
	        var errors;
	        if (this.closed) {
	            return;
	        }
	        this.closed = true;
	        var _a = this, _unsubscribe = _a._unsubscribe, _subscriptions = _a._subscriptions;
	        this._subscriptions = null;
	        if (isFunction_1.isFunction(_unsubscribe)) {
	            var trial = tryCatch_1.tryCatch(_unsubscribe).call(this);
	            if (trial === errorObject_1.errorObject) {
	                hasErrors = true;
	                (errors = errors || []).push(errorObject_1.errorObject.e);
	            }
	        }
	        if (isArray_1.isArray(_subscriptions)) {
	            var index = -1;
	            var len = _subscriptions.length;
	            while (++index < len) {
	                var sub = _subscriptions[index];
	                if (isObject_1.isObject(sub)) {
	                    var trial = tryCatch_1.tryCatch(sub.unsubscribe).call(sub);
	                    if (trial === errorObject_1.errorObject) {
	                        hasErrors = true;
	                        errors = errors || [];
	                        var err = errorObject_1.errorObject.e;
	                        if (err instanceof UnsubscriptionError_1.UnsubscriptionError) {
	                            errors = errors.concat(err.errors);
	                        }
	                        else {
	                            errors.push(err);
	                        }
	                    }
	                }
	            }
	        }
	        if (hasErrors) {
	            throw new UnsubscriptionError_1.UnsubscriptionError(errors);
	        }
	    };
	    /**
	     * Adds a tear down to be called during the unsubscribe() of this
	     * Subscription.
	     *
	     * If the tear down being added is a subscription that is already
	     * unsubscribed, is the same reference `add` is being called on, or is
	     * `Subscription.EMPTY`, it will not be added.
	     *
	     * If this subscription is already in an `closed` state, the passed
	     * tear down logic will be executed immediately.
	     *
	     * @param {TeardownLogic} teardown The additional logic to execute on
	     * teardown.
	     * @return {Subscription} Returns the Subscription used or created to be
	     * added to the inner subscriptions list. This Subscription can be used with
	     * `remove()` to remove the passed teardown logic from the inner subscriptions
	     * list.
	     */
	    Subscription.prototype.add = function (teardown) {
	        if (!teardown || (teardown === Subscription.EMPTY)) {
	            return Subscription.EMPTY;
	        }
	        if (teardown === this) {
	            return this;
	        }
	        var sub = teardown;
	        switch (typeof teardown) {
	            case 'function':
	                sub = new Subscription(teardown);
	            case 'object':
	                if (sub.closed || typeof sub.unsubscribe !== 'function') {
	                    break;
	                }
	                else if (this.closed) {
	                    sub.unsubscribe();
	                }
	                else {
	                    (this._subscriptions || (this._subscriptions = [])).push(sub);
	                }
	                break;
	            default:
	                throw new Error('unrecognized teardown ' + teardown + ' added to Subscription.');
	        }
	        return sub;
	    };
	    /**
	     * Removes a Subscription from the internal list of subscriptions that will
	     * unsubscribe during the unsubscribe process of this Subscription.
	     * @param {Subscription} subscription The subscription to remove.
	     * @return {void}
	     */
	    Subscription.prototype.remove = function (subscription) {
	        // HACK: This might be redundant because of the logic in `add()`
	        if (subscription == null || (subscription === this) || (subscription === Subscription.EMPTY)) {
	            return;
	        }
	        var subscriptions = this._subscriptions;
	        if (subscriptions) {
	            var subscriptionIndex = subscriptions.indexOf(subscription);
	            if (subscriptionIndex !== -1) {
	                subscriptions.splice(subscriptionIndex, 1);
	            }
	        }
	    };
	    Subscription.EMPTY = (function (empty) {
	        empty.closed = true;
	        return empty;
	    }(new Subscription()));
	    return Subscription;
	}());
	exports.Subscription = Subscription;
	//# sourceMappingURL=Subscription.js.map

/***/ },
/* 88 */
/***/ function(module, exports) {

	"use strict";
	exports.isArray = Array.isArray || (function (x) { return x && typeof x.length === 'number'; });
	//# sourceMappingURL=isArray.js.map

/***/ },
/* 89 */
/***/ function(module, exports) {

	"use strict";
	function isObject(x) {
	    return x != null && typeof x === 'object';
	}
	exports.isObject = isObject;
	//# sourceMappingURL=isObject.js.map

/***/ },
/* 90 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var errorObject_1 = __webpack_require__(91);
	var tryCatchTarget;
	function tryCatcher() {
	    try {
	        return tryCatchTarget.apply(this, arguments);
	    }
	    catch (e) {
	        errorObject_1.errorObject.e = e;
	        return errorObject_1.errorObject;
	    }
	}
	function tryCatch(fn) {
	    tryCatchTarget = fn;
	    return tryCatcher;
	}
	exports.tryCatch = tryCatch;
	;
	//# sourceMappingURL=tryCatch.js.map

/***/ },
/* 91 */
/***/ function(module, exports) {

	"use strict";
	// typeof any so that it we don't have to cast when comparing a result to the error object
	exports.errorObject = { e: {} };
	//# sourceMappingURL=errorObject.js.map

/***/ },
/* 92 */
/***/ function(module, exports) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	/**
	 * An error thrown when one or more errors have occurred during the
	 * `unsubscribe` of a {@link Subscription}.
	 */
	var UnsubscriptionError = (function (_super) {
	    __extends(UnsubscriptionError, _super);
	    function UnsubscriptionError(errors) {
	        _super.call(this);
	        this.errors = errors;
	        var err = Error.call(this, errors ?
	            errors.length + " errors occurred during unsubscription:\n  " + errors.map(function (err, i) { return ((i + 1) + ") " + err.toString()); }).join('\n  ') : '');
	        this.name = err.name = 'UnsubscriptionError';
	        this.stack = err.stack;
	        this.message = err.message;
	    }
	    return UnsubscriptionError;
	}(Error));
	exports.UnsubscriptionError = UnsubscriptionError;
	//# sourceMappingURL=UnsubscriptionError.js.map

/***/ },
/* 93 */
/***/ function(module, exports) {

	"use strict";
	exports.empty = {
	    closed: true,
	    next: function (value) { },
	    error: function (err) { throw err; },
	    complete: function () { }
	};
	//# sourceMappingURL=Observer.js.map

/***/ },
/* 94 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var root_1 = __webpack_require__(83);
	var Symbol = root_1.root.Symbol;
	exports.$$rxSubscriber = (typeof Symbol === 'function' && typeof Symbol.for === 'function') ?
	    Symbol.for('rxSubscriber') : '@@rxSubscriber';
	//# sourceMappingURL=rxSubscriber.js.map

/***/ },
/* 95 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var root_1 = __webpack_require__(83);
	function getSymbolObservable(context) {
	    var $$observable;
	    var Symbol = context.Symbol;
	    if (typeof Symbol === 'function') {
	        if (Symbol.observable) {
	            $$observable = Symbol.observable;
	        }
	        else {
	            $$observable = Symbol('observable');
	            Symbol.observable = $$observable;
	        }
	    }
	    else {
	        $$observable = '@@observable';
	    }
	    return $$observable;
	}
	exports.getSymbolObservable = getSymbolObservable;
	exports.$$observable = getSymbolObservable(root_1.root);
	//# sourceMappingURL=observable.js.map

/***/ },
/* 96 */
/***/ function(module, exports) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	/**
	 * An error thrown when an action is invalid because the object has been
	 * unsubscribed.
	 *
	 * @see {@link Subject}
	 * @see {@link BehaviorSubject}
	 *
	 * @class ObjectUnsubscribedError
	 */
	var ObjectUnsubscribedError = (function (_super) {
	    __extends(ObjectUnsubscribedError, _super);
	    function ObjectUnsubscribedError() {
	        var err = _super.call(this, 'object unsubscribed');
	        this.name = err.name = 'ObjectUnsubscribedError';
	        this.stack = err.stack;
	        this.message = err.message;
	    }
	    return ObjectUnsubscribedError;
	}(Error));
	exports.ObjectUnsubscribedError = ObjectUnsubscribedError;
	//# sourceMappingURL=ObjectUnsubscribedError.js.map

/***/ },
/* 97 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var Subscription_1 = __webpack_require__(87);
	/**
	 * We need this JSDoc comment for affecting ESDoc.
	 * @ignore
	 * @extends {Ignored}
	 */
	var SubjectSubscription = (function (_super) {
	    __extends(SubjectSubscription, _super);
	    function SubjectSubscription(subject, subscriber) {
	        _super.call(this);
	        this.subject = subject;
	        this.subscriber = subscriber;
	        this.closed = false;
	    }
	    SubjectSubscription.prototype.unsubscribe = function () {
	        if (this.closed) {
	            return;
	        }
	        this.closed = true;
	        var subject = this.subject;
	        var observers = subject.observers;
	        this.subject = null;
	        if (!observers || observers.length === 0 || subject.isStopped || subject.closed) {
	            return;
	        }
	        var subscriberIndex = observers.indexOf(this.subscriber);
	        if (subscriberIndex !== -1) {
	            observers.splice(subscriberIndex, 1);
	        }
	    };
	    return SubjectSubscription;
	}(Subscription_1.Subscription));
	exports.SubjectSubscription = SubjectSubscription;
	//# sourceMappingURL=SubjectSubscription.js.map

/***/ },
/* 98 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {/**
	 * @license Angular v2.2.3
	 * (c) 2010-2016 Google, Inc. https://angular.io/
	 * License: MIT
	 */
	(function (global, factory) {
	     true ? factory(exports, __webpack_require__(99), __webpack_require__(80)) :
	    typeof define === 'function' && define.amd ? define(['exports', '@angular/common', '@angular/core'], factory) :
	    (factory((global.ng = global.ng || {}, global.ng.platformBrowser = global.ng.platformBrowser || {}),global.ng.common,global.ng.core));
	}(this, function (exports,_angular_common,_angular_core) { 'use strict';

	    var DebugDomRootRenderer = _angular_core.__core_private__.DebugDomRootRenderer;
	    var NoOpAnimationPlayer = _angular_core.__core_private__.NoOpAnimationPlayer;

	    var _NoOpAnimationDriver = (function () {
	        function _NoOpAnimationDriver() {
	        }
	        _NoOpAnimationDriver.prototype.animate = function (element, startingStyles, keyframes, duration, delay, easing, previousPlayers) {
	            if (previousPlayers === void 0) { previousPlayers = []; }
	            return new NoOpAnimationPlayer();
	        };
	        return _NoOpAnimationDriver;
	    }());
	    /**
	     * @experimental
	     */
	    var AnimationDriver = (function () {
	        function AnimationDriver() {
	        }
	        AnimationDriver.NOOP = new _NoOpAnimationDriver();
	        return AnimationDriver;
	    }());

	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    var globalScope;
	    if (typeof window === 'undefined') {
	        if (typeof WorkerGlobalScope !== 'undefined' && self instanceof WorkerGlobalScope) {
	            // TODO: Replace any with WorkerGlobalScope from lib.webworker.d.ts #3492
	            globalScope = self;
	        }
	        else {
	            globalScope = global;
	        }
	    }
	    else {
	        globalScope = window;
	    }
	    // Need to declare a new variable for global here since TypeScript
	    // exports the original value of the symbol.
	    var global$1 = globalScope;
	    // TODO: remove calls to assert in production environment
	    // Note: Can't just export this and import in in other files
	    // as `assert` is a reserved keyword in Dart
	    global$1.assert = function assert(condition) {
	        // TODO: to be fixed properly via #2830, noop for now
	    };
	    function isPresent(obj) {
	        return obj != null;
	    }
	    function isBlank(obj) {
	        return obj == null;
	    }
	    function stringify(token) {
	        if (typeof token === 'string') {
	            return token;
	        }
	        if (token == null) {
	            return '' + token;
	        }
	        if (token.overriddenName) {
	            return token.overriddenName;
	        }
	        if (token.name) {
	            return token.name;
	        }
	        var res = token.toString();
	        var newLineIndex = res.indexOf('\n');
	        return newLineIndex === -1 ? res : res.substring(0, newLineIndex);
	    }
	    function setValueOnPath(global, path, value) {
	        var parts = path.split('.');
	        var obj = global;
	        while (parts.length > 1) {
	            var name_1 = parts.shift();
	            if (obj.hasOwnProperty(name_1) && obj[name_1] != null) {
	                obj = obj[name_1];
	            }
	            else {
	                obj = obj[name_1] = {};
	            }
	        }
	        if (obj === undefined || obj === null) {
	            obj = {};
	        }
	        obj[parts.shift()] = value;
	    }

	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    var _DOM = null;
	    function getDOM() {
	        return _DOM;
	    }
	    function setRootDomAdapter(adapter) {
	        if (!_DOM) {
	            _DOM = adapter;
	        }
	    }
	    /* tslint:disable:requireParameterType */
	    /**
	     * Provides DOM operations in an environment-agnostic way.
	     *
	     * @security Tread carefully! Interacting with the DOM directly is dangerous and
	     * can introduce XSS risks.
	     */
	    var DomAdapter = (function () {
	        function DomAdapter() {
	            this.resourceLoaderType = null;
	        }
	        Object.defineProperty(DomAdapter.prototype, "attrToPropMap", {
	            /**
	             * Maps attribute names to their corresponding property names for cases
	             * where attribute name doesn't match property name.
	             */
	            get: function () { return this._attrToPropMap; },
	            set: function (value) { this._attrToPropMap = value; },
	            enumerable: true,
	            configurable: true
	        });
	        ;
	        ;
	        return DomAdapter;
	    }());

	    var WebAnimationsPlayer = (function () {
	        function WebAnimationsPlayer(element, keyframes, options, previousPlayers) {
	            var _this = this;
	            if (previousPlayers === void 0) { previousPlayers = []; }
	            this.element = element;
	            this.keyframes = keyframes;
	            this.options = options;
	            this._onDoneFns = [];
	            this._onStartFns = [];
	            this._initialized = false;
	            this._finished = false;
	            this._started = false;
	            this._destroyed = false;
	            this.parentPlayer = null;
	            this._duration = options['duration'];
	            this.previousStyles = {};
	            previousPlayers.forEach(function (player) {
	                var styles = player._captureStyles();
	                Object.keys(styles).forEach(function (prop) { return _this.previousStyles[prop] = styles[prop]; });
	            });
	        }
	        WebAnimationsPlayer.prototype._onFinish = function () {
	            if (!this._finished) {
	                this._finished = true;
	                this._onDoneFns.forEach(function (fn) { return fn(); });
	                this._onDoneFns = [];
	            }
	        };
	        WebAnimationsPlayer.prototype.init = function () {
	            var _this = this;
	            if (this._initialized)
	                return;
	            this._initialized = true;
	            var keyframes = this.keyframes.map(function (styles) {
	                var formattedKeyframe = {};
	                Object.keys(styles).forEach(function (prop, index) {
	                    var value = styles[prop];
	                    if (value == _angular_core.AUTO_STYLE) {
	                        value = _computeStyle(_this.element, prop);
	                    }
	                    if (value != undefined) {
	                        formattedKeyframe[prop] = value;
	                    }
	                });
	                return formattedKeyframe;
	            });
	            var previousStyleProps = Object.keys(this.previousStyles);
	            if (previousStyleProps.length) {
	                var startingKeyframe_1 = findStartingKeyframe(keyframes);
	                previousStyleProps.forEach(function (prop) {
	                    if (isPresent(startingKeyframe_1[prop])) {
	                        startingKeyframe_1[prop] = _this.previousStyles[prop];
	                    }
	                });
	            }
	            this._player = this._triggerWebAnimation(this.element, keyframes, this.options);
	            this._finalKeyframe = _copyKeyframeStyles(keyframes[keyframes.length - 1]);
	            // this is required so that the player doesn't start to animate right away
	            this._resetDomPlayerState();
	            this._player.addEventListener('finish', function () { return _this._onFinish(); });
	        };
	        /** @internal */
	        WebAnimationsPlayer.prototype._triggerWebAnimation = function (element, keyframes, options) {
	            return element.animate(keyframes, options);
	        };
	        Object.defineProperty(WebAnimationsPlayer.prototype, "domPlayer", {
	            get: function () { return this._player; },
	            enumerable: true,
	            configurable: true
	        });
	        WebAnimationsPlayer.prototype.onStart = function (fn) { this._onStartFns.push(fn); };
	        WebAnimationsPlayer.prototype.onDone = function (fn) { this._onDoneFns.push(fn); };
	        WebAnimationsPlayer.prototype.play = function () {
	            this.init();
	            if (!this.hasStarted()) {
	                this._onStartFns.forEach(function (fn) { return fn(); });
	                this._onStartFns = [];
	                this._started = true;
	            }
	            this._player.play();
	        };
	        WebAnimationsPlayer.prototype.pause = function () {
	            this.init();
	            this._player.pause();
	        };
	        WebAnimationsPlayer.prototype.finish = function () {
	            this.init();
	            this._onFinish();
	            this._player.finish();
	        };
	        WebAnimationsPlayer.prototype.reset = function () {
	            this._resetDomPlayerState();
	            this._destroyed = false;
	            this._finished = false;
	            this._started = false;
	        };
	        WebAnimationsPlayer.prototype._resetDomPlayerState = function () { this._player.cancel(); };
	        WebAnimationsPlayer.prototype.restart = function () {
	            this.reset();
	            this.play();
	        };
	        WebAnimationsPlayer.prototype.hasStarted = function () { return this._started; };
	        WebAnimationsPlayer.prototype.destroy = function () {
	            if (!this._destroyed) {
	                this._resetDomPlayerState();
	                this._onFinish();
	                this._destroyed = true;
	            }
	        };
	        Object.defineProperty(WebAnimationsPlayer.prototype, "totalTime", {
	            get: function () { return this._duration; },
	            enumerable: true,
	            configurable: true
	        });
	        WebAnimationsPlayer.prototype.setPosition = function (p) { this._player.currentTime = p * this.totalTime; };
	        WebAnimationsPlayer.prototype.getPosition = function () { return this._player.currentTime / this.totalTime; };
	        WebAnimationsPlayer.prototype._captureStyles = function () {
	            var _this = this;
	            var styles = {};
	            if (this.hasStarted()) {
	                Object.keys(this._finalKeyframe).forEach(function (prop) {
	                    if (prop != 'offset') {
	                        styles[prop] =
	                            _this._finished ? _this._finalKeyframe[prop] : _computeStyle(_this.element, prop);
	                    }
	                });
	            }
	            return styles;
	        };
	        return WebAnimationsPlayer;
	    }());
	    function _computeStyle(element, prop) {
	        return getDOM().getComputedStyle(element)[prop];
	    }
	    function _copyKeyframeStyles(styles) {
	        var newStyles = {};
	        Object.keys(styles).forEach(function (prop) {
	            if (prop != 'offset') {
	                newStyles[prop] = styles[prop];
	            }
	        });
	        return newStyles;
	    }
	    function findStartingKeyframe(keyframes) {
	        var startingKeyframe = keyframes[0];
	        // it's important that we find the LAST keyframe
	        // to ensure that style overidding is final.
	        for (var i = 1; i < keyframes.length; i++) {
	            var kf = keyframes[i];
	            var offset = kf['offset'];
	            if (offset !== 0)
	                break;
	            startingKeyframe = kf;
	        }
	        return startingKeyframe;
	    }

	    var WebAnimationsDriver = (function () {
	        function WebAnimationsDriver() {
	        }
	        WebAnimationsDriver.prototype.animate = function (element, startingStyles, keyframes, duration, delay, easing, previousPlayers) {
	            if (previousPlayers === void 0) { previousPlayers = []; }
	            var formattedSteps = [];
	            var startingStyleLookup = {};
	            if (isPresent(startingStyles) && startingStyles.styles.length > 0) {
	                startingStyleLookup = _populateStyles(startingStyles, {});
	                startingStyleLookup['offset'] = 0;
	                formattedSteps.push(startingStyleLookup);
	            }
	            keyframes.forEach(function (keyframe) {
	                var data = _populateStyles(keyframe.styles, startingStyleLookup);
	                data['offset'] = keyframe.offset;
	                formattedSteps.push(data);
	            });
	            // this is a special case when only styles are applied as an
	            // animation. When this occurs we want to animate from start to
	            // end with the same values. Removing the offset and having only
	            // start/end values is suitable enough for the web-animations API
	            if (formattedSteps.length == 1) {
	                var start = formattedSteps[0];
	                start['offset'] = null;
	                formattedSteps = [start, start];
	            }
	            var playerOptions = {
	                'duration': duration,
	                'delay': delay,
	                'fill': 'both' // we use `both` because it allows for styling at 0% to work with `delay`
	            };
	            // we check for this to avoid having a null|undefined value be present
	            // for the easing (which results in an error for certain browsers #9752)
	            if (easing) {
	                playerOptions['easing'] = easing;
	            }
	            // there may be a chance a NoOp player is returned depending
	            // on when the previous animation was cancelled
	            previousPlayers = previousPlayers.filter(filterWebAnimationPlayerFn);
	            return new WebAnimationsPlayer(element, formattedSteps, playerOptions, previousPlayers);
	        };
	        return WebAnimationsDriver;
	    }());
	    function _populateStyles(styles, defaultStyles) {
	        var data = {};
	        styles.styles.forEach(function (entry) { Object.keys(entry).forEach(function (prop) { data[prop] = entry[prop]; }); });
	        Object.keys(defaultStyles).forEach(function (prop) {
	            if (!isPresent(data[prop])) {
	                data[prop] = defaultStyles[prop];
	            }
	        });
	        return data;
	    }
	    function filterWebAnimationPlayerFn(player) {
	        return player instanceof WebAnimationsPlayer;
	    }

	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    var __extends$1 = (this && this.__extends) || function (d, b) {
	        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	    /**
	     * Provides DOM operations in any browser environment.
	     *
	     * @security Tread carefully! Interacting with the DOM directly is dangerous and
	     * can introduce XSS risks.
	     */
	    var GenericBrowserDomAdapter = (function (_super) {
	        __extends$1(GenericBrowserDomAdapter, _super);
	        function GenericBrowserDomAdapter() {
	            var _this = this;
	            _super.call(this);
	            this._animationPrefix = null;
	            this._transitionEnd = null;
	            try {
	                var element_1 = this.createElement('div', this.defaultDoc());
	                if (isPresent(this.getStyle(element_1, 'animationName'))) {
	                    this._animationPrefix = '';
	                }
	                else {
	                    var domPrefixes = ['Webkit', 'Moz', 'O', 'ms'];
	                    for (var i = 0; i < domPrefixes.length; i++) {
	                        if (isPresent(this.getStyle(element_1, domPrefixes[i] + 'AnimationName'))) {
	                            this._animationPrefix = '-' + domPrefixes[i].toLowerCase() + '-';
	                            break;
	                        }
	                    }
	                }
	                var transEndEventNames_1 = {
	                    WebkitTransition: 'webkitTransitionEnd',
	                    MozTransition: 'transitionend',
	                    OTransition: 'oTransitionEnd otransitionend',
	                    transition: 'transitionend'
	                };
	                Object.keys(transEndEventNames_1).forEach(function (key) {
	                    if (isPresent(_this.getStyle(element_1, key))) {
	                        _this._transitionEnd = transEndEventNames_1[key];
	                    }
	                });
	            }
	            catch (e) {
	                this._animationPrefix = null;
	                this._transitionEnd = null;
	            }
	        }
	        GenericBrowserDomAdapter.prototype.getDistributedNodes = function (el) { return el.getDistributedNodes(); };
	        GenericBrowserDomAdapter.prototype.resolveAndSetHref = function (el, baseUrl, href) {
	            el.href = href == null ? baseUrl : baseUrl + '/../' + href;
	        };
	        GenericBrowserDomAdapter.prototype.supportsDOMEvents = function () { return true; };
	        GenericBrowserDomAdapter.prototype.supportsNativeShadowDOM = function () {
	            return typeof this.defaultDoc().body.createShadowRoot === 'function';
	        };
	        GenericBrowserDomAdapter.prototype.getAnimationPrefix = function () { return this._animationPrefix ? this._animationPrefix : ''; };
	        GenericBrowserDomAdapter.prototype.getTransitionEnd = function () { return this._transitionEnd ? this._transitionEnd : ''; };
	        GenericBrowserDomAdapter.prototype.supportsAnimation = function () {
	            return isPresent(this._animationPrefix) && isPresent(this._transitionEnd);
	        };
	        return GenericBrowserDomAdapter;
	    }(DomAdapter));

	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    var __extends = (this && this.__extends) || function (d, b) {
	        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	    var _attrToPropMap = {
	        'class': 'className',
	        'innerHtml': 'innerHTML',
	        'readonly': 'readOnly',
	        'tabindex': 'tabIndex',
	    };
	    var DOM_KEY_LOCATION_NUMPAD = 3;
	    // Map to convert some key or keyIdentifier values to what will be returned by getEventKey
	    var _keyMap = {
	        // The following values are here for cross-browser compatibility and to match the W3C standard
	        // cf http://www.w3.org/TR/DOM-Level-3-Events-key/
	        '\b': 'Backspace',
	        '\t': 'Tab',
	        '\x7F': 'Delete',
	        '\x1B': 'Escape',
	        'Del': 'Delete',
	        'Esc': 'Escape',
	        'Left': 'ArrowLeft',
	        'Right': 'ArrowRight',
	        'Up': 'ArrowUp',
	        'Down': 'ArrowDown',
	        'Menu': 'ContextMenu',
	        'Scroll': 'ScrollLock',
	        'Win': 'OS'
	    };
	    // There is a bug in Chrome for numeric keypad keys:
	    // https://code.google.com/p/chromium/issues/detail?id=155654
	    // 1, 2, 3 ... are reported as A, B, C ...
	    var _chromeNumKeyPadMap = {
	        'A': '1',
	        'B': '2',
	        'C': '3',
	        'D': '4',
	        'E': '5',
	        'F': '6',
	        'G': '7',
	        'H': '8',
	        'I': '9',
	        'J': '*',
	        'K': '+',
	        'M': '-',
	        'N': '.',
	        'O': '/',
	        '\x60': '0',
	        '\x90': 'NumLock'
	    };
	    /**
	     * A `DomAdapter` powered by full browser DOM APIs.
	     *
	     * @security Tread carefully! Interacting with the DOM directly is dangerous and
	     * can introduce XSS risks.
	     */
	    /* tslint:disable:requireParameterType */
	    var BrowserDomAdapter = (function (_super) {
	        __extends(BrowserDomAdapter, _super);
	        function BrowserDomAdapter() {
	            _super.apply(this, arguments);
	        }
	        BrowserDomAdapter.prototype.parse = function (templateHtml) { throw new Error('parse not implemented'); };
	        BrowserDomAdapter.makeCurrent = function () { setRootDomAdapter(new BrowserDomAdapter()); };
	        BrowserDomAdapter.prototype.hasProperty = function (element, name) { return name in element; };
	        BrowserDomAdapter.prototype.setProperty = function (el, name, value) { el[name] = value; };
	        BrowserDomAdapter.prototype.getProperty = function (el, name) { return el[name]; };
	        BrowserDomAdapter.prototype.invoke = function (el, methodName, args) { (_a = el)[methodName].apply(_a, args); var _a; };
	        // TODO(tbosch): move this into a separate environment class once we have it
	        BrowserDomAdapter.prototype.logError = function (error) {
	            if (window.console) {
	                (window.console.error || window.console.log)(error);
	            }
	        };
	        BrowserDomAdapter.prototype.log = function (error) {
	            if (window.console) {
	                window.console.log && window.console.log(error);
	            }
	        };
	        BrowserDomAdapter.prototype.logGroup = function (error) {
	            if (window.console) {
	                window.console.group && window.console.group(error);
	                this.logError(error);
	            }
	        };
	        BrowserDomAdapter.prototype.logGroupEnd = function () {
	            if (window.console) {
	                window.console.groupEnd && window.console.groupEnd();
	            }
	        };
	        Object.defineProperty(BrowserDomAdapter.prototype, "attrToPropMap", {
	            get: function () { return _attrToPropMap; },
	            enumerable: true,
	            configurable: true
	        });
	        BrowserDomAdapter.prototype.query = function (selector) { return document.querySelector(selector); };
	        BrowserDomAdapter.prototype.querySelector = function (el, selector) {
	            return el.querySelector(selector);
	        };
	        BrowserDomAdapter.prototype.querySelectorAll = function (el, selector) { return el.querySelectorAll(selector); };
	        BrowserDomAdapter.prototype.on = function (el, evt, listener) { el.addEventListener(evt, listener, false); };
	        BrowserDomAdapter.prototype.onAndCancel = function (el, evt, listener) {
	            el.addEventListener(evt, listener, false);
	            // Needed to follow Dart's subscription semantic, until fix of
	            // https://code.google.com/p/dart/issues/detail?id=17406
	            return function () { el.removeEventListener(evt, listener, false); };
	        };
	        BrowserDomAdapter.prototype.dispatchEvent = function (el, evt) { el.dispatchEvent(evt); };
	        BrowserDomAdapter.prototype.createMouseEvent = function (eventType) {
	            var evt = document.createEvent('MouseEvent');
	            evt.initEvent(eventType, true, true);
	            return evt;
	        };
	        BrowserDomAdapter.prototype.createEvent = function (eventType) {
	            var evt = document.createEvent('Event');
	            evt.initEvent(eventType, true, true);
	            return evt;
	        };
	        BrowserDomAdapter.prototype.preventDefault = function (evt) {
	            evt.preventDefault();
	            evt.returnValue = false;
	        };
	        BrowserDomAdapter.prototype.isPrevented = function (evt) {
	            return evt.defaultPrevented || isPresent(evt.returnValue) && !evt.returnValue;
	        };
	        BrowserDomAdapter.prototype.getInnerHTML = function (el) { return el.innerHTML; };
	        BrowserDomAdapter.prototype.getTemplateContent = function (el) {
	            return 'content' in el && el instanceof HTMLTemplateElement ? el.content : null;
	        };
	        BrowserDomAdapter.prototype.getOuterHTML = function (el) { return el.outerHTML; };
	        BrowserDomAdapter.prototype.nodeName = function (node) { return node.nodeName; };
	        BrowserDomAdapter.prototype.nodeValue = function (node) { return node.nodeValue; };
	        BrowserDomAdapter.prototype.type = function (node) { return node.type; };
	        BrowserDomAdapter.prototype.content = function (node) {
	            if (this.hasProperty(node, 'content')) {
	                return node.content;
	            }
	            else {
	                return node;
	            }
	        };
	        BrowserDomAdapter.prototype.firstChild = function (el) { return el.firstChild; };
	        BrowserDomAdapter.prototype.nextSibling = function (el) { return el.nextSibling; };
	        BrowserDomAdapter.prototype.parentElement = function (el) { return el.parentNode; };
	        BrowserDomAdapter.prototype.childNodes = function (el) { return el.childNodes; };
	        BrowserDomAdapter.prototype.childNodesAsList = function (el) {
	            var childNodes = el.childNodes;
	            var res = new Array(childNodes.length);
	            for (var i = 0; i < childNodes.length; i++) {
	                res[i] = childNodes[i];
	            }
	            return res;
	        };
	        BrowserDomAdapter.prototype.clearNodes = function (el) {
	            while (el.firstChild) {
	                el.removeChild(el.firstChild);
	            }
	        };
	        BrowserDomAdapter.prototype.appendChild = function (el, node) { el.appendChild(node); };
	        BrowserDomAdapter.prototype.removeChild = function (el, node) { el.removeChild(node); };
	        BrowserDomAdapter.prototype.replaceChild = function (el, newChild, oldChild) { el.replaceChild(newChild, oldChild); };
	        BrowserDomAdapter.prototype.remove = function (node) {
	            if (node.parentNode) {
	                node.parentNode.removeChild(node);
	            }
	            return node;
	        };
	        BrowserDomAdapter.prototype.insertBefore = function (el, node) { el.parentNode.insertBefore(node, el); };
	        BrowserDomAdapter.prototype.insertAllBefore = function (el, nodes) {
	            nodes.forEach(function (n) { return el.parentNode.insertBefore(n, el); });
	        };
	        BrowserDomAdapter.prototype.insertAfter = function (el, node) { el.parentNode.insertBefore(node, el.nextSibling); };
	        BrowserDomAdapter.prototype.setInnerHTML = function (el, value) { el.innerHTML = value; };
	        BrowserDomAdapter.prototype.getText = function (el) { return el.textContent; };
	        BrowserDomAdapter.prototype.setText = function (el, value) { el.textContent = value; };
	        BrowserDomAdapter.prototype.getValue = function (el) { return el.value; };
	        BrowserDomAdapter.prototype.setValue = function (el, value) { el.value = value; };
	        BrowserDomAdapter.prototype.getChecked = function (el) { return el.checked; };
	        BrowserDomAdapter.prototype.setChecked = function (el, value) { el.checked = value; };
	        BrowserDomAdapter.prototype.createComment = function (text) { return document.createComment(text); };
	        BrowserDomAdapter.prototype.createTemplate = function (html) {
	            var t = document.createElement('template');
	            t.innerHTML = html;
	            return t;
	        };
	        BrowserDomAdapter.prototype.createElement = function (tagName, doc) {
	            if (doc === void 0) { doc = document; }
	            return doc.createElement(tagName);
	        };
	        BrowserDomAdapter.prototype.createElementNS = function (ns, tagName, doc) {
	            if (doc === void 0) { doc = document; }
	            return doc.createElementNS(ns, tagName);
	        };
	        BrowserDomAdapter.prototype.createTextNode = function (text, doc) {
	            if (doc === void 0) { doc = document; }
	            return doc.createTextNode(text);
	        };
	        BrowserDomAdapter.prototype.createScriptTag = function (attrName, attrValue, doc) {
	            if (doc === void 0) { doc = document; }
	            var el = doc.createElement('SCRIPT');
	            el.setAttribute(attrName, attrValue);
	            return el;
	        };
	        BrowserDomAdapter.prototype.createStyleElement = function (css, doc) {
	            if (doc === void 0) { doc = document; }
	            var style = doc.createElement('style');
	            this.appendChild(style, this.createTextNode(css));
	            return style;
	        };
	        BrowserDomAdapter.prototype.createShadowRoot = function (el) { return el.createShadowRoot(); };
	        BrowserDomAdapter.prototype.getShadowRoot = function (el) { return el.shadowRoot; };
	        BrowserDomAdapter.prototype.getHost = function (el) { return el.host; };
	        BrowserDomAdapter.prototype.clone = function (node) { return node.cloneNode(true); };
	        BrowserDomAdapter.prototype.getElementsByClassName = function (element, name) {
	            return element.getElementsByClassName(name);
	        };
	        BrowserDomAdapter.prototype.getElementsByTagName = function (element, name) {
	            return element.getElementsByTagName(name);
	        };
	        BrowserDomAdapter.prototype.classList = function (element) { return Array.prototype.slice.call(element.classList, 0); };
	        BrowserDomAdapter.prototype.addClass = function (element, className) { element.classList.add(className); };
	        BrowserDomAdapter.prototype.removeClass = function (element, className) { element.classList.remove(className); };
	        BrowserDomAdapter.prototype.hasClass = function (element, className) {
	            return element.classList.contains(className);
	        };
	        BrowserDomAdapter.prototype.setStyle = function (element, styleName, styleValue) {
	            element.style[styleName] = styleValue;
	        };
	        BrowserDomAdapter.prototype.removeStyle = function (element, stylename) {
	            // IE requires '' instead of null
	            // see https://github.com/angular/angular/issues/7916
	            element.style[stylename] = '';
	        };
	        BrowserDomAdapter.prototype.getStyle = function (element, stylename) { return element.style[stylename]; };
	        BrowserDomAdapter.prototype.hasStyle = function (element, styleName, styleValue) {
	            if (styleValue === void 0) { styleValue = null; }
	            var value = this.getStyle(element, styleName) || '';
	            return styleValue ? value == styleValue : value.length > 0;
	        };
	        BrowserDomAdapter.prototype.tagName = function (element) { return element.tagName; };
	        BrowserDomAdapter.prototype.attributeMap = function (element) {
	            var res = new Map();
	            var elAttrs = element.attributes;
	            for (var i = 0; i < elAttrs.length; i++) {
	                var attrib = elAttrs[i];
	                res.set(attrib.name, attrib.value);
	            }
	            return res;
	        };
	        BrowserDomAdapter.prototype.hasAttribute = function (element, attribute) {
	            return element.hasAttribute(attribute);
	        };
	        BrowserDomAdapter.prototype.hasAttributeNS = function (element, ns, attribute) {
	            return element.hasAttributeNS(ns, attribute);
	        };
	        BrowserDomAdapter.prototype.getAttribute = function (element, attribute) {
	            return element.getAttribute(attribute);
	        };
	        BrowserDomAdapter.prototype.getAttributeNS = function (element, ns, name) {
	            return element.getAttributeNS(ns, name);
	        };
	        BrowserDomAdapter.prototype.setAttribute = function (element, name, value) { element.setAttribute(name, value); };
	        BrowserDomAdapter.prototype.setAttributeNS = function (element, ns, name, value) {
	            element.setAttributeNS(ns, name, value);
	        };
	        BrowserDomAdapter.prototype.removeAttribute = function (element, attribute) { element.removeAttribute(attribute); };
	        BrowserDomAdapter.prototype.removeAttributeNS = function (element, ns, name) {
	            element.removeAttributeNS(ns, name);
	        };
	        BrowserDomAdapter.prototype.templateAwareRoot = function (el) { return this.isTemplateElement(el) ? this.content(el) : el; };
	        BrowserDomAdapter.prototype.createHtmlDocument = function () {
	            return document.implementation.createHTMLDocument('fakeTitle');
	        };
	        BrowserDomAdapter.prototype.defaultDoc = function () { return document; };
	        BrowserDomAdapter.prototype.getBoundingClientRect = function (el) {
	            try {
	                return el.getBoundingClientRect();
	            }
	            catch (e) {
	                return { top: 0, bottom: 0, left: 0, right: 0, width: 0, height: 0 };
	            }
	        };
	        BrowserDomAdapter.prototype.getTitle = function () { return document.title; };
	        BrowserDomAdapter.prototype.setTitle = function (newTitle) { document.title = newTitle || ''; };
	        BrowserDomAdapter.prototype.elementMatches = function (n, selector) {
	            if (n instanceof HTMLElement) {
	                return n.matches && n.matches(selector) ||
	                    n.msMatchesSelector && n.msMatchesSelector(selector) ||
	                    n.webkitMatchesSelector && n.webkitMatchesSelector(selector);
	            }
	            return false;
	        };
	        BrowserDomAdapter.prototype.isTemplateElement = function (el) {
	            return el instanceof HTMLElement && el.nodeName == 'TEMPLATE';
	        };
	        BrowserDomAdapter.prototype.isTextNode = function (node) { return node.nodeType === Node.TEXT_NODE; };
	        BrowserDomAdapter.prototype.isCommentNode = function (node) { return node.nodeType === Node.COMMENT_NODE; };
	        BrowserDomAdapter.prototype.isElementNode = function (node) { return node.nodeType === Node.ELEMENT_NODE; };
	        BrowserDomAdapter.prototype.hasShadowRoot = function (node) {
	            return isPresent(node.shadowRoot) && node instanceof HTMLElement;
	        };
	        BrowserDomAdapter.prototype.isShadowRoot = function (node) { return node instanceof DocumentFragment; };
	        BrowserDomAdapter.prototype.importIntoDoc = function (node) { return document.importNode(this.templateAwareRoot(node), true); };
	        BrowserDomAdapter.prototype.adoptNode = function (node) { return document.adoptNode(node); };
	        BrowserDomAdapter.prototype.getHref = function (el) { return el.href; };
	        BrowserDomAdapter.prototype.getEventKey = function (event) {
	            var key = event.key;
	            if (isBlank(key)) {
	                key = event.keyIdentifier;
	                // keyIdentifier is defined in the old draft of DOM Level 3 Events implemented by Chrome and
	                // Safari cf
	                // http://www.w3.org/TR/2007/WD-DOM-Level-3-Events-20071221/events.html#Events-KeyboardEvents-Interfaces
	                if (isBlank(key)) {
	                    return 'Unidentified';
	                }
	                if (key.startsWith('U+')) {
	                    key = String.fromCharCode(parseInt(key.substring(2), 16));
	                    if (event.location === DOM_KEY_LOCATION_NUMPAD && _chromeNumKeyPadMap.hasOwnProperty(key)) {
	                        // There is a bug in Chrome for numeric keypad keys:
	                        // https://code.google.com/p/chromium/issues/detail?id=155654
	                        // 1, 2, 3 ... are reported as A, B, C ...
	                        key = _chromeNumKeyPadMap[key];
	                    }
	                }
	            }
	            return _keyMap[key] || key;
	        };
	        BrowserDomAdapter.prototype.getGlobalEventTarget = function (target) {
	            if (target === 'window') {
	                return window;
	            }
	            if (target === 'document') {
	                return document;
	            }
	            if (target === 'body') {
	                return document.body;
	            }
	        };
	        BrowserDomAdapter.prototype.getHistory = function () { return window.history; };
	        BrowserDomAdapter.prototype.getLocation = function () { return window.location; };
	        BrowserDomAdapter.prototype.getBaseHref = function () {
	            var href = getBaseElementHref();
	            return isBlank(href) ? null : relativePath(href);
	        };
	        BrowserDomAdapter.prototype.resetBaseElement = function () { baseElement = null; };
	        BrowserDomAdapter.prototype.getUserAgent = function () { return window.navigator.userAgent; };
	        BrowserDomAdapter.prototype.setData = function (element, name, value) {
	            this.setAttribute(element, 'data-' + name, value);
	        };
	        BrowserDomAdapter.prototype.getData = function (element, name) {
	            return this.getAttribute(element, 'data-' + name);
	        };
	        BrowserDomAdapter.prototype.getComputedStyle = function (element) { return getComputedStyle(element); };
	        // TODO(tbosch): move this into a separate environment class once we have it
	        BrowserDomAdapter.prototype.setGlobalVar = function (path, value) { setValueOnPath(global$1, path, value); };
	        BrowserDomAdapter.prototype.supportsWebAnimation = function () {
	            return typeof Element.prototype['animate'] === 'function';
	        };
	        BrowserDomAdapter.prototype.performanceNow = function () {
	            // performance.now() is not available in all browsers, see
	            // http://caniuse.com/#search=performance.now
	            return window.performance && window.performance.now ? window.performance.now() :
	                new Date().getTime();
	        };
	        BrowserDomAdapter.prototype.supportsCookies = function () { return true; };
	        BrowserDomAdapter.prototype.getCookie = function (name) { return parseCookieValue(document.cookie, name); };
	        BrowserDomAdapter.prototype.setCookie = function (name, value) {
	            // document.cookie is magical, assigning into it assigns/overrides one cookie value, but does
	            // not clear other cookies.
	            document.cookie = encodeURIComponent(name) + '=' + encodeURIComponent(value);
	        };
	        return BrowserDomAdapter;
	    }(GenericBrowserDomAdapter));
	    var baseElement = null;
	    function getBaseElementHref() {
	        if (!baseElement) {
	            baseElement = document.querySelector('base');
	            if (!baseElement) {
	                return null;
	            }
	        }
	        return baseElement.getAttribute('href');
	    }
	    // based on urlUtils.js in AngularJS 1
	    var urlParsingNode;
	    function relativePath(url) {
	        if (!urlParsingNode) {
	            urlParsingNode = document.createElement('a');
	        }
	        urlParsingNode.setAttribute('href', url);
	        return (urlParsingNode.pathname.charAt(0) === '/') ? urlParsingNode.pathname :
	            '/' + urlParsingNode.pathname;
	    }
	    function parseCookieValue(cookieStr, name) {
	        name = encodeURIComponent(name);
	        for (var _i = 0, _a = cookieStr.split(';'); _i < _a.length; _i++) {
	            var cookie = _a[_i];
	            var eqIndex = cookie.indexOf('=');
	            var _b = eqIndex == -1 ? [cookie, ''] : [cookie.slice(0, eqIndex), cookie.slice(eqIndex + 1)], cookieName = _b[0], cookieValue = _b[1];
	            if (cookieName.trim() === name) {
	                return decodeURIComponent(cookieValue);
	            }
	        }
	        return null;
	    }

	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    function supportsState() {
	        return !!window.history.pushState;
	    }

	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    var __extends$2 = (this && this.__extends) || function (d, b) {
	        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	    /**
	     * `PlatformLocation` encapsulates all of the direct calls to platform APIs.
	     * This class should not be used directly by an application developer. Instead, use
	     * {@link Location}.
	     */
	    var BrowserPlatformLocation = (function (_super) {
	        __extends$2(BrowserPlatformLocation, _super);
	        function BrowserPlatformLocation() {
	            _super.call(this);
	            this._init();
	        }
	        // This is moved to its own method so that `MockPlatformLocationStrategy` can overwrite it
	        /** @internal */
	        BrowserPlatformLocation.prototype._init = function () {
	            this._location = getDOM().getLocation();
	            this._history = getDOM().getHistory();
	        };
	        Object.defineProperty(BrowserPlatformLocation.prototype, "location", {
	            get: function () { return this._location; },
	            enumerable: true,
	            configurable: true
	        });
	        BrowserPlatformLocation.prototype.getBaseHrefFromDOM = function () { return getDOM().getBaseHref(); };
	        BrowserPlatformLocation.prototype.onPopState = function (fn) {
	            getDOM().getGlobalEventTarget('window').addEventListener('popstate', fn, false);
	        };
	        BrowserPlatformLocation.prototype.onHashChange = function (fn) {
	            getDOM().getGlobalEventTarget('window').addEventListener('hashchange', fn, false);
	        };
	        Object.defineProperty(BrowserPlatformLocation.prototype, "pathname", {
	            get: function () { return this._location.pathname; },
	            set: function (newPath) { this._location.pathname = newPath; },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(BrowserPlatformLocation.prototype, "search", {
	            get: function () { return this._location.search; },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(BrowserPlatformLocation.prototype, "hash", {
	            get: function () { return this._location.hash; },
	            enumerable: true,
	            configurable: true
	        });
	        BrowserPlatformLocation.prototype.pushState = function (state, title, url) {
	            if (supportsState()) {
	                this._history.pushState(state, title, url);
	            }
	            else {
	                this._location.hash = url;
	            }
	        };
	        BrowserPlatformLocation.prototype.replaceState = function (state, title, url) {
	            if (supportsState()) {
	                this._history.replaceState(state, title, url);
	            }
	            else {
	                this._location.hash = url;
	            }
	        };
	        BrowserPlatformLocation.prototype.forward = function () { this._history.forward(); };
	        BrowserPlatformLocation.prototype.back = function () { this._history.back(); };
	        BrowserPlatformLocation.decorators = [
	            { type: _angular_core.Injectable },
	        ];
	        /** @nocollapse */
	        BrowserPlatformLocation.ctorParameters = [];
	        return BrowserPlatformLocation;
	    }(_angular_common.PlatformLocation));

	    var BrowserGetTestability = (function () {
	        function BrowserGetTestability() {
	        }
	        BrowserGetTestability.init = function () { _angular_core.setTestabilityGetter(new BrowserGetTestability()); };
	        BrowserGetTestability.prototype.addToWindow = function (registry) {
	            global$1.getAngularTestability = function (elem, findInAncestors) {
	                if (findInAncestors === void 0) { findInAncestors = true; }
	                var testability = registry.findTestabilityInTree(elem, findInAncestors);
	                if (testability == null) {
	                    throw new Error('Could not find testability for element.');
	                }
	                return testability;
	            };
	            global$1.getAllAngularTestabilities = function () { return registry.getAllTestabilities(); };
	            global$1.getAllAngularRootElements = function () { return registry.getAllRootElements(); };
	            var whenAllStable = function (callback /** TODO #9100 */) {
	                var testabilities = global$1.getAllAngularTestabilities();
	                var count = testabilities.length;
	                var didWork = false;
	                var decrement = function (didWork_ /** TODO #9100 */) {
	                    didWork = didWork || didWork_;
	                    count--;
	                    if (count == 0) {
	                        callback(didWork);
	                    }
	                };
	                testabilities.forEach(function (testability /** TODO #9100 */) {
	                    testability.whenStable(decrement);
	                });
	            };
	            if (!global$1['frameworkStabilizers']) {
	                global$1['frameworkStabilizers'] = [];
	            }
	            global$1['frameworkStabilizers'].push(whenAllStable);
	        };
	        BrowserGetTestability.prototype.findTestabilityInTree = function (registry, elem, findInAncestors) {
	            if (elem == null) {
	                return null;
	            }
	            var t = registry.getTestability(elem);
	            if (isPresent(t)) {
	                return t;
	            }
	            else if (!findInAncestors) {
	                return null;
	            }
	            if (getDOM().isShadowRoot(elem)) {
	                return this.findTestabilityInTree(registry, getDOM().getHost(elem), true);
	            }
	            return this.findTestabilityInTree(registry, getDOM().parentElement(elem), true);
	        };
	        return BrowserGetTestability;
	    }());

	    /**
	     * A service that can be used to get and set the title of a current HTML document.
	     *
	     * Since an Angular 2 application can't be bootstrapped on the entire HTML document (`<html>` tag)
	     * it is not possible to bind to the `text` property of the `HTMLTitleElement` elements
	     * (representing the `<title>` tag). Instead, this service can be used to set and get the current
	     * title value.
	     *
	     * @experimental
	     */
	    var Title = (function () {
	        function Title() {
	        }
	        /**
	         * Get the title of the current HTML document.
	         * @returns {string}
	         */
	        Title.prototype.getTitle = function () { return getDOM().getTitle(); };
	        /**
	         * Set the title of the current HTML document.
	         * @param newTitle
	         */
	        Title.prototype.setTitle = function (newTitle) { getDOM().setTitle(newTitle); };
	        return Title;
	    }());

	    /**
	     * Wraps Javascript Objects
	     */
	    var StringMapWrapper = (function () {
	        function StringMapWrapper() {
	        }
	        StringMapWrapper.merge = function (m1, m2) {
	            var m = {};
	            for (var _i = 0, _a = Object.keys(m1); _i < _a.length; _i++) {
	                var k = _a[_i];
	                m[k] = m1[k];
	            }
	            for (var _b = 0, _c = Object.keys(m2); _b < _c.length; _b++) {
	                var k = _c[_b];
	                m[k] = m2[k];
	            }
	            return m;
	        };
	        StringMapWrapper.equals = function (m1, m2) {
	            var k1 = Object.keys(m1);
	            var k2 = Object.keys(m2);
	            if (k1.length != k2.length) {
	                return false;
	            }
	            for (var i = 0; i < k1.length; i++) {
	                var key = k1[i];
	                if (m1[key] !== m2[key]) {
	                    return false;
	                }
	            }
	            return true;
	        };
	        return StringMapWrapper;
	    }());

	    /**
	     * A DI Token representing the main rendering context. In a browser this is the DOM Document.
	     *
	     * Note: Document might not be available in the Application Context when Application and Rendering
	     * Contexts are not the same (e.g. when running the application into a Web Worker).
	     *
	     * @stable
	     */
	    var DOCUMENT = new _angular_core.OpaqueToken('DocumentToken');

	    /**
	     * @stable
	     */
	    var EVENT_MANAGER_PLUGINS = new _angular_core.OpaqueToken('EventManagerPlugins');
	    /**
	     * @stable
	     */
	    var EventManager = (function () {
	        function EventManager(plugins, _zone) {
	            var _this = this;
	            this._zone = _zone;
	            this._eventNameToPlugin = new Map();
	            plugins.forEach(function (p) { return p.manager = _this; });
	            this._plugins = plugins.slice().reverse();
	        }
	        EventManager.prototype.addEventListener = function (element, eventName, handler) {
	            var plugin = this._findPluginFor(eventName);
	            return plugin.addEventListener(element, eventName, handler);
	        };
	        EventManager.prototype.addGlobalEventListener = function (target, eventName, handler) {
	            var plugin = this._findPluginFor(eventName);
	            return plugin.addGlobalEventListener(target, eventName, handler);
	        };
	        EventManager.prototype.getZone = function () { return this._zone; };
	        /** @internal */
	        EventManager.prototype._findPluginFor = function (eventName) {
	            var plugin = this._eventNameToPlugin.get(eventName);
	            if (plugin) {
	                return plugin;
	            }
	            var plugins = this._plugins;
	            for (var i = 0; i < plugins.length; i++) {
	                var plugin_1 = plugins[i];
	                if (plugin_1.supports(eventName)) {
	                    this._eventNameToPlugin.set(eventName, plugin_1);
	                    return plugin_1;
	                }
	            }
	            throw new Error("No event manager plugin found for event " + eventName);
	        };
	        EventManager.decorators = [
	            { type: _angular_core.Injectable },
	        ];
	        /** @nocollapse */
	        EventManager.ctorParameters = [
	            { type: Array, decorators: [{ type: _angular_core.Inject, args: [EVENT_MANAGER_PLUGINS,] },] },
	            { type: _angular_core.NgZone, },
	        ];
	        return EventManager;
	    }());
	    var EventManagerPlugin = (function () {
	        function EventManagerPlugin() {
	        }
	        EventManagerPlugin.prototype.addGlobalEventListener = function (element, eventName, handler) {
	            var target = getDOM().getGlobalEventTarget(element);
	            if (!target) {
	                throw new Error("Unsupported event target " + target + " for event " + eventName);
	            }
	            return this.addEventListener(target, eventName, handler);
	        };
	        ;
	        return EventManagerPlugin;
	    }());

	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    var __extends$4 = (this && this.__extends) || function (d, b) {
	        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	    var SharedStylesHost = (function () {
	        function SharedStylesHost() {
	            /** @internal */
	            this._styles = [];
	            /** @internal */
	            this._stylesSet = new Set();
	        }
	        SharedStylesHost.prototype.addStyles = function (styles) {
	            var _this = this;
	            var additions = [];
	            styles.forEach(function (style) {
	                if (!_this._stylesSet.has(style)) {
	                    _this._stylesSet.add(style);
	                    _this._styles.push(style);
	                    additions.push(style);
	                }
	            });
	            this.onStylesAdded(additions);
	        };
	        SharedStylesHost.prototype.onStylesAdded = function (additions) { };
	        SharedStylesHost.prototype.getAllStyles = function () { return this._styles; };
	        SharedStylesHost.decorators = [
	            { type: _angular_core.Injectable },
	        ];
	        /** @nocollapse */
	        SharedStylesHost.ctorParameters = [];
	        return SharedStylesHost;
	    }());
	    var DomSharedStylesHost = (function (_super) {
	        __extends$4(DomSharedStylesHost, _super);
	        function DomSharedStylesHost(doc) {
	            _super.call(this);
	            this._hostNodes = new Set();
	            this._hostNodes.add(doc.head);
	        }
	        /** @internal */
	        DomSharedStylesHost.prototype._addStylesToHost = function (styles, host) {
	            for (var i = 0; i < styles.length; i++) {
	                var styleEl = document.createElement('style');
	                styleEl.textContent = styles[i];
	                host.appendChild(styleEl);
	            }
	        };
	        DomSharedStylesHost.prototype.addHost = function (hostNode) {
	            this._addStylesToHost(this._styles, hostNode);
	            this._hostNodes.add(hostNode);
	        };
	        DomSharedStylesHost.prototype.removeHost = function (hostNode) { this._hostNodes.delete(hostNode); };
	        DomSharedStylesHost.prototype.onStylesAdded = function (additions) {
	            var _this = this;
	            this._hostNodes.forEach(function (hostNode) { _this._addStylesToHost(additions, hostNode); });
	        };
	        DomSharedStylesHost.decorators = [
	            { type: _angular_core.Injectable },
	        ];
	        /** @nocollapse */
	        DomSharedStylesHost.ctorParameters = [
	            { type: undefined, decorators: [{ type: _angular_core.Inject, args: [DOCUMENT,] },] },
	        ];
	        return DomSharedStylesHost;
	    }(SharedStylesHost));

	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    var __extends$3 = (this && this.__extends) || function (d, b) {
	        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	    var NAMESPACE_URIS = {
	        'xlink': 'http://www.w3.org/1999/xlink',
	        'svg': 'http://www.w3.org/2000/svg',
	        'xhtml': 'http://www.w3.org/1999/xhtml'
	    };
	    var TEMPLATE_COMMENT_TEXT = 'template bindings={}';
	    var TEMPLATE_BINDINGS_EXP = /^template bindings=(.*)$/;
	    var DomRootRenderer = (function () {
	        function DomRootRenderer(document, eventManager, sharedStylesHost, animationDriver, appId) {
	            this.document = document;
	            this.eventManager = eventManager;
	            this.sharedStylesHost = sharedStylesHost;
	            this.animationDriver = animationDriver;
	            this.appId = appId;
	            this.registeredComponents = new Map();
	        }
	        DomRootRenderer.prototype.renderComponent = function (componentProto) {
	            var renderer = this.registeredComponents.get(componentProto.id);
	            if (!renderer) {
	                renderer = new DomRenderer(this, componentProto, this.animationDriver, this.appId + "-" + componentProto.id);
	                this.registeredComponents.set(componentProto.id, renderer);
	            }
	            return renderer;
	        };
	        return DomRootRenderer;
	    }());
	    var DomRootRenderer_ = (function (_super) {
	        __extends$3(DomRootRenderer_, _super);
	        function DomRootRenderer_(_document, _eventManager, sharedStylesHost, animationDriver, appId) {
	            _super.call(this, _document, _eventManager, sharedStylesHost, animationDriver, appId);
	        }
	        DomRootRenderer_.decorators = [
	            { type: _angular_core.Injectable },
	        ];
	        /** @nocollapse */
	        DomRootRenderer_.ctorParameters = [
	            { type: undefined, decorators: [{ type: _angular_core.Inject, args: [DOCUMENT,] },] },
	            { type: EventManager, },
	            { type: DomSharedStylesHost, },
	            { type: AnimationDriver, },
	            { type: undefined, decorators: [{ type: _angular_core.Inject, args: [_angular_core.APP_ID,] },] },
	        ];
	        return DomRootRenderer_;
	    }(DomRootRenderer));
	    var DIRECT_DOM_RENDERER = {
	        remove: function (node) {
	            if (node.parentNode) {
	                node.parentNode.removeChild(node);
	            }
	        },
	        appendChild: function (node, parent) { parent.appendChild(node); },
	        insertBefore: function (node, refNode) { refNode.parentNode.insertBefore(node, refNode); },
	        nextSibling: function (node) { return node.nextSibling; },
	        parentElement: function (node) { return node.parentNode; }
	    };
	    var DomRenderer = (function () {
	        function DomRenderer(_rootRenderer, componentProto, _animationDriver, styleShimId) {
	            this._rootRenderer = _rootRenderer;
	            this.componentProto = componentProto;
	            this._animationDriver = _animationDriver;
	            this.directRenderer = DIRECT_DOM_RENDERER;
	            this._styles = flattenStyles(styleShimId, componentProto.styles, []);
	            if (componentProto.encapsulation !== _angular_core.ViewEncapsulation.Native) {
	                this._rootRenderer.sharedStylesHost.addStyles(this._styles);
	            }
	            if (this.componentProto.encapsulation === _angular_core.ViewEncapsulation.Emulated) {
	                this._contentAttr = shimContentAttribute(styleShimId);
	                this._hostAttr = shimHostAttribute(styleShimId);
	            }
	            else {
	                this._contentAttr = null;
	                this._hostAttr = null;
	            }
	        }
	        DomRenderer.prototype.selectRootElement = function (selectorOrNode, debugInfo) {
	            var el;
	            if (typeof selectorOrNode === 'string') {
	                el = this._rootRenderer.document.querySelector(selectorOrNode);
	                if (!el) {
	                    throw new Error("The selector \"" + selectorOrNode + "\" did not match any elements");
	                }
	            }
	            else {
	                el = selectorOrNode;
	            }
	            while (el.firstChild) {
	                el.removeChild(el.firstChild);
	            }
	            return el;
	        };
	        DomRenderer.prototype.createElement = function (parent, name, debugInfo) {
	            var el;
	            if (isNamespaced(name)) {
	                var nsAndName = splitNamespace(name);
	                el = document.createElementNS((NAMESPACE_URIS)[nsAndName[0]], nsAndName[1]);
	            }
	            else {
	                el = document.createElement(name);
	            }
	            if (this._contentAttr) {
	                el.setAttribute(this._contentAttr, '');
	            }
	            if (parent) {
	                parent.appendChild(el);
	            }
	            return el;
	        };
	        DomRenderer.prototype.createViewRoot = function (hostElement) {
	            var nodesParent;
	            if (this.componentProto.encapsulation === _angular_core.ViewEncapsulation.Native) {
	                nodesParent = hostElement.createShadowRoot();
	                this._rootRenderer.sharedStylesHost.addHost(nodesParent);
	                for (var i = 0; i < this._styles.length; i++) {
	                    var styleEl = document.createElement('style');
	                    styleEl.textContent = this._styles[i];
	                    nodesParent.appendChild(styleEl);
	                }
	            }
	            else {
	                if (this._hostAttr) {
	                    hostElement.setAttribute(this._hostAttr, '');
	                }
	                nodesParent = hostElement;
	            }
	            return nodesParent;
	        };
	        DomRenderer.prototype.createTemplateAnchor = function (parentElement, debugInfo) {
	            var comment = document.createComment(TEMPLATE_COMMENT_TEXT);
	            if (parentElement) {
	                parentElement.appendChild(comment);
	            }
	            return comment;
	        };
	        DomRenderer.prototype.createText = function (parentElement, value, debugInfo) {
	            var node = document.createTextNode(value);
	            if (parentElement) {
	                parentElement.appendChild(node);
	            }
	            return node;
	        };
	        DomRenderer.prototype.projectNodes = function (parentElement, nodes) {
	            if (!parentElement)
	                return;
	            appendNodes(parentElement, nodes);
	        };
	        DomRenderer.prototype.attachViewAfter = function (node, viewRootNodes) { moveNodesAfterSibling(node, viewRootNodes); };
	        DomRenderer.prototype.detachView = function (viewRootNodes) {
	            for (var i = 0; i < viewRootNodes.length; i++) {
	                var node = viewRootNodes[i];
	                if (node.parentNode) {
	                    node.parentNode.removeChild(node);
	                }
	            }
	        };
	        DomRenderer.prototype.destroyView = function (hostElement, viewAllNodes) {
	            if (this.componentProto.encapsulation === _angular_core.ViewEncapsulation.Native && hostElement) {
	                this._rootRenderer.sharedStylesHost.removeHost(hostElement.shadowRoot);
	            }
	        };
	        DomRenderer.prototype.listen = function (renderElement, name, callback) {
	            return this._rootRenderer.eventManager.addEventListener(renderElement, name, decoratePreventDefault(callback));
	        };
	        DomRenderer.prototype.listenGlobal = function (target, name, callback) {
	            return this._rootRenderer.eventManager.addGlobalEventListener(target, name, decoratePreventDefault(callback));
	        };
	        DomRenderer.prototype.setElementProperty = function (renderElement, propertyName, propertyValue) {
	            renderElement[propertyName] = propertyValue;
	        };
	        DomRenderer.prototype.setElementAttribute = function (renderElement, attributeName, attributeValue) {
	            var attrNs;
	            var attrNameWithoutNs = attributeName;
	            if (isNamespaced(attributeName)) {
	                var nsAndName = splitNamespace(attributeName);
	                attrNameWithoutNs = nsAndName[1];
	                attributeName = nsAndName[0] + ':' + nsAndName[1];
	                attrNs = NAMESPACE_URIS[nsAndName[0]];
	            }
	            if (isPresent(attributeValue)) {
	                if (attrNs) {
	                    renderElement.setAttributeNS(attrNs, attributeName, attributeValue);
	                }
	                else {
	                    renderElement.setAttribute(attributeName, attributeValue);
	                }
	            }
	            else {
	                if (isPresent(attrNs)) {
	                    renderElement.removeAttributeNS(attrNs, attrNameWithoutNs);
	                }
	                else {
	                    renderElement.removeAttribute(attributeName);
	                }
	            }
	        };
	        DomRenderer.prototype.setBindingDebugInfo = function (renderElement, propertyName, propertyValue) {
	            if (renderElement.nodeType === Node.COMMENT_NODE) {
	                var existingBindings = renderElement.nodeValue.replace(/\n/g, '').match(TEMPLATE_BINDINGS_EXP);
	                var parsedBindings = JSON.parse(existingBindings[1]);
	                parsedBindings[propertyName] = propertyValue;
	                renderElement.nodeValue =
	                    TEMPLATE_COMMENT_TEXT.replace('{}', JSON.stringify(parsedBindings, null, 2));
	            }
	            else {
	                this.setElementAttribute(renderElement, propertyName, propertyValue);
	            }
	        };
	        DomRenderer.prototype.setElementClass = function (renderElement, className, isAdd) {
	            if (isAdd) {
	                renderElement.classList.add(className);
	            }
	            else {
	                renderElement.classList.remove(className);
	            }
	        };
	        DomRenderer.prototype.setElementStyle = function (renderElement, styleName, styleValue) {
	            if (isPresent(styleValue)) {
	                renderElement.style[styleName] = stringify(styleValue);
	            }
	            else {
	                // IE requires '' instead of null
	                // see https://github.com/angular/angular/issues/7916
	                renderElement.style[styleName] = '';
	            }
	        };
	        DomRenderer.prototype.invokeElementMethod = function (renderElement, methodName, args) {
	            renderElement[methodName].apply(renderElement, args);
	        };
	        DomRenderer.prototype.setText = function (renderNode, text) { renderNode.nodeValue = text; };
	        DomRenderer.prototype.animate = function (element, startingStyles, keyframes, duration, delay, easing, previousPlayers) {
	            if (previousPlayers === void 0) { previousPlayers = []; }
	            return this._animationDriver.animate(element, startingStyles, keyframes, duration, delay, easing, previousPlayers);
	        };
	        return DomRenderer;
	    }());
	    function moveNodesAfterSibling(sibling, nodes) {
	        var parent = sibling.parentNode;
	        if (nodes.length > 0 && parent) {
	            var nextSibling = sibling.nextSibling;
	            if (nextSibling) {
	                for (var i = 0; i < nodes.length; i++) {
	                    parent.insertBefore(nodes[i], nextSibling);
	                }
	            }
	            else {
	                for (var i = 0; i < nodes.length; i++) {
	                    parent.appendChild(nodes[i]);
	                }
	            }
	        }
	    }
	    function appendNodes(parent, nodes) {
	        for (var i = 0; i < nodes.length; i++) {
	            parent.appendChild(nodes[i]);
	        }
	    }
	    function decoratePreventDefault(eventHandler) {
	        return function (event) {
	            var allowDefaultBehavior = eventHandler(event);
	            if (allowDefaultBehavior === false) {
	                // TODO(tbosch): move preventDefault into event plugins...
	                event.preventDefault();
	                event.returnValue = false;
	            }
	        };
	    }
	    var COMPONENT_REGEX = /%COMP%/g;
	    var COMPONENT_VARIABLE = '%COMP%';
	    var HOST_ATTR = "_nghost-" + COMPONENT_VARIABLE;
	    var CONTENT_ATTR = "_ngcontent-" + COMPONENT_VARIABLE;
	    function shimContentAttribute(componentShortId) {
	        return CONTENT_ATTR.replace(COMPONENT_REGEX, componentShortId);
	    }
	    function shimHostAttribute(componentShortId) {
	        return HOST_ATTR.replace(COMPONENT_REGEX, componentShortId);
	    }
	    function flattenStyles(compId, styles, target) {
	        for (var i = 0; i < styles.length; i++) {
	            var style = styles[i];
	            if (Array.isArray(style)) {
	                flattenStyles(compId, style, target);
	            }
	            else {
	                style = style.replace(COMPONENT_REGEX, compId);
	                target.push(style);
	            }
	        }
	        return target;
	    }
	    var NS_PREFIX_RE = /^:([^:]+):(.+)$/;
	    function isNamespaced(name) {
	        return name[0] === ':';
	    }
	    function splitNamespace(name) {
	        var match = name.match(NS_PREFIX_RE);
	        return [match[1], match[2]];
	    }

	    var CORE_TOKENS = {
	        'ApplicationRef': _angular_core.ApplicationRef,
	        'NgZone': _angular_core.NgZone
	    };
	    var INSPECT_GLOBAL_NAME = 'ng.probe';
	    var CORE_TOKENS_GLOBAL_NAME = 'ng.coreTokens';
	    /**
	     * Returns a {@link DebugElement} for the given native DOM element, or
	     * null if the given native element does not have an Angular view associated
	     * with it.
	     */
	    function inspectNativeElement(element /** TODO #9100 */) {
	        return _angular_core.getDebugNode(element);
	    }
	    /**
	     * @experimental
	     */
	    var NgProbeToken = (function () {
	        function NgProbeToken(name, token) {
	            this.name = name;
	            this.token = token;
	        }
	        return NgProbeToken;
	    }());
	    function _createConditionalRootRenderer(rootRenderer /** TODO #9100 */, extraTokens) {
	        if (_angular_core.isDevMode()) {
	            return _createRootRenderer(rootRenderer, extraTokens);
	        }
	        return rootRenderer;
	    }
	    function _createRootRenderer(rootRenderer /** TODO #9100 */, extraTokens) {
	        getDOM().setGlobalVar(INSPECT_GLOBAL_NAME, inspectNativeElement);
	        getDOM().setGlobalVar(CORE_TOKENS_GLOBAL_NAME, StringMapWrapper.merge(CORE_TOKENS, _ngProbeTokensToMap(extraTokens || [])));
	        return new DebugDomRootRenderer(rootRenderer);
	    }
	    function _ngProbeTokensToMap(tokens) {
	        return tokens.reduce(function (prev, t) { return (prev[t.name] = t.token, prev); }, {});
	    }
	    /**
	     * Providers which support debugging Angular applications (e.g. via `ng.probe`).
	     */
	    var ELEMENT_PROBE_PROVIDERS = [{
	            provide: _angular_core.RootRenderer,
	            useFactory: _createConditionalRootRenderer,
	            deps: [DomRootRenderer, [NgProbeToken, new _angular_core.Optional()]]
	        }];
	    var ELEMENT_PROBE_PROVIDERS_PROD_MODE = [{
	            provide: _angular_core.RootRenderer,
	            useFactory: _createRootRenderer,
	            deps: [DomRootRenderer, [NgProbeToken, new _angular_core.Optional()]]
	        }];

	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    var __extends$5 = (this && this.__extends) || function (d, b) {
	        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	    var DomEventsPlugin = (function (_super) {
	        __extends$5(DomEventsPlugin, _super);
	        function DomEventsPlugin() {
	            _super.apply(this, arguments);
	        }
	        // This plugin should come last in the list of plugins, because it accepts all
	        // events.
	        DomEventsPlugin.prototype.supports = function (eventName) { return true; };
	        DomEventsPlugin.prototype.addEventListener = function (element, eventName, handler) {
	            element.addEventListener(eventName, handler, false);
	            return function () { return element.removeEventListener(eventName, handler, false); };
	        };
	        DomEventsPlugin.decorators = [
	            { type: _angular_core.Injectable },
	        ];
	        /** @nocollapse */
	        DomEventsPlugin.ctorParameters = [];
	        return DomEventsPlugin;
	    }(EventManagerPlugin));

	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    var __extends$6 = (this && this.__extends) || function (d, b) {
	        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	    var EVENT_NAMES = {
	        // pan
	        'pan': true,
	        'panstart': true,
	        'panmove': true,
	        'panend': true,
	        'pancancel': true,
	        'panleft': true,
	        'panright': true,
	        'panup': true,
	        'pandown': true,
	        // pinch
	        'pinch': true,
	        'pinchstart': true,
	        'pinchmove': true,
	        'pinchend': true,
	        'pinchcancel': true,
	        'pinchin': true,
	        'pinchout': true,
	        // press
	        'press': true,
	        'pressup': true,
	        // rotate
	        'rotate': true,
	        'rotatestart': true,
	        'rotatemove': true,
	        'rotateend': true,
	        'rotatecancel': true,
	        // swipe
	        'swipe': true,
	        'swipeleft': true,
	        'swiperight': true,
	        'swipeup': true,
	        'swipedown': true,
	        // tap
	        'tap': true,
	    };
	    /**
	     * A DI token that you can use to provide{@link HammerGestureConfig} to Angular. Use it to configure
	     * Hammer gestures.
	     *
	     * @experimental
	     */
	    var HAMMER_GESTURE_CONFIG = new _angular_core.OpaqueToken('HammerGestureConfig');
	    /**
	     * @experimental
	     */
	    var HammerGestureConfig = (function () {
	        function HammerGestureConfig() {
	            this.events = [];
	            this.overrides = {};
	        }
	        HammerGestureConfig.prototype.buildHammer = function (element) {
	            var mc = new Hammer(element);
	            mc.get('pinch').set({ enable: true });
	            mc.get('rotate').set({ enable: true });
	            for (var eventName in this.overrides) {
	                mc.get(eventName).set(this.overrides[eventName]);
	            }
	            return mc;
	        };
	        HammerGestureConfig.decorators = [
	            { type: _angular_core.Injectable },
	        ];
	        /** @nocollapse */
	        HammerGestureConfig.ctorParameters = [];
	        return HammerGestureConfig;
	    }());
	    var HammerGesturesPlugin = (function (_super) {
	        __extends$6(HammerGesturesPlugin, _super);
	        function HammerGesturesPlugin(_config) {
	            _super.call(this);
	            this._config = _config;
	        }
	        HammerGesturesPlugin.prototype.supports = function (eventName) {
	            if (!EVENT_NAMES.hasOwnProperty(eventName.toLowerCase()) && !this.isCustomEvent(eventName)) {
	                return false;
	            }
	            if (!window.Hammer) {
	                throw new Error("Hammer.js is not loaded, can not bind " + eventName + " event");
	            }
	            return true;
	        };
	        HammerGesturesPlugin.prototype.addEventListener = function (element, eventName, handler) {
	            var _this = this;
	            var zone = this.manager.getZone();
	            eventName = eventName.toLowerCase();
	            return zone.runOutsideAngular(function () {
	                // Creating the manager bind events, must be done outside of angular
	                var mc = _this._config.buildHammer(element);
	                var callback = function (eventObj) {
	                    zone.runGuarded(function () { handler(eventObj); });
	                };
	                mc.on(eventName, callback);
	                return function () { return mc.off(eventName, callback); };
	            });
	        };
	        HammerGesturesPlugin.prototype.isCustomEvent = function (eventName) { return this._config.events.indexOf(eventName) > -1; };
	        HammerGesturesPlugin.decorators = [
	            { type: _angular_core.Injectable },
	        ];
	        /** @nocollapse */
	        HammerGesturesPlugin.ctorParameters = [
	            { type: HammerGestureConfig, decorators: [{ type: _angular_core.Inject, args: [HAMMER_GESTURE_CONFIG,] },] },
	        ];
	        return HammerGesturesPlugin;
	    }(EventManagerPlugin));

	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    var __extends$7 = (this && this.__extends) || function (d, b) {
	        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	    var MODIFIER_KEYS = ['alt', 'control', 'meta', 'shift'];
	    var MODIFIER_KEY_GETTERS = {
	        'alt': function (event) { return event.altKey; },
	        'control': function (event) { return event.ctrlKey; },
	        'meta': function (event) { return event.metaKey; },
	        'shift': function (event) { return event.shiftKey; }
	    };
	    /**
	     * @experimental
	     */
	    var KeyEventsPlugin = (function (_super) {
	        __extends$7(KeyEventsPlugin, _super);
	        function KeyEventsPlugin() {
	            _super.call(this);
	        }
	        KeyEventsPlugin.prototype.supports = function (eventName) { return KeyEventsPlugin.parseEventName(eventName) != null; };
	        KeyEventsPlugin.prototype.addEventListener = function (element, eventName, handler) {
	            var parsedEvent = KeyEventsPlugin.parseEventName(eventName);
	            var outsideHandler = KeyEventsPlugin.eventCallback(parsedEvent['fullKey'], handler, this.manager.getZone());
	            return this.manager.getZone().runOutsideAngular(function () {
	                return getDOM().onAndCancel(element, parsedEvent['domEventName'], outsideHandler);
	            });
	        };
	        KeyEventsPlugin.parseEventName = function (eventName) {
	            var parts = eventName.toLowerCase().split('.');
	            var domEventName = parts.shift();
	            if ((parts.length === 0) || !(domEventName === 'keydown' || domEventName === 'keyup')) {
	                return null;
	            }
	            var key = KeyEventsPlugin._normalizeKey(parts.pop());
	            var fullKey = '';
	            MODIFIER_KEYS.forEach(function (modifierName) {
	                var index = parts.indexOf(modifierName);
	                if (index > -1) {
	                    parts.splice(index, 1);
	                    fullKey += modifierName + '.';
	                }
	            });
	            fullKey += key;
	            if (parts.length != 0 || key.length === 0) {
	                // returning null instead of throwing to let another plugin process the event
	                return null;
	            }
	            var result = {};
	            result['domEventName'] = domEventName;
	            result['fullKey'] = fullKey;
	            return result;
	        };
	        KeyEventsPlugin.getEventFullKey = function (event) {
	            var fullKey = '';
	            var key = getDOM().getEventKey(event);
	            key = key.toLowerCase();
	            if (key === ' ') {
	                key = 'space'; // for readability
	            }
	            else if (key === '.') {
	                key = 'dot'; // because '.' is used as a separator in event names
	            }
	            MODIFIER_KEYS.forEach(function (modifierName) {
	                if (modifierName != key) {
	                    var modifierGetter = MODIFIER_KEY_GETTERS[modifierName];
	                    if (modifierGetter(event)) {
	                        fullKey += modifierName + '.';
	                    }
	                }
	            });
	            fullKey += key;
	            return fullKey;
	        };
	        KeyEventsPlugin.eventCallback = function (fullKey, handler, zone) {
	            return function (event /** TODO #9100 */) {
	                if (KeyEventsPlugin.getEventFullKey(event) === fullKey) {
	                    zone.runGuarded(function () { return handler(event); });
	                }
	            };
	        };
	        /** @internal */
	        KeyEventsPlugin._normalizeKey = function (keyName) {
	            // TODO: switch to a Map if the mapping grows too much
	            switch (keyName) {
	                case 'esc':
	                    return 'escape';
	                default:
	                    return keyName;
	            }
	        };
	        KeyEventsPlugin.decorators = [
	            { type: _angular_core.Injectable },
	        ];
	        /** @nocollapse */
	        KeyEventsPlugin.ctorParameters = [];
	        return KeyEventsPlugin;
	    }(EventManagerPlugin));

	    /**
	     * A pattern that recognizes a commonly useful subset of URLs that are safe.
	     *
	     * This regular expression matches a subset of URLs that will not cause script
	     * execution if used in URL context within a HTML document. Specifically, this
	     * regular expression matches if (comment from here on and regex copied from
	     * Soy's EscapingConventions):
	     * (1) Either a protocol in a whitelist (http, https, mailto or ftp).
	     * (2) or no protocol.  A protocol must be followed by a colon. The below
	     *     allows that by allowing colons only after one of the characters [/?#].
	     *     A colon after a hash (#) must be in the fragment.
	     *     Otherwise, a colon after a (?) must be in a query.
	     *     Otherwise, a colon after a single solidus (/) must be in a path.
	     *     Otherwise, a colon after a double solidus (//) must be in the authority
	     *     (before port).
	     *
	     * The pattern disallows &, used in HTML entity declarations before
	     * one of the characters in [/?#]. This disallows HTML entities used in the
	     * protocol name, which should never happen, e.g. "h&#116;tp" for "http".
	     * It also disallows HTML entities in the first path part of a relative path,
	     * e.g. "foo&lt;bar/baz".  Our existing escaping functions should not produce
	     * that. More importantly, it disallows masking of a colon,
	     * e.g. "javascript&#58;...".
	     *
	     * This regular expression was taken from the Closure sanitization library.
	     */
	    var SAFE_URL_PATTERN = /^(?:(?:https?|mailto|ftp|tel|file):|[^&:/?#]*(?:[/?#]|$))/gi;
	    /** A pattern that matches safe data URLs. Only matches image, video and audio types. */
	    var DATA_URL_PATTERN = /^data:(?:image\/(?:bmp|gif|jpeg|jpg|png|tiff|webp)|video\/(?:mpeg|mp4|ogg|webm)|audio\/(?:mp3|oga|ogg|opus));base64,[a-z0-9+\/]+=*$/i;
	    function sanitizeUrl(url) {
	        url = String(url);
	        if (url.match(SAFE_URL_PATTERN) || url.match(DATA_URL_PATTERN))
	            return url;
	        if (_angular_core.isDevMode()) {
	            getDOM().log("WARNING: sanitizing unsafe URL value " + url + " (see http://g.co/ng/security#xss)");
	        }
	        return 'unsafe:' + url;
	    }
	    function sanitizeSrcset(srcset) {
	        srcset = String(srcset);
	        return srcset.split(',').map(function (srcset) { return sanitizeUrl(srcset.trim()); }).join(', ');
	    }

	    /** A <body> element that can be safely used to parse untrusted HTML. Lazily initialized below. */
	    var inertElement = null;
	    /** Lazily initialized to make sure the DOM adapter gets set before use. */
	    var DOM = null;
	    /** Returns an HTML element that is guaranteed to not execute code when creating elements in it. */
	    function getInertElement() {
	        if (inertElement)
	            return inertElement;
	        DOM = getDOM();
	        // Prefer using <template> element if supported.
	        var templateEl = DOM.createElement('template');
	        if ('content' in templateEl)
	            return templateEl;
	        var doc = DOM.createHtmlDocument();
	        inertElement = DOM.querySelector(doc, 'body');
	        if (inertElement == null) {
	            // usually there should be only one body element in the document, but IE doesn't have any, so we
	            // need to create one.
	            var html = DOM.createElement('html', doc);
	            inertElement = DOM.createElement('body', doc);
	            DOM.appendChild(html, inertElement);
	            DOM.appendChild(doc, html);
	        }
	        return inertElement;
	    }
	    function tagSet(tags) {
	        var res = {};
	        for (var _i = 0, _a = tags.split(','); _i < _a.length; _i++) {
	            var t = _a[_i];
	            res[t] = true;
	        }
	        return res;
	    }
	    function merge() {
	        var sets = [];
	        for (var _i = 0; _i < arguments.length; _i++) {
	            sets[_i - 0] = arguments[_i];
	        }
	        var res = {};
	        for (var _a = 0, sets_1 = sets; _a < sets_1.length; _a++) {
	            var s = sets_1[_a];
	            for (var v in s) {
	                if (s.hasOwnProperty(v))
	                    res[v] = true;
	            }
	        }
	        return res;
	    }
	    // Good source of info about elements and attributes
	    // http://dev.w3.org/html5/spec/Overview.html#semantics
	    // http://simon.html5.org/html-elements
	    // Safe Void Elements - HTML5
	    // http://dev.w3.org/html5/spec/Overview.html#void-elements
	    var VOID_ELEMENTS = tagSet('area,br,col,hr,img,wbr');
	    // Elements that you can, intentionally, leave open (and which close themselves)
	    // http://dev.w3.org/html5/spec/Overview.html#optional-tags
	    var OPTIONAL_END_TAG_BLOCK_ELEMENTS = tagSet('colgroup,dd,dt,li,p,tbody,td,tfoot,th,thead,tr');
	    var OPTIONAL_END_TAG_INLINE_ELEMENTS = tagSet('rp,rt');
	    var OPTIONAL_END_TAG_ELEMENTS = merge(OPTIONAL_END_TAG_INLINE_ELEMENTS, OPTIONAL_END_TAG_BLOCK_ELEMENTS);
	    // Safe Block Elements - HTML5
	    var BLOCK_ELEMENTS = merge(OPTIONAL_END_TAG_BLOCK_ELEMENTS, tagSet('address,article,' +
	        'aside,blockquote,caption,center,del,details,dialog,dir,div,dl,figure,figcaption,footer,h1,h2,h3,h4,h5,' +
	        'h6,header,hgroup,hr,ins,main,map,menu,nav,ol,pre,section,summary,table,ul'));
	    // Inline Elements - HTML5
	    var INLINE_ELEMENTS = merge(OPTIONAL_END_TAG_INLINE_ELEMENTS, tagSet('a,abbr,acronym,audio,b,' +
	        'bdi,bdo,big,br,cite,code,del,dfn,em,font,i,img,ins,kbd,label,map,mark,picture,q,ruby,rp,rt,s,' +
	        'samp,small,source,span,strike,strong,sub,sup,time,track,tt,u,var,video'));
	    var VALID_ELEMENTS = merge(VOID_ELEMENTS, BLOCK_ELEMENTS, INLINE_ELEMENTS, OPTIONAL_END_TAG_ELEMENTS);
	    // Attributes that have href and hence need to be sanitized
	    var URI_ATTRS = tagSet('background,cite,href,itemtype,longdesc,poster,src,xlink:href');
	    // Attributes that have special href set hence need to be sanitized
	    var SRCSET_ATTRS = tagSet('srcset');
	    var HTML_ATTRS = tagSet('abbr,accesskey,align,alt,autoplay,axis,bgcolor,border,cellpadding,cellspacing,class,clear,color,cols,colspan,' +
	        'compact,controls,coords,datetime,default,dir,download,face,headers,height,hidden,hreflang,hspace,' +
	        'ismap,itemscope,itemprop,kind,label,lang,language,loop,media,muted,nohref,nowrap,open,preload,rel,rev,role,rows,rowspan,rules,' +
	        'scope,scrolling,shape,size,sizes,span,srclang,start,summary,tabindex,target,title,translate,type,usemap,' +
	        'valign,value,vspace,width');
	    // NB: This currently conciously doesn't support SVG. SVG sanitization has had several security
	    // issues in the past, so it seems safer to leave it out if possible. If support for binding SVG via
	    // innerHTML is required, SVG attributes should be added here.
	    // NB: Sanitization does not allow <form> elements or other active elements (<button> etc). Those
	    // can be sanitized, but they increase security surface area without a legitimate use case, so they
	    // are left out here.
	    var VALID_ATTRS = merge(URI_ATTRS, SRCSET_ATTRS, HTML_ATTRS);
	    /**
	     * SanitizingHtmlSerializer serializes a DOM fragment, stripping out any unsafe elements and unsafe
	     * attributes.
	     */
	    var SanitizingHtmlSerializer = (function () {
	        function SanitizingHtmlSerializer() {
	            // Explicitly track if something was stripped, to avoid accidentally warning of sanitization just
	            // because characters were re-encoded.
	            this.sanitizedSomething = false;
	            this.buf = [];
	        }
	        SanitizingHtmlSerializer.prototype.sanitizeChildren = function (el) {
	            // This cannot use a TreeWalker, as it has to run on Angular's various DOM adapters.
	            // However this code never accesses properties off of `document` before deleting its contents
	            // again, so it shouldn't be vulnerable to DOM clobbering.
	            var current = el.firstChild;
	            while (current) {
	                if (DOM.isElementNode(current)) {
	                    this.startElement(current);
	                }
	                else if (DOM.isTextNode(current)) {
	                    this.chars(DOM.nodeValue(current));
	                }
	                else {
	                    // Strip non-element, non-text nodes.
	                    this.sanitizedSomething = true;
	                }
	                if (DOM.firstChild(current)) {
	                    current = DOM.firstChild(current);
	                    continue;
	                }
	                while (current) {
	                    // Leaving the element. Walk up and to the right, closing tags as we go.
	                    if (DOM.isElementNode(current)) {
	                        this.endElement(current);
	                    }
	                    if (DOM.nextSibling(current)) {
	                        current = DOM.nextSibling(current);
	                        break;
	                    }
	                    current = DOM.parentElement(current);
	                }
	            }
	            return this.buf.join('');
	        };
	        SanitizingHtmlSerializer.prototype.startElement = function (element) {
	            var _this = this;
	            var tagName = DOM.nodeName(element).toLowerCase();
	            if (!VALID_ELEMENTS.hasOwnProperty(tagName)) {
	                this.sanitizedSomething = true;
	                return;
	            }
	            this.buf.push('<');
	            this.buf.push(tagName);
	            DOM.attributeMap(element).forEach(function (value, attrName) {
	                var lower = attrName.toLowerCase();
	                if (!VALID_ATTRS.hasOwnProperty(lower)) {
	                    _this.sanitizedSomething = true;
	                    return;
	                }
	                // TODO(martinprobst): Special case image URIs for data:image/...
	                if (URI_ATTRS[lower])
	                    value = sanitizeUrl(value);
	                if (SRCSET_ATTRS[lower])
	                    value = sanitizeSrcset(value);
	                _this.buf.push(' ');
	                _this.buf.push(attrName);
	                _this.buf.push('="');
	                _this.buf.push(encodeEntities(value));
	                _this.buf.push('"');
	            });
	            this.buf.push('>');
	        };
	        SanitizingHtmlSerializer.prototype.endElement = function (current) {
	            var tagName = DOM.nodeName(current).toLowerCase();
	            if (VALID_ELEMENTS.hasOwnProperty(tagName) && !VOID_ELEMENTS.hasOwnProperty(tagName)) {
	                this.buf.push('</');
	                this.buf.push(tagName);
	                this.buf.push('>');
	            }
	        };
	        SanitizingHtmlSerializer.prototype.chars = function (chars /** TODO #9100 */) { this.buf.push(encodeEntities(chars)); };
	        return SanitizingHtmlSerializer;
	    }());
	    // Regular Expressions for parsing tags and attributes
	    var SURROGATE_PAIR_REGEXP = /[\uD800-\uDBFF][\uDC00-\uDFFF]/g;
	    // ! to ~ is the ASCII range.
	    var NON_ALPHANUMERIC_REGEXP = /([^\#-~ |!])/g;
	    /**
	     * Escapes all potentially dangerous characters, so that the
	     * resulting string can be safely inserted into attribute or
	     * element text.
	     * @param value
	     * @returns {string} escaped text
	     */
	    function encodeEntities(value) {
	        return value.replace(/&/g, '&amp;')
	            .replace(SURROGATE_PAIR_REGEXP, function (match) {
	            var hi = match.charCodeAt(0);
	            var low = match.charCodeAt(1);
	            return '&#' + (((hi - 0xD800) * 0x400) + (low - 0xDC00) + 0x10000) + ';';
	        })
	            .replace(NON_ALPHANUMERIC_REGEXP, function (match) { return '&#' + match.charCodeAt(0) + ';'; })
	            .replace(/</g, '&lt;')
	            .replace(/>/g, '&gt;');
	    }
	    /**
	     * When IE9-11 comes across an unknown namespaced attribute e.g. 'xlink:foo' it adds 'xmlns:ns1'
	     * attribute to declare ns1 namespace and prefixes the attribute with 'ns1' (e.g. 'ns1:xlink:foo').
	     *
	     * This is undesirable since we don't want to allow any of these custom attributes. This method
	     * strips them all.
	     */
	    function stripCustomNsAttrs(el) {
	        DOM.attributeMap(el).forEach(function (_, attrName) {
	            if (attrName === 'xmlns:ns1' || attrName.indexOf('ns1:') === 0) {
	                DOM.removeAttribute(el, attrName);
	            }
	        });
	        for (var _i = 0, _a = DOM.childNodesAsList(el); _i < _a.length; _i++) {
	            var n = _a[_i];
	            if (DOM.isElementNode(n))
	                stripCustomNsAttrs(n);
	        }
	    }
	    /**
	     * Sanitizes the given unsafe, untrusted HTML fragment, and returns HTML text that is safe to add to
	     * the DOM in a browser environment.
	     */
	    function sanitizeHtml(unsafeHtmlInput) {
	        try {
	            var containerEl = getInertElement();
	            // Make sure unsafeHtml is actually a string (TypeScript types are not enforced at runtime).
	            var unsafeHtml = unsafeHtmlInput ? String(unsafeHtmlInput) : '';
	            // mXSS protection. Repeatedly parse the document to make sure it stabilizes, so that a browser
	            // trying to auto-correct incorrect HTML cannot cause formerly inert HTML to become dangerous.
	            var mXSSAttempts = 5;
	            var parsedHtml = unsafeHtml;
	            do {
	                if (mXSSAttempts === 0) {
	                    throw new Error('Failed to sanitize html because the input is unstable');
	                }
	                mXSSAttempts--;
	                unsafeHtml = parsedHtml;
	                DOM.setInnerHTML(containerEl, unsafeHtml);
	                if (DOM.defaultDoc().documentMode) {
	                    // strip custom-namespaced attributes on IE<=11
	                    stripCustomNsAttrs(containerEl);
	                }
	                parsedHtml = DOM.getInnerHTML(containerEl);
	            } while (unsafeHtml !== parsedHtml);
	            var sanitizer = new SanitizingHtmlSerializer();
	            var safeHtml = sanitizer.sanitizeChildren(DOM.getTemplateContent(containerEl) || containerEl);
	            // Clear out the body element.
	            var parent_1 = DOM.getTemplateContent(containerEl) || containerEl;
	            for (var _i = 0, _a = DOM.childNodesAsList(parent_1); _i < _a.length; _i++) {
	                var child = _a[_i];
	                DOM.removeChild(parent_1, child);
	            }
	            if (_angular_core.isDevMode() && sanitizer.sanitizedSomething) {
	                DOM.log('WARNING: sanitizing HTML stripped some content (see http://g.co/ng/security#xss).');
	            }
	            return safeHtml;
	        }
	        catch (e) {
	            // In case anything goes wrong, clear out inertElement to reset the entire DOM structure.
	            inertElement = null;
	            throw e;
	        }
	    }

	    /**
	     * Regular expression for safe style values.
	     *
	     * Quotes (" and ') are allowed, but a check must be done elsewhere to ensure they're balanced.
	     *
	     * ',' allows multiple values to be assigned to the same property (e.g. background-attachment or
	     * font-family) and hence could allow multiple values to get injected, but that should pose no risk
	     * of XSS.
	     *
	     * The function expression checks only for XSS safety, not for CSS validity.
	     *
	     * This regular expression was taken from the Closure sanitization library, and augmented for
	     * transformation values.
	     */
	    var VALUES = '[-,."\'%_!# a-zA-Z0-9]+';
	    var TRANSFORMATION_FNS = '(?:matrix|translate|scale|rotate|skew|perspective)(?:X|Y|3d)?';
	    var COLOR_FNS = '(?:rgb|hsl)a?';
	    var FN_ARGS = '\\([-0-9.%, a-zA-Z]+\\)';
	    var SAFE_STYLE_VALUE = new RegExp("^(" + VALUES + "|(?:" + TRANSFORMATION_FNS + "|" + COLOR_FNS + ")" + FN_ARGS + ")$", 'g');
	    /**
	     * Matches a `url(...)` value with an arbitrary argument as long as it does
	     * not contain parentheses.
	     *
	     * The URL value still needs to be sanitized separately.
	     *
	     * `url(...)` values are a very common use case, e.g. for `background-image`. With carefully crafted
	     * CSS style rules, it is possible to construct an information leak with `url` values in CSS, e.g.
	     * by observing whether scroll bars are displayed, or character ranges used by a font face
	     * definition.
	     *
	     * Angular only allows binding CSS values (as opposed to entire CSS rules), so it is unlikely that
	     * binding a URL value without further cooperation from the page will cause an information leak, and
	     * if so, it is just a leak, not a full blown XSS vulnerability.
	     *
	     * Given the common use case, low likelihood of attack vector, and low impact of an attack, this
	     * code is permissive and allows URLs that sanitize otherwise.
	     */
	    var URL_RE = /^url\(([^)]+)\)$/;
	    /**
	     * Checks that quotes (" and ') are properly balanced inside a string. Assumes
	     * that neither escape (\) nor any other character that could result in
	     * breaking out of a string parsing context are allowed;
	     * see http://www.w3.org/TR/css3-syntax/#string-token-diagram.
	     *
	     * This code was taken from the Closure sanitization library.
	     */
	    function hasBalancedQuotes(value) {
	        var outsideSingle = true;
	        var outsideDouble = true;
	        for (var i = 0; i < value.length; i++) {
	            var c = value.charAt(i);
	            if (c === '\'' && outsideDouble) {
	                outsideSingle = !outsideSingle;
	            }
	            else if (c === '"' && outsideSingle) {
	                outsideDouble = !outsideDouble;
	            }
	        }
	        return outsideSingle && outsideDouble;
	    }
	    /**
	     * Sanitizes the given untrusted CSS style property value (i.e. not an entire object, just a single
	     * value) and returns a value that is safe to use in a browser environment.
	     */
	    function sanitizeStyle(value) {
	        value = String(value).trim(); // Make sure it's actually a string.
	        if (!value)
	            return '';
	        // Single url(...) values are supported, but only for URLs that sanitize cleanly. See above for
	        // reasoning behind this.
	        var urlMatch = value.match(URL_RE);
	        if ((urlMatch && sanitizeUrl(urlMatch[1]) === urlMatch[1]) ||
	            value.match(SAFE_STYLE_VALUE) && hasBalancedQuotes(value)) {
	            return value; // Safe style values.
	        }
	        if (_angular_core.isDevMode()) {
	            getDOM().log("WARNING: sanitizing unsafe style value " + value + " (see http://g.co/ng/security#xss).");
	        }
	        return 'unsafe';
	    }

	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    var __extends$8 = (this && this.__extends) || function (d, b) {
	        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	    /**
	     * DomSanitizer helps preventing Cross Site Scripting Security bugs (XSS) by sanitizing
	     * values to be safe to use in the different DOM contexts.
	     *
	     * For example, when binding a URL in an `<a [href]="someValue">` hyperlink, `someValue` will be
	     * sanitized so that an attacker cannot inject e.g. a `javascript:` URL that would execute code on
	     * the website.
	     *
	     * In specific situations, it might be necessary to disable sanitization, for example if the
	     * application genuinely needs to produce a `javascript:` style link with a dynamic value in it.
	     * Users can bypass security by constructing a value with one of the `bypassSecurityTrust...`
	     * methods, and then binding to that value from the template.
	     *
	     * These situations should be very rare, and extraordinary care must be taken to avoid creating a
	     * Cross Site Scripting (XSS) security bug!
	     *
	     * When using `bypassSecurityTrust...`, make sure to call the method as early as possible and as
	     * close as possible to the source of the value, to make it easy to verify no security bug is
	     * created by its use.
	     *
	     * It is not required (and not recommended) to bypass security if the value is safe, e.g. a URL that
	     * does not start with a suspicious protocol, or an HTML snippet that does not contain dangerous
	     * code. The sanitizer leaves safe values intact.
	     *
	     * @security Calling any of the `bypassSecurityTrust...` APIs disables Angular's built-in
	     * sanitization for the value passed in. Carefully check and audit all values and code paths going
	     * into this call. Make sure any user data is appropriately escaped for this security context.
	     * For more detail, see the [Security Guide](http://g.co/ng/security).
	     *
	     * @stable
	     */
	    var DomSanitizer = (function () {
	        function DomSanitizer() {
	        }
	        return DomSanitizer;
	    }());
	    var DomSanitizerImpl = (function (_super) {
	        __extends$8(DomSanitizerImpl, _super);
	        function DomSanitizerImpl() {
	            _super.apply(this, arguments);
	        }
	        DomSanitizerImpl.prototype.sanitize = function (ctx, value) {
	            if (value == null)
	                return null;
	            switch (ctx) {
	                case _angular_core.SecurityContext.NONE:
	                    return value;
	                case _angular_core.SecurityContext.HTML:
	                    if (value instanceof SafeHtmlImpl)
	                        return value.changingThisBreaksApplicationSecurity;
	                    this.checkNotSafeValue(value, 'HTML');
	                    return sanitizeHtml(String(value));
	                case _angular_core.SecurityContext.STYLE:
	                    if (value instanceof SafeStyleImpl)
	                        return value.changingThisBreaksApplicationSecurity;
	                    this.checkNotSafeValue(value, 'Style');
	                    return sanitizeStyle(value);
	                case _angular_core.SecurityContext.SCRIPT:
	                    if (value instanceof SafeScriptImpl)
	                        return value.changingThisBreaksApplicationSecurity;
	                    this.checkNotSafeValue(value, 'Script');
	                    throw new Error('unsafe value used in a script context');
	                case _angular_core.SecurityContext.URL:
	                    if (value instanceof SafeResourceUrlImpl || value instanceof SafeUrlImpl) {
	                        // Allow resource URLs in URL contexts, they are strictly more trusted.
	                        return value.changingThisBreaksApplicationSecurity;
	                    }
	                    this.checkNotSafeValue(value, 'URL');
	                    return sanitizeUrl(String(value));
	                case _angular_core.SecurityContext.RESOURCE_URL:
	                    if (value instanceof SafeResourceUrlImpl) {
	                        return value.changingThisBreaksApplicationSecurity;
	                    }
	                    this.checkNotSafeValue(value, 'ResourceURL');
	                    throw new Error('unsafe value used in a resource URL context (see http://g.co/ng/security#xss)');
	                default:
	                    throw new Error("Unexpected SecurityContext " + ctx + " (see http://g.co/ng/security#xss)");
	            }
	        };
	        DomSanitizerImpl.prototype.checkNotSafeValue = function (value, expectedType) {
	            if (value instanceof SafeValueImpl) {
	                throw new Error(("Required a safe " + expectedType + ", got a " + value.getTypeName() + " ") +
	                    "(see http://g.co/ng/security#xss)");
	            }
	        };
	        DomSanitizerImpl.prototype.bypassSecurityTrustHtml = function (value) { return new SafeHtmlImpl(value); };
	        DomSanitizerImpl.prototype.bypassSecurityTrustStyle = function (value) { return new SafeStyleImpl(value); };
	        DomSanitizerImpl.prototype.bypassSecurityTrustScript = function (value) { return new SafeScriptImpl(value); };
	        DomSanitizerImpl.prototype.bypassSecurityTrustUrl = function (value) { return new SafeUrlImpl(value); };
	        DomSanitizerImpl.prototype.bypassSecurityTrustResourceUrl = function (value) {
	            return new SafeResourceUrlImpl(value);
	        };
	        DomSanitizerImpl.decorators = [
	            { type: _angular_core.Injectable },
	        ];
	        /** @nocollapse */
	        DomSanitizerImpl.ctorParameters = [];
	        return DomSanitizerImpl;
	    }(DomSanitizer));
	    var SafeValueImpl = (function () {
	        function SafeValueImpl(changingThisBreaksApplicationSecurity) {
	            this.changingThisBreaksApplicationSecurity = changingThisBreaksApplicationSecurity;
	            // empty
	        }
	        SafeValueImpl.prototype.toString = function () {
	            return ("SafeValue must use [property]=binding: " + this.changingThisBreaksApplicationSecurity) +
	                " (see http://g.co/ng/security#xss)";
	        };
	        return SafeValueImpl;
	    }());
	    var SafeHtmlImpl = (function (_super) {
	        __extends$8(SafeHtmlImpl, _super);
	        function SafeHtmlImpl() {
	            _super.apply(this, arguments);
	        }
	        SafeHtmlImpl.prototype.getTypeName = function () { return 'HTML'; };
	        return SafeHtmlImpl;
	    }(SafeValueImpl));
	    var SafeStyleImpl = (function (_super) {
	        __extends$8(SafeStyleImpl, _super);
	        function SafeStyleImpl() {
	            _super.apply(this, arguments);
	        }
	        SafeStyleImpl.prototype.getTypeName = function () { return 'Style'; };
	        return SafeStyleImpl;
	    }(SafeValueImpl));
	    var SafeScriptImpl = (function (_super) {
	        __extends$8(SafeScriptImpl, _super);
	        function SafeScriptImpl() {
	            _super.apply(this, arguments);
	        }
	        SafeScriptImpl.prototype.getTypeName = function () { return 'Script'; };
	        return SafeScriptImpl;
	    }(SafeValueImpl));
	    var SafeUrlImpl = (function (_super) {
	        __extends$8(SafeUrlImpl, _super);
	        function SafeUrlImpl() {
	            _super.apply(this, arguments);
	        }
	        SafeUrlImpl.prototype.getTypeName = function () { return 'URL'; };
	        return SafeUrlImpl;
	    }(SafeValueImpl));
	    var SafeResourceUrlImpl = (function (_super) {
	        __extends$8(SafeResourceUrlImpl, _super);
	        function SafeResourceUrlImpl() {
	            _super.apply(this, arguments);
	        }
	        SafeResourceUrlImpl.prototype.getTypeName = function () { return 'ResourceURL'; };
	        return SafeResourceUrlImpl;
	    }(SafeValueImpl));

	    var INTERNAL_BROWSER_PLATFORM_PROVIDERS = [
	        { provide: _angular_core.PLATFORM_INITIALIZER, useValue: initDomAdapter, multi: true },
	        { provide: _angular_common.PlatformLocation, useClass: BrowserPlatformLocation }
	    ];
	    /**
	     * @security Replacing built-in sanitization providers exposes the application to XSS risks.
	     * Attacker-controlled data introduced by an unsanitized provider could expose your
	     * application to XSS risks. For more detail, see the [Security Guide](http://g.co/ng/security).
	     * @experimental
	     */
	    var BROWSER_SANITIZATION_PROVIDERS = [
	        { provide: _angular_core.Sanitizer, useExisting: DomSanitizer },
	        { provide: DomSanitizer, useClass: DomSanitizerImpl },
	    ];
	    /**
	     * @stable
	     */
	    var platformBrowser = _angular_core.createPlatformFactory(_angular_core.platformCore, 'browser', INTERNAL_BROWSER_PLATFORM_PROVIDERS);
	    function initDomAdapter() {
	        BrowserDomAdapter.makeCurrent();
	        BrowserGetTestability.init();
	    }
	    function errorHandler() {
	        return new _angular_core.ErrorHandler();
	    }
	    function _document() {
	        return getDOM().defaultDoc();
	    }
	    function _resolveDefaultAnimationDriver() {
	        if (getDOM().supportsWebAnimation()) {
	            return new WebAnimationsDriver();
	        }
	        return AnimationDriver.NOOP;
	    }
	    /**
	     * The ng module for the browser.
	     *
	     * @stable
	     */
	    var BrowserModule = (function () {
	        function BrowserModule(parentModule) {
	            if (parentModule) {
	                throw new Error("BrowserModule has already been loaded. If you need access to common directives such as NgIf and NgFor from a lazy loaded module, import CommonModule instead.");
	            }
	        }
	        BrowserModule.decorators = [
	            { type: _angular_core.NgModule, args: [{
	                        providers: [
	                            BROWSER_SANITIZATION_PROVIDERS, { provide: _angular_core.ErrorHandler, useFactory: errorHandler, deps: [] },
	                            { provide: DOCUMENT, useFactory: _document, deps: [] },
	                            { provide: EVENT_MANAGER_PLUGINS, useClass: DomEventsPlugin, multi: true },
	                            { provide: EVENT_MANAGER_PLUGINS, useClass: KeyEventsPlugin, multi: true },
	                            { provide: EVENT_MANAGER_PLUGINS, useClass: HammerGesturesPlugin, multi: true },
	                            { provide: HAMMER_GESTURE_CONFIG, useClass: HammerGestureConfig },
	                            { provide: DomRootRenderer, useClass: DomRootRenderer_ },
	                            { provide: _angular_core.RootRenderer, useExisting: DomRootRenderer },
	                            { provide: SharedStylesHost, useExisting: DomSharedStylesHost },
	                            { provide: AnimationDriver, useFactory: _resolveDefaultAnimationDriver }, DomSharedStylesHost,
	                            _angular_core.Testability, EventManager, ELEMENT_PROBE_PROVIDERS, Title
	                        ],
	                        exports: [_angular_common.CommonModule, _angular_core.ApplicationModule]
	                    },] },
	        ];
	        /** @nocollapse */
	        BrowserModule.ctorParameters = [
	            { type: BrowserModule, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.SkipSelf },] },
	        ];
	        return BrowserModule;
	    }());

	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    /**
	     * JS version of browser APIs. This library can only run in the browser.
	     */
	    var win = typeof window !== 'undefined' && window || {};

	    var ChangeDetectionPerfRecord = (function () {
	        function ChangeDetectionPerfRecord(msPerTick, numTicks) {
	            this.msPerTick = msPerTick;
	            this.numTicks = numTicks;
	        }
	        return ChangeDetectionPerfRecord;
	    }());
	    /**
	     * Entry point for all Angular debug tools. This object corresponds to the `ng`
	     * global variable accessible in the dev console.
	     */
	    var AngularTools = (function () {
	        function AngularTools(ref) {
	            this.profiler = new AngularProfiler(ref);
	        }
	        return AngularTools;
	    }());
	    /**
	     * Entry point for all Angular profiling-related debug tools. This object
	     * corresponds to the `ng.profiler` in the dev console.
	     */
	    var AngularProfiler = (function () {
	        function AngularProfiler(ref) {
	            this.appRef = ref.injector.get(_angular_core.ApplicationRef);
	        }
	        /**
	         * Exercises change detection in a loop and then prints the average amount of
	         * time in milliseconds how long a single round of change detection takes for
	         * the current state of the UI. It runs a minimum of 5 rounds for a minimum
	         * of 500 milliseconds.
	         *
	         * Optionally, a user may pass a `config` parameter containing a map of
	         * options. Supported options are:
	         *
	         * `record` (boolean) - causes the profiler to record a CPU profile while
	         * it exercises the change detector. Example:
	         *
	         * ```
	         * ng.profiler.timeChangeDetection({record: true})
	         * ```
	         */
	        AngularProfiler.prototype.timeChangeDetection = function (config) {
	            var record = config && config['record'];
	            var profileName = 'Change Detection';
	            // Profiler is not available in Android browsers, nor in IE 9 without dev tools opened
	            var isProfilerAvailable = isPresent(win.console.profile);
	            if (record && isProfilerAvailable) {
	                win.console.profile(profileName);
	            }
	            var start = getDOM().performanceNow();
	            var numTicks = 0;
	            while (numTicks < 5 || (getDOM().performanceNow() - start) < 500) {
	                this.appRef.tick();
	                numTicks++;
	            }
	            var end = getDOM().performanceNow();
	            if (record && isProfilerAvailable) {
	                // need to cast to <any> because type checker thinks there's no argument
	                // while in fact there is:
	                //
	                // https://developer.mozilla.org/en-US/docs/Web/API/Console/profileEnd
	                win.console.profileEnd(profileName);
	            }
	            var msPerTick = (end - start) / numTicks;
	            win.console.log("ran " + numTicks + " change detection cycles");
	            win.console.log(msPerTick.toFixed(2) + " ms per check");
	            return new ChangeDetectionPerfRecord(msPerTick, numTicks);
	        };
	        return AngularProfiler;
	    }());

	    var context = global$1;
	    /**
	     * Enabled Angular 2 debug tools that are accessible via your browser's
	     * developer console.
	     *
	     * Usage:
	     *
	     * 1. Open developer console (e.g. in Chrome Ctrl + Shift + j)
	     * 1. Type `ng.` (usually the console will show auto-complete suggestion)
	     * 1. Try the change detection profiler `ng.profiler.timeChangeDetection()`
	     *    then hit Enter.
	     *
	     * @experimental All debugging apis are currently experimental.
	     */
	    function enableDebugTools(ref) {
	        Object.assign(context.ng, new AngularTools(ref));
	        return ref;
	    }
	    /**
	     * Disables Angular 2 tools.
	     *
	     * @experimental All debugging apis are currently experimental.
	     */
	    function disableDebugTools() {
	        if (context.ng) {
	            delete context.ng.profiler;
	        }
	    }

	    /**
	     * Predicates for use with {@link DebugElement}'s query functions.
	     *
	     * @experimental All debugging apis are currently experimental.
	     */
	    var By = (function () {
	        function By() {
	        }
	        /**
	         * Match all elements.
	         *
	         * ## Example
	         *
	         * {@example platform-browser/dom/debug/ts/by/by.ts region='by_all'}
	         */
	        By.all = function () { return function (debugElement) { return true; }; };
	        /**
	         * Match elements by the given CSS selector.
	         *
	         * ## Example
	         *
	         * {@example platform-browser/dom/debug/ts/by/by.ts region='by_css'}
	         */
	        By.css = function (selector) {
	            return function (debugElement) {
	                return isPresent(debugElement.nativeElement) ?
	                    getDOM().elementMatches(debugElement.nativeElement, selector) :
	                    false;
	            };
	        };
	        /**
	         * Match elements that have the given directive present.
	         *
	         * ## Example
	         *
	         * {@example platform-browser/dom/debug/ts/by/by.ts region='by_directive'}
	         */
	        By.directive = function (type) {
	            return function (debugElement) { return debugElement.providerTokens.indexOf(type) !== -1; };
	        };
	        return By;
	    }());

	    var __platform_browser_private__ = {
	        BrowserPlatformLocation: BrowserPlatformLocation,
	        DomAdapter: DomAdapter,
	        BrowserDomAdapter: BrowserDomAdapter,
	        BrowserGetTestability: BrowserGetTestability,
	        getDOM: getDOM,
	        setRootDomAdapter: setRootDomAdapter,
	        DomRootRenderer_: DomRootRenderer_,
	        DomRootRenderer: DomRootRenderer,
	        NAMESPACE_URIS: NAMESPACE_URIS,
	        shimContentAttribute: shimContentAttribute,
	        shimHostAttribute: shimHostAttribute,
	        flattenStyles: flattenStyles,
	        splitNamespace: splitNamespace,
	        isNamespaced: isNamespaced,
	        DomSharedStylesHost: DomSharedStylesHost,
	        SharedStylesHost: SharedStylesHost,
	        ELEMENT_PROBE_PROVIDERS: ELEMENT_PROBE_PROVIDERS,
	        DomEventsPlugin: DomEventsPlugin,
	        KeyEventsPlugin: KeyEventsPlugin,
	        HammerGesturesPlugin: HammerGesturesPlugin,
	        initDomAdapter: initDomAdapter,
	        INTERNAL_BROWSER_PLATFORM_PROVIDERS: INTERNAL_BROWSER_PLATFORM_PROVIDERS,
	        BROWSER_SANITIZATION_PROVIDERS: BROWSER_SANITIZATION_PROVIDERS,
	        WebAnimationsDriver: WebAnimationsDriver
	    };

	    exports.BrowserModule = BrowserModule;
	    exports.platformBrowser = platformBrowser;
	    exports.Title = Title;
	    exports.disableDebugTools = disableDebugTools;
	    exports.enableDebugTools = enableDebugTools;
	    exports.AnimationDriver = AnimationDriver;
	    exports.By = By;
	    exports.NgProbeToken = NgProbeToken;
	    exports.DOCUMENT = DOCUMENT;
	    exports.EVENT_MANAGER_PLUGINS = EVENT_MANAGER_PLUGINS;
	    exports.EventManager = EventManager;
	    exports.HAMMER_GESTURE_CONFIG = HAMMER_GESTURE_CONFIG;
	    exports.HammerGestureConfig = HammerGestureConfig;
	    exports.DomSanitizer = DomSanitizer;
	    exports.__platform_browser_private__ = __platform_browser_private__;

	}));
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 99 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {/**
	 * @license Angular v2.2.3
	 * (c) 2010-2016 Google, Inc. https://angular.io/
	 * License: MIT
	 */
	(function (global, factory) {
	     true ? factory(exports, __webpack_require__(80)) :
	    typeof define === 'function' && define.amd ? define(['exports', '@angular/core'], factory) :
	    (factory((global.ng = global.ng || {}, global.ng.common = global.ng.common || {}),global.ng.core));
	}(this, function (exports,_angular_core) { 'use strict';

	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    /**
	     * This class should not be used directly by an application developer. Instead, use
	     * {@link Location}.
	     *
	     * `PlatformLocation` encapsulates all calls to DOM apis, which allows the Router to be platform
	     * agnostic.
	     * This means that we can have different implementation of `PlatformLocation` for the different
	     * platforms
	     * that angular supports. For example, the default `PlatformLocation` is {@link
	     * BrowserPlatformLocation},
	     * however when you run your app in a WebWorker you use {@link WebWorkerPlatformLocation}.
	     *
	     * The `PlatformLocation` class is used directly by all implementations of {@link LocationStrategy}
	     * when
	     * they need to interact with the DOM apis like pushState, popState, etc...
	     *
	     * {@link LocationStrategy} in turn is used by the {@link Location} service which is used directly
	     * by
	     * the {@link Router} in order to navigate between routes. Since all interactions between {@link
	     * Router} /
	     * {@link Location} / {@link LocationStrategy} and DOM apis flow through the `PlatformLocation`
	     * class
	     * they are all platform independent.
	     *
	     * @stable
	     */
	    var PlatformLocation = (function () {
	        function PlatformLocation() {
	        }
	        Object.defineProperty(PlatformLocation.prototype, "pathname", {
	            get: function () { return null; },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(PlatformLocation.prototype, "search", {
	            get: function () { return null; },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(PlatformLocation.prototype, "hash", {
	            get: function () { return null; },
	            enumerable: true,
	            configurable: true
	        });
	        return PlatformLocation;
	    }());

	    /**
	     * `LocationStrategy` is responsible for representing and reading route state
	     * from the browser's URL. Angular provides two strategies:
	     * {@link HashLocationStrategy} and {@link PathLocationStrategy} (default).
	     *
	     * This is used under the hood of the {@link Location} service.
	     *
	     * Applications should use the {@link Router} or {@link Location} services to
	     * interact with application route state.
	     *
	     * For instance, {@link HashLocationStrategy} produces URLs like
	     * `http://example.com#/foo`, and {@link PathLocationStrategy} produces
	     * `http://example.com/foo` as an equivalent URL.
	     *
	     * See these two classes for more.
	     *
	     * @stable
	     */
	    var LocationStrategy = (function () {
	        function LocationStrategy() {
	        }
	        return LocationStrategy;
	    }());
	    /**
	     * The `APP_BASE_HREF` token represents the base href to be used with the
	     * {@link PathLocationStrategy}.
	     *
	     * If you're using {@link PathLocationStrategy}, you must provide a provider to a string
	     * representing the URL prefix that should be preserved when generating and recognizing
	     * URLs.
	     *
	     * ### Example
	     *
	     * ```typescript
	     * import {Component, NgModule} from '@angular/core';
	     * import {APP_BASE_HREF} from '@angular/common';
	     *
	     * @NgModule({
	     *   providers: [{provide: APP_BASE_HREF, useValue: '/my/app'}]
	     * })
	     * class AppModule {}
	     * ```
	     *
	     * @stable
	     */
	    var APP_BASE_HREF = new _angular_core.OpaqueToken('appBaseHref');

	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    var globalScope;
	    if (typeof window === 'undefined') {
	        if (typeof WorkerGlobalScope !== 'undefined' && self instanceof WorkerGlobalScope) {
	            // TODO: Replace any with WorkerGlobalScope from lib.webworker.d.ts #3492
	            globalScope = self;
	        }
	        else {
	            globalScope = global;
	        }
	    }
	    else {
	        globalScope = window;
	    }
	    // Need to declare a new variable for global here since TypeScript
	    // exports the original value of the symbol.
	    var _global = globalScope;
	    function getTypeNameForDebugging(type) {
	        return type['name'] || typeof type;
	    }
	    // TODO: remove calls to assert in production environment
	    // Note: Can't just export this and import in in other files
	    // as `assert` is a reserved keyword in Dart
	    _global.assert = function assert(condition) {
	        // TODO: to be fixed properly via #2830, noop for now
	    };
	    function isPresent(obj) {
	        return obj != null;
	    }
	    function isBlank(obj) {
	        return obj == null;
	    }
	    function isDate(obj) {
	        return obj instanceof Date && !isNaN(obj.valueOf());
	    }
	    function stringify(token) {
	        if (typeof token === 'string') {
	            return token;
	        }
	        if (token == null) {
	            return '' + token;
	        }
	        if (token.overriddenName) {
	            return token.overriddenName;
	        }
	        if (token.name) {
	            return token.name;
	        }
	        var res = token.toString();
	        var newLineIndex = res.indexOf('\n');
	        return newLineIndex === -1 ? res : res.substring(0, newLineIndex);
	    }
	    var NumberWrapper = (function () {
	        function NumberWrapper() {
	        }
	        NumberWrapper.parseIntAutoRadix = function (text) {
	            var result = parseInt(text);
	            if (isNaN(result)) {
	                throw new Error('Invalid integer literal when parsing ' + text);
	            }
	            return result;
	        };
	        NumberWrapper.isNumeric = function (value) { return !isNaN(value - parseFloat(value)); };
	        return NumberWrapper;
	    }());
	    function isJsObject(o) {
	        return o !== null && (typeof o === 'function' || typeof o === 'object');
	    }
	    var _symbolIterator = null;
	    function getSymbolIterator() {
	        if (!_symbolIterator) {
	            if (globalScope.Symbol && Symbol.iterator) {
	                _symbolIterator = Symbol.iterator;
	            }
	            else {
	                // es6-shim specific logic
	                var keys = Object.getOwnPropertyNames(Map.prototype);
	                for (var i = 0; i < keys.length; ++i) {
	                    var key = keys[i];
	                    if (key !== 'entries' && key !== 'size' &&
	                        Map.prototype[key] === Map.prototype['entries']) {
	                        _symbolIterator = key;
	                    }
	                }
	            }
	        }
	        return _symbolIterator;
	    }

	    /**
	     * `Location` is a service that applications can use to interact with a browser's URL.
	     * Depending on which {@link LocationStrategy} is used, `Location` will either persist
	     * to the URL's path or the URL's hash segment.
	     *
	     * Note: it's better to use {@link Router#navigate} service to trigger route changes. Use
	     * `Location` only if you need to interact with or create normalized URLs outside of
	     * routing.
	     *
	     * `Location` is responsible for normalizing the URL against the application's base href.
	     * A normalized URL is absolute from the URL host, includes the application's base href, and has no
	     * trailing slash:
	     * - `/my/app/user/123` is normalized
	     * - `my/app/user/123` **is not** normalized
	     * - `/my/app/user/123/` **is not** normalized
	     *
	     * ### Example
	     *
	     * ```
	     * import {Component} from '@angular/core';
	     * import {Location} from '@angular/common';
	     *
	     * @Component({selector: 'app-component'})
	     * class AppCmp {
	     *   constructor(location: Location) {
	     *     location.go('/foo');
	     *   }
	     * }
	     * ```
	     *
	     * @stable
	     */
	    var Location = (function () {
	        function Location(platformStrategy) {
	            var _this = this;
	            /** @internal */
	            this._subject = new _angular_core.EventEmitter();
	            this._platformStrategy = platformStrategy;
	            var browserBaseHref = this._platformStrategy.getBaseHref();
	            this._baseHref = Location.stripTrailingSlash(_stripIndexHtml(browserBaseHref));
	            this._platformStrategy.onPopState(function (ev) {
	                _this._subject.emit({
	                    'url': _this.path(true),
	                    'pop': true,
	                    'type': ev.type,
	                });
	            });
	        }
	        /**
	         * Returns the normalized URL path.
	         */
	        // TODO: vsavkin. Remove the boolean flag and always include hash once the deprecated router is
	        // removed.
	        Location.prototype.path = function (includeHash) {
	            if (includeHash === void 0) { includeHash = false; }
	            return this.normalize(this._platformStrategy.path(includeHash));
	        };
	        /**
	         * Normalizes the given path and compares to the current normalized path.
	         */
	        Location.prototype.isCurrentPathEqualTo = function (path, query) {
	            if (query === void 0) { query = ''; }
	            return this.path() == this.normalize(path + Location.normalizeQueryParams(query));
	        };
	        /**
	         * Given a string representing a URL, returns the normalized URL path without leading or
	         * trailing slashes.
	         */
	        Location.prototype.normalize = function (url) {
	            return Location.stripTrailingSlash(_stripBaseHref(this._baseHref, _stripIndexHtml(url)));
	        };
	        /**
	         * Given a string representing a URL, returns the platform-specific external URL path.
	         * If the given URL doesn't begin with a leading slash (`'/'`), this method adds one
	         * before normalizing. This method will also add a hash if `HashLocationStrategy` is
	         * used, or the `APP_BASE_HREF` if the `PathLocationStrategy` is in use.
	         */
	        Location.prototype.prepareExternalUrl = function (url) {
	            if (url.length > 0 && !url.startsWith('/')) {
	                url = '/' + url;
	            }
	            return this._platformStrategy.prepareExternalUrl(url);
	        };
	        // TODO: rename this method to pushState
	        /**
	         * Changes the browsers URL to the normalized version of the given URL, and pushes a
	         * new item onto the platform's history.
	         */
	        Location.prototype.go = function (path, query) {
	            if (query === void 0) { query = ''; }
	            this._platformStrategy.pushState(null, '', path, query);
	        };
	        /**
	         * Changes the browsers URL to the normalized version of the given URL, and replaces
	         * the top item on the platform's history stack.
	         */
	        Location.prototype.replaceState = function (path, query) {
	            if (query === void 0) { query = ''; }
	            this._platformStrategy.replaceState(null, '', path, query);
	        };
	        /**
	         * Navigates forward in the platform's history.
	         */
	        Location.prototype.forward = function () { this._platformStrategy.forward(); };
	        /**
	         * Navigates back in the platform's history.
	         */
	        Location.prototype.back = function () { this._platformStrategy.back(); };
	        /**
	         * Subscribe to the platform's `popState` events.
	         */
	        Location.prototype.subscribe = function (onNext, onThrow, onReturn) {
	            if (onThrow === void 0) { onThrow = null; }
	            if (onReturn === void 0) { onReturn = null; }
	            return this._subject.subscribe({ next: onNext, error: onThrow, complete: onReturn });
	        };
	        /**
	         * Given a string of url parameters, prepend with '?' if needed, otherwise return parameters as
	         * is.
	         */
	        Location.normalizeQueryParams = function (params) {
	            return (params.length > 0 && params.substring(0, 1) != '?') ? ('?' + params) : params;
	        };
	        /**
	         * Given 2 parts of a url, join them with a slash if needed.
	         */
	        Location.joinWithSlash = function (start, end) {
	            if (start.length == 0) {
	                return end;
	            }
	            if (end.length == 0) {
	                return start;
	            }
	            var slashes = 0;
	            if (start.endsWith('/')) {
	                slashes++;
	            }
	            if (end.startsWith('/')) {
	                slashes++;
	            }
	            if (slashes == 2) {
	                return start + end.substring(1);
	            }
	            if (slashes == 1) {
	                return start + end;
	            }
	            return start + '/' + end;
	        };
	        /**
	         * If url has a trailing slash, remove it, otherwise return url as is.
	         */
	        Location.stripTrailingSlash = function (url) {
	            if (/\/$/g.test(url)) {
	                url = url.substring(0, url.length - 1);
	            }
	            return url;
	        };
	        Location.decorators = [
	            { type: _angular_core.Injectable },
	        ];
	        /** @nocollapse */
	        Location.ctorParameters = [
	            { type: LocationStrategy, },
	        ];
	        return Location;
	    }());
	    function _stripBaseHref(baseHref, url) {
	        if (baseHref.length > 0 && url.startsWith(baseHref)) {
	            return url.substring(baseHref.length);
	        }
	        return url;
	    }
	    function _stripIndexHtml(url) {
	        if (/\/index.html$/g.test(url)) {
	            // '/index.html'.length == 11
	            return url.substring(0, url.length - 11);
	        }
	        return url;
	    }

	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    var __extends = (this && this.__extends) || function (d, b) {
	        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	    /**
	     * `HashLocationStrategy` is a {@link LocationStrategy} used to configure the
	     * {@link Location} service to represent its state in the
	     * [hash fragment](https://en.wikipedia.org/wiki/Uniform_Resource_Locator#Syntax)
	     * of the browser's URL.
	     *
	     * For instance, if you call `location.go('/foo')`, the browser's URL will become
	     * `example.com#/foo`.
	     *
	     * ### Example
	     *
	     * ```
	     * import {Component, NgModule} from '@angular/core';
	     * import {
	     *   LocationStrategy,
	     *   HashLocationStrategy
	     * } from '@angular/common';
	     *
	     * @NgModule({
	     *   providers: [{provide: LocationStrategy, useClass: HashLocationStrategy}]
	     * })
	     * class AppModule {}
	     * ```
	     *
	     * @stable
	     */
	    var HashLocationStrategy = (function (_super) {
	        __extends(HashLocationStrategy, _super);
	        function HashLocationStrategy(_platformLocation, _baseHref) {
	            _super.call(this);
	            this._platformLocation = _platformLocation;
	            this._baseHref = '';
	            if (isPresent(_baseHref)) {
	                this._baseHref = _baseHref;
	            }
	        }
	        HashLocationStrategy.prototype.onPopState = function (fn) {
	            this._platformLocation.onPopState(fn);
	            this._platformLocation.onHashChange(fn);
	        };
	        HashLocationStrategy.prototype.getBaseHref = function () { return this._baseHref; };
	        HashLocationStrategy.prototype.path = function (includeHash) {
	            if (includeHash === void 0) { includeHash = false; }
	            // the hash value is always prefixed with a `#`
	            // and if it is empty then it will stay empty
	            var path = this._platformLocation.hash;
	            if (!isPresent(path))
	                path = '#';
	            return path.length > 0 ? path.substring(1) : path;
	        };
	        HashLocationStrategy.prototype.prepareExternalUrl = function (internal) {
	            var url = Location.joinWithSlash(this._baseHref, internal);
	            return url.length > 0 ? ('#' + url) : url;
	        };
	        HashLocationStrategy.prototype.pushState = function (state, title, path, queryParams) {
	            var url = this.prepareExternalUrl(path + Location.normalizeQueryParams(queryParams));
	            if (url.length == 0) {
	                url = this._platformLocation.pathname;
	            }
	            this._platformLocation.pushState(state, title, url);
	        };
	        HashLocationStrategy.prototype.replaceState = function (state, title, path, queryParams) {
	            var url = this.prepareExternalUrl(path + Location.normalizeQueryParams(queryParams));
	            if (url.length == 0) {
	                url = this._platformLocation.pathname;
	            }
	            this._platformLocation.replaceState(state, title, url);
	        };
	        HashLocationStrategy.prototype.forward = function () { this._platformLocation.forward(); };
	        HashLocationStrategy.prototype.back = function () { this._platformLocation.back(); };
	        HashLocationStrategy.decorators = [
	            { type: _angular_core.Injectable },
	        ];
	        /** @nocollapse */
	        HashLocationStrategy.ctorParameters = [
	            { type: PlatformLocation, },
	            { type: undefined, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Inject, args: [APP_BASE_HREF,] },] },
	        ];
	        return HashLocationStrategy;
	    }(LocationStrategy));

	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    var __extends$1 = (this && this.__extends) || function (d, b) {
	        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	    /**
	     * `PathLocationStrategy` is a {@link LocationStrategy} used to configure the
	     * {@link Location} service to represent its state in the
	     * [path](https://en.wikipedia.org/wiki/Uniform_Resource_Locator#Syntax) of the
	     * browser's URL.
	     *
	     * `PathLocationStrategy` is the default binding for {@link LocationStrategy}
	     * provided in {@link ROUTER_PROVIDERS}.
	     *
	     * If you're using `PathLocationStrategy`, you must provide a {@link APP_BASE_HREF}
	     * or add a base element to the document. This URL prefix that will be preserved
	     * when generating and recognizing URLs.
	     *
	     * For instance, if you provide an `APP_BASE_HREF` of `'/my/app'` and call
	     * `location.go('/foo')`, the browser's URL will become
	     * `example.com/my/app/foo`.
	     *
	     * Similarly, if you add `<base href='/my/app'/>` to the document and call
	     * `location.go('/foo')`, the browser's URL will become
	     * `example.com/my/app/foo`.
	     *
	     * @stable
	     */
	    var PathLocationStrategy = (function (_super) {
	        __extends$1(PathLocationStrategy, _super);
	        function PathLocationStrategy(_platformLocation, href) {
	            _super.call(this);
	            this._platformLocation = _platformLocation;
	            if (isBlank(href)) {
	                href = this._platformLocation.getBaseHrefFromDOM();
	            }
	            if (isBlank(href)) {
	                throw new Error("No base href set. Please provide a value for the APP_BASE_HREF token or add a base element to the document.");
	            }
	            this._baseHref = href;
	        }
	        PathLocationStrategy.prototype.onPopState = function (fn) {
	            this._platformLocation.onPopState(fn);
	            this._platformLocation.onHashChange(fn);
	        };
	        PathLocationStrategy.prototype.getBaseHref = function () { return this._baseHref; };
	        PathLocationStrategy.prototype.prepareExternalUrl = function (internal) {
	            return Location.joinWithSlash(this._baseHref, internal);
	        };
	        PathLocationStrategy.prototype.path = function (includeHash) {
	            if (includeHash === void 0) { includeHash = false; }
	            var pathname = this._platformLocation.pathname +
	                Location.normalizeQueryParams(this._platformLocation.search);
	            var hash = this._platformLocation.hash;
	            return hash && includeHash ? "" + pathname + hash : pathname;
	        };
	        PathLocationStrategy.prototype.pushState = function (state, title, url, queryParams) {
	            var externalUrl = this.prepareExternalUrl(url + Location.normalizeQueryParams(queryParams));
	            this._platformLocation.pushState(state, title, externalUrl);
	        };
	        PathLocationStrategy.prototype.replaceState = function (state, title, url, queryParams) {
	            var externalUrl = this.prepareExternalUrl(url + Location.normalizeQueryParams(queryParams));
	            this._platformLocation.replaceState(state, title, externalUrl);
	        };
	        PathLocationStrategy.prototype.forward = function () { this._platformLocation.forward(); };
	        PathLocationStrategy.prototype.back = function () { this._platformLocation.back(); };
	        PathLocationStrategy.decorators = [
	            { type: _angular_core.Injectable },
	        ];
	        /** @nocollapse */
	        PathLocationStrategy.ctorParameters = [
	            { type: PlatformLocation, },
	            { type: undefined, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Inject, args: [APP_BASE_HREF,] },] },
	        ];
	        return PathLocationStrategy;
	    }(LocationStrategy));

	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    var __extends$2 = (this && this.__extends) || function (d, b) {
	        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	    /**
	     * @experimental
	     */
	    var NgLocalization = (function () {
	        function NgLocalization() {
	        }
	        return NgLocalization;
	    }());
	    /**
	     * Returns the plural category for a given value.
	     * - "=value" when the case exists,
	     * - the plural category otherwise
	     *
	     * @internal
	     */
	    function getPluralCategory(value, cases, ngLocalization) {
	        var nbCase = "=" + value;
	        return cases.indexOf(nbCase) > -1 ? nbCase : ngLocalization.getPluralCategory(value);
	    }
	    /**
	     * Returns the plural case based on the locale
	     *
	     * @experimental
	     */
	    var NgLocaleLocalization = (function (_super) {
	        __extends$2(NgLocaleLocalization, _super);
	        function NgLocaleLocalization(_locale) {
	            _super.call(this);
	            this._locale = _locale;
	        }
	        NgLocaleLocalization.prototype.getPluralCategory = function (value) {
	            var plural = getPluralCase(this._locale, value);
	            switch (plural) {
	                case Plural.Zero:
	                    return 'zero';
	                case Plural.One:
	                    return 'one';
	                case Plural.Two:
	                    return 'two';
	                case Plural.Few:
	                    return 'few';
	                case Plural.Many:
	                    return 'many';
	                default:
	                    return 'other';
	            }
	        };
	        NgLocaleLocalization.decorators = [
	            { type: _angular_core.Injectable },
	        ];
	        /** @nocollapse */
	        NgLocaleLocalization.ctorParameters = [
	            { type: undefined, decorators: [{ type: _angular_core.Inject, args: [_angular_core.LOCALE_ID,] },] },
	        ];
	        return NgLocaleLocalization;
	    }(NgLocalization));
	    // This is generated code DO NOT MODIFY
	    // see angular2/script/cldr/gen_plural_rules.js
	    /** @experimental */
	    var Plural;
	    (function (Plural) {
	        Plural[Plural["Zero"] = 0] = "Zero";
	        Plural[Plural["One"] = 1] = "One";
	        Plural[Plural["Two"] = 2] = "Two";
	        Plural[Plural["Few"] = 3] = "Few";
	        Plural[Plural["Many"] = 4] = "Many";
	        Plural[Plural["Other"] = 5] = "Other";
	    })(Plural || (Plural = {}));
	    /**
	     * Returns the plural case based on the locale
	     *
	     * @experimental
	     */
	    function getPluralCase(locale, nLike) {
	        // TODO(vicb): lazy compute
	        if (typeof nLike === 'string') {
	            nLike = parseInt(nLike, 10);
	        }
	        var n = nLike;
	        var nDecimal = n.toString().replace(/^[^.]*\.?/, '');
	        var i = Math.floor(Math.abs(n));
	        var v = nDecimal.length;
	        var f = parseInt(nDecimal, 10);
	        var t = parseInt(n.toString().replace(/^[^.]*\.?|0+$/g, ''), 10) || 0;
	        var lang = locale.split('-')[0].toLowerCase();
	        switch (lang) {
	            case 'af':
	            case 'asa':
	            case 'az':
	            case 'bem':
	            case 'bez':
	            case 'bg':
	            case 'brx':
	            case 'ce':
	            case 'cgg':
	            case 'chr':
	            case 'ckb':
	            case 'ee':
	            case 'el':
	            case 'eo':
	            case 'es':
	            case 'eu':
	            case 'fo':
	            case 'fur':
	            case 'gsw':
	            case 'ha':
	            case 'haw':
	            case 'hu':
	            case 'jgo':
	            case 'jmc':
	            case 'ka':
	            case 'kk':
	            case 'kkj':
	            case 'kl':
	            case 'ks':
	            case 'ksb':
	            case 'ky':
	            case 'lb':
	            case 'lg':
	            case 'mas':
	            case 'mgo':
	            case 'ml':
	            case 'mn':
	            case 'nb':
	            case 'nd':
	            case 'ne':
	            case 'nn':
	            case 'nnh':
	            case 'nyn':
	            case 'om':
	            case 'or':
	            case 'os':
	            case 'ps':
	            case 'rm':
	            case 'rof':
	            case 'rwk':
	            case 'saq':
	            case 'seh':
	            case 'sn':
	            case 'so':
	            case 'sq':
	            case 'ta':
	            case 'te':
	            case 'teo':
	            case 'tk':
	            case 'tr':
	            case 'ug':
	            case 'uz':
	            case 'vo':
	            case 'vun':
	            case 'wae':
	            case 'xog':
	                if (n === 1)
	                    return Plural.One;
	                return Plural.Other;
	            case 'agq':
	            case 'bas':
	            case 'cu':
	            case 'dav':
	            case 'dje':
	            case 'dua':
	            case 'dyo':
	            case 'ebu':
	            case 'ewo':
	            case 'guz':
	            case 'kam':
	            case 'khq':
	            case 'ki':
	            case 'kln':
	            case 'kok':
	            case 'ksf':
	            case 'lrc':
	            case 'lu':
	            case 'luo':
	            case 'luy':
	            case 'mer':
	            case 'mfe':
	            case 'mgh':
	            case 'mua':
	            case 'mzn':
	            case 'nmg':
	            case 'nus':
	            case 'qu':
	            case 'rn':
	            case 'rw':
	            case 'sbp':
	            case 'twq':
	            case 'vai':
	            case 'yav':
	            case 'yue':
	            case 'zgh':
	            case 'ak':
	            case 'ln':
	            case 'mg':
	            case 'pa':
	            case 'ti':
	                if (n === Math.floor(n) && n >= 0 && n <= 1)
	                    return Plural.One;
	                return Plural.Other;
	            case 'am':
	            case 'as':
	            case 'bn':
	            case 'fa':
	            case 'gu':
	            case 'hi':
	            case 'kn':
	            case 'mr':
	            case 'zu':
	                if (i === 0 || n === 1)
	                    return Plural.One;
	                return Plural.Other;
	            case 'ar':
	                if (n === 0)
	                    return Plural.Zero;
	                if (n === 1)
	                    return Plural.One;
	                if (n === 2)
	                    return Plural.Two;
	                if (n % 100 === Math.floor(n % 100) && n % 100 >= 3 && n % 100 <= 10)
	                    return Plural.Few;
	                if (n % 100 === Math.floor(n % 100) && n % 100 >= 11 && n % 100 <= 99)
	                    return Plural.Many;
	                return Plural.Other;
	            case 'ast':
	            case 'ca':
	            case 'de':
	            case 'en':
	            case 'et':
	            case 'fi':
	            case 'fy':
	            case 'gl':
	            case 'it':
	            case 'nl':
	            case 'sv':
	            case 'sw':
	            case 'ur':
	            case 'yi':
	                if (i === 1 && v === 0)
	                    return Plural.One;
	                return Plural.Other;
	            case 'be':
	                if (n % 10 === 1 && !(n % 100 === 11))
	                    return Plural.One;
	                if (n % 10 === Math.floor(n % 10) && n % 10 >= 2 && n % 10 <= 4 &&
	                    !(n % 100 >= 12 && n % 100 <= 14))
	                    return Plural.Few;
	                if (n % 10 === 0 || n % 10 === Math.floor(n % 10) && n % 10 >= 5 && n % 10 <= 9 ||
	                    n % 100 === Math.floor(n % 100) && n % 100 >= 11 && n % 100 <= 14)
	                    return Plural.Many;
	                return Plural.Other;
	            case 'br':
	                if (n % 10 === 1 && !(n % 100 === 11 || n % 100 === 71 || n % 100 === 91))
	                    return Plural.One;
	                if (n % 10 === 2 && !(n % 100 === 12 || n % 100 === 72 || n % 100 === 92))
	                    return Plural.Two;
	                if (n % 10 === Math.floor(n % 10) && (n % 10 >= 3 && n % 10 <= 4 || n % 10 === 9) &&
	                    !(n % 100 >= 10 && n % 100 <= 19 || n % 100 >= 70 && n % 100 <= 79 ||
	                        n % 100 >= 90 && n % 100 <= 99))
	                    return Plural.Few;
	                if (!(n === 0) && n % 1e6 === 0)
	                    return Plural.Many;
	                return Plural.Other;
	            case 'bs':
	            case 'hr':
	            case 'sr':
	                if (v === 0 && i % 10 === 1 && !(i % 100 === 11) || f % 10 === 1 && !(f % 100 === 11))
	                    return Plural.One;
	                if (v === 0 && i % 10 === Math.floor(i % 10) && i % 10 >= 2 && i % 10 <= 4 &&
	                    !(i % 100 >= 12 && i % 100 <= 14) ||
	                    f % 10 === Math.floor(f % 10) && f % 10 >= 2 && f % 10 <= 4 &&
	                        !(f % 100 >= 12 && f % 100 <= 14))
	                    return Plural.Few;
	                return Plural.Other;
	            case 'cs':
	            case 'sk':
	                if (i === 1 && v === 0)
	                    return Plural.One;
	                if (i === Math.floor(i) && i >= 2 && i <= 4 && v === 0)
	                    return Plural.Few;
	                if (!(v === 0))
	                    return Plural.Many;
	                return Plural.Other;
	            case 'cy':
	                if (n === 0)
	                    return Plural.Zero;
	                if (n === 1)
	                    return Plural.One;
	                if (n === 2)
	                    return Plural.Two;
	                if (n === 3)
	                    return Plural.Few;
	                if (n === 6)
	                    return Plural.Many;
	                return Plural.Other;
	            case 'da':
	                if (n === 1 || !(t === 0) && (i === 0 || i === 1))
	                    return Plural.One;
	                return Plural.Other;
	            case 'dsb':
	            case 'hsb':
	                if (v === 0 && i % 100 === 1 || f % 100 === 1)
	                    return Plural.One;
	                if (v === 0 && i % 100 === 2 || f % 100 === 2)
	                    return Plural.Two;
	                if (v === 0 && i % 100 === Math.floor(i % 100) && i % 100 >= 3 && i % 100 <= 4 ||
	                    f % 100 === Math.floor(f % 100) && f % 100 >= 3 && f % 100 <= 4)
	                    return Plural.Few;
	                return Plural.Other;
	            case 'ff':
	            case 'fr':
	            case 'hy':
	            case 'kab':
	                if (i === 0 || i === 1)
	                    return Plural.One;
	                return Plural.Other;
	            case 'fil':
	                if (v === 0 && (i === 1 || i === 2 || i === 3) ||
	                    v === 0 && !(i % 10 === 4 || i % 10 === 6 || i % 10 === 9) ||
	                    !(v === 0) && !(f % 10 === 4 || f % 10 === 6 || f % 10 === 9))
	                    return Plural.One;
	                return Plural.Other;
	            case 'ga':
	                if (n === 1)
	                    return Plural.One;
	                if (n === 2)
	                    return Plural.Two;
	                if (n === Math.floor(n) && n >= 3 && n <= 6)
	                    return Plural.Few;
	                if (n === Math.floor(n) && n >= 7 && n <= 10)
	                    return Plural.Many;
	                return Plural.Other;
	            case 'gd':
	                if (n === 1 || n === 11)
	                    return Plural.One;
	                if (n === 2 || n === 12)
	                    return Plural.Two;
	                if (n === Math.floor(n) && (n >= 3 && n <= 10 || n >= 13 && n <= 19))
	                    return Plural.Few;
	                return Plural.Other;
	            case 'gv':
	                if (v === 0 && i % 10 === 1)
	                    return Plural.One;
	                if (v === 0 && i % 10 === 2)
	                    return Plural.Two;
	                if (v === 0 &&
	                    (i % 100 === 0 || i % 100 === 20 || i % 100 === 40 || i % 100 === 60 || i % 100 === 80))
	                    return Plural.Few;
	                if (!(v === 0))
	                    return Plural.Many;
	                return Plural.Other;
	            case 'he':
	                if (i === 1 && v === 0)
	                    return Plural.One;
	                if (i === 2 && v === 0)
	                    return Plural.Two;
	                if (v === 0 && !(n >= 0 && n <= 10) && n % 10 === 0)
	                    return Plural.Many;
	                return Plural.Other;
	            case 'is':
	                if (t === 0 && i % 10 === 1 && !(i % 100 === 11) || !(t === 0))
	                    return Plural.One;
	                return Plural.Other;
	            case 'ksh':
	                if (n === 0)
	                    return Plural.Zero;
	                if (n === 1)
	                    return Plural.One;
	                return Plural.Other;
	            case 'kw':
	            case 'naq':
	            case 'se':
	            case 'smn':
	                if (n === 1)
	                    return Plural.One;
	                if (n === 2)
	                    return Plural.Two;
	                return Plural.Other;
	            case 'lag':
	                if (n === 0)
	                    return Plural.Zero;
	                if ((i === 0 || i === 1) && !(n === 0))
	                    return Plural.One;
	                return Plural.Other;
	            case 'lt':
	                if (n % 10 === 1 && !(n % 100 >= 11 && n % 100 <= 19))
	                    return Plural.One;
	                if (n % 10 === Math.floor(n % 10) && n % 10 >= 2 && n % 10 <= 9 &&
	                    !(n % 100 >= 11 && n % 100 <= 19))
	                    return Plural.Few;
	                if (!(f === 0))
	                    return Plural.Many;
	                return Plural.Other;
	            case 'lv':
	            case 'prg':
	                if (n % 10 === 0 || n % 100 === Math.floor(n % 100) && n % 100 >= 11 && n % 100 <= 19 ||
	                    v === 2 && f % 100 === Math.floor(f % 100) && f % 100 >= 11 && f % 100 <= 19)
	                    return Plural.Zero;
	                if (n % 10 === 1 && !(n % 100 === 11) || v === 2 && f % 10 === 1 && !(f % 100 === 11) ||
	                    !(v === 2) && f % 10 === 1)
	                    return Plural.One;
	                return Plural.Other;
	            case 'mk':
	                if (v === 0 && i % 10 === 1 || f % 10 === 1)
	                    return Plural.One;
	                return Plural.Other;
	            case 'mt':
	                if (n === 1)
	                    return Plural.One;
	                if (n === 0 || n % 100 === Math.floor(n % 100) && n % 100 >= 2 && n % 100 <= 10)
	                    return Plural.Few;
	                if (n % 100 === Math.floor(n % 100) && n % 100 >= 11 && n % 100 <= 19)
	                    return Plural.Many;
	                return Plural.Other;
	            case 'pl':
	                if (i === 1 && v === 0)
	                    return Plural.One;
	                if (v === 0 && i % 10 === Math.floor(i % 10) && i % 10 >= 2 && i % 10 <= 4 &&
	                    !(i % 100 >= 12 && i % 100 <= 14))
	                    return Plural.Few;
	                if (v === 0 && !(i === 1) && i % 10 === Math.floor(i % 10) && i % 10 >= 0 && i % 10 <= 1 ||
	                    v === 0 && i % 10 === Math.floor(i % 10) && i % 10 >= 5 && i % 10 <= 9 ||
	                    v === 0 && i % 100 === Math.floor(i % 100) && i % 100 >= 12 && i % 100 <= 14)
	                    return Plural.Many;
	                return Plural.Other;
	            case 'pt':
	                if (n === Math.floor(n) && n >= 0 && n <= 2 && !(n === 2))
	                    return Plural.One;
	                return Plural.Other;
	            case 'ro':
	                if (i === 1 && v === 0)
	                    return Plural.One;
	                if (!(v === 0) || n === 0 ||
	                    !(n === 1) && n % 100 === Math.floor(n % 100) && n % 100 >= 1 && n % 100 <= 19)
	                    return Plural.Few;
	                return Plural.Other;
	            case 'ru':
	            case 'uk':
	                if (v === 0 && i % 10 === 1 && !(i % 100 === 11))
	                    return Plural.One;
	                if (v === 0 && i % 10 === Math.floor(i % 10) && i % 10 >= 2 && i % 10 <= 4 &&
	                    !(i % 100 >= 12 && i % 100 <= 14))
	                    return Plural.Few;
	                if (v === 0 && i % 10 === 0 ||
	                    v === 0 && i % 10 === Math.floor(i % 10) && i % 10 >= 5 && i % 10 <= 9 ||
	                    v === 0 && i % 100 === Math.floor(i % 100) && i % 100 >= 11 && i % 100 <= 14)
	                    return Plural.Many;
	                return Plural.Other;
	            case 'shi':
	                if (i === 0 || n === 1)
	                    return Plural.One;
	                if (n === Math.floor(n) && n >= 2 && n <= 10)
	                    return Plural.Few;
	                return Plural.Other;
	            case 'si':
	                if (n === 0 || n === 1 || i === 0 && f === 1)
	                    return Plural.One;
	                return Plural.Other;
	            case 'sl':
	                if (v === 0 && i % 100 === 1)
	                    return Plural.One;
	                if (v === 0 && i % 100 === 2)
	                    return Plural.Two;
	                if (v === 0 && i % 100 === Math.floor(i % 100) && i % 100 >= 3 && i % 100 <= 4 || !(v === 0))
	                    return Plural.Few;
	                return Plural.Other;
	            case 'tzm':
	                if (n === Math.floor(n) && n >= 0 && n <= 1 || n === Math.floor(n) && n >= 11 && n <= 99)
	                    return Plural.One;
	                return Plural.Other;
	            default:
	                return Plural.Other;
	        }
	    }

	    function isListLikeIterable(obj) {
	        if (!isJsObject(obj))
	            return false;
	        return Array.isArray(obj) ||
	            (!(obj instanceof Map) &&
	                getSymbolIterator() in obj); // JS Iterable have a Symbol.iterator prop
	    }

	    /**
	     * @ngModule CommonModule
	     *
	     * @whatItDoes Adds and removes CSS classes on an HTML element.
	     *
	     * @howToUse
	     * ```
	     *     <some-element [ngClass]="'first second'">...</some-element>
	     *
	     *     <some-element [ngClass]="['first', 'second']">...</some-element>
	     *
	     *     <some-element [ngClass]="{'first': true, 'second': true, 'third': false}">...</some-element>
	     *
	     *     <some-element [ngClass]="stringExp|arrayExp|objExp">...</some-element>
	     * ```
	     *
	     * @description
	     *
	     * The CSS classes are updated as follows, depending on the type of the expression evaluation:
	     * - `string` - the CSS classes listed in the string (space delimited) are added,
	     * - `Array` - the CSS classes declared as Array elements are added,
	     * - `Object` - keys are CSS classes that get added when the expression given in the value
	     *              evaluates to a truthy value, otherwise they are removed.
	     *
	     * @stable
	     */
	    var NgClass = (function () {
	        function NgClass(_iterableDiffers, _keyValueDiffers, _ngEl, _renderer) {
	            this._iterableDiffers = _iterableDiffers;
	            this._keyValueDiffers = _keyValueDiffers;
	            this._ngEl = _ngEl;
	            this._renderer = _renderer;
	            this._initialClasses = [];
	        }
	        Object.defineProperty(NgClass.prototype, "klass", {
	            set: function (v) {
	                this._applyInitialClasses(true);
	                this._initialClasses = typeof v === 'string' ? v.split(/\s+/) : [];
	                this._applyInitialClasses(false);
	                this._applyClasses(this._rawClass, false);
	            },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(NgClass.prototype, "ngClass", {
	            set: function (v) {
	                this._cleanupClasses(this._rawClass);
	                this._iterableDiffer = null;
	                this._keyValueDiffer = null;
	                this._rawClass = typeof v === 'string' ? v.split(/\s+/) : v;
	                if (this._rawClass) {
	                    if (isListLikeIterable(this._rawClass)) {
	                        this._iterableDiffer = this._iterableDiffers.find(this._rawClass).create(null);
	                    }
	                    else {
	                        this._keyValueDiffer = this._keyValueDiffers.find(this._rawClass).create(null);
	                    }
	                }
	            },
	            enumerable: true,
	            configurable: true
	        });
	        NgClass.prototype.ngDoCheck = function () {
	            if (this._iterableDiffer) {
	                var changes = this._iterableDiffer.diff(this._rawClass);
	                if (changes) {
	                    this._applyIterableChanges(changes);
	                }
	            }
	            else if (this._keyValueDiffer) {
	                var changes = this._keyValueDiffer.diff(this._rawClass);
	                if (changes) {
	                    this._applyKeyValueChanges(changes);
	                }
	            }
	        };
	        NgClass.prototype._cleanupClasses = function (rawClassVal) {
	            this._applyClasses(rawClassVal, true);
	            this._applyInitialClasses(false);
	        };
	        NgClass.prototype._applyKeyValueChanges = function (changes) {
	            var _this = this;
	            changes.forEachAddedItem(function (record) { return _this._toggleClass(record.key, record.currentValue); });
	            changes.forEachChangedItem(function (record) { return _this._toggleClass(record.key, record.currentValue); });
	            changes.forEachRemovedItem(function (record) {
	                if (record.previousValue) {
	                    _this._toggleClass(record.key, false);
	                }
	            });
	        };
	        NgClass.prototype._applyIterableChanges = function (changes) {
	            var _this = this;
	            changes.forEachAddedItem(function (record) {
	                if (typeof record.item === 'string') {
	                    _this._toggleClass(record.item, true);
	                }
	                else {
	                    throw new Error("NgClass can only toggle CSS classes expressed as strings, got " + stringify(record.item));
	                }
	            });
	            changes.forEachRemovedItem(function (record) { return _this._toggleClass(record.item, false); });
	        };
	        NgClass.prototype._applyInitialClasses = function (isCleanup) {
	            var _this = this;
	            this._initialClasses.forEach(function (klass) { return _this._toggleClass(klass, !isCleanup); });
	        };
	        NgClass.prototype._applyClasses = function (rawClassVal, isCleanup) {
	            var _this = this;
	            if (rawClassVal) {
	                if (Array.isArray(rawClassVal) || rawClassVal instanceof Set) {
	                    rawClassVal.forEach(function (klass) { return _this._toggleClass(klass, !isCleanup); });
	                }
	                else {
	                    Object.keys(rawClassVal).forEach(function (klass) {
	                        if (isPresent(rawClassVal[klass]))
	                            _this._toggleClass(klass, !isCleanup);
	                    });
	                }
	            }
	        };
	        NgClass.prototype._toggleClass = function (klass, enabled) {
	            var _this = this;
	            klass = klass.trim();
	            if (klass) {
	                klass.split(/\s+/g).forEach(function (klass) { _this._renderer.setElementClass(_this._ngEl.nativeElement, klass, enabled); });
	            }
	        };
	        NgClass.decorators = [
	            { type: _angular_core.Directive, args: [{ selector: '[ngClass]' },] },
	        ];
	        /** @nocollapse */
	        NgClass.ctorParameters = [
	            { type: _angular_core.IterableDiffers, },
	            { type: _angular_core.KeyValueDiffers, },
	            { type: _angular_core.ElementRef, },
	            { type: _angular_core.Renderer, },
	        ];
	        NgClass.propDecorators = {
	            'klass': [{ type: _angular_core.Input, args: ['class',] },],
	            'ngClass': [{ type: _angular_core.Input },],
	        };
	        return NgClass;
	    }());

	    var NgForRow = (function () {
	        function NgForRow($implicit, index, count) {
	            this.$implicit = $implicit;
	            this.index = index;
	            this.count = count;
	        }
	        Object.defineProperty(NgForRow.prototype, "first", {
	            get: function () { return this.index === 0; },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(NgForRow.prototype, "last", {
	            get: function () { return this.index === this.count - 1; },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(NgForRow.prototype, "even", {
	            get: function () { return this.index % 2 === 0; },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(NgForRow.prototype, "odd", {
	            get: function () { return !this.even; },
	            enumerable: true,
	            configurable: true
	        });
	        return NgForRow;
	    }());
	    /**
	     * The `NgFor` directive instantiates a template once per item from an iterable. The context for
	     * each instantiated template inherits from the outer context with the given loop variable set
	     * to the current item from the iterable.
	     *
	     * ### Local Variables
	     *
	     * `NgFor` provides several exported values that can be aliased to local variables:
	     *
	     * * `index` will be set to the current loop iteration for each template context.
	     * * `first` will be set to a boolean value indicating whether the item is the first one in the
	     *   iteration.
	     * * `last` will be set to a boolean value indicating whether the item is the last one in the
	     *   iteration.
	     * * `even` will be set to a boolean value indicating whether this item has an even index.
	     * * `odd` will be set to a boolean value indicating whether this item has an odd index.
	     *
	     * ### Change Propagation
	     *
	     * When the contents of the iterator changes, `NgFor` makes the corresponding changes to the DOM:
	     *
	     * * When an item is added, a new instance of the template is added to the DOM.
	     * * When an item is removed, its template instance is removed from the DOM.
	     * * When items are reordered, their respective templates are reordered in the DOM.
	     * * Otherwise, the DOM element for that item will remain the same.
	     *
	     * Angular uses object identity to track insertions and deletions within the iterator and reproduce
	     * those changes in the DOM. This has important implications for animations and any stateful
	     * controls
	     * (such as `<input>` elements which accept user input) that are present. Inserted rows can be
	     * animated in, deleted rows can be animated out, and unchanged rows retain any unsaved state such
	     * as user input.
	     *
	     * It is possible for the identities of elements in the iterator to change while the data does not.
	     * This can happen, for example, if the iterator produced from an RPC to the server, and that
	     * RPC is re-run. Even if the data hasn't changed, the second response will produce objects with
	     * different identities, and Angular will tear down the entire DOM and rebuild it (as if all old
	     * elements were deleted and all new elements inserted). This is an expensive operation and should
	     * be avoided if possible.
	     *
	     * To customize the default tracking algorithm, `NgFor` supports `trackBy` option.
	     * `trackBy` takes a function which has two arguments: `index` and `item`.
	     * If `trackBy` is given, Angular tracks changes by the return value of the function.
	     *
	     * ### Syntax
	     *
	     * - `<li *ngFor="let item of items; let i = index; trackBy: trackByFn">...</li>`
	     * - `<li template="ngFor let item of items; let i = index; trackBy: trackByFn">...</li>`
	     *
	     * With `<template>` element:
	     *
	     * ```
	     * <template ngFor let-item [ngForOf]="items" let-i="index" [ngForTrackBy]="trackByFn">
	     *   <li>...</li>
	     * </template>
	     * ```
	     *
	     * ### Example
	     *
	     * See a [live demo](http://plnkr.co/edit/KVuXxDp0qinGDyo307QW?p=preview) for a more detailed
	     * example.
	     *
	     * @stable
	     */
	    var NgFor = (function () {
	        function NgFor(_viewContainer, _template, _differs, _cdr) {
	            this._viewContainer = _viewContainer;
	            this._template = _template;
	            this._differs = _differs;
	            this._cdr = _cdr;
	            this._differ = null;
	        }
	        Object.defineProperty(NgFor.prototype, "ngForTemplate", {
	            set: function (value) {
	                if (value) {
	                    this._template = value;
	                }
	            },
	            enumerable: true,
	            configurable: true
	        });
	        NgFor.prototype.ngOnChanges = function (changes) {
	            if ('ngForOf' in changes) {
	                // React on ngForOf changes only once all inputs have been initialized
	                var value = changes['ngForOf'].currentValue;
	                if (!this._differ && value) {
	                    try {
	                        this._differ = this._differs.find(value).create(this._cdr, this.ngForTrackBy);
	                    }
	                    catch (e) {
	                        throw new Error("Cannot find a differ supporting object '" + value + "' of type '" + getTypeNameForDebugging(value) + "'. NgFor only supports binding to Iterables such as Arrays.");
	                    }
	                }
	            }
	        };
	        NgFor.prototype.ngDoCheck = function () {
	            if (this._differ) {
	                var changes = this._differ.diff(this.ngForOf);
	                if (changes)
	                    this._applyChanges(changes);
	            }
	        };
	        NgFor.prototype._applyChanges = function (changes) {
	            var _this = this;
	            var insertTuples = [];
	            changes.forEachOperation(function (item, adjustedPreviousIndex, currentIndex) {
	                if (item.previousIndex == null) {
	                    var view = _this._viewContainer.createEmbeddedView(_this._template, new NgForRow(null, null, null), currentIndex);
	                    var tuple = new RecordViewTuple(item, view);
	                    insertTuples.push(tuple);
	                }
	                else if (currentIndex == null) {
	                    _this._viewContainer.remove(adjustedPreviousIndex);
	                }
	                else {
	                    var view = _this._viewContainer.get(adjustedPreviousIndex);
	                    _this._viewContainer.move(view, currentIndex);
	                    var tuple = new RecordViewTuple(item, view);
	                    insertTuples.push(tuple);
	                }
	            });
	            for (var i = 0; i < insertTuples.length; i++) {
	                this._perViewChange(insertTuples[i].view, insertTuples[i].record);
	            }
	            for (var i = 0, ilen = this._viewContainer.length; i < ilen; i++) {
	                var viewRef = this._viewContainer.get(i);
	                viewRef.context.index = i;
	                viewRef.context.count = ilen;
	            }
	            changes.forEachIdentityChange(function (record) {
	                var viewRef = _this._viewContainer.get(record.currentIndex);
	                viewRef.context.$implicit = record.item;
	            });
	        };
	        NgFor.prototype._perViewChange = function (view, record) {
	            view.context.$implicit = record.item;
	        };
	        NgFor.decorators = [
	            { type: _angular_core.Directive, args: [{ selector: '[ngFor][ngForOf]' },] },
	        ];
	        /** @nocollapse */
	        NgFor.ctorParameters = [
	            { type: _angular_core.ViewContainerRef, },
	            { type: _angular_core.TemplateRef, },
	            { type: _angular_core.IterableDiffers, },
	            { type: _angular_core.ChangeDetectorRef, },
	        ];
	        NgFor.propDecorators = {
	            'ngForOf': [{ type: _angular_core.Input },],
	            'ngForTrackBy': [{ type: _angular_core.Input },],
	            'ngForTemplate': [{ type: _angular_core.Input },],
	        };
	        return NgFor;
	    }());
	    var RecordViewTuple = (function () {
	        function RecordViewTuple(record, view) {
	            this.record = record;
	            this.view = view;
	        }
	        return RecordViewTuple;
	    }());

	    /**
	     * Removes or recreates a portion of the DOM tree based on an {expression}.
	     *
	     * If the expression assigned to `ngIf` evaluates to a falsy value then the element
	     * is removed from the DOM, otherwise a clone of the element is reinserted into the DOM.
	     *
	     * ### Example ([live demo](http://plnkr.co/edit/fe0kgemFBtmQOY31b4tw?p=preview)):
	     *
	     * ```
	     * <div *ngIf="errorCount > 0" class="error">
	     *   <!-- Error message displayed when the errorCount property in the current context is greater
	     * than 0. -->
	     *   {{errorCount}} errors detected
	     * </div>
	     * ```
	     *
	     * ### Syntax
	     *
	     * - `<div *ngIf="condition">...</div>`
	     * - `<div template="ngIf condition">...</div>`
	     * - `<template [ngIf]="condition"><div>...</div></template>`
	     *
	     * @stable
	     */
	    var NgIf = (function () {
	        function NgIf(_viewContainer, _template) {
	            this._viewContainer = _viewContainer;
	            this._template = _template;
	            this._hasView = false;
	        }
	        Object.defineProperty(NgIf.prototype, "ngIf", {
	            set: function (condition) {
	                if (condition && !this._hasView) {
	                    this._hasView = true;
	                    this._viewContainer.createEmbeddedView(this._template);
	                }
	                else if (!condition && this._hasView) {
	                    this._hasView = false;
	                    this._viewContainer.clear();
	                }
	            },
	            enumerable: true,
	            configurable: true
	        });
	        NgIf.decorators = [
	            { type: _angular_core.Directive, args: [{ selector: '[ngIf]' },] },
	        ];
	        /** @nocollapse */
	        NgIf.ctorParameters = [
	            { type: _angular_core.ViewContainerRef, },
	            { type: _angular_core.TemplateRef, },
	        ];
	        NgIf.propDecorators = {
	            'ngIf': [{ type: _angular_core.Input },],
	        };
	        return NgIf;
	    }());

	    var SwitchView = (function () {
	        function SwitchView(_viewContainerRef, _templateRef) {
	            this._viewContainerRef = _viewContainerRef;
	            this._templateRef = _templateRef;
	            this._created = false;
	        }
	        SwitchView.prototype.create = function () {
	            this._created = true;
	            this._viewContainerRef.createEmbeddedView(this._templateRef);
	        };
	        SwitchView.prototype.destroy = function () {
	            this._created = false;
	            this._viewContainerRef.clear();
	        };
	        SwitchView.prototype.enforceState = function (created) {
	            if (created && !this._created) {
	                this.create();
	            }
	            else if (!created && this._created) {
	                this.destroy();
	            }
	        };
	        return SwitchView;
	    }());
	    /**
	     * @ngModule CommonModule
	     *
	     * @whatItDoes Adds / removes DOM sub-trees when the nest match expressions matches the switch
	     *             expression.
	     *
	     * @howToUse
	     * ```
	     *     <container-element [ngSwitch]="switch_expression">
	     *       <some-element *ngSwitchCase="match_expression_1">...</some-element>
	     *       <some-element *ngSwitchCase="match_expression_2">...</some-element>
	     *       <some-other-element *ngSwitchCase="match_expression_3">...</some-other-element>
	     *       <ng-container *ngSwitchCase="match_expression_3">
	     *         <!-- use a ng-container to group multiple root nodes -->
	     *         <inner-element></inner-element>
	     *         <inner-other-element></inner-other-element>
	     *       </ng-container>
	     *       <some-element *ngSwitchDefault>...</some-element>
	     *     </container-element>
	     * ```
	     * @description
	     *
	     * `NgSwitch` stamps out nested views when their match expression value matches the value of the
	     * switch expression.
	     *
	     * In other words:
	     * - you define a container element (where you place the directive with a switch expression on the
	     * `[ngSwitch]="..."` attribute)
	     * - you define inner views inside the `NgSwitch` and place a `*ngSwitchCase` attribute on the view
	     * root elements.
	     *
	     * Elements within `NgSwitch` but outside of a `NgSwitchCase` or `NgSwitchDefault` directives will
	     * be preserved at the location.
	     *
	     * The `ngSwitchCase` directive informs the parent `NgSwitch` of which view to display when the
	     * expression is evaluated.
	     * When no matching expression is found on a `ngSwitchCase` view, the `ngSwitchDefault` view is
	     * stamped out.
	     *
	     * @stable
	     */
	    var NgSwitch = (function () {
	        function NgSwitch() {
	            this._defaultUsed = false;
	            this._caseCount = 0;
	            this._lastCaseCheckIndex = 0;
	            this._lastCasesMatched = false;
	        }
	        Object.defineProperty(NgSwitch.prototype, "ngSwitch", {
	            set: function (newValue) {
	                this._ngSwitch = newValue;
	                if (this._caseCount === 0) {
	                    this._updateDefaultCases(true);
	                }
	            },
	            enumerable: true,
	            configurable: true
	        });
	        /** @internal */
	        NgSwitch.prototype._addCase = function () { return this._caseCount++; };
	        /** @internal */
	        NgSwitch.prototype._addDefault = function (view) {
	            if (!this._defaultViews) {
	                this._defaultViews = [];
	            }
	            this._defaultViews.push(view);
	        };
	        /** @internal */
	        NgSwitch.prototype._matchCase = function (value) {
	            var matched = value == this._ngSwitch;
	            this._lastCasesMatched = this._lastCasesMatched || matched;
	            this._lastCaseCheckIndex++;
	            if (this._lastCaseCheckIndex === this._caseCount) {
	                this._updateDefaultCases(!this._lastCasesMatched);
	                this._lastCaseCheckIndex = 0;
	                this._lastCasesMatched = false;
	            }
	            return matched;
	        };
	        NgSwitch.prototype._updateDefaultCases = function (useDefault) {
	            if (this._defaultViews && useDefault !== this._defaultUsed) {
	                this._defaultUsed = useDefault;
	                for (var i = 0; i < this._defaultViews.length; i++) {
	                    var defaultView = this._defaultViews[i];
	                    defaultView.enforceState(useDefault);
	                }
	            }
	        };
	        NgSwitch.decorators = [
	            { type: _angular_core.Directive, args: [{ selector: '[ngSwitch]' },] },
	        ];
	        /** @nocollapse */
	        NgSwitch.ctorParameters = [];
	        NgSwitch.propDecorators = {
	            'ngSwitch': [{ type: _angular_core.Input },],
	        };
	        return NgSwitch;
	    }());
	    /**
	     * @ngModule CommonModule
	     *
	     * @whatItDoes Creates a view that will be added/removed from the parent {@link NgSwitch} when the
	     *             given expression evaluate to respectively the same/different value as the switch
	     *             expression.
	     *
	     * @howToUse
	     * ```
	     * <container-element [ngSwitch]="switch_expression">
	     *   <some-element *ngSwitchCase="match_expression_1">...</some-element>
	     * </container-element>
	     *```
	     * @description
	     *
	     * Insert the sub-tree when the expression evaluates to the same value as the enclosing switch
	     * expression.
	     *
	     * If multiple match expressions match the switch expression value, all of them are displayed.
	     *
	     * See {@link NgSwitch} for more details and example.
	     *
	     * @stable
	     */
	    var NgSwitchCase = (function () {
	        function NgSwitchCase(viewContainer, templateRef, ngSwitch) {
	            this.ngSwitch = ngSwitch;
	            ngSwitch._addCase();
	            this._view = new SwitchView(viewContainer, templateRef);
	        }
	        NgSwitchCase.prototype.ngDoCheck = function () { this._view.enforceState(this.ngSwitch._matchCase(this.ngSwitchCase)); };
	        NgSwitchCase.decorators = [
	            { type: _angular_core.Directive, args: [{ selector: '[ngSwitchCase]' },] },
	        ];
	        /** @nocollapse */
	        NgSwitchCase.ctorParameters = [
	            { type: _angular_core.ViewContainerRef, },
	            { type: _angular_core.TemplateRef, },
	            { type: NgSwitch, decorators: [{ type: _angular_core.Host },] },
	        ];
	        NgSwitchCase.propDecorators = {
	            'ngSwitchCase': [{ type: _angular_core.Input },],
	        };
	        return NgSwitchCase;
	    }());
	    /**
	     * @ngModule CommonModule
	     * @whatItDoes Creates a view that is added to the parent {@link NgSwitch} when no case expressions
	     * match the
	     *             switch expression.
	     *
	     * @howToUse
	     * ```
	     * <container-element [ngSwitch]="switch_expression">
	     *   <some-element *ngSwitchCase="match_expression_1">...</some-element>
	     *   <some-other-element *ngSwitchDefault>...</some-other-element>
	     * </container-element>
	     * ```
	     *
	     * @description
	     *
	     * Insert the sub-tree when no case expressions evaluate to the same value as the enclosing switch
	     * expression.
	     *
	     * See {@link NgSwitch} for more details and example.
	     *
	     * @stable
	     */
	    var NgSwitchDefault = (function () {
	        function NgSwitchDefault(viewContainer, templateRef, ngSwitch) {
	            ngSwitch._addDefault(new SwitchView(viewContainer, templateRef));
	        }
	        NgSwitchDefault.decorators = [
	            { type: _angular_core.Directive, args: [{ selector: '[ngSwitchDefault]' },] },
	        ];
	        /** @nocollapse */
	        NgSwitchDefault.ctorParameters = [
	            { type: _angular_core.ViewContainerRef, },
	            { type: _angular_core.TemplateRef, },
	            { type: NgSwitch, decorators: [{ type: _angular_core.Host },] },
	        ];
	        return NgSwitchDefault;
	    }());

	    /**
	     * @ngModule CommonModule
	     *
	     * @whatItDoes Adds / removes DOM sub-trees based on a numeric value. Tailored for pluralization.
	     *
	     * @howToUse
	     * ```
	     * <some-element [ngPlural]="value">
	     *   <ng-container *ngPluralCase="'=0'">there is nothing</ng-container>
	     *   <ng-container *ngPluralCase="'=1'">there is one</ng-container>
	     *   <ng-container *ngPluralCase="'few'">there are a few</ng-container>
	     *   <ng-container *ngPluralCase="'other'">there are exactly #</ng-container>
	     * </some-element>
	     * ```
	     *
	     * @description
	     *
	     * Displays DOM sub-trees that match the switch expression value, or failing that, DOM sub-trees
	     * that match the switch expression's pluralization category.
	     *
	     * To use this directive you must provide a container element that sets the `[ngPlural]` attribute
	     * to a switch expression. Inner elements with a `[ngPluralCase]` will display based on their
	     * expression:
	     * - if `[ngPluralCase]` is set to a value starting with `=`, it will only display if the value
	     *   matches the switch expression exactly,
	     * - otherwise, the view will be treated as a "category match", and will only display if exact
	     *   value matches aren't found and the value maps to its category for the defined locale.
	     *
	     * See http://cldr.unicode.org/index/cldr-spec/plural-rules
	     *
	     * @experimental
	     */
	    var NgPlural = (function () {
	        function NgPlural(_localization) {
	            this._localization = _localization;
	            this._caseViews = {};
	        }
	        Object.defineProperty(NgPlural.prototype, "ngPlural", {
	            set: function (value) {
	                this._switchValue = value;
	                this._updateView();
	            },
	            enumerable: true,
	            configurable: true
	        });
	        NgPlural.prototype.addCase = function (value, switchView) { this._caseViews[value] = switchView; };
	        NgPlural.prototype._updateView = function () {
	            this._clearViews();
	            var cases = Object.keys(this._caseViews);
	            var key = getPluralCategory(this._switchValue, cases, this._localization);
	            this._activateView(this._caseViews[key]);
	        };
	        NgPlural.prototype._clearViews = function () {
	            if (this._activeView)
	                this._activeView.destroy();
	        };
	        NgPlural.prototype._activateView = function (view) {
	            if (view) {
	                this._activeView = view;
	                this._activeView.create();
	            }
	        };
	        NgPlural.decorators = [
	            { type: _angular_core.Directive, args: [{ selector: '[ngPlural]' },] },
	        ];
	        /** @nocollapse */
	        NgPlural.ctorParameters = [
	            { type: NgLocalization, },
	        ];
	        NgPlural.propDecorators = {
	            'ngPlural': [{ type: _angular_core.Input },],
	        };
	        return NgPlural;
	    }());
	    /**
	     * @ngModule CommonModule
	     *
	     * @whatItDoes Creates a view that will be added/removed from the parent {@link NgPlural} when the
	     *             given expression matches the plural expression according to CLDR rules.
	     *
	     * @howToUse
	     * ```
	     * <some-element [ngPlural]="value">
	     *   <ng-container *ngPluralCase="'=0'">...</ng-container>
	     *   <ng-container *ngPluralCase="'other'">...</ng-container>
	     * </some-element>
	     *```
	     *
	     * See {@link NgPlural} for more details and example.
	     *
	     * @experimental
	     */
	    var NgPluralCase = (function () {
	        function NgPluralCase(value, template, viewContainer, ngPlural) {
	            this.value = value;
	            ngPlural.addCase(value, new SwitchView(viewContainer, template));
	        }
	        NgPluralCase.decorators = [
	            { type: _angular_core.Directive, args: [{ selector: '[ngPluralCase]' },] },
	        ];
	        /** @nocollapse */
	        NgPluralCase.ctorParameters = [
	            { type: undefined, decorators: [{ type: _angular_core.Attribute, args: ['ngPluralCase',] },] },
	            { type: _angular_core.TemplateRef, },
	            { type: _angular_core.ViewContainerRef, },
	            { type: NgPlural, decorators: [{ type: _angular_core.Host },] },
	        ];
	        return NgPluralCase;
	    }());

	    /**
	     * @ngModule CommonModule
	     *
	     * @whatItDoes Update an HTML element styles.
	     *
	     * @howToUse
	     * ```
	     * <some-element [ngStyle]="{'font-style': styleExp}">...</some-element>
	     *
	     * <some-element [ngStyle]="{'max-width.px': widthExp}">...</some-element>
	     *
	     * <some-element [ngStyle]="objExp">...</some-element>
	     * ```
	     *
	     * @description
	     *
	     * The styles are updated according to the value of the expression evaluation:
	     * - keys are style names with an optional `.<unit>` suffix (ie 'top.px', 'font-style.em'),
	     * - values are the values assigned to those properties (expressed in the given unit).
	     *
	     * @stable
	     */
	    var NgStyle = (function () {
	        function NgStyle(_differs, _ngEl, _renderer) {
	            this._differs = _differs;
	            this._ngEl = _ngEl;
	            this._renderer = _renderer;
	        }
	        Object.defineProperty(NgStyle.prototype, "ngStyle", {
	            set: function (v) {
	                this._ngStyle = v;
	                if (!this._differ && v) {
	                    this._differ = this._differs.find(v).create(null);
	                }
	            },
	            enumerable: true,
	            configurable: true
	        });
	        NgStyle.prototype.ngDoCheck = function () {
	            if (this._differ) {
	                var changes = this._differ.diff(this._ngStyle);
	                if (changes) {
	                    this._applyChanges(changes);
	                }
	            }
	        };
	        NgStyle.prototype._applyChanges = function (changes) {
	            var _this = this;
	            changes.forEachRemovedItem(function (record) { return _this._setStyle(record.key, null); });
	            changes.forEachAddedItem(function (record) { return _this._setStyle(record.key, record.currentValue); });
	            changes.forEachChangedItem(function (record) { return _this._setStyle(record.key, record.currentValue); });
	        };
	        NgStyle.prototype._setStyle = function (nameAndUnit, value) {
	            var _a = nameAndUnit.split('.'), name = _a[0], unit = _a[1];
	            value = value && unit ? "" + value + unit : value;
	            this._renderer.setElementStyle(this._ngEl.nativeElement, name, value);
	        };
	        NgStyle.decorators = [
	            { type: _angular_core.Directive, args: [{ selector: '[ngStyle]' },] },
	        ];
	        /** @nocollapse */
	        NgStyle.ctorParameters = [
	            { type: _angular_core.KeyValueDiffers, },
	            { type: _angular_core.ElementRef, },
	            { type: _angular_core.Renderer, },
	        ];
	        NgStyle.propDecorators = {
	            'ngStyle': [{ type: _angular_core.Input },],
	        };
	        return NgStyle;
	    }());

	    /**
	     * @ngModule CommonModule
	     *
	     * @whatItDoes Inserts an embedded view from a prepared `TemplateRef`
	     *
	     * @howToUse
	     * ```
	     * <template [ngTemplateOutlet]="templateRefExpression"
	     *           [ngOutletContext]="objectExpression">
	     * </template>
	     * ```
	     *
	     * @description
	     *
	     * You can attach a context object to the `EmbeddedViewRef` by setting `[ngOutletContext]`.
	     * `[ngOutletContext]` should be an object, the object's keys will be the local template variables
	     * available within the `TemplateRef`.
	     *
	     * Note: using the key `$implicit` in the context object will set it's value as default.
	     *
	     * @experimental
	     */
	    var NgTemplateOutlet = (function () {
	        function NgTemplateOutlet(_viewContainerRef) {
	            this._viewContainerRef = _viewContainerRef;
	        }
	        Object.defineProperty(NgTemplateOutlet.prototype, "ngOutletContext", {
	            set: function (context) { this._context = context; },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(NgTemplateOutlet.prototype, "ngTemplateOutlet", {
	            set: function (templateRef) { this._templateRef = templateRef; },
	            enumerable: true,
	            configurable: true
	        });
	        NgTemplateOutlet.prototype.ngOnChanges = function (changes) {
	            if (this._viewRef) {
	                this._viewContainerRef.remove(this._viewContainerRef.indexOf(this._viewRef));
	            }
	            if (this._templateRef) {
	                this._viewRef = this._viewContainerRef.createEmbeddedView(this._templateRef, this._context);
	            }
	        };
	        NgTemplateOutlet.decorators = [
	            { type: _angular_core.Directive, args: [{ selector: '[ngTemplateOutlet]' },] },
	        ];
	        /** @nocollapse */
	        NgTemplateOutlet.ctorParameters = [
	            { type: _angular_core.ViewContainerRef, },
	        ];
	        NgTemplateOutlet.propDecorators = {
	            'ngOutletContext': [{ type: _angular_core.Input },],
	            'ngTemplateOutlet': [{ type: _angular_core.Input },],
	        };
	        return NgTemplateOutlet;
	    }());

	    /**
	     * A collection of Angular directives that are likely to be used in each and every Angular
	     * application.
	     */
	    var COMMON_DIRECTIVES = [
	        NgClass,
	        NgFor,
	        NgIf,
	        NgTemplateOutlet,
	        NgStyle,
	        NgSwitch,
	        NgSwitchCase,
	        NgSwitchDefault,
	        NgPlural,
	        NgPluralCase,
	    ];

	    var isPromise = _angular_core.__core_private__.isPromise;

	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    var __extends$4 = (this && this.__extends) || function (d, b) {
	        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	    /**
	     * @stable
	     */
	    var BaseError = (function (_super) {
	        __extends$4(BaseError, _super);
	        function BaseError(message) {
	            // Errors don't use current this, instead they create a new instance.
	            // We have to do forward all of our api to the nativeInstance.
	            var nativeError = _super.call(this, message);
	            this._nativeError = nativeError;
	        }
	        Object.defineProperty(BaseError.prototype, "message", {
	            get: function () { return this._nativeError.message; },
	            set: function (message) { this._nativeError.message = message; },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(BaseError.prototype, "name", {
	            get: function () { return this._nativeError.name; },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(BaseError.prototype, "stack", {
	            get: function () { return this._nativeError.stack; },
	            set: function (value) { this._nativeError.stack = value; },
	            enumerable: true,
	            configurable: true
	        });
	        BaseError.prototype.toString = function () { return this._nativeError.toString(); };
	        return BaseError;
	    }(Error));
	    /**
	     * @stable
	     */
	    var WrappedError = (function (_super) {
	        __extends$4(WrappedError, _super);
	        function WrappedError(message, error) {
	            _super.call(this, message + " caused by: " + (error instanceof Error ? error.message : error));
	            this.originalError = error;
	        }
	        Object.defineProperty(WrappedError.prototype, "stack", {
	            get: function () {
	                return (this.originalError instanceof Error ? this.originalError : this._nativeError)
	                    .stack;
	            },
	            enumerable: true,
	            configurable: true
	        });
	        return WrappedError;
	    }(BaseError));

	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    var __extends$3 = (this && this.__extends) || function (d, b) {
	        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	    var InvalidPipeArgumentError = (function (_super) {
	        __extends$3(InvalidPipeArgumentError, _super);
	        function InvalidPipeArgumentError(type, value) {
	            _super.call(this, "Invalid argument '" + value + "' for pipe '" + stringify(type) + "'");
	        }
	        return InvalidPipeArgumentError;
	    }(BaseError));

	    var ObservableStrategy = (function () {
	        function ObservableStrategy() {
	        }
	        ObservableStrategy.prototype.createSubscription = function (async, updateLatestValue) {
	            return async.subscribe({ next: updateLatestValue, error: function (e) { throw e; } });
	        };
	        ObservableStrategy.prototype.dispose = function (subscription) { subscription.unsubscribe(); };
	        ObservableStrategy.prototype.onDestroy = function (subscription) { subscription.unsubscribe(); };
	        return ObservableStrategy;
	    }());
	    var PromiseStrategy = (function () {
	        function PromiseStrategy() {
	        }
	        PromiseStrategy.prototype.createSubscription = function (async, updateLatestValue) {
	            return async.then(updateLatestValue, function (e) { throw e; });
	        };
	        PromiseStrategy.prototype.dispose = function (subscription) { };
	        PromiseStrategy.prototype.onDestroy = function (subscription) { };
	        return PromiseStrategy;
	    }());
	    var _promiseStrategy = new PromiseStrategy();
	    var _observableStrategy = new ObservableStrategy();
	    /**
	     * @ngModule CommonModule
	     * @whatItDoes Unwraps a value from an asynchronous primitive.
	     * @howToUse `observable_or_promise_expression | async`
	     * @description
	     * The `async` pipe subscribes to an `Observable` or `Promise` and returns the latest value it has
	     * emitted. When a new value is emitted, the `async` pipe marks the component to be checked for
	     * changes. When the component gets destroyed, the `async` pipe unsubscribes automatically to avoid
	     * potential memory leaks.
	     *
	     *
	     * ## Examples
	     *
	     * This example binds a `Promise` to the view. Clicking the `Resolve` button resolves the
	     * promise.
	     *
	     * {@example common/pipes/ts/async_pipe.ts region='AsyncPipePromise'}
	     *
	     * It's also possible to use `async` with Observables. The example below binds the `time` Observable
	     * to the view. The Observable continuesly updates the view with the current time.
	     *
	     * {@example common/pipes/ts/async_pipe.ts region='AsyncPipeObservable'}
	     *
	     * @stable
	     */
	    var AsyncPipe = (function () {
	        function AsyncPipe(_ref) {
	            this._ref = _ref;
	            this._latestValue = null;
	            this._latestReturnedValue = null;
	            this._subscription = null;
	            this._obj = null;
	            this._strategy = null;
	        }
	        AsyncPipe.prototype.ngOnDestroy = function () {
	            if (this._subscription) {
	                this._dispose();
	            }
	        };
	        AsyncPipe.prototype.transform = function (obj) {
	            if (!this._obj) {
	                if (obj) {
	                    this._subscribe(obj);
	                }
	                this._latestReturnedValue = this._latestValue;
	                return this._latestValue;
	            }
	            if (obj !== this._obj) {
	                this._dispose();
	                return this.transform(obj);
	            }
	            if (this._latestValue === this._latestReturnedValue) {
	                return this._latestReturnedValue;
	            }
	            this._latestReturnedValue = this._latestValue;
	            return _angular_core.WrappedValue.wrap(this._latestValue);
	        };
	        AsyncPipe.prototype._subscribe = function (obj) {
	            var _this = this;
	            this._obj = obj;
	            this._strategy = this._selectStrategy(obj);
	            this._subscription = this._strategy.createSubscription(obj, function (value) { return _this._updateLatestValue(obj, value); });
	        };
	        AsyncPipe.prototype._selectStrategy = function (obj) {
	            if (isPromise(obj)) {
	                return _promiseStrategy;
	            }
	            if (obj.subscribe) {
	                return _observableStrategy;
	            }
	            throw new InvalidPipeArgumentError(AsyncPipe, obj);
	        };
	        AsyncPipe.prototype._dispose = function () {
	            this._strategy.dispose(this._subscription);
	            this._latestValue = null;
	            this._latestReturnedValue = null;
	            this._subscription = null;
	            this._obj = null;
	        };
	        AsyncPipe.prototype._updateLatestValue = function (async, value) {
	            if (async === this._obj) {
	                this._latestValue = value;
	                this._ref.markForCheck();
	            }
	        };
	        AsyncPipe.decorators = [
	            { type: _angular_core.Pipe, args: [{ name: 'async', pure: false },] },
	        ];
	        /** @nocollapse */
	        AsyncPipe.ctorParameters = [
	            { type: _angular_core.ChangeDetectorRef, },
	        ];
	        return AsyncPipe;
	    }());

	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    var NumberFormatStyle;
	    (function (NumberFormatStyle) {
	        NumberFormatStyle[NumberFormatStyle["Decimal"] = 0] = "Decimal";
	        NumberFormatStyle[NumberFormatStyle["Percent"] = 1] = "Percent";
	        NumberFormatStyle[NumberFormatStyle["Currency"] = 2] = "Currency";
	    })(NumberFormatStyle || (NumberFormatStyle = {}));
	    var NumberFormatter = (function () {
	        function NumberFormatter() {
	        }
	        NumberFormatter.format = function (num, locale, style, _a) {
	            var _b = _a === void 0 ? {} : _a, minimumIntegerDigits = _b.minimumIntegerDigits, minimumFractionDigits = _b.minimumFractionDigits, maximumFractionDigits = _b.maximumFractionDigits, currency = _b.currency, _c = _b.currencyAsSymbol, currencyAsSymbol = _c === void 0 ? false : _c;
	            var options = {
	                minimumIntegerDigits: minimumIntegerDigits,
	                minimumFractionDigits: minimumFractionDigits,
	                maximumFractionDigits: maximumFractionDigits,
	                style: NumberFormatStyle[style].toLowerCase()
	            };
	            if (style == NumberFormatStyle.Currency) {
	                options.currency = currency;
	                options.currencyDisplay = currencyAsSymbol ? 'symbol' : 'code';
	            }
	            return new Intl.NumberFormat(locale, options).format(num);
	        };
	        return NumberFormatter;
	    }());
	    var DATE_FORMATS_SPLIT = /((?:[^yMLdHhmsazZEwGjJ']+)|(?:'(?:[^']|'')*')|(?:E+|y+|M+|L+|d+|H+|h+|J+|j+|m+|s+|a|z|Z|G+|w+))(.*)/;
	    var PATTERN_ALIASES = {
	        'yMMMdjms': datePartGetterFactory(combine([
	            digitCondition('year', 1),
	            nameCondition('month', 3),
	            digitCondition('day', 1),
	            digitCondition('hour', 1),
	            digitCondition('minute', 1),
	            digitCondition('second', 1),
	        ])),
	        'yMdjm': datePartGetterFactory(combine([
	            digitCondition('year', 1), digitCondition('month', 1), digitCondition('day', 1),
	            digitCondition('hour', 1), digitCondition('minute', 1)
	        ])),
	        'yMMMMEEEEd': datePartGetterFactory(combine([
	            digitCondition('year', 1), nameCondition('month', 4), nameCondition('weekday', 4),
	            digitCondition('day', 1)
	        ])),
	        'yMMMMd': datePartGetterFactory(combine([digitCondition('year', 1), nameCondition('month', 4), digitCondition('day', 1)])),
	        'yMMMd': datePartGetterFactory(combine([digitCondition('year', 1), nameCondition('month', 3), digitCondition('day', 1)])),
	        'yMd': datePartGetterFactory(combine([digitCondition('year', 1), digitCondition('month', 1), digitCondition('day', 1)])),
	        'jms': datePartGetterFactory(combine([digitCondition('hour', 1), digitCondition('second', 1), digitCondition('minute', 1)])),
	        'jm': datePartGetterFactory(combine([digitCondition('hour', 1), digitCondition('minute', 1)]))
	    };
	    var DATE_FORMATS = {
	        yyyy: datePartGetterFactory(digitCondition('year', 4)),
	        yy: datePartGetterFactory(digitCondition('year', 2)),
	        y: datePartGetterFactory(digitCondition('year', 1)),
	        MMMM: datePartGetterFactory(nameCondition('month', 4)),
	        MMM: datePartGetterFactory(nameCondition('month', 3)),
	        MM: datePartGetterFactory(digitCondition('month', 2)),
	        M: datePartGetterFactory(digitCondition('month', 1)),
	        LLLL: datePartGetterFactory(nameCondition('month', 4)),
	        L: datePartGetterFactory(nameCondition('month', 1)),
	        dd: datePartGetterFactory(digitCondition('day', 2)),
	        d: datePartGetterFactory(digitCondition('day', 1)),
	        HH: digitModifier(hourExtractor(datePartGetterFactory(hour12Modify(digitCondition('hour', 2), false)))),
	        H: hourExtractor(datePartGetterFactory(hour12Modify(digitCondition('hour', 1), false))),
	        hh: digitModifier(hourExtractor(datePartGetterFactory(hour12Modify(digitCondition('hour', 2), true)))),
	        h: hourExtractor(datePartGetterFactory(hour12Modify(digitCondition('hour', 1), true))),
	        jj: datePartGetterFactory(digitCondition('hour', 2)),
	        j: datePartGetterFactory(digitCondition('hour', 1)),
	        mm: digitModifier(datePartGetterFactory(digitCondition('minute', 2))),
	        m: datePartGetterFactory(digitCondition('minute', 1)),
	        ss: digitModifier(datePartGetterFactory(digitCondition('second', 2))),
	        s: datePartGetterFactory(digitCondition('second', 1)),
	        // while ISO 8601 requires fractions to be prefixed with `.` or `,`
	        // we can be just safely rely on using `sss` since we currently don't support single or two digit
	        // fractions
	        sss: datePartGetterFactory(digitCondition('second', 3)),
	        EEEE: datePartGetterFactory(nameCondition('weekday', 4)),
	        EEE: datePartGetterFactory(nameCondition('weekday', 3)),
	        EE: datePartGetterFactory(nameCondition('weekday', 2)),
	        E: datePartGetterFactory(nameCondition('weekday', 1)),
	        a: hourClockExtractor(datePartGetterFactory(hour12Modify(digitCondition('hour', 1), true))),
	        Z: timeZoneGetter('short'),
	        z: timeZoneGetter('long'),
	        ww: datePartGetterFactory({}),
	        // first Thursday of the year. not support ?
	        w: datePartGetterFactory({}),
	        // of the year not support ?
	        G: datePartGetterFactory(nameCondition('era', 1)),
	        GG: datePartGetterFactory(nameCondition('era', 2)),
	        GGG: datePartGetterFactory(nameCondition('era', 3)),
	        GGGG: datePartGetterFactory(nameCondition('era', 4))
	    };
	    function digitModifier(inner) {
	        return function (date, locale) {
	            var result = inner(date, locale);
	            return result.length == 1 ? '0' + result : result;
	        };
	    }
	    function hourClockExtractor(inner) {
	        return function (date, locale) { return inner(date, locale).split(' ')[1]; };
	    }
	    function hourExtractor(inner) {
	        return function (date, locale) { return inner(date, locale).split(' ')[0]; };
	    }
	    function intlDateFormat(date, locale, options) {
	        return new Intl.DateTimeFormat(locale, options).format(date).replace(/[\u200e\u200f]/g, '');
	    }
	    function timeZoneGetter(timezone) {
	        // To workaround `Intl` API restriction for single timezone let format with 24 hours
	        var options = { hour: '2-digit', hour12: false, timeZoneName: timezone };
	        return function (date, locale) {
	            var result = intlDateFormat(date, locale, options);
	            // Then extract first 3 letters that related to hours
	            return result ? result.substring(3) : '';
	        };
	    }
	    function hour12Modify(options, value) {
	        options.hour12 = value;
	        return options;
	    }
	    function digitCondition(prop, len) {
	        var result = {};
	        result[prop] = len === 2 ? '2-digit' : 'numeric';
	        return result;
	    }
	    function nameCondition(prop, len) {
	        var result = {};
	        if (len < 4) {
	            result[prop] = len > 1 ? 'short' : 'narrow';
	        }
	        else {
	            result[prop] = 'long';
	        }
	        return result;
	    }
	    function combine(options) {
	        return (_a = Object).assign.apply(_a, [{}].concat(options));
	        var _a;
	    }
	    function datePartGetterFactory(ret) {
	        return function (date, locale) { return intlDateFormat(date, locale, ret); };
	    }
	    var DATE_FORMATTER_CACHE = new Map();
	    function dateFormatter(format, date, locale) {
	        var fn = PATTERN_ALIASES[format];
	        if (fn)
	            return fn(date, locale);
	        var parts = DATE_FORMATTER_CACHE.get(format);
	        if (!parts) {
	            parts = [];
	            var match = void 0;
	            DATE_FORMATS_SPLIT.exec(format);
	            while (format) {
	                match = DATE_FORMATS_SPLIT.exec(format);
	                if (match) {
	                    parts = parts.concat(match.slice(1));
	                    format = parts.pop();
	                }
	                else {
	                    parts.push(format);
	                    format = null;
	                }
	            }
	            DATE_FORMATTER_CACHE.set(format, parts);
	        }
	        return parts.reduce(function (text, part) {
	            var fn = DATE_FORMATS[part];
	            return text + (fn ? fn(date, locale) : partToTime(part));
	        }, '');
	    }
	    function partToTime(part) {
	        return part === '\'\'' ? '\'' : part.replace(/(^'|'$)/g, '').replace(/''/g, '\'');
	    }
	    var DateFormatter = (function () {
	        function DateFormatter() {
	        }
	        DateFormatter.format = function (date, locale, pattern) {
	            return dateFormatter(pattern, date, locale);
	        };
	        return DateFormatter;
	    }());

	    /**
	     * @ngModule CommonModule
	     * @whatItDoes Formats a date according to locale rules.
	     * @howToUse `date_expression | date[:format]`
	     * @description
	     *
	     * Where:
	     * - `expression` is a date object or a number (milliseconds since UTC epoch) or an ISO string
	     * (https://www.w3.org/TR/NOTE-datetime).
	     * - `format` indicates which date/time components to include. The format can be predifined as
	     *   shown below or custom as shown in the table.
	     *   - `'medium'`: equivalent to `'yMMMdjms'` (e.g. `Sep 3, 2010, 12:05:08 PM` for `en-US`)
	     *   - `'short'`: equivalent to `'yMdjm'` (e.g. `9/3/2010, 12:05 PM` for `en-US`)
	     *   - `'fullDate'`: equivalent to `'yMMMMEEEEd'` (e.g. `Friday, September 3, 2010` for `en-US`)
	     *   - `'longDate'`: equivalent to `'yMMMMd'` (e.g. `September 3, 2010` for `en-US`)
	     *   - `'mediumDate'`: equivalent to `'yMMMd'` (e.g. `Sep 3, 2010` for `en-US`)
	     *   - `'shortDate'`: equivalent to `'yMd'` (e.g. `9/3/2010` for `en-US`)
	     *   - `'mediumTime'`: equivalent to `'jms'` (e.g. `12:05:08 PM` for `en-US`)
	     *   - `'shortTime'`: equivalent to `'jm'` (e.g. `12:05 PM` for `en-US`)
	     *
	     *
	     *  | Component | Symbol | Narrow | Short Form   | Long Form         | Numeric   | 2-digit   |
	     *  |-----------|:------:|--------|--------------|-------------------|-----------|-----------|
	     *  | era       |   G    | G (A)  | GGG (AD)     | GGGG (Anno Domini)| -         | -         |
	     *  | year      |   y    | -      | -            | -                 | y (2015)  | yy (15)   |
	     *  | month     |   M    | L (S)  | MMM (Sep)    | MMMM (September)  | M (9)     | MM (09)   |
	     *  | day       |   d    | -      | -            | -                 | d (3)     | dd (03)   |
	     *  | weekday   |   E    | E (S)  | EEE (Sun)    | EEEE (Sunday)     | -         | -         |
	     *  | hour      |   j    | -      | -            | -                 | j (13)    | jj (13)   |
	     *  | hour12    |   h    | -      | -            | -                 | h (1 PM)  | hh (01 PM)|
	     *  | hour24    |   H    | -      | -            | -                 | H (13)    | HH (13)   |
	     *  | minute    |   m    | -      | -            | -                 | m (5)     | mm (05)   |
	     *  | second    |   s    | -      | -            | -                 | s (9)     | ss (09)   |
	     *  | timezone  |   z    | -      | -            | z (Pacific Standard Time)| -  | -         |
	     *  | timezone  |   Z    | -      | Z (GMT-8:00) | -                 | -         | -         |
	     *  | timezone  |   a    | -      | a (PM)       | -                 | -         | -         |
	     *
	     * In javascript, only the components specified will be respected (not the ordering,
	     * punctuations, ...) and details of the formatting will be dependent on the locale.
	     *
	     * Timezone of the formatted text will be the local system timezone of the end-user's machine.
	     *
	     * When the expression is a ISO string without time (e.g. 2016-09-19) the time zone offset is not
	     * applied and the formatted text will have the same day, month and year of the expression.
	     *
	     * WARNINGS:
	     * - this pipe is marked as pure hence it will not be re-evaluated when the input is mutated.
	     *   Instead users should treat the date as an immutable object and change the reference when the
	     *   pipe needs to re-run (this is to avoid reformatting the date on every change detection run
	     *   which would be an expensive operation).
	     * - this pipe uses the Internationalization API. Therefore it is only reliable in Chrome and Opera
	     *   browsers.
	     *
	     * ### Examples
	     *
	     * Assuming `dateObj` is (year: 2015, month: 6, day: 15, hour: 21, minute: 43, second: 11)
	     * in the _local_ time and locale is 'en-US':
	     *
	     * ```
	     *     {{ dateObj | date }}               // output is 'Jun 15, 2015'
	     *     {{ dateObj | date:'medium' }}      // output is 'Jun 15, 2015, 9:43:11 PM'
	     *     {{ dateObj | date:'shortTime' }}   // output is '9:43 PM'
	     *     {{ dateObj | date:'mmss' }}        // output is '43:11'
	     * ```
	     *
	     * {@example common/pipes/ts/date_pipe.ts region='DatePipe'}
	     *
	     * @stable
	     */
	    var DatePipe = (function () {
	        function DatePipe(_locale) {
	            this._locale = _locale;
	        }
	        DatePipe.prototype.transform = function (value, pattern) {
	            if (pattern === void 0) { pattern = 'mediumDate'; }
	            var date;
	            if (isBlank$1(value))
	                return null;
	            if (typeof value === 'string') {
	                value = value.trim();
	            }
	            if (isDate(value)) {
	                date = value;
	            }
	            else if (NumberWrapper.isNumeric(value)) {
	                date = new Date(parseFloat(value));
	            }
	            else if (typeof value === 'string' && /^(\d{4}-\d{1,2}-\d{1,2})$/.test(value)) {
	                /**
	                * For ISO Strings without time the day, month and year must be extracted from the ISO String
	                * before Date creation to avoid time offset and errors in the new Date.
	                * If we only replace '-' with ',' in the ISO String ("2015,01,01"), and try to create a new
	                * date, some browsers (e.g. IE 9) will throw an invalid Date error
	                * If we leave the '-' ("2015-01-01") and try to create a new Date("2015-01-01") the timeoffset
	                * is applied
	                * Note: ISO months are 0 for January, 1 for February, ...
	                */
	                var _a = value.split('-').map(function (val) { return parseInt(val, 10); }), y = _a[0], m = _a[1], d = _a[2];
	                date = new Date(y, m - 1, d);
	            }
	            else {
	                date = new Date(value);
	            }
	            if (!isDate(date)) {
	                throw new InvalidPipeArgumentError(DatePipe, value);
	            }
	            return DateFormatter.format(date, this._locale, DatePipe._ALIASES[pattern] || pattern);
	        };
	        /** @internal */
	        DatePipe._ALIASES = {
	            'medium': 'yMMMdjms',
	            'short': 'yMdjm',
	            'fullDate': 'yMMMMEEEEd',
	            'longDate': 'yMMMMd',
	            'mediumDate': 'yMMMd',
	            'shortDate': 'yMd',
	            'mediumTime': 'jms',
	            'shortTime': 'jm'
	        };
	        DatePipe.decorators = [
	            { type: _angular_core.Pipe, args: [{ name: 'date', pure: true },] },
	        ];
	        /** @nocollapse */
	        DatePipe.ctorParameters = [
	            { type: undefined, decorators: [{ type: _angular_core.Inject, args: [_angular_core.LOCALE_ID,] },] },
	        ];
	        return DatePipe;
	    }());
	    function isBlank$1(obj) {
	        return obj == null || obj === '';
	    }

	    var _INTERPOLATION_REGEXP = /#/g;
	    /**
	     * @ngModule CommonModule
	     * @whatItDoes Maps a value to a string that pluralizes the value according to locale rules.
	     * @howToUse `expression | i18nPlural:mapping`
	     * @description
	     *
	     *  Where:
	     *  - `expression` is a number.
	     *  - `mapping` is an object that mimics the ICU format, see
	     *    http://userguide.icu-project.org/formatparse/messages
	     *
	     *  ## Example
	     *
	     * {@example common/pipes/ts/i18n_pipe.ts region='I18nPluralPipeComponent'}
	     *
	     * @experimental
	     */
	    var I18nPluralPipe = (function () {
	        function I18nPluralPipe(_localization) {
	            this._localization = _localization;
	        }
	        I18nPluralPipe.prototype.transform = function (value, pluralMap) {
	            if (isBlank(value))
	                return '';
	            if (typeof pluralMap !== 'object' || pluralMap === null) {
	                throw new InvalidPipeArgumentError(I18nPluralPipe, pluralMap);
	            }
	            var key = getPluralCategory(value, Object.keys(pluralMap), this._localization);
	            return pluralMap[key].replace(_INTERPOLATION_REGEXP, value.toString());
	        };
	        I18nPluralPipe.decorators = [
	            { type: _angular_core.Pipe, args: [{ name: 'i18nPlural', pure: true },] },
	        ];
	        /** @nocollapse */
	        I18nPluralPipe.ctorParameters = [
	            { type: NgLocalization, },
	        ];
	        return I18nPluralPipe;
	    }());

	    /**
	     * @ngModule CommonModule
	     * @whatItDoes Generic selector that displays the string that matches the current value.
	     * @howToUse `expression | i18nSelect:mapping`
	     * @description
	     *
	     *  Where `mapping` is an object that indicates the text that should be displayed
	     *  for different values of the provided `expression`.
	     *  If none of the keys of the mapping match the value of the `expression`, then the content
	     *  of the `other` key is returned when present, otherwise an empty string is returned.
	     *
	     *  ## Example
	     *
	     * {@example common/pipes/ts/i18n_pipe.ts region='I18nSelectPipeComponent'}
	     *
	     *  @experimental
	     */
	    var I18nSelectPipe = (function () {
	        function I18nSelectPipe() {
	        }
	        I18nSelectPipe.prototype.transform = function (value, mapping) {
	            if (value == null)
	                return '';
	            if (typeof mapping !== 'object' || typeof value !== 'string') {
	                throw new InvalidPipeArgumentError(I18nSelectPipe, mapping);
	            }
	            if (mapping.hasOwnProperty(value)) {
	                return mapping[value];
	            }
	            if (mapping.hasOwnProperty('other')) {
	                return mapping['other'];
	            }
	            return '';
	        };
	        I18nSelectPipe.decorators = [
	            { type: _angular_core.Pipe, args: [{ name: 'i18nSelect', pure: true },] },
	        ];
	        /** @nocollapse */
	        I18nSelectPipe.ctorParameters = [];
	        return I18nSelectPipe;
	    }());

	    /**
	     * @ngModule CommonModule
	     * @whatItDoes Converts value into JSON string.
	     * @howToUse `expression | json`
	     * @description
	     *
	     * Converts value into string using `JSON.stringify`. Useful for debugging.
	     *
	     * ### Example
	     * {@example common/pipes/ts/json_pipe.ts region='JsonPipe'}
	     *
	     * @stable
	     */
	    var JsonPipe = (function () {
	        function JsonPipe() {
	        }
	        JsonPipe.prototype.transform = function (value) { return JSON.stringify(value, null, 2); };
	        JsonPipe.decorators = [
	            { type: _angular_core.Pipe, args: [{ name: 'json', pure: false },] },
	        ];
	        /** @nocollapse */
	        JsonPipe.ctorParameters = [];
	        return JsonPipe;
	    }());

	    /**
	     * @ngModule CommonModule
	     * @whatItDoes Transforms string to lowercase.
	     * @howToUse `expression | lowercase`
	     * @description
	     *
	     * Converts value into a lowercase string using `String.prototype.toLowerCase()`.
	     *
	     * ### Example
	     *
	     * {@example common/pipes/ts/lowerupper_pipe.ts region='LowerUpperPipe'}
	     *
	     * @stable
	     */
	    var LowerCasePipe = (function () {
	        function LowerCasePipe() {
	        }
	        LowerCasePipe.prototype.transform = function (value) {
	            if (isBlank(value))
	                return value;
	            if (typeof value !== 'string') {
	                throw new InvalidPipeArgumentError(LowerCasePipe, value);
	            }
	            return value.toLowerCase();
	        };
	        LowerCasePipe.decorators = [
	            { type: _angular_core.Pipe, args: [{ name: 'lowercase' },] },
	        ];
	        /** @nocollapse */
	        LowerCasePipe.ctorParameters = [];
	        return LowerCasePipe;
	    }());

	    var _NUMBER_FORMAT_REGEXP = /^(\d+)?\.((\d+)(-(\d+))?)?$/;
	    function formatNumber(pipe, locale, value, style, digits, currency, currencyAsSymbol) {
	        if (currency === void 0) { currency = null; }
	        if (currencyAsSymbol === void 0) { currencyAsSymbol = false; }
	        if (isBlank(value))
	            return null;
	        // Convert strings to numbers
	        value = typeof value === 'string' && NumberWrapper.isNumeric(value) ? +value : value;
	        if (typeof value !== 'number') {
	            throw new InvalidPipeArgumentError(pipe, value);
	        }
	        var minInt;
	        var minFraction;
	        var maxFraction;
	        if (style !== NumberFormatStyle.Currency) {
	            // rely on Intl default for currency
	            minInt = 1;
	            minFraction = 0;
	            maxFraction = 3;
	        }
	        if (digits) {
	            var parts = digits.match(_NUMBER_FORMAT_REGEXP);
	            if (parts === null) {
	                throw new Error(digits + " is not a valid digit info for number pipes");
	            }
	            if (isPresent(parts[1])) {
	                minInt = NumberWrapper.parseIntAutoRadix(parts[1]);
	            }
	            if (isPresent(parts[3])) {
	                minFraction = NumberWrapper.parseIntAutoRadix(parts[3]);
	            }
	            if (isPresent(parts[5])) {
	                maxFraction = NumberWrapper.parseIntAutoRadix(parts[5]);
	            }
	        }
	        return NumberFormatter.format(value, locale, style, {
	            minimumIntegerDigits: minInt,
	            minimumFractionDigits: minFraction,
	            maximumFractionDigits: maxFraction,
	            currency: currency,
	            currencyAsSymbol: currencyAsSymbol,
	        });
	    }
	    /**
	     * @ngModule CommonModule
	     * @whatItDoes Formats a number according to locale rules.
	     * @howToUse `number_expression | number[:digitInfo]`
	     *
	     * Formats a number as text. Group sizing and separator and other locale-specific
	     * configurations are based on the active locale.
	     *
	     * where `expression` is a number:
	     *  - `digitInfo` is a `string` which has a following format: <br>
	     *     <code>{minIntegerDigits}.{minFractionDigits}-{maxFractionDigits}</code>
	     *   - `minIntegerDigits` is the minimum number of integer digits to use. Defaults to `1`.
	     *   - `minFractionDigits` is the minimum number of digits after fraction. Defaults to `0`.
	     *   - `maxFractionDigits` is the maximum number of digits after fraction. Defaults to `3`.
	     *
	     * For more information on the acceptable range for each of these numbers and other
	     * details see your native internationalization library.
	     *
	     * WARNING: this pipe uses the Internationalization API which is not yet available in all browsers
	     * and may require a polyfill. See {@linkDocs guide/browser-support} for details.
	     *
	     * ### Example
	     *
	     * {@example common/pipes/ts/number_pipe.ts region='NumberPipe'}
	     *
	     * @stable
	     */
	    var DecimalPipe = (function () {
	        function DecimalPipe(_locale) {
	            this._locale = _locale;
	        }
	        DecimalPipe.prototype.transform = function (value, digits) {
	            if (digits === void 0) { digits = null; }
	            return formatNumber(DecimalPipe, this._locale, value, NumberFormatStyle.Decimal, digits);
	        };
	        DecimalPipe.decorators = [
	            { type: _angular_core.Pipe, args: [{ name: 'number' },] },
	        ];
	        /** @nocollapse */
	        DecimalPipe.ctorParameters = [
	            { type: undefined, decorators: [{ type: _angular_core.Inject, args: [_angular_core.LOCALE_ID,] },] },
	        ];
	        return DecimalPipe;
	    }());
	    /**
	     * @ngModule CommonModule
	     * @whatItDoes Formats a number as a percentage according to locale rules.
	     * @howToUse `number_expression | percent[:digitInfo]`
	     *
	     * @description
	     *
	     * Formats a number as percentage.
	     *
	     * - `digitInfo` See {@link DecimalPipe} for detailed description.
	     *
	     * WARNING: this pipe uses the Internationalization API which is not yet available in all browsers
	     * and may require a polyfill. See {@linkDocs guide/browser-support} for details.
	     *
	     * ### Example
	     *
	     * {@example common/pipes/ts/number_pipe.ts region='PercentPipe'}
	     *
	     * @stable
	     */
	    var PercentPipe = (function () {
	        function PercentPipe(_locale) {
	            this._locale = _locale;
	        }
	        PercentPipe.prototype.transform = function (value, digits) {
	            if (digits === void 0) { digits = null; }
	            return formatNumber(PercentPipe, this._locale, value, NumberFormatStyle.Percent, digits);
	        };
	        PercentPipe.decorators = [
	            { type: _angular_core.Pipe, args: [{ name: 'percent' },] },
	        ];
	        /** @nocollapse */
	        PercentPipe.ctorParameters = [
	            { type: undefined, decorators: [{ type: _angular_core.Inject, args: [_angular_core.LOCALE_ID,] },] },
	        ];
	        return PercentPipe;
	    }());
	    /**
	     * @ngModule CommonModule
	     * @whatItDoes Formats a number as currency using locale rules.
	     * @howToUse `number_expression | currency[:currencyCode[:symbolDisplay[:digitInfo]]]`
	     * @description
	     *
	     * Use `currency` to format a number as currency.
	     *
	     * - `currencyCode` is the [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) currency code, such
	     *    as `USD` for the US dollar and `EUR` for the euro.
	     * - `symbolDisplay` is a boolean indicating whether to use the currency symbol or code.
	     *   - `true`: use symbol (e.g. `$`).
	     *   - `false`(default): use code (e.g. `USD`).
	     * - `digitInfo` See {@link DecimalPipe} for detailed description.
	     *
	     * WARNING: this pipe uses the Internationalization API which is not yet available in all browsers
	     * and may require a polyfill. See {@linkDocs guide/browser-support} for details.
	     *
	     * ### Example
	     *
	     * {@example common/pipes/ts/number_pipe.ts region='CurrencyPipe'}
	     *
	     * @stable
	     */
	    var CurrencyPipe = (function () {
	        function CurrencyPipe(_locale) {
	            this._locale = _locale;
	        }
	        CurrencyPipe.prototype.transform = function (value, currencyCode, symbolDisplay, digits) {
	            if (currencyCode === void 0) { currencyCode = 'USD'; }
	            if (symbolDisplay === void 0) { symbolDisplay = false; }
	            if (digits === void 0) { digits = null; }
	            return formatNumber(CurrencyPipe, this._locale, value, NumberFormatStyle.Currency, digits, currencyCode, symbolDisplay);
	        };
	        CurrencyPipe.decorators = [
	            { type: _angular_core.Pipe, args: [{ name: 'currency' },] },
	        ];
	        /** @nocollapse */
	        CurrencyPipe.ctorParameters = [
	            { type: undefined, decorators: [{ type: _angular_core.Inject, args: [_angular_core.LOCALE_ID,] },] },
	        ];
	        return CurrencyPipe;
	    }());

	    /**
	     * @ngModule CommonModule
	     * @whatItDoes Creates a new List or String containing a subset (slice) of the elements.
	     * @howToUse `array_or_string_expression | slice:start[:end]`
	     * @description
	     *
	     * Where the input expression is a `List` or `String`, and:
	     * - `start`: The starting index of the subset to return.
	     *   - **a positive integer**: return the item at `start` index and all items after
	     *     in the list or string expression.
	     *   - **a negative integer**: return the item at `start` index from the end and all items after
	     *     in the list or string expression.
	     *   - **if positive and greater than the size of the expression**: return an empty list or string.
	     *   - **if negative and greater than the size of the expression**: return entire list or string.
	     * - `end`: The ending index of the subset to return.
	     *   - **omitted**: return all items until the end.
	     *   - **if positive**: return all items before `end` index of the list or string.
	     *   - **if negative**: return all items before `end` index from the end of the list or string.
	     *
	     * All behavior is based on the expected behavior of the JavaScript API `Array.prototype.slice()`
	     * and `String.prototype.slice()`.
	     *
	     * When operating on a [List], the returned list is always a copy even when all
	     * the elements are being returned.
	     *
	     * When operating on a blank value, the pipe returns the blank value.
	     *
	     * ## List Example
	     *
	     * This `ngFor` example:
	     *
	     * {@example common/pipes/ts/slice_pipe.ts region='SlicePipe_list'}
	     *
	     * produces the following:
	     *
	     *     <li>b</li>
	     *     <li>c</li>
	     *
	     * ## String Examples
	     *
	     * {@example common/pipes/ts/slice_pipe.ts region='SlicePipe_string'}
	     *
	     * @stable
	     */
	    var SlicePipe = (function () {
	        function SlicePipe() {
	        }
	        SlicePipe.prototype.transform = function (value, start, end) {
	            if (isBlank(value))
	                return value;
	            if (!this.supports(value)) {
	                throw new InvalidPipeArgumentError(SlicePipe, value);
	            }
	            return value.slice(start, end);
	        };
	        SlicePipe.prototype.supports = function (obj) { return typeof obj === 'string' || Array.isArray(obj); };
	        SlicePipe.decorators = [
	            { type: _angular_core.Pipe, args: [{ name: 'slice', pure: false },] },
	        ];
	        /** @nocollapse */
	        SlicePipe.ctorParameters = [];
	        return SlicePipe;
	    }());

	    /**
	     * @ngModule CommonModule
	     * @whatItDoes Transforms string to uppercase.
	     * @howToUse `expression | uppercase`
	     * @description
	     *
	     * Converts value into an uppercase string using `String.prototype.toUpperCase()`.
	     *
	     * ### Example
	     *
	     * {@example common/pipes/ts/lowerupper_pipe.ts region='LowerUpperPipe'}
	     *
	     * @stable
	     */
	    var UpperCasePipe = (function () {
	        function UpperCasePipe() {
	        }
	        UpperCasePipe.prototype.transform = function (value) {
	            if (isBlank(value))
	                return value;
	            if (typeof value !== 'string') {
	                throw new InvalidPipeArgumentError(UpperCasePipe, value);
	            }
	            return value.toUpperCase();
	        };
	        UpperCasePipe.decorators = [
	            { type: _angular_core.Pipe, args: [{ name: 'uppercase' },] },
	        ];
	        /** @nocollapse */
	        UpperCasePipe.ctorParameters = [];
	        return UpperCasePipe;
	    }());

	    /**
	     * A collection of Angular pipes that are likely to be used in each and every application.
	     */
	    var COMMON_PIPES = [
	        AsyncPipe,
	        UpperCasePipe,
	        LowerCasePipe,
	        JsonPipe,
	        SlicePipe,
	        DecimalPipe,
	        PercentPipe,
	        CurrencyPipe,
	        DatePipe,
	        I18nPluralPipe,
	        I18nSelectPipe,
	    ];

	    // Note: This does not contain the location providers,
	    // as they need some platform specific implementations to work.
	    /**
	     * The module that includes all the basic Angular directives like {@link NgIf}, {@link NgFor}, ...
	     *
	     * @stable
	     */
	    var CommonModule = (function () {
	        function CommonModule() {
	        }
	        CommonModule.decorators = [
	            { type: _angular_core.NgModule, args: [{
	                        declarations: [COMMON_DIRECTIVES, COMMON_PIPES],
	                        exports: [COMMON_DIRECTIVES, COMMON_PIPES],
	                        providers: [
	                            { provide: NgLocalization, useClass: NgLocaleLocalization },
	                        ],
	                    },] },
	        ];
	        /** @nocollapse */
	        CommonModule.ctorParameters = [];
	        return CommonModule;
	    }());

	    exports.NgLocalization = NgLocalization;
	    exports.CommonModule = CommonModule;
	    exports.NgClass = NgClass;
	    exports.NgFor = NgFor;
	    exports.NgIf = NgIf;
	    exports.NgPlural = NgPlural;
	    exports.NgPluralCase = NgPluralCase;
	    exports.NgStyle = NgStyle;
	    exports.NgSwitch = NgSwitch;
	    exports.NgSwitchCase = NgSwitchCase;
	    exports.NgSwitchDefault = NgSwitchDefault;
	    exports.NgTemplateOutlet = NgTemplateOutlet;
	    exports.AsyncPipe = AsyncPipe;
	    exports.DatePipe = DatePipe;
	    exports.I18nPluralPipe = I18nPluralPipe;
	    exports.I18nSelectPipe = I18nSelectPipe;
	    exports.JsonPipe = JsonPipe;
	    exports.LowerCasePipe = LowerCasePipe;
	    exports.CurrencyPipe = CurrencyPipe;
	    exports.DecimalPipe = DecimalPipe;
	    exports.PercentPipe = PercentPipe;
	    exports.SlicePipe = SlicePipe;
	    exports.UpperCasePipe = UpperCasePipe;
	    exports.PlatformLocation = PlatformLocation;
	    exports.LocationStrategy = LocationStrategy;
	    exports.APP_BASE_HREF = APP_BASE_HREF;
	    exports.HashLocationStrategy = HashLocationStrategy;
	    exports.PathLocationStrategy = PathLocationStrategy;
	    exports.Location = Location;

	}));
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 100 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var core_1 = __webpack_require__(80);
	var angular_2_local_storage_1 = __webpack_require__(101);
	var platform_browser_1 = __webpack_require__(98);
	var forms_1 = __webpack_require__(109);
	var ng_bootstrap_1 = __webpack_require__(113);
	// import { MaterialModule } from '@angular/material';
	var app_component_1 = __webpack_require__(121);
	var todo_list_component_1 = __webpack_require__(122);
	var tip_detail_component_1 = __webpack_require__(126);
	var edit_tip_component_1 = __webpack_require__(159);
	var add_tip_component_1 = __webpack_require__(160);
	var more_operation_component_1 = __webpack_require__(161);
	var tip_service_1 = __webpack_require__(123);
	var app_routing_module_1 = __webpack_require__(162);
	var localStorageServiceConfig = {
	    prefix: 'my-app',
	    storageType: 'sessionStorage'
	};
	var AppModule = (function () {
	    function AppModule() {
	    }
	    AppModule = __decorate([
	        core_1.NgModule({
	            imports: [
	                platform_browser_1.BrowserModule,
	                forms_1.FormsModule,
	                app_routing_module_1.AppRoutingModule,
	                ng_bootstrap_1.NgbModule.forRoot()
	            ],
	            declarations: [
	                app_component_1.AppComponent,
	                todo_list_component_1.TodolistComponent,
	                // OnChangesComponent,
	                tip_detail_component_1.TipDetailComponent,
	                edit_tip_component_1.EditTipComponent,
	                add_tip_component_1.AddTipComponent,
	                more_operation_component_1.MoreOperationComponent,
	            ],
	            providers: [tip_service_1.TipService, angular_2_local_storage_1.LocalStorageService, {
	                    provide: angular_2_local_storage_1.LOCAL_STORAGE_SERVICE_CONFIG, useValue: localStorageServiceConfig
	                }],
	            bootstrap: [app_component_1.AppComponent]
	        }), 
	        __metadata('design:paramtypes', [])
	    ], AppModule);
	    return AppModule;
	}());
	exports.AppModule = AppModule;


/***/ },
/* 101 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var LocalStorageService_1 = __webpack_require__(102);
	exports.LocalStorageService = LocalStorageService_1.LocalStorageService;
	var LocalStorageServiceConfig_1 = __webpack_require__(108);
	exports.LOCAL_STORAGE_SERVICE_CONFIG = LocalStorageServiceConfig_1.LOCAL_STORAGE_SERVICE_CONFIG;
	//# sourceMappingURL=../src/angular-2-local-storage.js.map

/***/ },
/* 102 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var __param = (this && this.__param) || function (paramIndex, decorator) {
	    return function (target, key) { decorator(target, key, paramIndex); }
	};
	// Angular:
	var core_1 = __webpack_require__(80);
	var Observable_1 = __webpack_require__(82);
	var Subscriber_1 = __webpack_require__(85);
	__webpack_require__(103);
	// Dependencies:
	var LocalStorageServiceConfig_1 = __webpack_require__(108);
	// Constants:
	var DEPRECATED = 'This function is deprecated.';
	var LOCAL_STORAGE_NOT_SUPPORTED = 'LOCAL_STORAGE_NOT_SUPPORTED';
	var LocalStorageService = (function () {
	    function LocalStorageService(config) {
	        var _this = this;
	        this.isSupported = false;
	        this.notifyOptions = {
	            setItem: false,
	            removeItem: false
	        };
	        this.prefix = 'ls';
	        this.storageType = 'localStorage';
	        this.errors = new Subscriber_1.Subscriber();
	        this.removeItems = new Subscriber_1.Subscriber();
	        this.setItems = new Subscriber_1.Subscriber();
	        this.warnings = new Subscriber_1.Subscriber();
	        var notifyOptions = config.notifyOptions, prefix = config.prefix, storageType = config.storageType;
	        if (notifyOptions != null) {
	            var setItem = notifyOptions.setItem, removeItem = notifyOptions.removeItem;
	            this.setNotify(setItem, removeItem);
	        }
	        if (prefix != null) {
	            this.setPrefix(prefix);
	        }
	        if (storageType != null) {
	            this.setStorageType(storageType);
	        }
	        this.errors$ = new Observable_1.Observable(function (observer) { return _this.errors = observer; }).share();
	        this.removeItems$ = new Observable_1.Observable(function (observer) { return _this.removeItems = observer; }).share();
	        this.setItems$ = new Observable_1.Observable(function (observer) { return _this.setItems = observer; }).share();
	        this.warnings$ = new Observable_1.Observable(function (observer) { return _this.warnings = observer; }).share();
	        this.isSupported = this.checkSupport();
	    }
	    LocalStorageService.prototype.add = function (key, value) {
	        if (console && console.warn) {
	            console.warn(DEPRECATED);
	            console.warn('Use `LocalStorageService.set` instead.');
	        }
	        return this.set(key, value);
	    };
	    LocalStorageService.prototype.clearAll = function (regularExpression) {
	        // Setting both regular expressions independently
	        // Empty strings result in catchall RegExp
	        var prefixRegex = !!this.prefix ? new RegExp('^' + this.prefix) : new RegExp('');
	        var testRegex = !!regularExpression ? new RegExp(regularExpression) : new RegExp('');
	        if (!this.isSupported) {
	            this.warnings.next(LOCAL_STORAGE_NOT_SUPPORTED);
	            return false;
	        }
	        var prefixLength = this.prefix.length;
	        for (var key in this.webStorage) {
	            // Only remove items that are for this app and match the regular expression
	            if (prefixRegex.test(key) && testRegex.test(key.substr(prefixLength))) {
	                try {
	                    this.remove(key.substr(prefixLength));
	                }
	                catch (e) {
	                    this.errors.next(e.message);
	                    return false;
	                }
	            }
	        }
	        return true;
	    };
	    LocalStorageService.prototype.deriveKey = function (key) {
	        return "" + this.prefix + key;
	    };
	    LocalStorageService.prototype.get = function (key) {
	        if (!this.isSupported) {
	            this.warnings.next(LOCAL_STORAGE_NOT_SUPPORTED);
	            return null;
	        }
	        var item = this.webStorage ? this.webStorage.getItem(this.deriveKey(key)) : null;
	        // FIXME: not a perfect solution, since a valid 'null' string can't be stored
	        if (!item || item === 'null') {
	            return null;
	        }
	        try {
	            return JSON.parse(item);
	        }
	        catch (e) {
	            return null;
	        }
	    };
	    LocalStorageService.prototype.getStorageType = function () {
	        return this.storageType;
	    };
	    LocalStorageService.prototype.keys = function () {
	        if (!this.isSupported) {
	            this.warnings.next(LOCAL_STORAGE_NOT_SUPPORTED);
	            return [];
	        }
	        var prefixLength = this.prefix.length;
	        var keys = [];
	        for (var key in this.webStorage) {
	            // Only return keys that are for this app
	            if (key.substr(0, prefixLength) === this.prefix) {
	                try {
	                    keys.push(key.substr(prefixLength));
	                }
	                catch (e) {
	                    this.errors.next(e.message);
	                    return [];
	                }
	            }
	        }
	        return keys;
	    };
	    LocalStorageService.prototype.length = function () {
	        var count = 0;
	        var storage = this.webStorage;
	        for (var i = 0; i < storage.length; i++) {
	            if (storage.key(i).indexOf(this.prefix) === 0) {
	                count += 1;
	            }
	        }
	        return count;
	    };
	    LocalStorageService.prototype.remove = function () {
	        var _this = this;
	        var keys = [];
	        for (var _i = 0; _i < arguments.length; _i++) {
	            keys[_i - 0] = arguments[_i];
	        }
	        var result = true;
	        keys.forEach(function (key) {
	            if (!_this.isSupported) {
	                _this.warnings.next(LOCAL_STORAGE_NOT_SUPPORTED);
	                result = false;
	            }
	            try {
	                _this.webStorage.removeItem(_this.deriveKey(key));
	                if (_this.notifyOptions.removeItem) {
	                    _this.removeItems.next({
	                        key: key,
	                        storageType: _this.storageType
	                    });
	                }
	            }
	            catch (e) {
	                _this.errors.next(e.message);
	                result = false;
	            }
	        });
	        return result;
	    };
	    LocalStorageService.prototype.set = function (key, value) {
	        // Let's convert `undefined` values to `null` to get the value consistent
	        if (value === undefined) {
	            value = null;
	        }
	        else {
	            value = JSON.stringify(value);
	        }
	        if (!this.isSupported) {
	            this.warnings.next(LOCAL_STORAGE_NOT_SUPPORTED);
	            return false;
	        }
	        try {
	            if (this.webStorage) {
	                this.webStorage.setItem(this.deriveKey(key), value);
	            }
	            if (this.notifyOptions.setItem) {
	                this.setItems.next({
	                    key: key,
	                    newvalue: value,
	                    storageType: this.storageType
	                });
	            }
	        }
	        catch (e) {
	            this.errors.next(e.message);
	            return false;
	        }
	        return true;
	    };
	    LocalStorageService.prototype.checkSupport = function () {
	        try {
	            var supported = this.storageType in window
	                && window[this.storageType] !== null;
	            if (supported) {
	                this.webStorage = window[this.storageType];
	                // When Safari (OS X or iOS) is in private browsing mode, it
	                // appears as though localStorage is available, but trying to
	                // call .setItem throws an exception.
	                //
	                // "QUOTA_EXCEEDED_ERR: DOM Exception 22: An attempt was made
	                // to add something to storage that exceeded the quota."
	                var key = this.deriveKey("__" + Math.round(Math.random() * 1e7));
	                this.webStorage.setItem(key, '');
	                this.webStorage.removeItem(key);
	            }
	            return supported;
	        }
	        catch (e) {
	            this.errors.next(e.message);
	            return false;
	        }
	    };
	    LocalStorageService.prototype.setPrefix = function (prefix) {
	        this.prefix = prefix;
	        // If there is a prefix set in the config let's use that with an appended
	        // period for readability:
	        var PERIOD = '.';
	        if (this.prefix && !this.prefix.endsWith(PERIOD)) {
	            this.prefix = !!this.prefix ? "" + this.prefix + PERIOD : '';
	        }
	    };
	    LocalStorageService.prototype.setStorageType = function (storageType) {
	        this.storageType = storageType;
	    };
	    LocalStorageService.prototype.setNotify = function (setItem, removeItem) {
	        if (setItem != null) {
	            this.notifyOptions.setItem = setItem;
	        }
	        if (removeItem != null) {
	            this.notifyOptions.removeItem = removeItem;
	        }
	    };
	    LocalStorageService = __decorate([
	        __param(0, core_1.Inject(LocalStorageServiceConfig_1.LOCAL_STORAGE_SERVICE_CONFIG)), 
	        __metadata('design:paramtypes', [Object])
	    ], LocalStorageService);
	    return LocalStorageService;
	}());
	exports.LocalStorageService = LocalStorageService;
	//# sourceMappingURL=../src/LocalStorageService.js.map

/***/ },
/* 103 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var Observable_1 = __webpack_require__(82);
	var share_1 = __webpack_require__(104);
	Observable_1.Observable.prototype.share = share_1.share;
	//# sourceMappingURL=share.js.map

/***/ },
/* 104 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var multicast_1 = __webpack_require__(105);
	var Subject_1 = __webpack_require__(81);
	function shareSubjectFactory() {
	    return new Subject_1.Subject();
	}
	/**
	 * Returns a new Observable that multicasts (shares) the original Observable. As long as there is at least one
	 * Subscriber this Observable will be subscribed and emitting data. When all subscribers have unsubscribed it will
	 * unsubscribe from the source Observable. Because the Observable is multicasting it makes the stream `hot`.
	 * This is an alias for .publish().refCount().
	 *
	 * <img src="./img/share.png" width="100%">
	 *
	 * @return {Observable<T>} an Observable that upon connection causes the source Observable to emit items to its Observers
	 * @method share
	 * @owner Observable
	 */
	function share() {
	    return multicast_1.multicast.call(this, shareSubjectFactory).refCount();
	}
	exports.share = share;
	;
	//# sourceMappingURL=share.js.map

/***/ },
/* 105 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var MulticastObservable_1 = __webpack_require__(106);
	var ConnectableObservable_1 = __webpack_require__(107);
	/**
	 * Returns an Observable that emits the results of invoking a specified selector on items
	 * emitted by a ConnectableObservable that shares a single subscription to the underlying stream.
	 *
	 * <img src="./img/multicast.png" width="100%">
	 *
	 * @param {Function|Subject} Factory function to create an intermediate subject through
	 * which the source sequence's elements will be multicast to the selector function
	 * or Subject to push source elements into.
	 * @param {Function} Optional selector function that can use the multicasted source stream
	 * as many times as needed, without causing multiple subscriptions to the source stream.
	 * Subscribers to the given source will receive all notifications of the source from the
	 * time of the subscription forward.
	 * @return {Observable} an Observable that emits the results of invoking the selector
	 * on the items emitted by a `ConnectableObservable` that shares a single subscription to
	 * the underlying stream.
	 * @method multicast
	 * @owner Observable
	 */
	function multicast(subjectOrSubjectFactory, selector) {
	    var subjectFactory;
	    if (typeof subjectOrSubjectFactory === 'function') {
	        subjectFactory = subjectOrSubjectFactory;
	    }
	    else {
	        subjectFactory = function subjectFactory() {
	            return subjectOrSubjectFactory;
	        };
	    }
	    return !selector ?
	        new ConnectableObservable_1.ConnectableObservable(this, subjectFactory) :
	        new MulticastObservable_1.MulticastObservable(this, subjectFactory, selector);
	}
	exports.multicast = multicast;
	//# sourceMappingURL=multicast.js.map

/***/ },
/* 106 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var Observable_1 = __webpack_require__(82);
	var ConnectableObservable_1 = __webpack_require__(107);
	var MulticastObservable = (function (_super) {
	    __extends(MulticastObservable, _super);
	    function MulticastObservable(source, subjectFactory, selector) {
	        _super.call(this);
	        this.source = source;
	        this.subjectFactory = subjectFactory;
	        this.selector = selector;
	    }
	    MulticastObservable.prototype._subscribe = function (subscriber) {
	        var _a = this, selector = _a.selector, source = _a.source;
	        var connectable = new ConnectableObservable_1.ConnectableObservable(source, this.subjectFactory);
	        var subscription = selector(connectable).subscribe(subscriber);
	        subscription.add(connectable.connect());
	        return subscription;
	    };
	    return MulticastObservable;
	}(Observable_1.Observable));
	exports.MulticastObservable = MulticastObservable;
	//# sourceMappingURL=MulticastObservable.js.map

/***/ },
/* 107 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var Subject_1 = __webpack_require__(81);
	var Observable_1 = __webpack_require__(82);
	var Subscriber_1 = __webpack_require__(85);
	var Subscription_1 = __webpack_require__(87);
	/**
	 * @class ConnectableObservable<T>
	 */
	var ConnectableObservable = (function (_super) {
	    __extends(ConnectableObservable, _super);
	    function ConnectableObservable(source, subjectFactory) {
	        _super.call(this);
	        this.source = source;
	        this.subjectFactory = subjectFactory;
	        this._refCount = 0;
	    }
	    ConnectableObservable.prototype._subscribe = function (subscriber) {
	        return this.getSubject().subscribe(subscriber);
	    };
	    ConnectableObservable.prototype.getSubject = function () {
	        var subject = this._subject;
	        if (!subject || subject.isStopped) {
	            this._subject = this.subjectFactory();
	        }
	        return this._subject;
	    };
	    ConnectableObservable.prototype.connect = function () {
	        var connection = this._connection;
	        if (!connection) {
	            connection = this._connection = new Subscription_1.Subscription();
	            connection.add(this.source
	                .subscribe(new ConnectableSubscriber(this.getSubject(), this)));
	            if (connection.closed) {
	                this._connection = null;
	                connection = Subscription_1.Subscription.EMPTY;
	            }
	            else {
	                this._connection = connection;
	            }
	        }
	        return connection;
	    };
	    ConnectableObservable.prototype.refCount = function () {
	        return this.lift(new RefCountOperator(this));
	    };
	    return ConnectableObservable;
	}(Observable_1.Observable));
	exports.ConnectableObservable = ConnectableObservable;
	var ConnectableSubscriber = (function (_super) {
	    __extends(ConnectableSubscriber, _super);
	    function ConnectableSubscriber(destination, connectable) {
	        _super.call(this, destination);
	        this.connectable = connectable;
	    }
	    ConnectableSubscriber.prototype._error = function (err) {
	        this._unsubscribe();
	        _super.prototype._error.call(this, err);
	    };
	    ConnectableSubscriber.prototype._complete = function () {
	        this._unsubscribe();
	        _super.prototype._complete.call(this);
	    };
	    ConnectableSubscriber.prototype._unsubscribe = function () {
	        var connectable = this.connectable;
	        if (connectable) {
	            this.connectable = null;
	            var connection = connectable._connection;
	            connectable._refCount = 0;
	            connectable._subject = null;
	            connectable._connection = null;
	            if (connection) {
	                connection.unsubscribe();
	            }
	        }
	    };
	    return ConnectableSubscriber;
	}(Subject_1.SubjectSubscriber));
	var RefCountOperator = (function () {
	    function RefCountOperator(connectable) {
	        this.connectable = connectable;
	    }
	    RefCountOperator.prototype.call = function (subscriber, source) {
	        var connectable = this.connectable;
	        connectable._refCount++;
	        var refCounter = new RefCountSubscriber(subscriber, connectable);
	        var subscription = source._subscribe(refCounter);
	        if (!refCounter.closed) {
	            refCounter.connection = connectable.connect();
	        }
	        return subscription;
	    };
	    return RefCountOperator;
	}());
	var RefCountSubscriber = (function (_super) {
	    __extends(RefCountSubscriber, _super);
	    function RefCountSubscriber(destination, connectable) {
	        _super.call(this, destination);
	        this.connectable = connectable;
	    }
	    RefCountSubscriber.prototype._unsubscribe = function () {
	        var connectable = this.connectable;
	        if (!connectable) {
	            this.connection = null;
	            return;
	        }
	        this.connectable = null;
	        var refCount = connectable._refCount;
	        if (refCount <= 0) {
	            this.connection = null;
	            return;
	        }
	        connectable._refCount = refCount - 1;
	        if (refCount > 1) {
	            this.connection = null;
	            return;
	        }
	        ///
	        // Compare the local RefCountSubscriber's connection Subscription to the
	        // connection Subscription on the shared ConnectableObservable. In cases
	        // where the ConnectableObservable source synchronously emits values, and
	        // the RefCountSubscriber's dowstream Observers synchronously unsubscribe,
	        // execution continues to here before the RefCountOperator has a chance to
	        // supply the RefCountSubscriber with the shared connection Subscription.
	        // For example:
	        // ```
	        // Observable.range(0, 10)
	        //   .publish()
	        //   .refCount()
	        //   .take(5)
	        //   .subscribe();
	        // ```
	        // In order to account for this case, RefCountSubscriber should only dispose
	        // the ConnectableObservable's shared connection Subscription if the
	        // connection Subscription exists, *and* either:
	        //   a. RefCountSubscriber doesn't have a reference to the shared connection
	        //      Subscription yet, or,
	        //   b. RefCountSubscriber's connection Subscription reference is identical
	        //      to the shared connection Subscription
	        ///
	        var connection = this.connection;
	        var sharedConnection = connectable._connection;
	        this.connection = null;
	        if (sharedConnection && (!connection || sharedConnection === connection)) {
	            sharedConnection.unsubscribe();
	        }
	    };
	    return RefCountSubscriber;
	}(Subscriber_1.Subscriber));
	//# sourceMappingURL=ConnectableObservable.js.map

/***/ },
/* 108 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var core_1 = __webpack_require__(80);
	var LOCAL_STORAGE_SERVICE_CONFIG_TOKEN = 'LOCAL_STORAGE_SERVICE_CONFIG';
	exports.LOCAL_STORAGE_SERVICE_CONFIG = new core_1.OpaqueToken(LOCAL_STORAGE_SERVICE_CONFIG_TOKEN);
	//# sourceMappingURL=../src/LocalStorageServiceConfig.js.map

/***/ },
/* 109 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * @license Angular v2.2.3
	 * (c) 2010-2016 Google, Inc. https://angular.io/
	 * License: MIT
	 */
	(function (global, factory) {
	     true ? factory(exports, __webpack_require__(80), __webpack_require__(110), __webpack_require__(81), __webpack_require__(82), __webpack_require__(111)) :
	    typeof define === 'function' && define.amd ? define(['exports', '@angular/core', 'rxjs/operator/toPromise', 'rxjs/Subject', 'rxjs/Observable', 'rxjs/observable/fromPromise'], factory) :
	    (factory((global.ng = global.ng || {}, global.ng.forms = global.ng.forms || {}),global.ng.core,global.Rx.Observable.prototype,global.Rx,global.Rx,global.Rx.Observable));
	}(this, function (exports,_angular_core,rxjs_operator_toPromise,rxjs_Subject,rxjs_Observable,rxjs_observable_fromPromise) { 'use strict';

	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    /**
	     * Base class for control directives.
	     *
	     * Only used internally in the forms module.
	     *
	     * @stable
	     */
	    var AbstractControlDirective = (function () {
	        function AbstractControlDirective() {
	        }
	        Object.defineProperty(AbstractControlDirective.prototype, "control", {
	            get: function () { throw new Error('unimplemented'); },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(AbstractControlDirective.prototype, "value", {
	            get: function () { return this.control ? this.control.value : null; },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(AbstractControlDirective.prototype, "valid", {
	            get: function () { return this.control ? this.control.valid : null; },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(AbstractControlDirective.prototype, "invalid", {
	            get: function () { return this.control ? this.control.invalid : null; },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(AbstractControlDirective.prototype, "pending", {
	            get: function () { return this.control ? this.control.pending : null; },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(AbstractControlDirective.prototype, "errors", {
	            get: function () { return this.control ? this.control.errors : null; },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(AbstractControlDirective.prototype, "pristine", {
	            get: function () { return this.control ? this.control.pristine : null; },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(AbstractControlDirective.prototype, "dirty", {
	            get: function () { return this.control ? this.control.dirty : null; },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(AbstractControlDirective.prototype, "touched", {
	            get: function () { return this.control ? this.control.touched : null; },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(AbstractControlDirective.prototype, "untouched", {
	            get: function () { return this.control ? this.control.untouched : null; },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(AbstractControlDirective.prototype, "disabled", {
	            get: function () { return this.control ? this.control.disabled : null; },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(AbstractControlDirective.prototype, "enabled", {
	            get: function () { return this.control ? this.control.enabled : null; },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(AbstractControlDirective.prototype, "statusChanges", {
	            get: function () { return this.control ? this.control.statusChanges : null; },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(AbstractControlDirective.prototype, "valueChanges", {
	            get: function () { return this.control ? this.control.valueChanges : null; },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(AbstractControlDirective.prototype, "path", {
	            get: function () { return null; },
	            enumerable: true,
	            configurable: true
	        });
	        AbstractControlDirective.prototype.reset = function (value) {
	            if (value === void 0) { value = undefined; }
	            if (this.control)
	                this.control.reset(value);
	        };
	        AbstractControlDirective.prototype.hasError = function (errorCode, path) {
	            if (path === void 0) { path = null; }
	            return this.control ? this.control.hasError(errorCode, path) : false;
	        };
	        AbstractControlDirective.prototype.getError = function (errorCode, path) {
	            if (path === void 0) { path = null; }
	            return this.control ? this.control.getError(errorCode, path) : null;
	        };
	        return AbstractControlDirective;
	    }());

	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    var __extends$1 = (this && this.__extends) || function (d, b) {
	        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	    /**
	     * A directive that contains multiple {@link NgControl}s.
	     *
	     * Only used by the forms module.
	     *
	     * @stable
	     */
	    var ControlContainer = (function (_super) {
	        __extends$1(ControlContainer, _super);
	        function ControlContainer() {
	            _super.apply(this, arguments);
	        }
	        Object.defineProperty(ControlContainer.prototype, "formDirective", {
	            /**
	             * Get the form to which this container belongs.
	             */
	            get: function () { return null; },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(ControlContainer.prototype, "path", {
	            /**
	             * Get the path to this container.
	             */
	            get: function () { return null; },
	            enumerable: true,
	            configurable: true
	        });
	        return ControlContainer;
	    }(AbstractControlDirective));

	    function isPresent(obj) {
	        return obj != null;
	    }
	    function isBlank(obj) {
	        return obj == null;
	    }
	    // JS has NaN !== NaN
	    function looseIdentical(a, b) {
	        return a === b || typeof a === 'number' && typeof b === 'number' && isNaN(a) && isNaN(b);
	    }
	    function isJsObject(o) {
	        return o !== null && (typeof o === 'function' || typeof o === 'object');
	    }
	    function isPrimitive(obj) {
	        return !isJsObject(obj);
	    }

	    /**
	     * Wraps Javascript Objects
	     */
	    var StringMapWrapper = (function () {
	        function StringMapWrapper() {
	        }
	        StringMapWrapper.merge = function (m1, m2) {
	            var m = {};
	            for (var _i = 0, _a = Object.keys(m1); _i < _a.length; _i++) {
	                var k = _a[_i];
	                m[k] = m1[k];
	            }
	            for (var _b = 0, _c = Object.keys(m2); _b < _c.length; _b++) {
	                var k = _c[_b];
	                m[k] = m2[k];
	            }
	            return m;
	        };
	        StringMapWrapper.equals = function (m1, m2) {
	            var k1 = Object.keys(m1);
	            var k2 = Object.keys(m2);
	            if (k1.length != k2.length) {
	                return false;
	            }
	            for (var i = 0; i < k1.length; i++) {
	                var key = k1[i];
	                if (m1[key] !== m2[key]) {
	                    return false;
	                }
	            }
	            return true;
	        };
	        return StringMapWrapper;
	    }());
	    var ListWrapper = (function () {
	        function ListWrapper() {
	        }
	        ListWrapper.removeAll = function (list, items) {
	            for (var i = 0; i < items.length; ++i) {
	                var index = list.indexOf(items[i]);
	                if (index > -1) {
	                    list.splice(index, 1);
	                }
	            }
	        };
	        ListWrapper.remove = function (list, el) {
	            var index = list.indexOf(el);
	            if (index > -1) {
	                list.splice(index, 1);
	                return true;
	            }
	            return false;
	        };
	        ListWrapper.equals = function (a, b) {
	            if (a.length != b.length)
	                return false;
	            for (var i = 0; i < a.length; ++i) {
	                if (a[i] !== b[i])
	                    return false;
	            }
	            return true;
	        };
	        ListWrapper.flatten = function (list) {
	            return list.reduce(function (flat, item) {
	                var flatItem = Array.isArray(item) ? ListWrapper.flatten(item) : item;
	                return flat.concat(flatItem);
	            }, []);
	        };
	        return ListWrapper;
	    }());

	    var isPromise = _angular_core.__core_private__.isPromise;

	    function isEmptyInputValue(value) {
	        return value == null || typeof value === 'string' && value.length === 0;
	    }
	    /**
	     * Providers for validators to be used for {@link FormControl}s in a form.
	     *
	     * Provide this using `multi: true` to add validators.
	     *
	     * ### Example
	     *
	     * {@example core/forms/ts/ng_validators/ng_validators.ts region='ng_validators'}
	     * @stable
	     */
	    var NG_VALIDATORS = new _angular_core.OpaqueToken('NgValidators');
	    /**
	     * Providers for asynchronous validators to be used for {@link FormControl}s
	     * in a form.
	     *
	     * Provide this using `multi: true` to add validators.
	     *
	     * See {@link NG_VALIDATORS} for more details.
	     *
	     * @stable
	     */
	    var NG_ASYNC_VALIDATORS = new _angular_core.OpaqueToken('NgAsyncValidators');
	    /**
	     * Provides a set of validators used by form controls.
	     *
	     * A validator is a function that processes a {@link FormControl} or collection of
	     * controls and returns a map of errors. A null map means that validation has passed.
	     *
	     * ### Example
	     *
	     * ```typescript
	     * var loginControl = new FormControl("", Validators.required)
	     * ```
	     *
	     * @stable
	     */
	    var Validators = (function () {
	        function Validators() {
	        }
	        /**
	         * Validator that requires controls to have a non-empty value.
	         */
	        Validators.required = function (control) {
	            return isEmptyInputValue(control.value) ? { 'required': true } : null;
	        };
	        /**
	         * Validator that requires controls to have a value of a minimum length.
	         */
	        Validators.minLength = function (minLength) {
	            return function (control) {
	                if (isEmptyInputValue(control.value)) {
	                    return null; // don't validate empty values to allow optional controls
	                }
	                var length = typeof control.value === 'string' ? control.value.length : 0;
	                return length < minLength ?
	                    { 'minlength': { 'requiredLength': minLength, 'actualLength': length } } :
	                    null;
	            };
	        };
	        /**
	         * Validator that requires controls to have a value of a maximum length.
	         */
	        Validators.maxLength = function (maxLength) {
	            return function (control) {
	                var length = typeof control.value === 'string' ? control.value.length : 0;
	                return length > maxLength ?
	                    { 'maxlength': { 'requiredLength': maxLength, 'actualLength': length } } :
	                    null;
	            };
	        };
	        /**
	         * Validator that requires a control to match a regex to its value.
	         */
	        Validators.pattern = function (pattern) {
	            if (!pattern)
	                return Validators.nullValidator;
	            var regex;
	            var regexStr;
	            if (typeof pattern === 'string') {
	                regexStr = "^" + pattern + "$";
	                regex = new RegExp(regexStr);
	            }
	            else {
	                regexStr = pattern.toString();
	                regex = pattern;
	            }
	            return function (control) {
	                if (isEmptyInputValue(control.value)) {
	                    return null; // don't validate empty values to allow optional controls
	                }
	                var value = control.value;
	                return regex.test(value) ? null :
	                    { 'pattern': { 'requiredPattern': regexStr, 'actualValue': value } };
	            };
	        };
	        /**
	         * No-op validator.
	         */
	        Validators.nullValidator = function (c) { return null; };
	        /**
	         * Compose multiple validators into a single function that returns the union
	         * of the individual error maps.
	         */
	        Validators.compose = function (validators) {
	            if (!validators)
	                return null;
	            var presentValidators = validators.filter(isPresent);
	            if (presentValidators.length == 0)
	                return null;
	            return function (control) {
	                return _mergeErrors(_executeValidators(control, presentValidators));
	            };
	        };
	        Validators.composeAsync = function (validators) {
	            if (!validators)
	                return null;
	            var presentValidators = validators.filter(isPresent);
	            if (presentValidators.length == 0)
	                return null;
	            return function (control) {
	                var promises = _executeAsyncValidators(control, presentValidators).map(_convertToPromise);
	                return Promise.all(promises).then(_mergeErrors);
	            };
	        };
	        return Validators;
	    }());
	    function _convertToPromise(obj) {
	        return isPromise(obj) ? obj : rxjs_operator_toPromise.toPromise.call(obj);
	    }
	    function _executeValidators(control, validators) {
	        return validators.map(function (v) { return v(control); });
	    }
	    function _executeAsyncValidators(control, validators) {
	        return validators.map(function (v) { return v(control); });
	    }
	    function _mergeErrors(arrayOfErrors) {
	        var res = arrayOfErrors.reduce(function (res, errors) {
	            return isPresent(errors) ? StringMapWrapper.merge(res, errors) : res;
	        }, {});
	        return Object.keys(res).length === 0 ? null : res;
	    }

	    /**
	     * Used to provide a {@link ControlValueAccessor} for form controls.
	     *
	     * See {@link DefaultValueAccessor} for how to implement one.
	     * @stable
	     */
	    var NG_VALUE_ACCESSOR = new _angular_core.OpaqueToken('NgValueAccessor');

	    var CHECKBOX_VALUE_ACCESSOR = {
	        provide: NG_VALUE_ACCESSOR,
	        useExisting: _angular_core.forwardRef(function () { return CheckboxControlValueAccessor; }),
	        multi: true,
	    };
	    /**
	     * The accessor for writing a value and listening to changes on a checkbox input element.
	     *
	     *  ### Example
	     *  ```
	     *  <input type="checkbox" name="rememberLogin" ngModel>
	     *  ```
	     *
	     *  @stable
	     */
	    var CheckboxControlValueAccessor = (function () {
	        function CheckboxControlValueAccessor(_renderer, _elementRef) {
	            this._renderer = _renderer;
	            this._elementRef = _elementRef;
	            this.onChange = function (_) { };
	            this.onTouched = function () { };
	        }
	        CheckboxControlValueAccessor.prototype.writeValue = function (value) {
	            this._renderer.setElementProperty(this._elementRef.nativeElement, 'checked', value);
	        };
	        CheckboxControlValueAccessor.prototype.registerOnChange = function (fn) { this.onChange = fn; };
	        CheckboxControlValueAccessor.prototype.registerOnTouched = function (fn) { this.onTouched = fn; };
	        CheckboxControlValueAccessor.prototype.setDisabledState = function (isDisabled) {
	            this._renderer.setElementProperty(this._elementRef.nativeElement, 'disabled', isDisabled);
	        };
	        CheckboxControlValueAccessor.decorators = [
	            { type: _angular_core.Directive, args: [{
	                        selector: 'input[type=checkbox][formControlName],input[type=checkbox][formControl],input[type=checkbox][ngModel]',
	                        host: { '(change)': 'onChange($event.target.checked)', '(blur)': 'onTouched()' },
	                        providers: [CHECKBOX_VALUE_ACCESSOR]
	                    },] },
	        ];
	        /** @nocollapse */
	        CheckboxControlValueAccessor.ctorParameters = [
	            { type: _angular_core.Renderer, },
	            { type: _angular_core.ElementRef, },
	        ];
	        return CheckboxControlValueAccessor;
	    }());

	    var DEFAULT_VALUE_ACCESSOR = {
	        provide: NG_VALUE_ACCESSOR,
	        useExisting: _angular_core.forwardRef(function () { return DefaultValueAccessor; }),
	        multi: true
	    };
	    /**
	     * The default accessor for writing a value and listening to changes that is used by the
	     * {@link NgModel}, {@link FormControlDirective}, and {@link FormControlName} directives.
	     *
	     *  ### Example
	     *  ```
	     *  <input type="text" name="searchQuery" ngModel>
	     *  ```
	     *
	     *  @stable
	     */
	    var DefaultValueAccessor = (function () {
	        function DefaultValueAccessor(_renderer, _elementRef) {
	            this._renderer = _renderer;
	            this._elementRef = _elementRef;
	            this.onChange = function (_) { };
	            this.onTouched = function () { };
	        }
	        DefaultValueAccessor.prototype.writeValue = function (value) {
	            var normalizedValue = value == null ? '' : value;
	            this._renderer.setElementProperty(this._elementRef.nativeElement, 'value', normalizedValue);
	        };
	        DefaultValueAccessor.prototype.registerOnChange = function (fn) { this.onChange = fn; };
	        DefaultValueAccessor.prototype.registerOnTouched = function (fn) { this.onTouched = fn; };
	        DefaultValueAccessor.prototype.setDisabledState = function (isDisabled) {
	            this._renderer.setElementProperty(this._elementRef.nativeElement, 'disabled', isDisabled);
	        };
	        DefaultValueAccessor.decorators = [
	            { type: _angular_core.Directive, args: [{
	                        selector: 'input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]',
	                        // TODO: vsavkin replace the above selector with the one below it once
	                        // https://github.com/angular/angular/issues/3011 is implemented
	                        // selector: '[ngControl],[ngModel],[ngFormControl]',
	                        host: { '(input)': 'onChange($event.target.value)', '(blur)': 'onTouched()' },
	                        providers: [DEFAULT_VALUE_ACCESSOR]
	                    },] },
	        ];
	        /** @nocollapse */
	        DefaultValueAccessor.ctorParameters = [
	            { type: _angular_core.Renderer, },
	            { type: _angular_core.ElementRef, },
	        ];
	        return DefaultValueAccessor;
	    }());

	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    function normalizeValidator(validator) {
	        if (validator.validate) {
	            return function (c) { return validator.validate(c); };
	        }
	        else {
	            return validator;
	        }
	    }
	    function normalizeAsyncValidator(validator) {
	        if (validator.validate) {
	            return function (c) { return validator.validate(c); };
	        }
	        else {
	            return validator;
	        }
	    }

	    var NUMBER_VALUE_ACCESSOR = {
	        provide: NG_VALUE_ACCESSOR,
	        useExisting: _angular_core.forwardRef(function () { return NumberValueAccessor; }),
	        multi: true
	    };
	    /**
	     * The accessor for writing a number value and listening to changes that is used by the
	     * {@link NgModel}, {@link FormControlDirective}, and {@link FormControlName} directives.
	     *
	     *  ### Example
	     *  ```
	     *  <input type="number" [(ngModel)]="age">
	     *  ```
	     */
	    var NumberValueAccessor = (function () {
	        function NumberValueAccessor(_renderer, _elementRef) {
	            this._renderer = _renderer;
	            this._elementRef = _elementRef;
	            this.onChange = function (_) { };
	            this.onTouched = function () { };
	        }
	        NumberValueAccessor.prototype.writeValue = function (value) {
	            // The value needs to be normalized for IE9, otherwise it is set to 'null' when null
	            var normalizedValue = value == null ? '' : value;
	            this._renderer.setElementProperty(this._elementRef.nativeElement, 'value', normalizedValue);
	        };
	        NumberValueAccessor.prototype.registerOnChange = function (fn) {
	            this.onChange = function (value) { fn(value == '' ? null : parseFloat(value)); };
	        };
	        NumberValueAccessor.prototype.registerOnTouched = function (fn) { this.onTouched = fn; };
	        NumberValueAccessor.prototype.setDisabledState = function (isDisabled) {
	            this._renderer.setElementProperty(this._elementRef.nativeElement, 'disabled', isDisabled);
	        };
	        NumberValueAccessor.decorators = [
	            { type: _angular_core.Directive, args: [{
	                        selector: 'input[type=number][formControlName],input[type=number][formControl],input[type=number][ngModel]',
	                        host: {
	                            '(change)': 'onChange($event.target.value)',
	                            '(input)': 'onChange($event.target.value)',
	                            '(blur)': 'onTouched()'
	                        },
	                        providers: [NUMBER_VALUE_ACCESSOR]
	                    },] },
	        ];
	        /** @nocollapse */
	        NumberValueAccessor.ctorParameters = [
	            { type: _angular_core.Renderer, },
	            { type: _angular_core.ElementRef, },
	        ];
	        return NumberValueAccessor;
	    }());

	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    var __extends$2 = (this && this.__extends) || function (d, b) {
	        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	    function unimplemented() {
	        throw new Error('unimplemented');
	    }
	    /**
	     * A base class that all control directive extend.
	     * It binds a {@link FormControl} object to a DOM element.
	     *
	     * Used internally by Angular forms.
	     *
	     * @stable
	     */
	    var NgControl = (function (_super) {
	        __extends$2(NgControl, _super);
	        function NgControl() {
	            _super.apply(this, arguments);
	            /** @internal */
	            this._parent = null;
	            this.name = null;
	            this.valueAccessor = null;
	            /** @internal */
	            this._rawValidators = [];
	            /** @internal */
	            this._rawAsyncValidators = [];
	        }
	        Object.defineProperty(NgControl.prototype, "validator", {
	            get: function () { return unimplemented(); },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(NgControl.prototype, "asyncValidator", {
	            get: function () { return unimplemented(); },
	            enumerable: true,
	            configurable: true
	        });
	        return NgControl;
	    }(AbstractControlDirective));

	    var RADIO_VALUE_ACCESSOR = {
	        provide: NG_VALUE_ACCESSOR,
	        useExisting: _angular_core.forwardRef(function () { return RadioControlValueAccessor; }),
	        multi: true
	    };
	    /**
	     * Internal class used by Angular to uncheck radio buttons with the matching name.
	     */
	    var RadioControlRegistry = (function () {
	        function RadioControlRegistry() {
	            this._accessors = [];
	        }
	        RadioControlRegistry.prototype.add = function (control, accessor) {
	            this._accessors.push([control, accessor]);
	        };
	        RadioControlRegistry.prototype.remove = function (accessor) {
	            for (var i = this._accessors.length - 1; i >= 0; --i) {
	                if (this._accessors[i][1] === accessor) {
	                    this._accessors.splice(i, 1);
	                    return;
	                }
	            }
	        };
	        RadioControlRegistry.prototype.select = function (accessor) {
	            var _this = this;
	            this._accessors.forEach(function (c) {
	                if (_this._isSameGroup(c, accessor) && c[1] !== accessor) {
	                    c[1].fireUncheck(accessor.value);
	                }
	            });
	        };
	        RadioControlRegistry.prototype._isSameGroup = function (controlPair, accessor) {
	            if (!controlPair[0].control)
	                return false;
	            return controlPair[0]._parent === accessor._control._parent &&
	                controlPair[1].name === accessor.name;
	        };
	        RadioControlRegistry.decorators = [
	            { type: _angular_core.Injectable },
	        ];
	        /** @nocollapse */
	        RadioControlRegistry.ctorParameters = [];
	        return RadioControlRegistry;
	    }());
	    /**
	     * @whatItDoes  Writes radio control values and listens to radio control changes.
	     *
	     * Used by {@link NgModel}, {@link FormControlDirective}, and {@link FormControlName}
	     * to keep the view synced with the {@link FormControl} model.
	     *
	     * @howToUse
	     *
	     * If you have imported the {@link FormsModule} or the {@link ReactiveFormsModule}, this
	     * value accessor will be active on any radio control that has a form directive. You do
	     * **not** need to add a special selector to activate it.
	     *
	     * ### How to use radio buttons with form directives
	     *
	     * To use radio buttons in a template-driven form, you'll want to ensure that radio buttons
	     * in the same group have the same `name` attribute.  Radio buttons with different `name`
	     * attributes do not affect each other.
	     *
	     * {@example forms/ts/radioButtons/radio_button_example.ts region='TemplateDriven'}
	     *
	     * When using radio buttons in a reactive form, radio buttons in the same group should have the
	     * same `formControlName`. You can also add a `name` attribute, but it's optional.
	     *
	     * {@example forms/ts/reactiveRadioButtons/reactive_radio_button_example.ts region='Reactive'}
	     *
	     *  * **npm package**: `@angular/forms`
	     *
	     *  @stable
	     */
	    var RadioControlValueAccessor = (function () {
	        function RadioControlValueAccessor(_renderer, _elementRef, _registry, _injector) {
	            this._renderer = _renderer;
	            this._elementRef = _elementRef;
	            this._registry = _registry;
	            this._injector = _injector;
	            this.onChange = function () { };
	            this.onTouched = function () { };
	        }
	        RadioControlValueAccessor.prototype.ngOnInit = function () {
	            this._control = this._injector.get(NgControl);
	            this._checkName();
	            this._registry.add(this._control, this);
	        };
	        RadioControlValueAccessor.prototype.ngOnDestroy = function () { this._registry.remove(this); };
	        RadioControlValueAccessor.prototype.writeValue = function (value) {
	            this._state = value === this.value;
	            this._renderer.setElementProperty(this._elementRef.nativeElement, 'checked', this._state);
	        };
	        RadioControlValueAccessor.prototype.registerOnChange = function (fn) {
	            var _this = this;
	            this._fn = fn;
	            this.onChange = function () {
	                fn(_this.value);
	                _this._registry.select(_this);
	            };
	        };
	        RadioControlValueAccessor.prototype.fireUncheck = function (value) { this.writeValue(value); };
	        RadioControlValueAccessor.prototype.registerOnTouched = function (fn) { this.onTouched = fn; };
	        RadioControlValueAccessor.prototype.setDisabledState = function (isDisabled) {
	            this._renderer.setElementProperty(this._elementRef.nativeElement, 'disabled', isDisabled);
	        };
	        RadioControlValueAccessor.prototype._checkName = function () {
	            if (this.name && this.formControlName && this.name !== this.formControlName) {
	                this._throwNameError();
	            }
	            if (!this.name && this.formControlName)
	                this.name = this.formControlName;
	        };
	        RadioControlValueAccessor.prototype._throwNameError = function () {
	            throw new Error("\n      If you define both a name and a formControlName attribute on your radio button, their values\n      must match. Ex: <input type=\"radio\" formControlName=\"food\" name=\"food\">\n    ");
	        };
	        RadioControlValueAccessor.decorators = [
	            { type: _angular_core.Directive, args: [{
	                        selector: 'input[type=radio][formControlName],input[type=radio][formControl],input[type=radio][ngModel]',
	                        host: { '(change)': 'onChange()', '(blur)': 'onTouched()' },
	                        providers: [RADIO_VALUE_ACCESSOR]
	                    },] },
	        ];
	        /** @nocollapse */
	        RadioControlValueAccessor.ctorParameters = [
	            { type: _angular_core.Renderer, },
	            { type: _angular_core.ElementRef, },
	            { type: RadioControlRegistry, },
	            { type: _angular_core.Injector, },
	        ];
	        RadioControlValueAccessor.propDecorators = {
	            'name': [{ type: _angular_core.Input },],
	            'formControlName': [{ type: _angular_core.Input },],
	            'value': [{ type: _angular_core.Input },],
	        };
	        return RadioControlValueAccessor;
	    }());

	    var RANGE_VALUE_ACCESSOR = {
	        provide: NG_VALUE_ACCESSOR,
	        useExisting: _angular_core.forwardRef(function () { return RangeValueAccessor; }),
	        multi: true
	    };
	    /**
	     * The accessor for writing a range value and listening to changes that is used by the
	     * {@link NgModel}, {@link FormControlDirective}, and {@link FormControlName} directives.
	     *
	     *  ### Example
	     *  ```
	     *  <input type="range" [(ngModel)]="age" >
	     *  ```
	     */
	    var RangeValueAccessor = (function () {
	        function RangeValueAccessor(_renderer, _elementRef) {
	            this._renderer = _renderer;
	            this._elementRef = _elementRef;
	            this.onChange = function (_) { };
	            this.onTouched = function () { };
	        }
	        RangeValueAccessor.prototype.writeValue = function (value) {
	            this._renderer.setElementProperty(this._elementRef.nativeElement, 'value', parseFloat(value));
	        };
	        RangeValueAccessor.prototype.registerOnChange = function (fn) {
	            this.onChange = function (value) { fn(value == '' ? null : parseFloat(value)); };
	        };
	        RangeValueAccessor.prototype.registerOnTouched = function (fn) { this.onTouched = fn; };
	        RangeValueAccessor.prototype.setDisabledState = function (isDisabled) {
	            this._renderer.setElementProperty(this._elementRef.nativeElement, 'disabled', isDisabled);
	        };
	        RangeValueAccessor.decorators = [
	            { type: _angular_core.Directive, args: [{
	                        selector: 'input[type=range][formControlName],input[type=range][formControl],input[type=range][ngModel]',
	                        host: {
	                            '(change)': 'onChange($event.target.value)',
	                            '(input)': 'onChange($event.target.value)',
	                            '(blur)': 'onTouched()'
	                        },
	                        providers: [RANGE_VALUE_ACCESSOR]
	                    },] },
	        ];
	        /** @nocollapse */
	        RangeValueAccessor.ctorParameters = [
	            { type: _angular_core.Renderer, },
	            { type: _angular_core.ElementRef, },
	        ];
	        return RangeValueAccessor;
	    }());

	    var SELECT_VALUE_ACCESSOR = {
	        provide: NG_VALUE_ACCESSOR,
	        useExisting: _angular_core.forwardRef(function () { return SelectControlValueAccessor; }),
	        multi: true
	    };
	    function _buildValueString(id, value) {
	        if (id == null)
	            return "" + value;
	        if (!isPrimitive(value))
	            value = 'Object';
	        return (id + ": " + value).slice(0, 50);
	    }
	    function _extractId(valueString) {
	        return valueString.split(':')[0];
	    }
	    /**
	     * @whatItDoes Writes values and listens to changes on a select element.
	     *
	     * Used by {@link NgModel}, {@link FormControlDirective}, and {@link FormControlName}
	     * to keep the view synced with the {@link FormControl} model.
	     *
	     * @howToUse
	     *
	     * If you have imported the {@link FormsModule} or the {@link ReactiveFormsModule}, this
	     * value accessor will be active on any select control that has a form directive. You do
	     * **not** need to add a special selector to activate it.
	     *
	     * ### How to use select controls with form directives
	     *
	     * To use a select in a template-driven form, simply add an `ngModel` and a `name`
	     * attribute to the main `<select>` tag.
	     *
	     * If your option values are simple strings, you can bind to the normal `value` property
	     * on the option.  If your option values happen to be objects (and you'd like to save the
	     * selection in your form as an object), use `ngValue` instead:
	     *
	     * {@example forms/ts/selectControl/select_control_example.ts region='Component'}
	     *
	     * In reactive forms, you'll also want to add your form directive (`formControlName` or
	     * `formControl`) on the main `<select>` tag. Like in the former example, you have the
	     * choice of binding to the  `value` or `ngValue` property on the select's options.
	     *
	     * {@example forms/ts/reactiveSelectControl/reactive_select_control_example.ts region='Component'}
	     *
	     * Note: We listen to the 'change' event because 'input' events aren't fired
	     * for selects in Firefox and IE:
	     * https://bugzilla.mozilla.org/show_bug.cgi?id=1024350
	     * https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/4660045/
	     *
	     * * **npm package**: `@angular/forms`
	     *
	     * @stable
	     */
	    var SelectControlValueAccessor = (function () {
	        function SelectControlValueAccessor(_renderer, _elementRef) {
	            this._renderer = _renderer;
	            this._elementRef = _elementRef;
	            /** @internal */
	            this._optionMap = new Map();
	            /** @internal */
	            this._idCounter = 0;
	            this.onChange = function (_) { };
	            this.onTouched = function () { };
	        }
	        SelectControlValueAccessor.prototype.writeValue = function (value) {
	            this.value = value;
	            var valueString = _buildValueString(this._getOptionId(value), value);
	            this._renderer.setElementProperty(this._elementRef.nativeElement, 'value', valueString);
	        };
	        SelectControlValueAccessor.prototype.registerOnChange = function (fn) {
	            var _this = this;
	            this.onChange = function (valueString) {
	                _this.value = valueString;
	                fn(_this._getOptionValue(valueString));
	            };
	        };
	        SelectControlValueAccessor.prototype.registerOnTouched = function (fn) { this.onTouched = fn; };
	        SelectControlValueAccessor.prototype.setDisabledState = function (isDisabled) {
	            this._renderer.setElementProperty(this._elementRef.nativeElement, 'disabled', isDisabled);
	        };
	        /** @internal */
	        SelectControlValueAccessor.prototype._registerOption = function () { return (this._idCounter++).toString(); };
	        /** @internal */
	        SelectControlValueAccessor.prototype._getOptionId = function (value) {
	            for (var _i = 0, _a = Array.from(this._optionMap.keys()); _i < _a.length; _i++) {
	                var id = _a[_i];
	                if (looseIdentical(this._optionMap.get(id), value))
	                    return id;
	            }
	            return null;
	        };
	        /** @internal */
	        SelectControlValueAccessor.prototype._getOptionValue = function (valueString) {
	            var id = _extractId(valueString);
	            return this._optionMap.has(id) ? this._optionMap.get(id) : valueString;
	        };
	        SelectControlValueAccessor.decorators = [
	            { type: _angular_core.Directive, args: [{
	                        selector: 'select:not([multiple])[formControlName],select:not([multiple])[formControl],select:not([multiple])[ngModel]',
	                        host: { '(change)': 'onChange($event.target.value)', '(blur)': 'onTouched()' },
	                        providers: [SELECT_VALUE_ACCESSOR]
	                    },] },
	        ];
	        /** @nocollapse */
	        SelectControlValueAccessor.ctorParameters = [
	            { type: _angular_core.Renderer, },
	            { type: _angular_core.ElementRef, },
	        ];
	        return SelectControlValueAccessor;
	    }());
	    /**
	     * @whatItDoes Marks `<option>` as dynamic, so Angular can be notified when options change.
	     *
	     * @howToUse
	     *
	     * See docs for {@link SelectControlValueAccessor} for usage examples.
	     *
	     * @stable
	     */
	    var NgSelectOption = (function () {
	        function NgSelectOption(_element, _renderer, _select) {
	            this._element = _element;
	            this._renderer = _renderer;
	            this._select = _select;
	            if (this._select)
	                this.id = this._select._registerOption();
	        }
	        Object.defineProperty(NgSelectOption.prototype, "ngValue", {
	            set: function (value) {
	                if (this._select == null)
	                    return;
	                this._select._optionMap.set(this.id, value);
	                this._setElementValue(_buildValueString(this.id, value));
	                this._select.writeValue(this._select.value);
	            },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(NgSelectOption.prototype, "value", {
	            set: function (value) {
	                this._setElementValue(value);
	                if (this._select)
	                    this._select.writeValue(this._select.value);
	            },
	            enumerable: true,
	            configurable: true
	        });
	        /** @internal */
	        NgSelectOption.prototype._setElementValue = function (value) {
	            this._renderer.setElementProperty(this._element.nativeElement, 'value', value);
	        };
	        NgSelectOption.prototype.ngOnDestroy = function () {
	            if (this._select) {
	                this._select._optionMap.delete(this.id);
	                this._select.writeValue(this._select.value);
	            }
	        };
	        NgSelectOption.decorators = [
	            { type: _angular_core.Directive, args: [{ selector: 'option' },] },
	        ];
	        /** @nocollapse */
	        NgSelectOption.ctorParameters = [
	            { type: _angular_core.ElementRef, },
	            { type: _angular_core.Renderer, },
	            { type: SelectControlValueAccessor, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Host },] },
	        ];
	        NgSelectOption.propDecorators = {
	            'ngValue': [{ type: _angular_core.Input, args: ['ngValue',] },],
	            'value': [{ type: _angular_core.Input, args: ['value',] },],
	        };
	        return NgSelectOption;
	    }());

	    var SELECT_MULTIPLE_VALUE_ACCESSOR = {
	        provide: NG_VALUE_ACCESSOR,
	        useExisting: _angular_core.forwardRef(function () { return SelectMultipleControlValueAccessor; }),
	        multi: true
	    };
	    function _buildValueString$1(id, value) {
	        if (id == null)
	            return "" + value;
	        if (typeof value === 'string')
	            value = "'" + value + "'";
	        if (!isPrimitive(value))
	            value = 'Object';
	        return (id + ": " + value).slice(0, 50);
	    }
	    function _extractId$1(valueString) {
	        return valueString.split(':')[0];
	    }
	    /**
	     * The accessor for writing a value and listening to changes on a select element.
	     *
	     * @stable
	     */
	    var SelectMultipleControlValueAccessor = (function () {
	        function SelectMultipleControlValueAccessor(_renderer, _elementRef) {
	            this._renderer = _renderer;
	            this._elementRef = _elementRef;
	            /** @internal */
	            this._optionMap = new Map();
	            /** @internal */
	            this._idCounter = 0;
	            this.onChange = function (_) { };
	            this.onTouched = function () { };
	        }
	        SelectMultipleControlValueAccessor.prototype.writeValue = function (value) {
	            var _this = this;
	            this.value = value;
	            if (value == null)
	                return;
	            var values = value;
	            // convert values to ids
	            var ids = values.map(function (v) { return _this._getOptionId(v); });
	            this._optionMap.forEach(function (opt, o) { opt._setSelected(ids.indexOf(o.toString()) > -1); });
	        };
	        SelectMultipleControlValueAccessor.prototype.registerOnChange = function (fn) {
	            var _this = this;
	            this.onChange = function (_) {
	                var selected = [];
	                if (_.hasOwnProperty('selectedOptions')) {
	                    var options = _.selectedOptions;
	                    for (var i = 0; i < options.length; i++) {
	                        var opt = options.item(i);
	                        var val = _this._getOptionValue(opt.value);
	                        selected.push(val);
	                    }
	                }
	                else {
	                    var options = _.options;
	                    for (var i = 0; i < options.length; i++) {
	                        var opt = options.item(i);
	                        if (opt.selected) {
	                            var val = _this._getOptionValue(opt.value);
	                            selected.push(val);
	                        }
	                    }
	                }
	                fn(selected);
	            };
	        };
	        SelectMultipleControlValueAccessor.prototype.registerOnTouched = function (fn) { this.onTouched = fn; };
	        SelectMultipleControlValueAccessor.prototype.setDisabledState = function (isDisabled) {
	            this._renderer.setElementProperty(this._elementRef.nativeElement, 'disabled', isDisabled);
	        };
	        /** @internal */
	        SelectMultipleControlValueAccessor.prototype._registerOption = function (value) {
	            var id = (this._idCounter++).toString();
	            this._optionMap.set(id, value);
	            return id;
	        };
	        /** @internal */
	        SelectMultipleControlValueAccessor.prototype._getOptionId = function (value) {
	            for (var _i = 0, _a = Array.from(this._optionMap.keys()); _i < _a.length; _i++) {
	                var id = _a[_i];
	                if (looseIdentical(this._optionMap.get(id)._value, value))
	                    return id;
	            }
	            return null;
	        };
	        /** @internal */
	        SelectMultipleControlValueAccessor.prototype._getOptionValue = function (valueString) {
	            var id = _extractId$1(valueString);
	            return this._optionMap.has(id) ? this._optionMap.get(id)._value : valueString;
	        };
	        SelectMultipleControlValueAccessor.decorators = [
	            { type: _angular_core.Directive, args: [{
	                        selector: 'select[multiple][formControlName],select[multiple][formControl],select[multiple][ngModel]',
	                        host: { '(change)': 'onChange($event.target)', '(blur)': 'onTouched()' },
	                        providers: [SELECT_MULTIPLE_VALUE_ACCESSOR]
	                    },] },
	        ];
	        /** @nocollapse */
	        SelectMultipleControlValueAccessor.ctorParameters = [
	            { type: _angular_core.Renderer, },
	            { type: _angular_core.ElementRef, },
	        ];
	        return SelectMultipleControlValueAccessor;
	    }());
	    /**
	     * Marks `<option>` as dynamic, so Angular can be notified when options change.
	     *
	     * ### Example
	     *
	     * ```
	     * <select multiple name="city" ngModel>
	     *   <option *ngFor="let c of cities" [value]="c"></option>
	     * </select>
	     * ```
	     */
	    var NgSelectMultipleOption = (function () {
	        function NgSelectMultipleOption(_element, _renderer, _select) {
	            this._element = _element;
	            this._renderer = _renderer;
	            this._select = _select;
	            if (this._select) {
	                this.id = this._select._registerOption(this);
	            }
	        }
	        Object.defineProperty(NgSelectMultipleOption.prototype, "ngValue", {
	            set: function (value) {
	                if (this._select == null)
	                    return;
	                this._value = value;
	                this._setElementValue(_buildValueString$1(this.id, value));
	                this._select.writeValue(this._select.value);
	            },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(NgSelectMultipleOption.prototype, "value", {
	            set: function (value) {
	                if (this._select) {
	                    this._value = value;
	                    this._setElementValue(_buildValueString$1(this.id, value));
	                    this._select.writeValue(this._select.value);
	                }
	                else {
	                    this._setElementValue(value);
	                }
	            },
	            enumerable: true,
	            configurable: true
	        });
	        /** @internal */
	        NgSelectMultipleOption.prototype._setElementValue = function (value) {
	            this._renderer.setElementProperty(this._element.nativeElement, 'value', value);
	        };
	        /** @internal */
	        NgSelectMultipleOption.prototype._setSelected = function (selected) {
	            this._renderer.setElementProperty(this._element.nativeElement, 'selected', selected);
	        };
	        NgSelectMultipleOption.prototype.ngOnDestroy = function () {
	            if (this._select) {
	                this._select._optionMap.delete(this.id);
	                this._select.writeValue(this._select.value);
	            }
	        };
	        NgSelectMultipleOption.decorators = [
	            { type: _angular_core.Directive, args: [{ selector: 'option' },] },
	        ];
	        /** @nocollapse */
	        NgSelectMultipleOption.ctorParameters = [
	            { type: _angular_core.ElementRef, },
	            { type: _angular_core.Renderer, },
	            { type: SelectMultipleControlValueAccessor, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Host },] },
	        ];
	        NgSelectMultipleOption.propDecorators = {
	            'ngValue': [{ type: _angular_core.Input, args: ['ngValue',] },],
	            'value': [{ type: _angular_core.Input, args: ['value',] },],
	        };
	        return NgSelectMultipleOption;
	    }());

	    function controlPath(name, parent) {
	        return parent.path.concat([name]);
	    }
	    function setUpControl(control, dir) {
	        if (!control)
	            _throwError(dir, 'Cannot find control with');
	        if (!dir.valueAccessor)
	            _throwError(dir, 'No value accessor for form control with');
	        control.validator = Validators.compose([control.validator, dir.validator]);
	        control.asyncValidator = Validators.composeAsync([control.asyncValidator, dir.asyncValidator]);
	        dir.valueAccessor.writeValue(control.value);
	        // view -> model
	        dir.valueAccessor.registerOnChange(function (newValue) {
	            dir.viewToModelUpdate(newValue);
	            control.markAsDirty();
	            control.setValue(newValue, { emitModelToViewChange: false });
	        });
	        // touched
	        dir.valueAccessor.registerOnTouched(function () { return control.markAsTouched(); });
	        control.registerOnChange(function (newValue, emitModelEvent) {
	            // control -> view
	            dir.valueAccessor.writeValue(newValue);
	            // control -> ngModel
	            if (emitModelEvent)
	                dir.viewToModelUpdate(newValue);
	        });
	        if (dir.valueAccessor.setDisabledState) {
	            control.registerOnDisabledChange(function (isDisabled) { dir.valueAccessor.setDisabledState(isDisabled); });
	        }
	        // re-run validation when validator binding changes, e.g. minlength=3 -> minlength=4
	        dir._rawValidators.forEach(function (validator) {
	            if (validator.registerOnValidatorChange)
	                validator.registerOnValidatorChange(function () { return control.updateValueAndValidity(); });
	        });
	        dir._rawAsyncValidators.forEach(function (validator) {
	            if (validator.registerOnValidatorChange)
	                validator.registerOnValidatorChange(function () { return control.updateValueAndValidity(); });
	        });
	    }
	    function cleanUpControl(control, dir) {
	        dir.valueAccessor.registerOnChange(function () { return _noControlError(dir); });
	        dir.valueAccessor.registerOnTouched(function () { return _noControlError(dir); });
	        dir._rawValidators.forEach(function (validator) {
	            if (validator.registerOnValidatorChange) {
	                validator.registerOnValidatorChange(null);
	            }
	        });
	        dir._rawAsyncValidators.forEach(function (validator) {
	            if (validator.registerOnValidatorChange) {
	                validator.registerOnValidatorChange(null);
	            }
	        });
	        if (control)
	            control._clearChangeFns();
	    }
	    function setUpFormContainer(control, dir) {
	        if (isBlank(control))
	            _throwError(dir, 'Cannot find control with');
	        control.validator = Validators.compose([control.validator, dir.validator]);
	        control.asyncValidator = Validators.composeAsync([control.asyncValidator, dir.asyncValidator]);
	    }
	    function _noControlError(dir) {
	        return _throwError(dir, 'There is no FormControl instance attached to form control element with');
	    }
	    function _throwError(dir, message) {
	        var messageEnd;
	        if (dir.path.length > 1) {
	            messageEnd = "path: '" + dir.path.join(' -> ') + "'";
	        }
	        else if (dir.path[0]) {
	            messageEnd = "name: '" + dir.path + "'";
	        }
	        else {
	            messageEnd = 'unspecified name attribute';
	        }
	        throw new Error(message + " " + messageEnd);
	    }
	    function composeValidators(validators) {
	        return isPresent(validators) ? Validators.compose(validators.map(normalizeValidator)) : null;
	    }
	    function composeAsyncValidators(validators) {
	        return isPresent(validators) ? Validators.composeAsync(validators.map(normalizeAsyncValidator)) :
	            null;
	    }
	    function isPropertyUpdated(changes, viewModel) {
	        if (!changes.hasOwnProperty('model'))
	            return false;
	        var change = changes['model'];
	        if (change.isFirstChange())
	            return true;
	        return !looseIdentical(viewModel, change.currentValue);
	    }
	    var BUILTIN_ACCESSORS = [
	        CheckboxControlValueAccessor,
	        RangeValueAccessor,
	        NumberValueAccessor,
	        SelectControlValueAccessor,
	        SelectMultipleControlValueAccessor,
	        RadioControlValueAccessor,
	    ];
	    function isBuiltInAccessor(valueAccessor) {
	        return BUILTIN_ACCESSORS.some(function (a) { return valueAccessor.constructor === a; });
	    }
	    // TODO: vsavkin remove it once https://github.com/angular/angular/issues/3011 is implemented
	    function selectValueAccessor(dir, valueAccessors) {
	        if (!valueAccessors)
	            return null;
	        var defaultAccessor;
	        var builtinAccessor;
	        var customAccessor;
	        valueAccessors.forEach(function (v) {
	            if (v.constructor === DefaultValueAccessor) {
	                defaultAccessor = v;
	            }
	            else if (isBuiltInAccessor(v)) {
	                if (builtinAccessor)
	                    _throwError(dir, 'More than one built-in value accessor matches form control with');
	                builtinAccessor = v;
	            }
	            else {
	                if (customAccessor)
	                    _throwError(dir, 'More than one custom value accessor matches form control with');
	                customAccessor = v;
	            }
	        });
	        if (customAccessor)
	            return customAccessor;
	        if (builtinAccessor)
	            return builtinAccessor;
	        if (defaultAccessor)
	            return defaultAccessor;
	        _throwError(dir, 'No valid value accessor for form control with');
	        return null;
	    }

	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    var __extends = (this && this.__extends) || function (d, b) {
	        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	    /**
	     * This is a base class for code shared between {@link NgModelGroup} and {@link FormGroupName}.
	     *
	     * @stable
	     */
	    var AbstractFormGroupDirective = (function (_super) {
	        __extends(AbstractFormGroupDirective, _super);
	        function AbstractFormGroupDirective() {
	            _super.apply(this, arguments);
	        }
	        AbstractFormGroupDirective.prototype.ngOnInit = function () {
	            this._checkParentType();
	            this.formDirective.addFormGroup(this);
	        };
	        AbstractFormGroupDirective.prototype.ngOnDestroy = function () {
	            if (this.formDirective) {
	                this.formDirective.removeFormGroup(this);
	            }
	        };
	        Object.defineProperty(AbstractFormGroupDirective.prototype, "control", {
	            /**
	             * Get the {@link FormGroup} backing this binding.
	             */
	            get: function () { return this.formDirective.getFormGroup(this); },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(AbstractFormGroupDirective.prototype, "path", {
	            /**
	             * Get the path to this control group.
	             */
	            get: function () { return controlPath(this.name, this._parent); },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(AbstractFormGroupDirective.prototype, "formDirective", {
	            /**
	             * Get the {@link Form} to which this group belongs.
	             */
	            get: function () { return this._parent ? this._parent.formDirective : null; },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(AbstractFormGroupDirective.prototype, "validator", {
	            get: function () { return composeValidators(this._validators); },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(AbstractFormGroupDirective.prototype, "asyncValidator", {
	            get: function () { return composeAsyncValidators(this._asyncValidators); },
	            enumerable: true,
	            configurable: true
	        });
	        /** @internal */
	        AbstractFormGroupDirective.prototype._checkParentType = function () { };
	        return AbstractFormGroupDirective;
	    }(ControlContainer));

	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    var __extends$3 = (this && this.__extends) || function (d, b) {
	        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	    var AbstractControlStatus = (function () {
	        function AbstractControlStatus(cd) {
	            this._cd = cd;
	        }
	        Object.defineProperty(AbstractControlStatus.prototype, "ngClassUntouched", {
	            get: function () { return this._cd.control ? this._cd.control.untouched : false; },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(AbstractControlStatus.prototype, "ngClassTouched", {
	            get: function () { return this._cd.control ? this._cd.control.touched : false; },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(AbstractControlStatus.prototype, "ngClassPristine", {
	            get: function () { return this._cd.control ? this._cd.control.pristine : false; },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(AbstractControlStatus.prototype, "ngClassDirty", {
	            get: function () { return this._cd.control ? this._cd.control.dirty : false; },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(AbstractControlStatus.prototype, "ngClassValid", {
	            get: function () { return this._cd.control ? this._cd.control.valid : false; },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(AbstractControlStatus.prototype, "ngClassInvalid", {
	            get: function () { return this._cd.control ? this._cd.control.invalid : false; },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(AbstractControlStatus.prototype, "ngClassPending", {
	            get: function () { return this._cd.control ? this._cd.control.pending : false; },
	            enumerable: true,
	            configurable: true
	        });
	        return AbstractControlStatus;
	    }());
	    var ngControlStatusHost = {
	        '[class.ng-untouched]': 'ngClassUntouched',
	        '[class.ng-touched]': 'ngClassTouched',
	        '[class.ng-pristine]': 'ngClassPristine',
	        '[class.ng-dirty]': 'ngClassDirty',
	        '[class.ng-valid]': 'ngClassValid',
	        '[class.ng-invalid]': 'ngClassInvalid',
	        '[class.ng-pending]': 'ngClassPending',
	    };
	    /**
	     * Directive automatically applied to Angular form controls that sets CSS classes
	     * based on control status (valid/invalid/dirty/etc).
	     *
	     * @stable
	     */
	    var NgControlStatus = (function (_super) {
	        __extends$3(NgControlStatus, _super);
	        function NgControlStatus(cd) {
	            _super.call(this, cd);
	        }
	        NgControlStatus.decorators = [
	            { type: _angular_core.Directive, args: [{ selector: '[formControlName],[ngModel],[formControl]', host: ngControlStatusHost },] },
	        ];
	        /** @nocollapse */
	        NgControlStatus.ctorParameters = [
	            { type: NgControl, decorators: [{ type: _angular_core.Self },] },
	        ];
	        return NgControlStatus;
	    }(AbstractControlStatus));
	    /**
	     * Directive automatically applied to Angular form groups that sets CSS classes
	     * based on control status (valid/invalid/dirty/etc).
	     *
	     * @stable
	     */
	    var NgControlStatusGroup = (function (_super) {
	        __extends$3(NgControlStatusGroup, _super);
	        function NgControlStatusGroup(cd) {
	            _super.call(this, cd);
	        }
	        NgControlStatusGroup.decorators = [
	            { type: _angular_core.Directive, args: [{
	                        selector: '[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]',
	                        host: ngControlStatusHost
	                    },] },
	        ];
	        /** @nocollapse */
	        NgControlStatusGroup.ctorParameters = [
	            { type: ControlContainer, decorators: [{ type: _angular_core.Self },] },
	        ];
	        return NgControlStatusGroup;
	    }(AbstractControlStatus));

	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    var __extends$5 = (this && this.__extends) || function (d, b) {
	        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	    /**
	     * Use by directives and components to emit custom Events.
	     *
	     * ### Examples
	     *
	     * In the following example, `Zippy` alternatively emits `open` and `close` events when its
	     * title gets clicked:
	     *
	     * ```
	     * @Component({
	     *   selector: 'zippy',
	     *   template: `
	     *   <div class="zippy">
	     *     <div (click)="toggle()">Toggle</div>
	     *     <div [hidden]="!visible">
	     *       <ng-content></ng-content>
	     *     </div>
	     *  </div>`})
	     * export class Zippy {
	     *   visible: boolean = true;
	     *   @Output() open: EventEmitter<any> = new EventEmitter();
	     *   @Output() close: EventEmitter<any> = new EventEmitter();
	     *
	     *   toggle() {
	     *     this.visible = !this.visible;
	     *     if (this.visible) {
	     *       this.open.emit(null);
	     *     } else {
	     *       this.close.emit(null);
	     *     }
	     *   }
	     * }
	     * ```
	     *
	     * The events payload can be accessed by the parameter `$event` on the components output event
	     * handler:
	     *
	     * ```
	     * <zippy (open)="onOpen($event)" (close)="onClose($event)"></zippy>
	     * ```
	     *
	     * Uses Rx.Observable but provides an adapter to make it work as specified here:
	     * https://github.com/jhusain/observable-spec
	     *
	     * Once a reference implementation of the spec is available, switch to it.
	     * @stable
	     */
	    var EventEmitter = (function (_super) {
	        __extends$5(EventEmitter, _super);
	        /**
	         * Creates an instance of [EventEmitter], which depending on [isAsync],
	         * delivers events synchronously or asynchronously.
	         */
	        function EventEmitter(isAsync) {
	            if (isAsync === void 0) { isAsync = false; }
	            _super.call(this);
	            this.__isAsync = isAsync;
	        }
	        EventEmitter.prototype.emit = function (value) { _super.prototype.next.call(this, value); };
	        EventEmitter.prototype.subscribe = function (generatorOrNext, error, complete) {
	            var schedulerFn;
	            var errorFn = function (err) { return null; };
	            var completeFn = function () { return null; };
	            if (generatorOrNext && typeof generatorOrNext === 'object') {
	                schedulerFn = this.__isAsync ? function (value) {
	                    setTimeout(function () { return generatorOrNext.next(value); });
	                } : function (value) { generatorOrNext.next(value); };
	                if (generatorOrNext.error) {
	                    errorFn = this.__isAsync ? function (err) { setTimeout(function () { return generatorOrNext.error(err); }); } :
	                        function (err) { generatorOrNext.error(err); };
	                }
	                if (generatorOrNext.complete) {
	                    completeFn = this.__isAsync ? function () { setTimeout(function () { return generatorOrNext.complete(); }); } :
	                        function () { generatorOrNext.complete(); };
	                }
	            }
	            else {
	                schedulerFn = this.__isAsync ? function (value) { setTimeout(function () { return generatorOrNext(value); }); } :
	                    function (value) { generatorOrNext(value); };
	                if (error) {
	                    errorFn =
	                        this.__isAsync ? function (err) { setTimeout(function () { return error(err); }); } : function (err) { error(err); };
	                }
	                if (complete) {
	                    completeFn =
	                        this.__isAsync ? function () { setTimeout(function () { return complete(); }); } : function () { complete(); };
	                }
	            }
	            return _super.prototype.subscribe.call(this, schedulerFn, errorFn, completeFn);
	        };
	        return EventEmitter;
	    }(rxjs_Subject.Subject));

	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    var __extends$6 = (this && this.__extends) || function (d, b) {
	        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	    /**
	     * Indicates that a FormControl is valid, i.e. that no errors exist in the input value.
	     */
	    var VALID = 'VALID';
	    /**
	     * Indicates that a FormControl is invalid, i.e. that an error exists in the input value.
	     */
	    var INVALID = 'INVALID';
	    /**
	     * Indicates that a FormControl is pending, i.e. that async validation is occurring and
	     * errors are not yet available for the input value.
	     */
	    var PENDING = 'PENDING';
	    /**
	     * Indicates that a FormControl is disabled, i.e. that the control is exempt from ancestor
	     * calculations of validity or value.
	     */
	    var DISABLED = 'DISABLED';
	    function _find(control, path, delimiter) {
	        if (path == null)
	            return null;
	        if (!(path instanceof Array)) {
	            path = path.split(delimiter);
	        }
	        if (path instanceof Array && (path.length === 0))
	            return null;
	        return path.reduce(function (v, name) {
	            if (v instanceof FormGroup) {
	                return v.controls[name] || null;
	            }
	            if (v instanceof FormArray) {
	                return v.at(name) || null;
	            }
	            return null;
	        }, control);
	    }
	    function toObservable(r) {
	        return isPromise(r) ? rxjs_observable_fromPromise.fromPromise(r) : r;
	    }
	    function coerceToValidator(validator) {
	        return Array.isArray(validator) ? composeValidators(validator) : validator;
	    }
	    function coerceToAsyncValidator(asyncValidator) {
	        return Array.isArray(asyncValidator) ? composeAsyncValidators(asyncValidator) : asyncValidator;
	    }
	    /**
	     * @whatItDoes This is the base class for {@link FormControl}, {@link FormGroup}, and
	     * {@link FormArray}.
	     *
	     * It provides some of the shared behavior that all controls and groups of controls have, like
	     * running validators, calculating status, and resetting state. It also defines the properties
	     * that are shared between all sub-classes, like `value`, `valid`, and `dirty`. It shouldn't be
	     * instantiated directly.
	     *
	     * @stable
	     */
	    var AbstractControl = (function () {
	        function AbstractControl(validator, asyncValidator) {
	            this.validator = validator;
	            this.asyncValidator = asyncValidator;
	            /** @internal */
	            this._onCollectionChange = function () { };
	            this._pristine = true;
	            this._touched = false;
	            /** @internal */
	            this._onDisabledChange = [];
	        }
	        Object.defineProperty(AbstractControl.prototype, "value", {
	            /**
	             * The value of the control.
	             */
	            get: function () { return this._value; },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(AbstractControl.prototype, "parent", {
	            /**
	             * The parent control.
	             */
	            get: function () { return this._parent; },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(AbstractControl.prototype, "status", {
	            /**
	             * The validation status of the control. There are four possible
	             * validation statuses:
	             *
	             * * **VALID**:  control has passed all validation checks
	             * * **INVALID**: control has failed at least one validation check
	             * * **PENDING**: control is in the midst of conducting a validation check
	             * * **DISABLED**: control is exempt from validation checks
	             *
	             * These statuses are mutually exclusive, so a control cannot be
	             * both valid AND invalid or invalid AND disabled.
	             */
	            get: function () { return this._status; },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(AbstractControl.prototype, "valid", {
	            /**
	             * A control is `valid` when its `status === VALID`.
	             *
	             * In order to have this status, the control must have passed all its
	             * validation checks.
	             */
	            get: function () { return this._status === VALID; },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(AbstractControl.prototype, "invalid", {
	            /**
	             * A control is `invalid` when its `status === INVALID`.
	             *
	             * In order to have this status, the control must have failed
	             * at least one of its validation checks.
	             */
	            get: function () { return this._status === INVALID; },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(AbstractControl.prototype, "pending", {
	            /**
	             * A control is `pending` when its `status === PENDING`.
	             *
	             * In order to have this status, the control must be in the
	             * middle of conducting a validation check.
	             */
	            get: function () { return this._status == PENDING; },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(AbstractControl.prototype, "disabled", {
	            /**
	             * A control is `disabled` when its `status === DISABLED`.
	             *
	             * Disabled controls are exempt from validation checks and
	             * are not included in the aggregate value of their ancestor
	             * controls.
	             */
	            get: function () { return this._status === DISABLED; },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(AbstractControl.prototype, "enabled", {
	            /**
	             * A control is `enabled` as long as its `status !== DISABLED`.
	             *
	             * In other words, it has a status of `VALID`, `INVALID`, or
	             * `PENDING`.
	             */
	            get: function () { return this._status !== DISABLED; },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(AbstractControl.prototype, "errors", {
	            /**
	             * Returns any errors generated by failing validation. If there
	             * are no errors, it will return null.
	             */
	            get: function () { return this._errors; },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(AbstractControl.prototype, "pristine", {
	            /**
	             * A control is `pristine` if the user has not yet changed
	             * the value in the UI.
	             *
	             * Note that programmatic changes to a control's value will
	             * *not* mark it dirty.
	             */
	            get: function () { return this._pristine; },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(AbstractControl.prototype, "dirty", {
	            /**
	             * A control is `dirty` if the user has changed the value
	             * in the UI.
	             *
	             * Note that programmatic changes to a control's value will
	             * *not* mark it dirty.
	             */
	            get: function () { return !this.pristine; },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(AbstractControl.prototype, "touched", {
	            /**
	            * A control is marked `touched` once the user has triggered
	            * a `blur` event on it.
	            */
	            get: function () { return this._touched; },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(AbstractControl.prototype, "untouched", {
	            /**
	             * A control is `untouched` if the user has not yet triggered
	             * a `blur` event on it.
	             */
	            get: function () { return !this._touched; },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(AbstractControl.prototype, "valueChanges", {
	            /**
	             * Emits an event every time the value of the control changes, in
	             * the UI or programmatically.
	             */
	            get: function () { return this._valueChanges; },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(AbstractControl.prototype, "statusChanges", {
	            /**
	             * Emits an event every time the validation status of the control
	             * is re-calculated.
	             */
	            get: function () { return this._statusChanges; },
	            enumerable: true,
	            configurable: true
	        });
	        /**
	         * Sets the synchronous validators that are active on this control.  Calling
	         * this will overwrite any existing sync validators.
	         */
	        AbstractControl.prototype.setValidators = function (newValidator) {
	            this.validator = coerceToValidator(newValidator);
	        };
	        /**
	         * Sets the async validators that are active on this control. Calling this
	         * will overwrite any existing async validators.
	         */
	        AbstractControl.prototype.setAsyncValidators = function (newValidator) {
	            this.asyncValidator = coerceToAsyncValidator(newValidator);
	        };
	        /**
	         * Empties out the sync validator list.
	         */
	        AbstractControl.prototype.clearValidators = function () { this.validator = null; };
	        /**
	         * Empties out the async validator list.
	         */
	        AbstractControl.prototype.clearAsyncValidators = function () { this.asyncValidator = null; };
	        /**
	         * Marks the control as `touched`.
	         *
	         * This will also mark all direct ancestors as `touched` to maintain
	         * the model.
	         */
	        AbstractControl.prototype.markAsTouched = function (_a) {
	            var onlySelf = (_a === void 0 ? {} : _a).onlySelf;
	            this._touched = true;
	            if (this._parent && !onlySelf) {
	                this._parent.markAsTouched({ onlySelf: onlySelf });
	            }
	        };
	        /**
	         * Marks the control as `untouched`.
	         *
	         * If the control has any children, it will also mark all children as `untouched`
	         * to maintain the model, and re-calculate the `touched` status of all parent
	         * controls.
	         */
	        AbstractControl.prototype.markAsUntouched = function (_a) {
	            var onlySelf = (_a === void 0 ? {} : _a).onlySelf;
	            this._touched = false;
	            this._forEachChild(function (control) { control.markAsUntouched({ onlySelf: true }); });
	            if (this._parent && !onlySelf) {
	                this._parent._updateTouched({ onlySelf: onlySelf });
	            }
	        };
	        /**
	         * Marks the control as `dirty`.
	         *
	         * This will also mark all direct ancestors as `dirty` to maintain
	         * the model.
	         */
	        AbstractControl.prototype.markAsDirty = function (_a) {
	            var onlySelf = (_a === void 0 ? {} : _a).onlySelf;
	            this._pristine = false;
	            if (this._parent && !onlySelf) {
	                this._parent.markAsDirty({ onlySelf: onlySelf });
	            }
	        };
	        /**
	         * Marks the control as `pristine`.
	         *
	         * If the control has any children, it will also mark all children as `pristine`
	         * to maintain the model, and re-calculate the `pristine` status of all parent
	         * controls.
	         */
	        AbstractControl.prototype.markAsPristine = function (_a) {
	            var onlySelf = (_a === void 0 ? {} : _a).onlySelf;
	            this._pristine = true;
	            this._forEachChild(function (control) { control.markAsPristine({ onlySelf: true }); });
	            if (this._parent && !onlySelf) {
	                this._parent._updatePristine({ onlySelf: onlySelf });
	            }
	        };
	        /**
	         * Marks the control as `pending`.
	         */
	        AbstractControl.prototype.markAsPending = function (_a) {
	            var onlySelf = (_a === void 0 ? {} : _a).onlySelf;
	            this._status = PENDING;
	            if (this._parent && !onlySelf) {
	                this._parent.markAsPending({ onlySelf: onlySelf });
	            }
	        };
	        /**
	         * Disables the control. This means the control will be exempt from validation checks and
	         * excluded from the aggregate value of any parent. Its status is `DISABLED`.
	         *
	         * If the control has children, all children will be disabled to maintain the model.
	         */
	        AbstractControl.prototype.disable = function (_a) {
	            var _b = _a === void 0 ? {} : _a, onlySelf = _b.onlySelf, emitEvent = _b.emitEvent;
	            this._status = DISABLED;
	            this._errors = null;
	            this._forEachChild(function (control) { control.disable({ onlySelf: true }); });
	            this._updateValue();
	            if (emitEvent !== false) {
	                this._valueChanges.emit(this._value);
	                this._statusChanges.emit(this._status);
	            }
	            this._updateAncestors(onlySelf);
	            this._onDisabledChange.forEach(function (changeFn) { return changeFn(true); });
	        };
	        /**
	         * Enables the control. This means the control will be included in validation checks and
	         * the aggregate value of its parent. Its status is re-calculated based on its value and
	         * its validators.
	         *
	         * If the control has children, all children will be enabled.
	         */
	        AbstractControl.prototype.enable = function (_a) {
	            var _b = _a === void 0 ? {} : _a, onlySelf = _b.onlySelf, emitEvent = _b.emitEvent;
	            this._status = VALID;
	            this._forEachChild(function (control) { control.enable({ onlySelf: true }); });
	            this.updateValueAndValidity({ onlySelf: true, emitEvent: emitEvent });
	            this._updateAncestors(onlySelf);
	            this._onDisabledChange.forEach(function (changeFn) { return changeFn(false); });
	        };
	        AbstractControl.prototype._updateAncestors = function (onlySelf) {
	            if (this._parent && !onlySelf) {
	                this._parent.updateValueAndValidity();
	                this._parent._updatePristine();
	                this._parent._updateTouched();
	            }
	        };
	        AbstractControl.prototype.setParent = function (parent) { this._parent = parent; };
	        /**
	         * Re-calculates the value and validation status of the control.
	         *
	         * By default, it will also update the value and validity of its ancestors.
	         */
	        AbstractControl.prototype.updateValueAndValidity = function (_a) {
	            var _b = _a === void 0 ? {} : _a, onlySelf = _b.onlySelf, emitEvent = _b.emitEvent;
	            this._setInitialStatus();
	            this._updateValue();
	            if (this.enabled) {
	                this._errors = this._runValidator();
	                this._status = this._calculateStatus();
	                if (this._status === VALID || this._status === PENDING) {
	                    this._runAsyncValidator(emitEvent);
	                }
	            }
	            if (emitEvent !== false) {
	                this._valueChanges.emit(this._value);
	                this._statusChanges.emit(this._status);
	            }
	            if (this._parent && !onlySelf) {
	                this._parent.updateValueAndValidity({ onlySelf: onlySelf, emitEvent: emitEvent });
	            }
	        };
	        /** @internal */
	        AbstractControl.prototype._updateTreeValidity = function (_a) {
	            var emitEvent = (_a === void 0 ? { emitEvent: true } : _a).emitEvent;
	            this._forEachChild(function (ctrl) { return ctrl._updateTreeValidity({ emitEvent: emitEvent }); });
	            this.updateValueAndValidity({ onlySelf: true, emitEvent: emitEvent });
	        };
	        AbstractControl.prototype._setInitialStatus = function () { this._status = this._allControlsDisabled() ? DISABLED : VALID; };
	        AbstractControl.prototype._runValidator = function () {
	            return this.validator ? this.validator(this) : null;
	        };
	        AbstractControl.prototype._runAsyncValidator = function (emitEvent) {
	            var _this = this;
	            if (this.asyncValidator) {
	                this._status = PENDING;
	                this._cancelExistingSubscription();
	                var obs = toObservable(this.asyncValidator(this));
	                this._asyncValidationSubscription =
	                    obs.subscribe({ next: function (res) { return _this.setErrors(res, { emitEvent: emitEvent }); } });
	            }
	        };
	        AbstractControl.prototype._cancelExistingSubscription = function () {
	            if (this._asyncValidationSubscription) {
	                this._asyncValidationSubscription.unsubscribe();
	            }
	        };
	        /**
	         * Sets errors on a form control.
	         *
	         * This is used when validations are run manually by the user, rather than automatically.
	         *
	         * Calling `setErrors` will also update the validity of the parent control.
	         *
	         * ### Example
	         *
	         * ```
	         * const login = new FormControl("someLogin");
	         * login.setErrors({
	         *   "notUnique": true
	         * });
	         *
	         * expect(login.valid).toEqual(false);
	         * expect(login.errors).toEqual({"notUnique": true});
	         *
	         * login.setValue("someOtherLogin");
	         *
	         * expect(login.valid).toEqual(true);
	         * ```
	         */
	        AbstractControl.prototype.setErrors = function (errors, _a) {
	            var emitEvent = (_a === void 0 ? {} : _a).emitEvent;
	            this._errors = errors;
	            this._updateControlsErrors(emitEvent !== false);
	        };
	        /**
	         * Retrieves a child control given the control's name or path.
	         *
	         * Paths can be passed in as an array or a string delimited by a dot.
	         *
	         * To get a control nested within a `person` sub-group:
	         *
	         * * `this.form.get('person.name');`
	         *
	         * -OR-
	         *
	         * * `this.form.get(['person', 'name']);`
	         */
	        AbstractControl.prototype.get = function (path) { return _find(this, path, '.'); };
	        /**
	         * Returns true if the control with the given path has the error specified. Otherwise
	         * returns null or undefined.
	         *
	         * If no path is given, it checks for the error on the present control.
	         */
	        AbstractControl.prototype.getError = function (errorCode, path) {
	            if (path === void 0) { path = null; }
	            var control = path ? this.get(path) : this;
	            return control && control._errors ? control._errors[errorCode] : null;
	        };
	        /**
	         * Returns true if the control with the given path has the error specified. Otherwise
	         * returns false.
	         *
	         * If no path is given, it checks for the error on the present control.
	         */
	        AbstractControl.prototype.hasError = function (errorCode, path) {
	            if (path === void 0) { path = null; }
	            return !!this.getError(errorCode, path);
	        };
	        Object.defineProperty(AbstractControl.prototype, "root", {
	            /**
	             * Retrieves the top-level ancestor of this control.
	             */
	            get: function () {
	                var x = this;
	                while (x._parent) {
	                    x = x._parent;
	                }
	                return x;
	            },
	            enumerable: true,
	            configurable: true
	        });
	        /** @internal */
	        AbstractControl.prototype._updateControlsErrors = function (emitEvent) {
	            this._status = this._calculateStatus();
	            if (emitEvent) {
	                this._statusChanges.emit(this._status);
	            }
	            if (this._parent) {
	                this._parent._updateControlsErrors(emitEvent);
	            }
	        };
	        /** @internal */
	        AbstractControl.prototype._initObservables = function () {
	            this._valueChanges = new EventEmitter();
	            this._statusChanges = new EventEmitter();
	        };
	        AbstractControl.prototype._calculateStatus = function () {
	            if (this._allControlsDisabled())
	                return DISABLED;
	            if (this._errors)
	                return INVALID;
	            if (this._anyControlsHaveStatus(PENDING))
	                return PENDING;
	            if (this._anyControlsHaveStatus(INVALID))
	                return INVALID;
	            return VALID;
	        };
	        /** @internal */
	        AbstractControl.prototype._anyControlsHaveStatus = function (status) {
	            return this._anyControls(function (control) { return control.status === status; });
	        };
	        /** @internal */
	        AbstractControl.prototype._anyControlsDirty = function () {
	            return this._anyControls(function (control) { return control.dirty; });
	        };
	        /** @internal */
	        AbstractControl.prototype._anyControlsTouched = function () {
	            return this._anyControls(function (control) { return control.touched; });
	        };
	        /** @internal */
	        AbstractControl.prototype._updatePristine = function (_a) {
	            var onlySelf = (_a === void 0 ? {} : _a).onlySelf;
	            this._pristine = !this._anyControlsDirty();
	            if (this._parent && !onlySelf) {
	                this._parent._updatePristine({ onlySelf: onlySelf });
	            }
	        };
	        /** @internal */
	        AbstractControl.prototype._updateTouched = function (_a) {
	            var onlySelf = (_a === void 0 ? {} : _a).onlySelf;
	            this._touched = this._anyControlsTouched();
	            if (this._parent && !onlySelf) {
	                this._parent._updateTouched({ onlySelf: onlySelf });
	            }
	        };
	        /** @internal */
	        AbstractControl.prototype._isBoxedValue = function (formState) {
	            return typeof formState === 'object' && formState !== null &&
	                Object.keys(formState).length === 2 && 'value' in formState && 'disabled' in formState;
	        };
	        /** @internal */
	        AbstractControl.prototype._registerOnCollectionChange = function (fn) { this._onCollectionChange = fn; };
	        return AbstractControl;
	    }());
	    /**
	     * @whatItDoes Tracks the value and validation status of an individual form control.
	     *
	     * It is one of the three fundamental building blocks of Angular forms, along with
	     * {@link FormGroup} and {@link FormArray}.
	     *
	     * @howToUse
	     *
	     * When instantiating a {@link FormControl}, you can pass in an initial value as the
	     * first argument. Example:
	     *
	     * ```ts
	     * const ctrl = new FormControl('some value');
	     * console.log(ctrl.value);     // 'some value'
	     *```
	     *
	     * You can also initialize the control with a form state object on instantiation,
	     * which includes both the value and whether or not the control is disabled.
	     * You can't use the value key without the disabled key; both are required
	     * to use this way of initialization.
	     *
	     * ```ts
	     * const ctrl = new FormControl({value: 'n/a', disabled: true});
	     * console.log(ctrl.value);     // 'n/a'
	     * console.log(ctrl.status);   // 'DISABLED'
	     * ```
	     *
	     * To include a sync validator (or an array of sync validators) with the control,
	     * pass it in as the second argument. Async validators are also supported, but
	     * have to be passed in separately as the third arg.
	     *
	     * ```ts
	     * const ctrl = new FormControl('', Validators.required);
	     * console.log(ctrl.value);     // ''
	     * console.log(ctrl.status);   // 'INVALID'
	     * ```
	     *
	     * See its superclass, {@link AbstractControl}, for more properties and methods.
	     *
	     * * **npm package**: `@angular/forms`
	     *
	     * @stable
	     */
	    var FormControl = (function (_super) {
	        __extends$6(FormControl, _super);
	        function FormControl(formState, validator, asyncValidator) {
	            if (formState === void 0) { formState = null; }
	            if (validator === void 0) { validator = null; }
	            if (asyncValidator === void 0) { asyncValidator = null; }
	            _super.call(this, coerceToValidator(validator), coerceToAsyncValidator(asyncValidator));
	            /** @internal */
	            this._onChange = [];
	            this._applyFormState(formState);
	            this.updateValueAndValidity({ onlySelf: true, emitEvent: false });
	            this._initObservables();
	        }
	        /**
	         * Set the value of the form control to `value`.
	         *
	         * If `onlySelf` is `true`, this change will only affect the validation of this `FormControl`
	         * and not its parent component. This defaults to false.
	         *
	         * If `emitEvent` is `true`, this
	         * change will cause a `valueChanges` event on the `FormControl` to be emitted. This defaults
	         * to true (as it falls through to `updateValueAndValidity`).
	         *
	         * If `emitModelToViewChange` is `true`, the view will be notified about the new value
	         * via an `onChange` event. This is the default behavior if `emitModelToViewChange` is not
	         * specified.
	         *
	         * If `emitViewToModelChange` is `true`, an ngModelChange event will be fired to update the
	         * model.  This is the default behavior if `emitViewToModelChange` is not specified.
	         */
	        FormControl.prototype.setValue = function (value, _a) {
	            var _this = this;
	            var _b = _a === void 0 ? {} : _a, onlySelf = _b.onlySelf, emitEvent = _b.emitEvent, emitModelToViewChange = _b.emitModelToViewChange, emitViewToModelChange = _b.emitViewToModelChange;
	            this._value = value;
	            if (this._onChange.length && emitModelToViewChange !== false) {
	                this._onChange.forEach(function (changeFn) { return changeFn(_this._value, emitViewToModelChange !== false); });
	            }
	            this.updateValueAndValidity({ onlySelf: onlySelf, emitEvent: emitEvent });
	        };
	        /**
	         * Patches the value of a control.
	         *
	         * This function is functionally the same as {@link FormControl.setValue} at this level.
	         * It exists for symmetry with {@link FormGroup.patchValue} on `FormGroups` and `FormArrays`,
	         * where it does behave differently.
	         */
	        FormControl.prototype.patchValue = function (value, options) {
	            if (options === void 0) { options = {}; }
	            this.setValue(value, options);
	        };
	        /**
	         * Resets the form control. This means by default:
	         *
	         * * it is marked as `pristine`
	         * * it is marked as `untouched`
	         * * value is set to null
	         *
	         * You can also reset to a specific form state by passing through a standalone
	         * value or a form state object that contains both a value and a disabled state
	         * (these are the only two properties that cannot be calculated).
	         *
	         * Ex:
	         *
	         * ```ts
	         * this.control.reset('Nancy');
	         *
	         * console.log(this.control.value);  // 'Nancy'
	         * ```
	         *
	         * OR
	         *
	         * ```
	         * this.control.reset({value: 'Nancy', disabled: true});
	         *
	         * console.log(this.control.value);  // 'Nancy'
	         * console.log(this.control.status);  // 'DISABLED'
	         * ```
	         */
	        FormControl.prototype.reset = function (formState, _a) {
	            if (formState === void 0) { formState = null; }
	            var _b = _a === void 0 ? {} : _a, onlySelf = _b.onlySelf, emitEvent = _b.emitEvent;
	            this._applyFormState(formState);
	            this.markAsPristine({ onlySelf: onlySelf });
	            this.markAsUntouched({ onlySelf: onlySelf });
	            this.setValue(this._value, { onlySelf: onlySelf, emitEvent: emitEvent });
	        };
	        /**
	         * @internal
	         */
	        FormControl.prototype._updateValue = function () { };
	        /**
	         * @internal
	         */
	        FormControl.prototype._anyControls = function (condition) { return false; };
	        /**
	         * @internal
	         */
	        FormControl.prototype._allControlsDisabled = function () { return this.disabled; };
	        /**
	         * Register a listener for change events.
	         */
	        FormControl.prototype.registerOnChange = function (fn) { this._onChange.push(fn); };
	        /**
	         * @internal
	         */
	        FormControl.prototype._clearChangeFns = function () {
	            this._onChange = [];
	            this._onDisabledChange = [];
	            this._onCollectionChange = function () { };
	        };
	        /**
	         * Register a listener for disabled events.
	         */
	        FormControl.prototype.registerOnDisabledChange = function (fn) {
	            this._onDisabledChange.push(fn);
	        };
	        /**
	         * @internal
	         */
	        FormControl.prototype._forEachChild = function (cb) { };
	        FormControl.prototype._applyFormState = function (formState) {
	            if (this._isBoxedValue(formState)) {
	                this._value = formState.value;
	                formState.disabled ? this.disable({ onlySelf: true, emitEvent: false }) :
	                    this.enable({ onlySelf: true, emitEvent: false });
	            }
	            else {
	                this._value = formState;
	            }
	        };
	        return FormControl;
	    }(AbstractControl));
	    /**
	     * @whatItDoes Tracks the value and validity state of a group of {@link FormControl}
	     * instances.
	     *
	     * A `FormGroup` aggregates the values of each child {@link FormControl} into one object,
	     * with each control name as the key.  It calculates its status by reducing the statuses
	     * of its children. For example, if one of the controls in a group is invalid, the entire
	     * group becomes invalid.
	     *
	     * `FormGroup` is one of the three fundamental building blocks used to define forms in Angular,
	     * along with {@link FormControl} and {@link FormArray}.
	     *
	     * @howToUse
	     *
	     * When instantiating a {@link FormGroup}, pass in a collection of child controls as the first
	     * argument. The key for each child will be the name under which it is registered.
	     *
	     * ### Example
	     *
	     * ```
	     * const form = new FormGroup({
	     *   first: new FormControl('Nancy', Validators.minLength(2)),
	     *   last: new FormControl('Drew'),
	     * });
	     *
	     * console.log(form.value);   // {first: 'Nancy', last; 'Drew'}
	     * console.log(form.status);  // 'VALID'
	     * ```
	     *
	     * You can also include group-level validators as the second arg, or group-level async
	     * validators as the third arg. These come in handy when you want to perform validation
	     * that considers the value of more than one child control.
	     *
	     * ### Example
	     *
	     * ```
	     * const form = new FormGroup({
	     *   password: new FormControl('', Validators.minLength(2)),
	     *   passwordConfirm: new FormControl('', Validators.minLength(2)),
	     * }, passwordMatchValidator);
	     *
	     *
	     * function passwordMatchValidator(g: FormGroup) {
	     *    return g.get('password').value === g.get('passwordConfirm').value
	     *       ? null : {'mismatch': true};
	     * }
	     * ```
	     *
	     * * **npm package**: `@angular/forms`
	     *
	     * @stable
	     */
	    var FormGroup = (function (_super) {
	        __extends$6(FormGroup, _super);
	        function FormGroup(controls, validator, asyncValidator) {
	            if (validator === void 0) { validator = null; }
	            if (asyncValidator === void 0) { asyncValidator = null; }
	            _super.call(this, validator, asyncValidator);
	            this.controls = controls;
	            this._initObservables();
	            this._setUpControls();
	            this.updateValueAndValidity({ onlySelf: true, emitEvent: false });
	        }
	        /**
	         * Registers a control with the group's list of controls.
	         *
	         * This method does not update value or validity of the control, so for
	         * most cases you'll want to use {@link FormGroup.addControl} instead.
	         */
	        FormGroup.prototype.registerControl = function (name, control) {
	            if (this.controls[name])
	                return this.controls[name];
	            this.controls[name] = control;
	            control.setParent(this);
	            control._registerOnCollectionChange(this._onCollectionChange);
	            return control;
	        };
	        /**
	         * Add a control to this group.
	         */
	        FormGroup.prototype.addControl = function (name, control) {
	            this.registerControl(name, control);
	            this.updateValueAndValidity();
	            this._onCollectionChange();
	        };
	        /**
	         * Remove a control from this group.
	         */
	        FormGroup.prototype.removeControl = function (name) {
	            if (this.controls[name])
	                this.controls[name]._registerOnCollectionChange(function () { });
	            delete (this.controls[name]);
	            this.updateValueAndValidity();
	            this._onCollectionChange();
	        };
	        /**
	         * Replace an existing control.
	         */
	        FormGroup.prototype.setControl = function (name, control) {
	            if (this.controls[name])
	                this.controls[name]._registerOnCollectionChange(function () { });
	            delete (this.controls[name]);
	            if (control)
	                this.registerControl(name, control);
	            this.updateValueAndValidity();
	            this._onCollectionChange();
	        };
	        /**
	         * Check whether there is an enabled control with the given name in the group.
	         *
	         * It will return false for disabled controls. If you'd like to check for
	         * existence in the group only, use {@link AbstractControl.get} instead.
	         */
	        FormGroup.prototype.contains = function (controlName) {
	            return this.controls.hasOwnProperty(controlName) && this.controls[controlName].enabled;
	        };
	        /**
	         *  Sets the value of the {@link FormGroup}. It accepts an object that matches
	         *  the structure of the group, with control names as keys.
	         *
	         * This method performs strict checks, so it will throw an error if you try
	         * to set the value of a control that doesn't exist or if you exclude the
	         * value of a control.
	         *
	         *  ### Example
	         *
	         *  ```
	         *  const form = new FormGroup({
	         *     first: new FormControl(),
	         *     last: new FormControl()
	         *  });
	         *  console.log(form.value);   // {first: null, last: null}
	         *
	         *  form.setValue({first: 'Nancy', last: 'Drew'});
	         *  console.log(form.value);   // {first: 'Nancy', last: 'Drew'}
	         *
	         *  ```
	         */
	        FormGroup.prototype.setValue = function (value, _a) {
	            var _this = this;
	            var _b = _a === void 0 ? {} : _a, onlySelf = _b.onlySelf, emitEvent = _b.emitEvent;
	            this._checkAllValuesPresent(value);
	            Object.keys(value).forEach(function (name) {
	                _this._throwIfControlMissing(name);
	                _this.controls[name].setValue(value[name], { onlySelf: true, emitEvent: emitEvent });
	            });
	            this.updateValueAndValidity({ onlySelf: onlySelf, emitEvent: emitEvent });
	        };
	        /**
	         *  Patches the value of the {@link FormGroup}. It accepts an object with control
	         *  names as keys, and will do its best to match the values to the correct controls
	         *  in the group.
	         *
	         *  It accepts both super-sets and sub-sets of the group without throwing an error.
	         *
	         *  ### Example
	         *
	         *  ```
	         *  const form = new FormGroup({
	         *     first: new FormControl(),
	         *     last: new FormControl()
	         *  });
	         *  console.log(form.value);   // {first: null, last: null}
	         *
	         *  form.patchValue({first: 'Nancy'});
	         *  console.log(form.value);   // {first: 'Nancy', last: null}
	         *
	         *  ```
	         */
	        FormGroup.prototype.patchValue = function (value, _a) {
	            var _this = this;
	            var _b = _a === void 0 ? {} : _a, onlySelf = _b.onlySelf, emitEvent = _b.emitEvent;
	            Object.keys(value).forEach(function (name) {
	                if (_this.controls[name]) {
	                    _this.controls[name].patchValue(value[name], { onlySelf: true, emitEvent: emitEvent });
	                }
	            });
	            this.updateValueAndValidity({ onlySelf: onlySelf, emitEvent: emitEvent });
	        };
	        /**
	         * Resets the {@link FormGroup}. This means by default:
	         *
	         * * The group and all descendants are marked `pristine`
	         * * The group and all descendants are marked `untouched`
	         * * The value of all descendants will be null or null maps
	         *
	         * You can also reset to a specific form state by passing in a map of states
	         * that matches the structure of your form, with control names as keys. The state
	         * can be a standalone value or a form state object with both a value and a disabled
	         * status.
	         *
	         * ### Example
	         *
	         * ```ts
	         * this.form.reset({first: 'name', last: 'last name'});
	         *
	         * console.log(this.form.value);  // {first: 'name', last: 'last name'}
	         * ```
	         *
	         * - OR -
	         *
	         * ```
	         * this.form.reset({
	         *   first: {value: 'name', disabled: true},
	         *   last: 'last'
	         * });
	         *
	         * console.log(this.form.value);  // {first: 'name', last: 'last name'}
	         * console.log(this.form.get('first').status);  // 'DISABLED'
	         * ```
	         */
	        FormGroup.prototype.reset = function (value, _a) {
	            if (value === void 0) { value = {}; }
	            var _b = _a === void 0 ? {} : _a, onlySelf = _b.onlySelf, emitEvent = _b.emitEvent;
	            this._forEachChild(function (control, name) {
	                control.reset(value[name], { onlySelf: true, emitEvent: emitEvent });
	            });
	            this.updateValueAndValidity({ onlySelf: onlySelf, emitEvent: emitEvent });
	            this._updatePristine({ onlySelf: onlySelf });
	            this._updateTouched({ onlySelf: onlySelf });
	        };
	        /**
	         * The aggregate value of the {@link FormGroup}, including any disabled controls.
	         *
	         * If you'd like to include all values regardless of disabled status, use this method.
	         * Otherwise, the `value` property is the best way to get the value of the group.
	         */
	        FormGroup.prototype.getRawValue = function () {
	            return this._reduceChildren({}, function (acc, control, name) {
	                acc[name] = control.value;
	                return acc;
	            });
	        };
	        /** @internal */
	        FormGroup.prototype._throwIfControlMissing = function (name) {
	            if (!Object.keys(this.controls).length) {
	                throw new Error("\n        There are no form controls registered with this group yet.  If you're using ngModel,\n        you may want to check next tick (e.g. use setTimeout).\n      ");
	            }
	            if (!this.controls[name]) {
	                throw new Error("Cannot find form control with name: " + name + ".");
	            }
	        };
	        /** @internal */
	        FormGroup.prototype._forEachChild = function (cb) {
	            var _this = this;
	            Object.keys(this.controls).forEach(function (k) { return cb(_this.controls[k], k); });
	        };
	        /** @internal */
	        FormGroup.prototype._setUpControls = function () {
	            var _this = this;
	            this._forEachChild(function (control) {
	                control.setParent(_this);
	                control._registerOnCollectionChange(_this._onCollectionChange);
	            });
	        };
	        /** @internal */
	        FormGroup.prototype._updateValue = function () { this._value = this._reduceValue(); };
	        /** @internal */
	        FormGroup.prototype._anyControls = function (condition) {
	            var _this = this;
	            var res = false;
	            this._forEachChild(function (control, name) {
	                res = res || (_this.contains(name) && condition(control));
	            });
	            return res;
	        };
	        /** @internal */
	        FormGroup.prototype._reduceValue = function () {
	            var _this = this;
	            return this._reduceChildren({}, function (acc, control, name) {
	                if (control.enabled || _this.disabled) {
	                    acc[name] = control.value;
	                }
	                return acc;
	            });
	        };
	        /** @internal */
	        FormGroup.prototype._reduceChildren = function (initValue, fn) {
	            var res = initValue;
	            this._forEachChild(function (control, name) { res = fn(res, control, name); });
	            return res;
	        };
	        /** @internal */
	        FormGroup.prototype._allControlsDisabled = function () {
	            for (var _i = 0, _a = Object.keys(this.controls); _i < _a.length; _i++) {
	                var controlName = _a[_i];
	                if (this.controls[controlName].enabled) {
	                    return false;
	                }
	            }
	            return Object.keys(this.controls).length > 0 || this.disabled;
	        };
	        /** @internal */
	        FormGroup.prototype._checkAllValuesPresent = function (value) {
	            this._forEachChild(function (control, name) {
	                if (value[name] === undefined) {
	                    throw new Error("Must supply a value for form control with name: '" + name + "'.");
	                }
	            });
	        };
	        return FormGroup;
	    }(AbstractControl));
	    /**
	     * @whatItDoes Tracks the value and validity state of an array of {@link FormControl}
	     * instances.
	     *
	     * A `FormArray` aggregates the values of each child {@link FormControl} into an array.
	     * It calculates its status by reducing the statuses of its children. For example, if one of
	     * the controls in a `FormArray` is invalid, the entire array becomes invalid.
	     *
	     * `FormArray` is one of the three fundamental building blocks used to define forms in Angular,
	     * along with {@link FormControl} and {@link FormGroup}.
	     *
	     * @howToUse
	     *
	     * When instantiating a {@link FormArray}, pass in an array of child controls as the first
	     * argument.
	     *
	     * ### Example
	     *
	     * ```
	     * const arr = new FormArray([
	     *   new FormControl('Nancy', Validators.minLength(2)),
	     *   new FormControl('Drew'),
	     * ]);
	     *
	     * console.log(arr.value);   // ['Nancy', 'Drew']
	     * console.log(arr.status);  // 'VALID'
	     * ```
	     *
	     * You can also include array-level validators as the second arg, or array-level async
	     * validators as the third arg. These come in handy when you want to perform validation
	     * that considers the value of more than one child control.
	     *
	     * ### Adding or removing controls
	     *
	     * To change the controls in the array, use the `push`, `insert`, or `removeAt` methods
	     * in `FormArray` itself. These methods ensure the controls are properly tracked in the
	     * form's hierarchy. Do not modify the array of `AbstractControl`s used to instantiate
	     * the `FormArray` directly, as that will result in strange and unexpected behavior such
	     * as broken change detection.
	     *
	     * * **npm package**: `@angular/forms`
	     *
	     * @stable
	     */
	    var FormArray = (function (_super) {
	        __extends$6(FormArray, _super);
	        function FormArray(controls, validator, asyncValidator) {
	            if (validator === void 0) { validator = null; }
	            if (asyncValidator === void 0) { asyncValidator = null; }
	            _super.call(this, validator, asyncValidator);
	            this.controls = controls;
	            this._initObservables();
	            this._setUpControls();
	            this.updateValueAndValidity({ onlySelf: true, emitEvent: false });
	        }
	        /**
	         * Get the {@link AbstractControl} at the given `index` in the array.
	         */
	        FormArray.prototype.at = function (index) { return this.controls[index]; };
	        /**
	         * Insert a new {@link AbstractControl} at the end of the array.
	         */
	        FormArray.prototype.push = function (control) {
	            this.controls.push(control);
	            this._registerControl(control);
	            this.updateValueAndValidity();
	            this._onCollectionChange();
	        };
	        /**
	         * Insert a new {@link AbstractControl} at the given `index` in the array.
	         */
	        FormArray.prototype.insert = function (index, control) {
	            this.controls.splice(index, 0, control);
	            this._registerControl(control);
	            this.updateValueAndValidity();
	            this._onCollectionChange();
	        };
	        /**
	         * Remove the control at the given `index` in the array.
	         */
	        FormArray.prototype.removeAt = function (index) {
	            if (this.controls[index])
	                this.controls[index]._registerOnCollectionChange(function () { });
	            this.controls.splice(index, 1);
	            this.updateValueAndValidity();
	            this._onCollectionChange();
	        };
	        /**
	         * Replace an existing control.
	         */
	        FormArray.prototype.setControl = function (index, control) {
	            if (this.controls[index])
	                this.controls[index]._registerOnCollectionChange(function () { });
	            this.controls.splice(index, 1);
	            if (control) {
	                this.controls.splice(index, 0, control);
	                this._registerControl(control);
	            }
	            this.updateValueAndValidity();
	            this._onCollectionChange();
	        };
	        Object.defineProperty(FormArray.prototype, "length", {
	            /**
	             * Length of the control array.
	             */
	            get: function () { return this.controls.length; },
	            enumerable: true,
	            configurable: true
	        });
	        /**
	         *  Sets the value of the {@link FormArray}. It accepts an array that matches
	         *  the structure of the control.
	         *
	         * This method performs strict checks, so it will throw an error if you try
	         * to set the value of a control that doesn't exist or if you exclude the
	         * value of a control.
	         *
	         *  ### Example
	         *
	         *  ```
	         *  const arr = new FormArray([
	         *     new FormControl(),
	         *     new FormControl()
	         *  ]);
	         *  console.log(arr.value);   // [null, null]
	         *
	         *  arr.setValue(['Nancy', 'Drew']);
	         *  console.log(arr.value);   // ['Nancy', 'Drew']
	         *  ```
	         */
	        FormArray.prototype.setValue = function (value, _a) {
	            var _this = this;
	            var _b = _a === void 0 ? {} : _a, onlySelf = _b.onlySelf, emitEvent = _b.emitEvent;
	            this._checkAllValuesPresent(value);
	            value.forEach(function (newValue, index) {
	                _this._throwIfControlMissing(index);
	                _this.at(index).setValue(newValue, { onlySelf: true, emitEvent: emitEvent });
	            });
	            this.updateValueAndValidity({ onlySelf: onlySelf, emitEvent: emitEvent });
	        };
	        /**
	         *  Patches the value of the {@link FormArray}. It accepts an array that matches the
	         *  structure of the control, and will do its best to match the values to the correct
	         *  controls in the group.
	         *
	         *  It accepts both super-sets and sub-sets of the array without throwing an error.
	         *
	         *  ### Example
	         *
	         *  ```
	         *  const arr = new FormArray([
	         *     new FormControl(),
	         *     new FormControl()
	         *  ]);
	         *  console.log(arr.value);   // [null, null]
	         *
	         *  arr.patchValue(['Nancy']);
	         *  console.log(arr.value);   // ['Nancy', null]
	         *  ```
	         */
	        FormArray.prototype.patchValue = function (value, _a) {
	            var _this = this;
	            var _b = _a === void 0 ? {} : _a, onlySelf = _b.onlySelf, emitEvent = _b.emitEvent;
	            value.forEach(function (newValue, index) {
	                if (_this.at(index)) {
	                    _this.at(index).patchValue(newValue, { onlySelf: true, emitEvent: emitEvent });
	                }
	            });
	            this.updateValueAndValidity({ onlySelf: onlySelf, emitEvent: emitEvent });
	        };
	        /**
	         * Resets the {@link FormArray}. This means by default:
	         *
	         * * The array and all descendants are marked `pristine`
	         * * The array and all descendants are marked `untouched`
	         * * The value of all descendants will be null or null maps
	         *
	         * You can also reset to a specific form state by passing in an array of states
	         * that matches the structure of the control. The state can be a standalone value
	         * or a form state object with both a value and a disabled status.
	         *
	         * ### Example
	         *
	         * ```ts
	         * this.arr.reset(['name', 'last name']);
	         *
	         * console.log(this.arr.value);  // ['name', 'last name']
	         * ```
	         *
	         * - OR -
	         *
	         * ```
	         * this.arr.reset([
	         *   {value: 'name', disabled: true},
	         *   'last'
	         * ]);
	         *
	         * console.log(this.arr.value);  // ['name', 'last name']
	         * console.log(this.arr.get(0).status);  // 'DISABLED'
	         * ```
	         */
	        FormArray.prototype.reset = function (value, _a) {
	            if (value === void 0) { value = []; }
	            var _b = _a === void 0 ? {} : _a, onlySelf = _b.onlySelf, emitEvent = _b.emitEvent;
	            this._forEachChild(function (control, index) {
	                control.reset(value[index], { onlySelf: true, emitEvent: emitEvent });
	            });
	            this.updateValueAndValidity({ onlySelf: onlySelf, emitEvent: emitEvent });
	            this._updatePristine({ onlySelf: onlySelf });
	            this._updateTouched({ onlySelf: onlySelf });
	        };
	        /**
	         * The aggregate value of the array, including any disabled controls.
	         *
	         * If you'd like to include all values regardless of disabled status, use this method.
	         * Otherwise, the `value` property is the best way to get the value of the array.
	         */
	        FormArray.prototype.getRawValue = function () { return this.controls.map(function (control) { return control.value; }); };
	        /** @internal */
	        FormArray.prototype._throwIfControlMissing = function (index) {
	            if (!this.controls.length) {
	                throw new Error("\n        There are no form controls registered with this array yet.  If you're using ngModel,\n        you may want to check next tick (e.g. use setTimeout).\n      ");
	            }
	            if (!this.at(index)) {
	                throw new Error("Cannot find form control at index " + index);
	            }
	        };
	        /** @internal */
	        FormArray.prototype._forEachChild = function (cb) {
	            this.controls.forEach(function (control, index) { cb(control, index); });
	        };
	        /** @internal */
	        FormArray.prototype._updateValue = function () {
	            var _this = this;
	            this._value = this.controls.filter(function (control) { return control.enabled || _this.disabled; })
	                .map(function (control) { return control.value; });
	        };
	        /** @internal */
	        FormArray.prototype._anyControls = function (condition) {
	            return this.controls.some(function (control) { return control.enabled && condition(control); });
	        };
	        /** @internal */
	        FormArray.prototype._setUpControls = function () {
	            var _this = this;
	            this._forEachChild(function (control) { return _this._registerControl(control); });
	        };
	        /** @internal */
	        FormArray.prototype._checkAllValuesPresent = function (value) {
	            this._forEachChild(function (control, i) {
	                if (value[i] === undefined) {
	                    throw new Error("Must supply a value for form control at index: " + i + ".");
	                }
	            });
	        };
	        /** @internal */
	        FormArray.prototype._allControlsDisabled = function () {
	            for (var _i = 0, _a = this.controls; _i < _a.length; _i++) {
	                var control = _a[_i];
	                if (control.enabled)
	                    return false;
	            }
	            return this.controls.length > 0 || this.disabled;
	        };
	        FormArray.prototype._registerControl = function (control) {
	            control.setParent(this);
	            control._registerOnCollectionChange(this._onCollectionChange);
	        };
	        return FormArray;
	    }(AbstractControl));

	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    var __extends$4 = (this && this.__extends) || function (d, b) {
	        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	    var formDirectiveProvider = {
	        provide: ControlContainer,
	        useExisting: _angular_core.forwardRef(function () { return NgForm; })
	    };
	    var resolvedPromise = Promise.resolve(null);
	    /**
	     * @whatItDoes Creates a top-level {@link FormGroup} instance and binds it to a form
	     * to track aggregate form value and validation status.
	     *
	     * @howToUse
	     *
	     * As soon as you import the `FormsModule`, this directive becomes active by default on
	     * all `<form>` tags.  You don't need to add a special selector.
	     *
	     * You can export the directive into a local template variable using `ngForm` as the key
	     * (ex: `#myForm="ngForm"`). This is optional, but useful.  Many properties from the underlying
	     * {@link FormGroup} instance are duplicated on the directive itself, so a reference to it
	     * will give you access to the aggregate value and validity status of the form, as well as
	     * user interaction properties like `dirty` and `touched`.
	     *
	     * To register child controls with the form, you'll want to use {@link NgModel} with a
	     * `name` attribute.  You can also use {@link NgModelGroup} if you'd like to create
	     * sub-groups within the form.
	     *
	     * You can listen to the directive's `ngSubmit` event to be notified when the user has
	     * triggered a form submission. The `ngSubmit` event will be emitted with the original form
	     * submission event.
	     *
	     * {@example forms/ts/simpleForm/simple_form_example.ts region='Component'}
	     *
	     * * **npm package**: `@angular/forms`
	     *
	     * * **NgModule**: `FormsModule`
	     *
	     *  @stable
	     */
	    var NgForm = (function (_super) {
	        __extends$4(NgForm, _super);
	        function NgForm(validators, asyncValidators) {
	            _super.call(this);
	            this._submitted = false;
	            this.ngSubmit = new EventEmitter();
	            this.form =
	                new FormGroup({}, composeValidators(validators), composeAsyncValidators(asyncValidators));
	        }
	        Object.defineProperty(NgForm.prototype, "submitted", {
	            get: function () { return this._submitted; },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(NgForm.prototype, "formDirective", {
	            get: function () { return this; },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(NgForm.prototype, "control", {
	            get: function () { return this.form; },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(NgForm.prototype, "path", {
	            get: function () { return []; },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(NgForm.prototype, "controls", {
	            get: function () { return this.form.controls; },
	            enumerable: true,
	            configurable: true
	        });
	        NgForm.prototype.addControl = function (dir) {
	            var _this = this;
	            resolvedPromise.then(function () {
	                var container = _this._findContainer(dir.path);
	                dir._control = container.registerControl(dir.name, dir.control);
	                setUpControl(dir.control, dir);
	                dir.control.updateValueAndValidity({ emitEvent: false });
	            });
	        };
	        NgForm.prototype.getControl = function (dir) { return this.form.get(dir.path); };
	        NgForm.prototype.removeControl = function (dir) {
	            var _this = this;
	            resolvedPromise.then(function () {
	                var container = _this._findContainer(dir.path);
	                if (container) {
	                    container.removeControl(dir.name);
	                }
	            });
	        };
	        NgForm.prototype.addFormGroup = function (dir) {
	            var _this = this;
	            resolvedPromise.then(function () {
	                var container = _this._findContainer(dir.path);
	                var group = new FormGroup({});
	                setUpFormContainer(group, dir);
	                container.registerControl(dir.name, group);
	                group.updateValueAndValidity({ emitEvent: false });
	            });
	        };
	        NgForm.prototype.removeFormGroup = function (dir) {
	            var _this = this;
	            resolvedPromise.then(function () {
	                var container = _this._findContainer(dir.path);
	                if (container) {
	                    container.removeControl(dir.name);
	                }
	            });
	        };
	        NgForm.prototype.getFormGroup = function (dir) { return this.form.get(dir.path); };
	        NgForm.prototype.updateModel = function (dir, value) {
	            var _this = this;
	            resolvedPromise.then(function () {
	                var ctrl = _this.form.get(dir.path);
	                ctrl.setValue(value);
	            });
	        };
	        NgForm.prototype.setValue = function (value) { this.control.setValue(value); };
	        NgForm.prototype.onSubmit = function ($event) {
	            this._submitted = true;
	            this.ngSubmit.emit($event);
	            return false;
	        };
	        NgForm.prototype.onReset = function () { this.resetForm(); };
	        NgForm.prototype.resetForm = function (value) {
	            if (value === void 0) { value = undefined; }
	            this.form.reset(value);
	            this._submitted = false;
	        };
	        /** @internal */
	        NgForm.prototype._findContainer = function (path) {
	            path.pop();
	            return path.length ? this.form.get(path) : this.form;
	        };
	        NgForm.decorators = [
	            { type: _angular_core.Directive, args: [{
	                        selector: 'form:not([ngNoForm]):not([formGroup]),ngForm,[ngForm]',
	                        providers: [formDirectiveProvider],
	                        host: { '(submit)': 'onSubmit($event)', '(reset)': 'onReset()' },
	                        outputs: ['ngSubmit'],
	                        exportAs: 'ngForm'
	                    },] },
	        ];
	        /** @nocollapse */
	        NgForm.ctorParameters = [
	            { type: Array, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Self }, { type: _angular_core.Inject, args: [NG_VALIDATORS,] },] },
	            { type: Array, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Self }, { type: _angular_core.Inject, args: [NG_ASYNC_VALIDATORS,] },] },
	        ];
	        return NgForm;
	    }(ControlContainer));

	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    var Examples = {
	        formControlName: "\n    <div [formGroup]=\"myGroup\">\n      <input formControlName=\"firstName\">\n    </div>\n\n    In your class:\n\n    this.myGroup = new FormGroup({\n       firstName: new FormControl()\n    });",
	        formGroupName: "\n    <div [formGroup]=\"myGroup\">\n       <div formGroupName=\"person\">\n          <input formControlName=\"firstName\">\n       </div>\n    </div>\n\n    In your class:\n\n    this.myGroup = new FormGroup({\n       person: new FormGroup({ firstName: new FormControl() })\n    });",
	        formArrayName: "\n    <div [formGroup]=\"myGroup\">\n      <div formArrayName=\"cities\">\n        <div *ngFor=\"let city of cityArray.controls; let i=index\">\n          <input [formControlName]=\"i\">\n        </div>\n      </div>\n    </div>\n\n    In your class:\n\n    this.cityArray = new FormArray([new FormControl('SF')]);\n    this.myGroup = new FormGroup({\n      cities: this.cityArray\n    });",
	        ngModelGroup: "\n    <form>\n       <div ngModelGroup=\"person\">\n          <input [(ngModel)]=\"person.name\" name=\"firstName\">\n       </div>\n    </form>",
	        ngModelWithFormGroup: "\n    <div [formGroup]=\"myGroup\">\n       <input formControlName=\"firstName\">\n       <input [(ngModel)]=\"showMoreControls\" [ngModelOptions]=\"{standalone: true}\">\n    </div>\n  "
	    };

	    var TemplateDrivenErrors = (function () {
	        function TemplateDrivenErrors() {
	        }
	        TemplateDrivenErrors.modelParentException = function () {
	            throw new Error("\n      ngModel cannot be used to register form controls with a parent formGroup directive.  Try using\n      formGroup's partner directive \"formControlName\" instead.  Example:\n\n      " + Examples.formControlName + "\n\n      Or, if you'd like to avoid registering this form control, indicate that it's standalone in ngModelOptions:\n\n      Example:\n\n      " + Examples.ngModelWithFormGroup);
	        };
	        TemplateDrivenErrors.formGroupNameException = function () {
	            throw new Error("\n      ngModel cannot be used to register form controls with a parent formGroupName or formArrayName directive.\n\n      Option 1: Use formControlName instead of ngModel (reactive strategy):\n\n      " + Examples.formGroupName + "\n\n      Option 2:  Update ngModel's parent be ngModelGroup (template-driven strategy):\n\n      " + Examples.ngModelGroup);
	        };
	        TemplateDrivenErrors.missingNameException = function () {
	            throw new Error("If ngModel is used within a form tag, either the name attribute must be set or the form\n      control must be defined as 'standalone' in ngModelOptions.\n\n      Example 1: <input [(ngModel)]=\"person.firstName\" name=\"first\">\n      Example 2: <input [(ngModel)]=\"person.firstName\" [ngModelOptions]=\"{standalone: true}\">");
	        };
	        TemplateDrivenErrors.modelGroupParentException = function () {
	            throw new Error("\n      ngModelGroup cannot be used with a parent formGroup directive.\n\n      Option 1: Use formGroupName instead of ngModelGroup (reactive strategy):\n\n      " + Examples.formGroupName + "\n\n      Option 2:  Use a regular form tag instead of the formGroup directive (template-driven strategy):\n\n      " + Examples.ngModelGroup);
	        };
	        return TemplateDrivenErrors;
	    }());

	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    var __extends$8 = (this && this.__extends) || function (d, b) {
	        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	    var modelGroupProvider = {
	        provide: ControlContainer,
	        useExisting: _angular_core.forwardRef(function () { return NgModelGroup; })
	    };
	    /**
	     * @whatItDoes Creates and binds a {@link FormGroup} instance to a DOM element.
	     *
	     * @howToUse
	     *
	     * This directive can only be used as a child of {@link NgForm} (or in other words,
	     * within `<form>` tags).
	     *
	     * Use this directive if you'd like to create a sub-group within a form. This can
	     * come in handy if you want to validate a sub-group of your form separately from
	     * the rest of your form, or if some values in your domain model make more sense to
	     * consume together in a nested object.
	     *
	     * Pass in the name you'd like this sub-group to have and it will become the key
	     * for the sub-group in the form's full value. You can also export the directive into
	     * a local template variable using `ngModelGroup` (ex: `#myGroup="ngModelGroup"`).
	     *
	     * {@example forms/ts/ngModelGroup/ng_model_group_example.ts region='Component'}
	     *
	     * * **npm package**: `@angular/forms`
	     *
	     * * **NgModule**: `FormsModule`
	     *
	     * @stable
	     */
	    var NgModelGroup = (function (_super) {
	        __extends$8(NgModelGroup, _super);
	        function NgModelGroup(parent, validators, asyncValidators) {
	            _super.call(this);
	            this._parent = parent;
	            this._validators = validators;
	            this._asyncValidators = asyncValidators;
	        }
	        /** @internal */
	        NgModelGroup.prototype._checkParentType = function () {
	            if (!(this._parent instanceof NgModelGroup) && !(this._parent instanceof NgForm)) {
	                TemplateDrivenErrors.modelGroupParentException();
	            }
	        };
	        NgModelGroup.decorators = [
	            { type: _angular_core.Directive, args: [{ selector: '[ngModelGroup]', providers: [modelGroupProvider], exportAs: 'ngModelGroup' },] },
	        ];
	        /** @nocollapse */
	        NgModelGroup.ctorParameters = [
	            { type: ControlContainer, decorators: [{ type: _angular_core.Host }, { type: _angular_core.SkipSelf },] },
	            { type: Array, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Self }, { type: _angular_core.Inject, args: [NG_VALIDATORS,] },] },
	            { type: Array, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Self }, { type: _angular_core.Inject, args: [NG_ASYNC_VALIDATORS,] },] },
	        ];
	        NgModelGroup.propDecorators = {
	            'name': [{ type: _angular_core.Input, args: ['ngModelGroup',] },],
	        };
	        return NgModelGroup;
	    }(AbstractFormGroupDirective));

	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    var __extends$7 = (this && this.__extends) || function (d, b) {
	        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	    var formControlBinding = {
	        provide: NgControl,
	        useExisting: _angular_core.forwardRef(function () { return NgModel; })
	    };
	    /**
	     * `ngModel` forces an additional change detection run when its inputs change:
	     * E.g.:
	     * ```
	     * <div>{{myModel.valid}}</div>
	     * <input [(ngModel)]="myValue" #myModel="ngModel">
	     * ```
	     * I.e. `ngModel` can export itself on the element and then be used in the template.
	     * Normally, this would result in expressions before the `input` that use the exported directive
	     * to have and old value as they have been
	     * dirty checked before. As this is a very common case for `ngModel`, we added this second change
	     * detection run.
	     *
	     * Notes:
	     * - this is just one extra run no matter how many `ngModel` have been changed.
	     * - this is a general problem when using `exportAs` for directives!
	     */
	    var resolvedPromise$1 = Promise.resolve(null);
	    /**
	     * @whatItDoes Creates a {@link FormControl} instance from a domain model and binds it
	     * to a form control element.
	     *
	     * The {@link FormControl} instance will track the value, user interaction, and
	     * validation status of the control and keep the view synced with the model. If used
	     * within a parent form, the directive will also register itself with the form as a child
	     * control.
	     *
	     * @howToUse
	     *
	     * This directive can be used by itself or as part of a larger form. All you need is the
	     * `ngModel` selector to activate it.
	     *
	     * It accepts a domain model as an optional {@link @Input}. If you have a one-way binding
	     * to `ngModel` with `[]` syntax, changing the value of the domain model in the component
	     * class will set the value in the view. If you have a two-way binding with `[()]` syntax
	     * (also known as 'banana-box syntax'), the value in the UI will always be synced back to
	     * the domain model in your class as well.
	     *
	     * If you wish to inspect the properties of the associated {@link FormControl} (like
	     * validity state), you can also export the directive into a local template variable using
	     * `ngModel` as the key (ex: `#myVar="ngModel"`). You can then access the control using the
	     * directive's `control` property, but most properties you'll need (like `valid` and `dirty`)
	     * will fall through to the control anyway, so you can access them directly. You can see a
	     * full list of properties directly available in {@link AbstractControlDirective}.
	     *
	     * The following is an example of a simple standalone control using `ngModel`:
	     *
	     * {@example forms/ts/simpleNgModel/simple_ng_model_example.ts region='Component'}
	     *
	     * When using the `ngModel` within `<form>` tags, you'll also need to supply a `name` attribute
	     * so that the control can be registered with the parent form under that name.
	     *
	     * It's worth noting that in the context of a parent form, you often can skip one-way or
	     * two-way binding because the parent form will sync the value for you. You can access
	     * its properties by exporting it into a local template variable using `ngForm` (ex:
	     * `#f="ngForm"`). Then you can pass it where it needs to go on submit.
	     *
	     * If you do need to populate initial values into your form, using a one-way binding for
	     * `ngModel` tends to be sufficient as long as you use the exported form's value rather
	     * than the domain model's value on submit.
	     *
	     * Take a look at an example of using `ngModel` within a form:
	     *
	     * {@example forms/ts/simpleForm/simple_form_example.ts region='Component'}
	     *
	     * To see `ngModel` examples with different form control types, see:
	     *
	     * * Radio buttons: {@link RadioControlValueAccessor}
	     * * Selects: {@link SelectControlValueAccessor}
	     *
	     * **npm package**: `@angular/forms`
	     *
	     * **NgModule**: `FormsModule`
	     *
	     *  @stable
	     */
	    var NgModel = (function (_super) {
	        __extends$7(NgModel, _super);
	        function NgModel(parent, validators, asyncValidators, valueAccessors) {
	            _super.call(this);
	            /** @internal */
	            this._control = new FormControl();
	            /** @internal */
	            this._registered = false;
	            this.update = new EventEmitter();
	            this._parent = parent;
	            this._rawValidators = validators || [];
	            this._rawAsyncValidators = asyncValidators || [];
	            this.valueAccessor = selectValueAccessor(this, valueAccessors);
	        }
	        NgModel.prototype.ngOnChanges = function (changes) {
	            this._checkForErrors();
	            if (!this._registered)
	                this._setUpControl();
	            if ('isDisabled' in changes) {
	                this._updateDisabled(changes);
	            }
	            if (isPropertyUpdated(changes, this.viewModel)) {
	                this._updateValue(this.model);
	                this.viewModel = this.model;
	            }
	        };
	        NgModel.prototype.ngOnDestroy = function () { this.formDirective && this.formDirective.removeControl(this); };
	        Object.defineProperty(NgModel.prototype, "control", {
	            get: function () { return this._control; },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(NgModel.prototype, "path", {
	            get: function () {
	                return this._parent ? controlPath(this.name, this._parent) : [this.name];
	            },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(NgModel.prototype, "formDirective", {
	            get: function () { return this._parent ? this._parent.formDirective : null; },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(NgModel.prototype, "validator", {
	            get: function () { return composeValidators(this._rawValidators); },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(NgModel.prototype, "asyncValidator", {
	            get: function () {
	                return composeAsyncValidators(this._rawAsyncValidators);
	            },
	            enumerable: true,
	            configurable: true
	        });
	        NgModel.prototype.viewToModelUpdate = function (newValue) {
	            this.viewModel = newValue;
	            this.update.emit(newValue);
	        };
	        NgModel.prototype._setUpControl = function () {
	            this._isStandalone() ? this._setUpStandalone() :
	                this.formDirective.addControl(this);
	            this._registered = true;
	        };
	        NgModel.prototype._isStandalone = function () {
	            return !this._parent || (this.options && this.options.standalone);
	        };
	        NgModel.prototype._setUpStandalone = function () {
	            setUpControl(this._control, this);
	            this._control.updateValueAndValidity({ emitEvent: false });
	        };
	        NgModel.prototype._checkForErrors = function () {
	            if (!this._isStandalone()) {
	                this._checkParentType();
	            }
	            this._checkName();
	        };
	        NgModel.prototype._checkParentType = function () {
	            if (!(this._parent instanceof NgModelGroup) &&
	                this._parent instanceof AbstractFormGroupDirective) {
	                TemplateDrivenErrors.formGroupNameException();
	            }
	            else if (!(this._parent instanceof NgModelGroup) && !(this._parent instanceof NgForm)) {
	                TemplateDrivenErrors.modelParentException();
	            }
	        };
	        NgModel.prototype._checkName = function () {
	            if (this.options && this.options.name)
	                this.name = this.options.name;
	            if (!this._isStandalone() && !this.name) {
	                TemplateDrivenErrors.missingNameException();
	            }
	        };
	        NgModel.prototype._updateValue = function (value) {
	            var _this = this;
	            resolvedPromise$1.then(function () { _this.control.setValue(value, { emitViewToModelChange: false }); });
	        };
	        NgModel.prototype._updateDisabled = function (changes) {
	            var _this = this;
	            var disabledValue = changes['isDisabled'].currentValue;
	            var isDisabled = disabledValue === '' || (disabledValue && disabledValue !== 'false');
	            resolvedPromise$1.then(function () {
	                if (isDisabled && !_this.control.disabled) {
	                    _this.control.disable();
	                }
	                else if (!isDisabled && _this.control.disabled) {
	                    _this.control.enable();
	                }
	            });
	        };
	        NgModel.decorators = [
	            { type: _angular_core.Directive, args: [{
	                        selector: '[ngModel]:not([formControlName]):not([formControl])',
	                        providers: [formControlBinding],
	                        exportAs: 'ngModel'
	                    },] },
	        ];
	        /** @nocollapse */
	        NgModel.ctorParameters = [
	            { type: ControlContainer, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Host },] },
	            { type: Array, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Self }, { type: _angular_core.Inject, args: [NG_VALIDATORS,] },] },
	            { type: Array, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Self }, { type: _angular_core.Inject, args: [NG_ASYNC_VALIDATORS,] },] },
	            { type: Array, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Self }, { type: _angular_core.Inject, args: [NG_VALUE_ACCESSOR,] },] },
	        ];
	        NgModel.propDecorators = {
	            'name': [{ type: _angular_core.Input },],
	            'isDisabled': [{ type: _angular_core.Input, args: ['disabled',] },],
	            'model': [{ type: _angular_core.Input, args: ['ngModel',] },],
	            'options': [{ type: _angular_core.Input, args: ['ngModelOptions',] },],
	            'update': [{ type: _angular_core.Output, args: ['ngModelChange',] },],
	        };
	        return NgModel;
	    }(NgControl));

	    var ReactiveErrors = (function () {
	        function ReactiveErrors() {
	        }
	        ReactiveErrors.controlParentException = function () {
	            throw new Error("formControlName must be used with a parent formGroup directive.  You'll want to add a formGroup\n       directive and pass it an existing FormGroup instance (you can create one in your class).\n\n      Example:\n\n      " + Examples.formControlName);
	        };
	        ReactiveErrors.ngModelGroupException = function () {
	            throw new Error("formControlName cannot be used with an ngModelGroup parent. It is only compatible with parents\n       that also have a \"form\" prefix: formGroupName, formArrayName, or formGroup.\n\n       Option 1:  Update the parent to be formGroupName (reactive form strategy)\n\n        " + Examples.formGroupName + "\n\n        Option 2: Use ngModel instead of formControlName (template-driven strategy)\n\n        " + Examples.ngModelGroup);
	        };
	        ReactiveErrors.missingFormException = function () {
	            throw new Error("formGroup expects a FormGroup instance. Please pass one in.\n\n       Example:\n\n       " + Examples.formControlName);
	        };
	        ReactiveErrors.groupParentException = function () {
	            throw new Error("formGroupName must be used with a parent formGroup directive.  You'll want to add a formGroup\n      directive and pass it an existing FormGroup instance (you can create one in your class).\n\n      Example:\n\n      " + Examples.formGroupName);
	        };
	        ReactiveErrors.arrayParentException = function () {
	            throw new Error("formArrayName must be used with a parent formGroup directive.  You'll want to add a formGroup\n       directive and pass it an existing FormGroup instance (you can create one in your class).\n\n        Example:\n\n        " + Examples.formArrayName);
	        };
	        ReactiveErrors.disabledAttrWarning = function () {
	            console.warn("\n      It looks like you're using the disabled attribute with a reactive form directive. If you set disabled to true\n      when you set up this control in your component class, the disabled attribute will actually be set in the DOM for\n      you. We recommend using this approach to avoid 'changed after checked' errors.\n       \n      Example: \n      form = new FormGroup({\n        first: new FormControl({value: 'Nancy', disabled: true}, Validators.required),\n        last: new FormControl('Drew', Validators.required)\n      });\n    ");
	        };
	        return ReactiveErrors;
	    }());

	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    var __extends$9 = (this && this.__extends) || function (d, b) {
	        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	    var formControlBinding$1 = {
	        provide: NgControl,
	        useExisting: _angular_core.forwardRef(function () { return FormControlDirective; })
	    };
	    /**
	     * @whatItDoes Syncs a standalone {@link FormControl} instance to a form control element.
	     *
	     * In other words, this directive ensures that any values written to the {@link FormControl}
	     * instance programmatically will be written to the DOM element (model -> view). Conversely,
	     * any values written to the DOM element through user input will be reflected in the
	     * {@link FormControl} instance (view -> model).
	     *
	     * @howToUse
	     *
	     * Use this directive if you'd like to create and manage a {@link FormControl} instance directly.
	     * Simply create a {@link FormControl}, save it to your component class, and pass it into the
	     * {@link FormControlDirective}.
	     *
	     * This directive is designed to be used as a standalone control.  Unlike {@link FormControlName},
	     * it does not require that your {@link FormControl} instance be part of any parent
	     * {@link FormGroup}, and it won't be registered to any {@link FormGroupDirective} that
	     * exists above it.
	     *
	     * **Get the value**: the `value` property is always synced and available on the
	     * {@link FormControl} instance. See a full list of available properties in
	     * {@link AbstractControl}.
	     *
	     * **Set the value**: You can pass in an initial value when instantiating the {@link FormControl},
	     * or you can set it programmatically later using {@link AbstractControl.setValue} or
	     * {@link AbstractControl.patchValue}.
	     *
	     * **Listen to value**: If you want to listen to changes in the value of the control, you can
	     * subscribe to the {@link AbstractControl.valueChanges} event.  You can also listen to
	     * {@link AbstractControl.statusChanges} to be notified when the validation status is
	     * re-calculated.
	     *
	     * ### Example
	     *
	     * {@example forms/ts/simpleFormControl/simple_form_control_example.ts region='Component'}
	     *
	     * * **npm package**: `@angular/forms`
	     *
	     * * **NgModule**: `ReactiveFormsModule`
	     *
	     *  @stable
	     */
	    var FormControlDirective = (function (_super) {
	        __extends$9(FormControlDirective, _super);
	        function FormControlDirective(validators, asyncValidators, valueAccessors) {
	            _super.call(this);
	            this.update = new EventEmitter();
	            this._rawValidators = validators || [];
	            this._rawAsyncValidators = asyncValidators || [];
	            this.valueAccessor = selectValueAccessor(this, valueAccessors);
	        }
	        Object.defineProperty(FormControlDirective.prototype, "isDisabled", {
	            set: function (isDisabled) { ReactiveErrors.disabledAttrWarning(); },
	            enumerable: true,
	            configurable: true
	        });
	        FormControlDirective.prototype.ngOnChanges = function (changes) {
	            if (this._isControlChanged(changes)) {
	                setUpControl(this.form, this);
	                if (this.control.disabled && this.valueAccessor.setDisabledState) {
	                    this.valueAccessor.setDisabledState(true);
	                }
	                this.form.updateValueAndValidity({ emitEvent: false });
	            }
	            if (isPropertyUpdated(changes, this.viewModel)) {
	                this.form.setValue(this.model);
	                this.viewModel = this.model;
	            }
	        };
	        Object.defineProperty(FormControlDirective.prototype, "path", {
	            get: function () { return []; },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(FormControlDirective.prototype, "validator", {
	            get: function () { return composeValidators(this._rawValidators); },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(FormControlDirective.prototype, "asyncValidator", {
	            get: function () {
	                return composeAsyncValidators(this._rawAsyncValidators);
	            },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(FormControlDirective.prototype, "control", {
	            get: function () { return this.form; },
	            enumerable: true,
	            configurable: true
	        });
	        FormControlDirective.prototype.viewToModelUpdate = function (newValue) {
	            this.viewModel = newValue;
	            this.update.emit(newValue);
	        };
	        FormControlDirective.prototype._isControlChanged = function (changes) {
	            return changes.hasOwnProperty('form');
	        };
	        FormControlDirective.decorators = [
	            { type: _angular_core.Directive, args: [{ selector: '[formControl]', providers: [formControlBinding$1], exportAs: 'ngForm' },] },
	        ];
	        /** @nocollapse */
	        FormControlDirective.ctorParameters = [
	            { type: Array, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Self }, { type: _angular_core.Inject, args: [NG_VALIDATORS,] },] },
	            { type: Array, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Self }, { type: _angular_core.Inject, args: [NG_ASYNC_VALIDATORS,] },] },
	            { type: Array, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Self }, { type: _angular_core.Inject, args: [NG_VALUE_ACCESSOR,] },] },
	        ];
	        FormControlDirective.propDecorators = {
	            'form': [{ type: _angular_core.Input, args: ['formControl',] },],
	            'model': [{ type: _angular_core.Input, args: ['ngModel',] },],
	            'update': [{ type: _angular_core.Output, args: ['ngModelChange',] },],
	            'isDisabled': [{ type: _angular_core.Input, args: ['disabled',] },],
	        };
	        return FormControlDirective;
	    }(NgControl));

	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    var __extends$11 = (this && this.__extends) || function (d, b) {
	        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	    var formDirectiveProvider$1 = {
	        provide: ControlContainer,
	        useExisting: _angular_core.forwardRef(function () { return FormGroupDirective; })
	    };
	    /**
	     * @whatItDoes Binds an existing {@link FormGroup} to a DOM element.
	     *
	     * @howToUse
	     *
	     * This directive accepts an existing {@link FormGroup} instance. It will then use this
	     * {@link FormGroup} instance to match any child {@link FormControl}, {@link FormGroup},
	     * and {@link FormArray} instances to child {@link FormControlName}, {@link FormGroupName},
	     * and {@link FormArrayName} directives.
	     *
	     * **Set value**: You can set the form's initial value when instantiating the
	     * {@link FormGroup}, or you can set it programmatically later using the {@link FormGroup}'s
	     * {@link AbstractControl.setValue} or {@link AbstractControl.patchValue} methods.
	     *
	     * **Listen to value**: If you want to listen to changes in the value of the form, you can subscribe
	     * to the {@link FormGroup}'s {@link AbstractControl.valueChanges} event.  You can also listen to
	     * its {@link AbstractControl.statusChanges} event to be notified when the validation status is
	     * re-calculated.
	     *
	     * Furthermore, you can listen to the directive's `ngSubmit` event to be notified when the user has
	     * triggered a form submission. The `ngSubmit` event will be emitted with the original form
	     * submission event.
	     *
	     * ### Example
	     *
	     * In this example, we create form controls for first name and last name.
	     *
	     * {@example forms/ts/simpleFormGroup/simple_form_group_example.ts region='Component'}
	     *
	     * **npm package**: `@angular/forms`
	     *
	     * **NgModule**: {@link ReactiveFormsModule}
	     *
	     *  @stable
	     */
	    var FormGroupDirective = (function (_super) {
	        __extends$11(FormGroupDirective, _super);
	        function FormGroupDirective(_validators, _asyncValidators) {
	            _super.call(this);
	            this._validators = _validators;
	            this._asyncValidators = _asyncValidators;
	            this._submitted = false;
	            this.directives = [];
	            this.form = null;
	            this.ngSubmit = new EventEmitter();
	        }
	        FormGroupDirective.prototype.ngOnChanges = function (changes) {
	            this._checkFormPresent();
	            if (changes.hasOwnProperty('form')) {
	                this._updateValidators();
	                this._updateDomValue();
	                this._updateRegistrations();
	            }
	        };
	        Object.defineProperty(FormGroupDirective.prototype, "submitted", {
	            get: function () { return this._submitted; },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(FormGroupDirective.prototype, "formDirective", {
	            get: function () { return this; },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(FormGroupDirective.prototype, "control", {
	            get: function () { return this.form; },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(FormGroupDirective.prototype, "path", {
	            get: function () { return []; },
	            enumerable: true,
	            configurable: true
	        });
	        FormGroupDirective.prototype.addControl = function (dir) {
	            var ctrl = this.form.get(dir.path);
	            setUpControl(ctrl, dir);
	            ctrl.updateValueAndValidity({ emitEvent: false });
	            this.directives.push(dir);
	            return ctrl;
	        };
	        FormGroupDirective.prototype.getControl = function (dir) { return this.form.get(dir.path); };
	        FormGroupDirective.prototype.removeControl = function (dir) { ListWrapper.remove(this.directives, dir); };
	        FormGroupDirective.prototype.addFormGroup = function (dir) {
	            var ctrl = this.form.get(dir.path);
	            setUpFormContainer(ctrl, dir);
	            ctrl.updateValueAndValidity({ emitEvent: false });
	        };
	        FormGroupDirective.prototype.removeFormGroup = function (dir) { };
	        FormGroupDirective.prototype.getFormGroup = function (dir) { return this.form.get(dir.path); };
	        FormGroupDirective.prototype.addFormArray = function (dir) {
	            var ctrl = this.form.get(dir.path);
	            setUpFormContainer(ctrl, dir);
	            ctrl.updateValueAndValidity({ emitEvent: false });
	        };
	        FormGroupDirective.prototype.removeFormArray = function (dir) { };
	        FormGroupDirective.prototype.getFormArray = function (dir) { return this.form.get(dir.path); };
	        FormGroupDirective.prototype.updateModel = function (dir, value) {
	            var ctrl = this.form.get(dir.path);
	            ctrl.setValue(value);
	        };
	        FormGroupDirective.prototype.onSubmit = function ($event) {
	            this._submitted = true;
	            this.ngSubmit.emit($event);
	            return false;
	        };
	        FormGroupDirective.prototype.onReset = function () { this.resetForm(); };
	        FormGroupDirective.prototype.resetForm = function (value) {
	            if (value === void 0) { value = undefined; }
	            this.form.reset(value);
	            this._submitted = false;
	        };
	        /** @internal */
	        FormGroupDirective.prototype._updateDomValue = function () {
	            var _this = this;
	            this.directives.forEach(function (dir) {
	                var newCtrl = _this.form.get(dir.path);
	                if (dir._control !== newCtrl) {
	                    cleanUpControl(dir._control, dir);
	                    if (newCtrl)
	                        setUpControl(newCtrl, dir);
	                    dir._control = newCtrl;
	                }
	            });
	            this.form._updateTreeValidity({ emitEvent: false });
	        };
	        FormGroupDirective.prototype._updateRegistrations = function () {
	            var _this = this;
	            this.form._registerOnCollectionChange(function () { return _this._updateDomValue(); });
	            if (this._oldForm)
	                this._oldForm._registerOnCollectionChange(function () { });
	            this._oldForm = this.form;
	        };
	        FormGroupDirective.prototype._updateValidators = function () {
	            var sync = composeValidators(this._validators);
	            this.form.validator = Validators.compose([this.form.validator, sync]);
	            var async = composeAsyncValidators(this._asyncValidators);
	            this.form.asyncValidator = Validators.composeAsync([this.form.asyncValidator, async]);
	        };
	        FormGroupDirective.prototype._checkFormPresent = function () {
	            if (!this.form) {
	                ReactiveErrors.missingFormException();
	            }
	        };
	        FormGroupDirective.decorators = [
	            { type: _angular_core.Directive, args: [{
	                        selector: '[formGroup]',
	                        providers: [formDirectiveProvider$1],
	                        host: { '(submit)': 'onSubmit($event)', '(reset)': 'onReset()' },
	                        exportAs: 'ngForm'
	                    },] },
	        ];
	        /** @nocollapse */
	        FormGroupDirective.ctorParameters = [
	            { type: Array, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Self }, { type: _angular_core.Inject, args: [NG_VALIDATORS,] },] },
	            { type: Array, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Self }, { type: _angular_core.Inject, args: [NG_ASYNC_VALIDATORS,] },] },
	        ];
	        FormGroupDirective.propDecorators = {
	            'form': [{ type: _angular_core.Input, args: ['formGroup',] },],
	            'ngSubmit': [{ type: _angular_core.Output },],
	        };
	        return FormGroupDirective;
	    }(ControlContainer));

	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    var __extends$12 = (this && this.__extends) || function (d, b) {
	        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	    var formGroupNameProvider = {
	        provide: ControlContainer,
	        useExisting: _angular_core.forwardRef(function () { return FormGroupName; })
	    };
	    /**
	     * @whatItDoes Syncs a nested {@link FormGroup} to a DOM element.
	     *
	     * @howToUse
	     *
	     * This directive can only be used with a parent {@link FormGroupDirective} (selector:
	     * `[formGroup]`).
	     *
	     * It accepts the string name of the nested {@link FormGroup} you want to link, and
	     * will look for a {@link FormGroup} registered with that name in the parent
	     * {@link FormGroup} instance you passed into {@link FormGroupDirective}.
	     *
	     * Nested form groups can come in handy when you want to validate a sub-group of a
	     * form separately from the rest or when you'd like to group the values of certain
	     * controls into their own nested object.
	     *
	     * **Access the group**: You can access the associated {@link FormGroup} using the
	     * {@link AbstractControl.get} method. Ex: `this.form.get('name')`.
	     *
	     * You can also access individual controls within the group using dot syntax.
	     * Ex: `this.form.get('name.first')`
	     *
	     * **Get the value**: the `value` property is always synced and available on the
	     * {@link FormGroup}. See a full list of available properties in {@link AbstractControl}.
	     *
	     * **Set the value**: You can set an initial value for each child control when instantiating
	     * the {@link FormGroup}, or you can set it programmatically later using
	     * {@link AbstractControl.setValue} or {@link AbstractControl.patchValue}.
	     *
	     * **Listen to value**: If you want to listen to changes in the value of the group, you can
	     * subscribe to the {@link AbstractControl.valueChanges} event.  You can also listen to
	     * {@link AbstractControl.statusChanges} to be notified when the validation status is
	     * re-calculated.
	     *
	     * ### Example
	     *
	     * {@example forms/ts/nestedFormGroup/nested_form_group_example.ts region='Component'}
	     *
	     * * **npm package**: `@angular/forms`
	     *
	     * * **NgModule**: `ReactiveFormsModule`
	     *
	     * @stable
	     */
	    var FormGroupName = (function (_super) {
	        __extends$12(FormGroupName, _super);
	        function FormGroupName(parent, validators, asyncValidators) {
	            _super.call(this);
	            this._parent = parent;
	            this._validators = validators;
	            this._asyncValidators = asyncValidators;
	        }
	        /** @internal */
	        FormGroupName.prototype._checkParentType = function () {
	            if (_hasInvalidParent(this._parent)) {
	                ReactiveErrors.groupParentException();
	            }
	        };
	        FormGroupName.decorators = [
	            { type: _angular_core.Directive, args: [{ selector: '[formGroupName]', providers: [formGroupNameProvider] },] },
	        ];
	        /** @nocollapse */
	        FormGroupName.ctorParameters = [
	            { type: ControlContainer, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Host }, { type: _angular_core.SkipSelf },] },
	            { type: Array, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Self }, { type: _angular_core.Inject, args: [NG_VALIDATORS,] },] },
	            { type: Array, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Self }, { type: _angular_core.Inject, args: [NG_ASYNC_VALIDATORS,] },] },
	        ];
	        FormGroupName.propDecorators = {
	            'name': [{ type: _angular_core.Input, args: ['formGroupName',] },],
	        };
	        return FormGroupName;
	    }(AbstractFormGroupDirective));
	    var formArrayNameProvider = {
	        provide: ControlContainer,
	        useExisting: _angular_core.forwardRef(function () { return FormArrayName; })
	    };
	    /**
	     * @whatItDoes Syncs a nested {@link FormArray} to a DOM element.
	     *
	     * @howToUse
	     *
	     * This directive is designed to be used with a parent {@link FormGroupDirective} (selector:
	     * `[formGroup]`).
	     *
	     * It accepts the string name of the nested {@link FormArray} you want to link, and
	     * will look for a {@link FormArray} registered with that name in the parent
	     * {@link FormGroup} instance you passed into {@link FormGroupDirective}.
	     *
	     * Nested form arrays can come in handy when you have a group of form controls but
	     * you're not sure how many there will be. Form arrays allow you to create new
	     * form controls dynamically.
	     *
	     * **Access the array**: You can access the associated {@link FormArray} using the
	     * {@link AbstractControl.get} method on the parent {@link FormGroup}.
	     * Ex: `this.form.get('cities')`.
	     *
	     * **Get the value**: the `value` property is always synced and available on the
	     * {@link FormArray}. See a full list of available properties in {@link AbstractControl}.
	     *
	     * **Set the value**: You can set an initial value for each child control when instantiating
	     * the {@link FormArray}, or you can set the value programmatically later using the
	     * {@link FormArray}'s {@link AbstractControl.setValue} or {@link AbstractControl.patchValue}
	     * methods.
	     *
	     * **Listen to value**: If you want to listen to changes in the value of the array, you can
	     * subscribe to the {@link FormArray}'s {@link AbstractControl.valueChanges} event.  You can also
	     * listen to its {@link AbstractControl.statusChanges} event to be notified when the validation
	     * status is re-calculated.
	     *
	     * **Add new controls**: You can add new controls to the {@link FormArray} dynamically by
	     * calling its {@link FormArray.push} method.
	     *  Ex: `this.form.get('cities').push(new FormControl());`
	     *
	     * ### Example
	     *
	     * {@example forms/ts/nestedFormArray/nested_form_array_example.ts region='Component'}
	     *
	     * * **npm package**: `@angular/forms`
	     *
	     * * **NgModule**: `ReactiveFormsModule`
	     *
	     * @stable
	     */
	    var FormArrayName = (function (_super) {
	        __extends$12(FormArrayName, _super);
	        function FormArrayName(parent, validators, asyncValidators) {
	            _super.call(this);
	            this._parent = parent;
	            this._validators = validators;
	            this._asyncValidators = asyncValidators;
	        }
	        FormArrayName.prototype.ngOnInit = function () {
	            this._checkParentType();
	            this.formDirective.addFormArray(this);
	        };
	        FormArrayName.prototype.ngOnDestroy = function () {
	            if (this.formDirective) {
	                this.formDirective.removeFormArray(this);
	            }
	        };
	        Object.defineProperty(FormArrayName.prototype, "control", {
	            get: function () { return this.formDirective.getFormArray(this); },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(FormArrayName.prototype, "formDirective", {
	            get: function () {
	                return this._parent ? this._parent.formDirective : null;
	            },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(FormArrayName.prototype, "path", {
	            get: function () { return controlPath(this.name, this._parent); },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(FormArrayName.prototype, "validator", {
	            get: function () { return composeValidators(this._validators); },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(FormArrayName.prototype, "asyncValidator", {
	            get: function () { return composeAsyncValidators(this._asyncValidators); },
	            enumerable: true,
	            configurable: true
	        });
	        FormArrayName.prototype._checkParentType = function () {
	            if (_hasInvalidParent(this._parent)) {
	                ReactiveErrors.arrayParentException();
	            }
	        };
	        FormArrayName.decorators = [
	            { type: _angular_core.Directive, args: [{ selector: '[formArrayName]', providers: [formArrayNameProvider] },] },
	        ];
	        /** @nocollapse */
	        FormArrayName.ctorParameters = [
	            { type: ControlContainer, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Host }, { type: _angular_core.SkipSelf },] },
	            { type: Array, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Self }, { type: _angular_core.Inject, args: [NG_VALIDATORS,] },] },
	            { type: Array, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Self }, { type: _angular_core.Inject, args: [NG_ASYNC_VALIDATORS,] },] },
	        ];
	        FormArrayName.propDecorators = {
	            'name': [{ type: _angular_core.Input, args: ['formArrayName',] },],
	        };
	        return FormArrayName;
	    }(ControlContainer));
	    function _hasInvalidParent(parent) {
	        return !(parent instanceof FormGroupName) && !(parent instanceof FormGroupDirective) &&
	            !(parent instanceof FormArrayName);
	    }

	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    var __extends$10 = (this && this.__extends) || function (d, b) {
	        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	    var controlNameBinding = {
	        provide: NgControl,
	        useExisting: _angular_core.forwardRef(function () { return FormControlName; })
	    };
	    /**
	     * @whatItDoes  Syncs a {@link FormControl} in an existing {@link FormGroup} to a form control
	     * element by name.
	     *
	     * In other words, this directive ensures that any values written to the {@link FormControl}
	     * instance programmatically will be written to the DOM element (model -> view). Conversely,
	     * any values written to the DOM element through user input will be reflected in the
	     * {@link FormControl} instance (view -> model).
	     *
	     * @howToUse
	     *
	     * This directive is designed to be used with a parent {@link FormGroupDirective} (selector:
	     * `[formGroup]`).
	     *
	     * It accepts the string name of the {@link FormControl} instance you want to
	     * link, and will look for a {@link FormControl} registered with that name in the
	     * closest {@link FormGroup} or {@link FormArray} above it.
	     *
	     * **Access the control**: You can access the {@link FormControl} associated with
	     * this directive by using the {@link AbstractControl.get} method.
	     * Ex: `this.form.get('first');`
	     *
	     * **Get value**: the `value` property is always synced and available on the {@link FormControl}.
	     * See a full list of available properties in {@link AbstractControl}.
	     *
	     *  **Set value**: You can set an initial value for the control when instantiating the
	     *  {@link FormControl}, or you can set it programmatically later using
	     *  {@link AbstractControl.setValue} or {@link AbstractControl.patchValue}.
	     *
	     * **Listen to value**: If you want to listen to changes in the value of the control, you can
	     * subscribe to the {@link AbstractControl.valueChanges} event.  You can also listen to
	     * {@link AbstractControl.statusChanges} to be notified when the validation status is
	     * re-calculated.
	     *
	     * ### Example
	     *
	     * In this example, we create form controls for first name and last name.
	     *
	     * {@example forms/ts/simpleFormGroup/simple_form_group_example.ts region='Component'}
	     *
	     * To see `formControlName` examples with different form control types, see:
	     *
	     * * Radio buttons: {@link RadioControlValueAccessor}
	     * * Selects: {@link SelectControlValueAccessor}
	     *
	     * **npm package**: `@angular/forms`
	     *
	     * **NgModule**: {@link ReactiveFormsModule}
	     *
	     *  @stable
	     */
	    var FormControlName = (function (_super) {
	        __extends$10(FormControlName, _super);
	        function FormControlName(parent, validators, asyncValidators, valueAccessors) {
	            _super.call(this);
	            this._added = false;
	            this.update = new EventEmitter();
	            this._parent = parent;
	            this._rawValidators = validators || [];
	            this._rawAsyncValidators = asyncValidators || [];
	            this.valueAccessor = selectValueAccessor(this, valueAccessors);
	        }
	        Object.defineProperty(FormControlName.prototype, "isDisabled", {
	            set: function (isDisabled) { ReactiveErrors.disabledAttrWarning(); },
	            enumerable: true,
	            configurable: true
	        });
	        FormControlName.prototype.ngOnChanges = function (changes) {
	            if (!this._added)
	                this._setUpControl();
	            if (isPropertyUpdated(changes, this.viewModel)) {
	                this.viewModel = this.model;
	                this.formDirective.updateModel(this, this.model);
	            }
	        };
	        FormControlName.prototype.ngOnDestroy = function () {
	            if (this.formDirective) {
	                this.formDirective.removeControl(this);
	            }
	        };
	        FormControlName.prototype.viewToModelUpdate = function (newValue) {
	            this.viewModel = newValue;
	            this.update.emit(newValue);
	        };
	        Object.defineProperty(FormControlName.prototype, "path", {
	            get: function () { return controlPath(this.name, this._parent); },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(FormControlName.prototype, "formDirective", {
	            get: function () { return this._parent ? this._parent.formDirective : null; },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(FormControlName.prototype, "validator", {
	            get: function () { return composeValidators(this._rawValidators); },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(FormControlName.prototype, "asyncValidator", {
	            get: function () {
	                return composeAsyncValidators(this._rawAsyncValidators);
	            },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(FormControlName.prototype, "control", {
	            get: function () { return this._control; },
	            enumerable: true,
	            configurable: true
	        });
	        FormControlName.prototype._checkParentType = function () {
	            if (!(this._parent instanceof FormGroupName) &&
	                this._parent instanceof AbstractFormGroupDirective) {
	                ReactiveErrors.ngModelGroupException();
	            }
	            else if (!(this._parent instanceof FormGroupName) && !(this._parent instanceof FormGroupDirective) &&
	                !(this._parent instanceof FormArrayName)) {
	                ReactiveErrors.controlParentException();
	            }
	        };
	        FormControlName.prototype._setUpControl = function () {
	            this._checkParentType();
	            this._control = this.formDirective.addControl(this);
	            if (this.control.disabled && this.valueAccessor.setDisabledState) {
	                this.valueAccessor.setDisabledState(true);
	            }
	            this._added = true;
	        };
	        FormControlName.decorators = [
	            { type: _angular_core.Directive, args: [{ selector: '[formControlName]', providers: [controlNameBinding] },] },
	        ];
	        /** @nocollapse */
	        FormControlName.ctorParameters = [
	            { type: ControlContainer, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Host }, { type: _angular_core.SkipSelf },] },
	            { type: Array, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Self }, { type: _angular_core.Inject, args: [NG_VALIDATORS,] },] },
	            { type: Array, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Self }, { type: _angular_core.Inject, args: [NG_ASYNC_VALIDATORS,] },] },
	            { type: Array, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Self }, { type: _angular_core.Inject, args: [NG_VALUE_ACCESSOR,] },] },
	        ];
	        FormControlName.propDecorators = {
	            'name': [{ type: _angular_core.Input, args: ['formControlName',] },],
	            'model': [{ type: _angular_core.Input, args: ['ngModel',] },],
	            'update': [{ type: _angular_core.Output, args: ['ngModelChange',] },],
	            'isDisabled': [{ type: _angular_core.Input, args: ['disabled',] },],
	        };
	        return FormControlName;
	    }(NgControl));

	    var REQUIRED_VALIDATOR = {
	        provide: NG_VALIDATORS,
	        useExisting: _angular_core.forwardRef(function () { return RequiredValidator; }),
	        multi: true
	    };
	    /**
	     * A Directive that adds the `required` validator to any controls marked with the
	     * `required` attribute, via the {@link NG_VALIDATORS} binding.
	     *
	     * ### Example
	     *
	     * ```
	     * <input name="fullName" ngModel required>
	     * ```
	     *
	     * @stable
	     */
	    var RequiredValidator = (function () {
	        function RequiredValidator() {
	        }
	        Object.defineProperty(RequiredValidator.prototype, "required", {
	            get: function () { return this._required; },
	            set: function (value) {
	                this._required = value != null && value !== false && "" + value !== 'false';
	                if (this._onChange)
	                    this._onChange();
	            },
	            enumerable: true,
	            configurable: true
	        });
	        RequiredValidator.prototype.validate = function (c) {
	            return this.required ? Validators.required(c) : null;
	        };
	        RequiredValidator.prototype.registerOnValidatorChange = function (fn) { this._onChange = fn; };
	        RequiredValidator.decorators = [
	            { type: _angular_core.Directive, args: [{
	                        selector: '[required][formControlName],[required][formControl],[required][ngModel]',
	                        providers: [REQUIRED_VALIDATOR],
	                        host: { '[attr.required]': 'required ? "" : null' }
	                    },] },
	        ];
	        /** @nocollapse */
	        RequiredValidator.ctorParameters = [];
	        RequiredValidator.propDecorators = {
	            'required': [{ type: _angular_core.Input },],
	        };
	        return RequiredValidator;
	    }());
	    /**
	     * Provider which adds {@link MinLengthValidator} to {@link NG_VALIDATORS}.
	     *
	     * ## Example:
	     *
	     * {@example common/forms/ts/validators/validators.ts region='min'}
	     */
	    var MIN_LENGTH_VALIDATOR = {
	        provide: NG_VALIDATORS,
	        useExisting: _angular_core.forwardRef(function () { return MinLengthValidator; }),
	        multi: true
	    };
	    /**
	     * A directive which installs the {@link MinLengthValidator} for any `formControlName`,
	     * `formControl`, or control with `ngModel` that also has a `minlength` attribute.
	     *
	     * @stable
	     */
	    var MinLengthValidator = (function () {
	        function MinLengthValidator() {
	        }
	        MinLengthValidator.prototype.ngOnChanges = function (changes) {
	            if ('minlength' in changes) {
	                this._createValidator();
	                if (this._onChange)
	                    this._onChange();
	            }
	        };
	        MinLengthValidator.prototype.validate = function (c) {
	            return this.minlength == null ? null : this._validator(c);
	        };
	        MinLengthValidator.prototype.registerOnValidatorChange = function (fn) { this._onChange = fn; };
	        MinLengthValidator.prototype._createValidator = function () {
	            this._validator = Validators.minLength(parseInt(this.minlength, 10));
	        };
	        MinLengthValidator.decorators = [
	            { type: _angular_core.Directive, args: [{
	                        selector: '[minlength][formControlName],[minlength][formControl],[minlength][ngModel]',
	                        providers: [MIN_LENGTH_VALIDATOR],
	                        host: { '[attr.minlength]': 'minlength ? minlength : null' }
	                    },] },
	        ];
	        /** @nocollapse */
	        MinLengthValidator.ctorParameters = [];
	        MinLengthValidator.propDecorators = {
	            'minlength': [{ type: _angular_core.Input },],
	        };
	        return MinLengthValidator;
	    }());
	    /**
	     * Provider which adds {@link MaxLengthValidator} to {@link NG_VALIDATORS}.
	     *
	     * ## Example:
	     *
	     * {@example common/forms/ts/validators/validators.ts region='max'}
	     */
	    var MAX_LENGTH_VALIDATOR = {
	        provide: NG_VALIDATORS,
	        useExisting: _angular_core.forwardRef(function () { return MaxLengthValidator; }),
	        multi: true
	    };
	    /**
	     * A directive which installs the {@link MaxLengthValidator} for any `formControlName,
	     * `formControl`,
	     * or control with `ngModel` that also has a `maxlength` attribute.
	     *
	     * @stable
	     */
	    var MaxLengthValidator = (function () {
	        function MaxLengthValidator() {
	        }
	        MaxLengthValidator.prototype.ngOnChanges = function (changes) {
	            if ('maxlength' in changes) {
	                this._createValidator();
	                if (this._onChange)
	                    this._onChange();
	            }
	        };
	        MaxLengthValidator.prototype.validate = function (c) {
	            return this.maxlength != null ? this._validator(c) : null;
	        };
	        MaxLengthValidator.prototype.registerOnValidatorChange = function (fn) { this._onChange = fn; };
	        MaxLengthValidator.prototype._createValidator = function () {
	            this._validator = Validators.maxLength(parseInt(this.maxlength, 10));
	        };
	        MaxLengthValidator.decorators = [
	            { type: _angular_core.Directive, args: [{
	                        selector: '[maxlength][formControlName],[maxlength][formControl],[maxlength][ngModel]',
	                        providers: [MAX_LENGTH_VALIDATOR],
	                        host: { '[attr.maxlength]': 'maxlength ? maxlength : null' }
	                    },] },
	        ];
	        /** @nocollapse */
	        MaxLengthValidator.ctorParameters = [];
	        MaxLengthValidator.propDecorators = {
	            'maxlength': [{ type: _angular_core.Input },],
	        };
	        return MaxLengthValidator;
	    }());
	    var PATTERN_VALIDATOR = {
	        provide: NG_VALIDATORS,
	        useExisting: _angular_core.forwardRef(function () { return PatternValidator; }),
	        multi: true
	    };
	    /**
	     * A Directive that adds the `pattern` validator to any controls marked with the
	     * `pattern` attribute, via the {@link NG_VALIDATORS} binding. Uses attribute value
	     * as the regex to validate Control value against.  Follows pattern attribute
	     * semantics; i.e. regex must match entire Control value.
	     *
	     * ### Example
	     *
	     * ```
	     * <input [name]="fullName" pattern="[a-zA-Z ]*" ngModel>
	     * ```
	     * @stable
	     */
	    var PatternValidator = (function () {
	        function PatternValidator() {
	        }
	        PatternValidator.prototype.ngOnChanges = function (changes) {
	            if ('pattern' in changes) {
	                this._createValidator();
	                if (this._onChange)
	                    this._onChange();
	            }
	        };
	        PatternValidator.prototype.validate = function (c) { return this._validator(c); };
	        PatternValidator.prototype.registerOnValidatorChange = function (fn) { this._onChange = fn; };
	        PatternValidator.prototype._createValidator = function () { this._validator = Validators.pattern(this.pattern); };
	        PatternValidator.decorators = [
	            { type: _angular_core.Directive, args: [{
	                        selector: '[pattern][formControlName],[pattern][formControl],[pattern][ngModel]',
	                        providers: [PATTERN_VALIDATOR],
	                        host: { '[attr.pattern]': 'pattern ? pattern : null' }
	                    },] },
	        ];
	        /** @nocollapse */
	        PatternValidator.ctorParameters = [];
	        PatternValidator.propDecorators = {
	            'pattern': [{ type: _angular_core.Input },],
	        };
	        return PatternValidator;
	    }());

	    /**
	     * @whatItDoes Creates an {@link AbstractControl} from a user-specified configuration.
	     *
	     * It is essentially syntactic sugar that shortens the `new FormGroup()`,
	     * `new FormControl()`, and `new FormArray()` boilerplate that can build up in larger
	     * forms.
	     *
	     * @howToUse
	     *
	     * To use, inject `FormBuilder` into your component class. You can then call its methods
	     * directly.
	     *
	     * {@example forms/ts/formBuilder/form_builder_example.ts region='Component'}
	     *
	     *  * **npm package**: `@angular/forms`
	     *
	     *  * **NgModule**: {@link ReactiveFormsModule}
	     *
	     * @stable
	     */
	    var FormBuilder = (function () {
	        function FormBuilder() {
	        }
	        /**
	         * Construct a new {@link FormGroup} with the given map of configuration.
	         * Valid keys for the `extra` parameter map are `validator` and `asyncValidator`.
	         *
	         * See the {@link FormGroup} constructor for more details.
	         */
	        FormBuilder.prototype.group = function (controlsConfig, extra) {
	            if (extra === void 0) { extra = null; }
	            var controls = this._reduceControls(controlsConfig);
	            var validator = isPresent(extra) ? extra['validator'] : null;
	            var asyncValidator = isPresent(extra) ? extra['asyncValidator'] : null;
	            return new FormGroup(controls, validator, asyncValidator);
	        };
	        /**
	         * Construct a new {@link FormControl} with the given `formState`,`validator`, and
	         * `asyncValidator`.
	         *
	         * `formState` can either be a standalone value for the form control or an object
	         * that contains both a value and a disabled status.
	         *
	         */
	        FormBuilder.prototype.control = function (formState, validator, asyncValidator) {
	            if (validator === void 0) { validator = null; }
	            if (asyncValidator === void 0) { asyncValidator = null; }
	            return new FormControl(formState, validator, asyncValidator);
	        };
	        /**
	         * Construct a {@link FormArray} from the given `controlsConfig` array of
	         * configuration, with the given optional `validator` and `asyncValidator`.
	         */
	        FormBuilder.prototype.array = function (controlsConfig, validator, asyncValidator) {
	            var _this = this;
	            if (validator === void 0) { validator = null; }
	            if (asyncValidator === void 0) { asyncValidator = null; }
	            var controls = controlsConfig.map(function (c) { return _this._createControl(c); });
	            return new FormArray(controls, validator, asyncValidator);
	        };
	        /** @internal */
	        FormBuilder.prototype._reduceControls = function (controlsConfig) {
	            var _this = this;
	            var controls = {};
	            Object.keys(controlsConfig).forEach(function (controlName) {
	                controls[controlName] = _this._createControl(controlsConfig[controlName]);
	            });
	            return controls;
	        };
	        /** @internal */
	        FormBuilder.prototype._createControl = function (controlConfig) {
	            if (controlConfig instanceof FormControl || controlConfig instanceof FormGroup ||
	                controlConfig instanceof FormArray) {
	                return controlConfig;
	            }
	            else if (Array.isArray(controlConfig)) {
	                var value = controlConfig[0];
	                var validator = controlConfig.length > 1 ? controlConfig[1] : null;
	                var asyncValidator = controlConfig.length > 2 ? controlConfig[2] : null;
	                return this.control(value, validator, asyncValidator);
	            }
	            else {
	                return this.control(controlConfig);
	            }
	        };
	        FormBuilder.decorators = [
	            { type: _angular_core.Injectable },
	        ];
	        /** @nocollapse */
	        FormBuilder.ctorParameters = [];
	        return FormBuilder;
	    }());

	    var SHARED_FORM_DIRECTIVES = [
	        NgSelectOption, NgSelectMultipleOption, DefaultValueAccessor, NumberValueAccessor,
	        RangeValueAccessor, CheckboxControlValueAccessor, SelectControlValueAccessor,
	        SelectMultipleControlValueAccessor, RadioControlValueAccessor, NgControlStatus,
	        NgControlStatusGroup, RequiredValidator, MinLengthValidator, MaxLengthValidator, PatternValidator
	    ];
	    var TEMPLATE_DRIVEN_DIRECTIVES = [NgModel, NgModelGroup, NgForm];
	    var REACTIVE_DRIVEN_DIRECTIVES = [FormControlDirective, FormGroupDirective, FormControlName, FormGroupName, FormArrayName];
	    /**
	     * Internal module used for sharing directives between FormsModule and ReactiveFormsModule
	     */
	    var InternalFormsSharedModule = (function () {
	        function InternalFormsSharedModule() {
	        }
	        InternalFormsSharedModule.decorators = [
	            { type: _angular_core.NgModule, args: [{
	                        declarations: SHARED_FORM_DIRECTIVES,
	                        exports: SHARED_FORM_DIRECTIVES,
	                    },] },
	        ];
	        /** @nocollapse */
	        InternalFormsSharedModule.ctorParameters = [];
	        return InternalFormsSharedModule;
	    }());

	    /**
	     * The ng module for forms.
	     * @stable
	     */
	    var FormsModule = (function () {
	        function FormsModule() {
	        }
	        FormsModule.decorators = [
	            { type: _angular_core.NgModule, args: [{
	                        declarations: TEMPLATE_DRIVEN_DIRECTIVES,
	                        providers: [RadioControlRegistry],
	                        exports: [InternalFormsSharedModule, TEMPLATE_DRIVEN_DIRECTIVES]
	                    },] },
	        ];
	        /** @nocollapse */
	        FormsModule.ctorParameters = [];
	        return FormsModule;
	    }());
	    /**
	     * The ng module for reactive forms.
	     * @stable
	     */
	    var ReactiveFormsModule = (function () {
	        function ReactiveFormsModule() {
	        }
	        ReactiveFormsModule.decorators = [
	            { type: _angular_core.NgModule, args: [{
	                        declarations: [REACTIVE_DRIVEN_DIRECTIVES],
	                        providers: [FormBuilder, RadioControlRegistry],
	                        exports: [InternalFormsSharedModule, REACTIVE_DRIVEN_DIRECTIVES]
	                    },] },
	        ];
	        /** @nocollapse */
	        ReactiveFormsModule.ctorParameters = [];
	        return ReactiveFormsModule;
	    }());

	    exports.AbstractControlDirective = AbstractControlDirective;
	    exports.AbstractFormGroupDirective = AbstractFormGroupDirective;
	    exports.CheckboxControlValueAccessor = CheckboxControlValueAccessor;
	    exports.ControlContainer = ControlContainer;
	    exports.NG_VALUE_ACCESSOR = NG_VALUE_ACCESSOR;
	    exports.DefaultValueAccessor = DefaultValueAccessor;
	    exports.NgControl = NgControl;
	    exports.NgControlStatus = NgControlStatus;
	    exports.NgControlStatusGroup = NgControlStatusGroup;
	    exports.NgForm = NgForm;
	    exports.NgModel = NgModel;
	    exports.NgModelGroup = NgModelGroup;
	    exports.RadioControlValueAccessor = RadioControlValueAccessor;
	    exports.FormControlDirective = FormControlDirective;
	    exports.FormControlName = FormControlName;
	    exports.FormGroupDirective = FormGroupDirective;
	    exports.FormArrayName = FormArrayName;
	    exports.FormGroupName = FormGroupName;
	    exports.NgSelectOption = NgSelectOption;
	    exports.SelectControlValueAccessor = SelectControlValueAccessor;
	    exports.SelectMultipleControlValueAccessor = SelectMultipleControlValueAccessor;
	    exports.MaxLengthValidator = MaxLengthValidator;
	    exports.MinLengthValidator = MinLengthValidator;
	    exports.PatternValidator = PatternValidator;
	    exports.RequiredValidator = RequiredValidator;
	    exports.FormBuilder = FormBuilder;
	    exports.AbstractControl = AbstractControl;
	    exports.FormArray = FormArray;
	    exports.FormControl = FormControl;
	    exports.FormGroup = FormGroup;
	    exports.NG_ASYNC_VALIDATORS = NG_ASYNC_VALIDATORS;
	    exports.NG_VALIDATORS = NG_VALIDATORS;
	    exports.Validators = Validators;
	    exports.FormsModule = FormsModule;
	    exports.ReactiveFormsModule = ReactiveFormsModule;

	}));

/***/ },
/* 110 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var root_1 = __webpack_require__(83);
	/**
	 * @param PromiseCtor
	 * @return {Promise<T>}
	 * @method toPromise
	 * @owner Observable
	 */
	function toPromise(PromiseCtor) {
	    var _this = this;
	    if (!PromiseCtor) {
	        if (root_1.root.Rx && root_1.root.Rx.config && root_1.root.Rx.config.Promise) {
	            PromiseCtor = root_1.root.Rx.config.Promise;
	        }
	        else if (root_1.root.Promise) {
	            PromiseCtor = root_1.root.Promise;
	        }
	    }
	    if (!PromiseCtor) {
	        throw new Error('no Promise impl found');
	    }
	    return new PromiseCtor(function (resolve, reject) {
	        var value;
	        _this.subscribe(function (x) { return value = x; }, function (err) { return reject(err); }, function () { return resolve(value); });
	    });
	}
	exports.toPromise = toPromise;
	//# sourceMappingURL=toPromise.js.map

/***/ },
/* 111 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var PromiseObservable_1 = __webpack_require__(112);
	exports.fromPromise = PromiseObservable_1.PromiseObservable.create;
	//# sourceMappingURL=fromPromise.js.map

/***/ },
/* 112 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var root_1 = __webpack_require__(83);
	var Observable_1 = __webpack_require__(82);
	/**
	 * We need this JSDoc comment for affecting ESDoc.
	 * @extends {Ignored}
	 * @hide true
	 */
	var PromiseObservable = (function (_super) {
	    __extends(PromiseObservable, _super);
	    function PromiseObservable(promise, scheduler) {
	        _super.call(this);
	        this.promise = promise;
	        this.scheduler = scheduler;
	    }
	    /**
	     * Converts a Promise to an Observable.
	     *
	     * <span class="informal">Returns an Observable that just emits the Promise's
	     * resolved value, then completes.</span>
	     *
	     * Converts an ES2015 Promise or a Promises/A+ spec compliant Promise to an
	     * Observable. If the Promise resolves with a value, the output Observable
	     * emits that resolved value as a `next`, and then completes. If the Promise
	     * is rejected, then the output Observable emits the corresponding Error.
	     *
	     * @example <caption>Convert the Promise returned by Fetch to an Observable</caption>
	     * var result = Rx.Observable.fromPromise(fetch('http://myserver.com/'));
	     * result.subscribe(x => console.log(x), e => console.error(e));
	     *
	     * @see {@link bindCallback}
	     * @see {@link from}
	     *
	     * @param {Promise<T>} promise The promise to be converted.
	     * @param {Scheduler} [scheduler] An optional Scheduler to use for scheduling
	     * the delivery of the resolved value (or the rejection).
	     * @return {Observable<T>} An Observable which wraps the Promise.
	     * @static true
	     * @name fromPromise
	     * @owner Observable
	     */
	    PromiseObservable.create = function (promise, scheduler) {
	        return new PromiseObservable(promise, scheduler);
	    };
	    PromiseObservable.prototype._subscribe = function (subscriber) {
	        var _this = this;
	        var promise = this.promise;
	        var scheduler = this.scheduler;
	        if (scheduler == null) {
	            if (this._isScalar) {
	                if (!subscriber.closed) {
	                    subscriber.next(this.value);
	                    subscriber.complete();
	                }
	            }
	            else {
	                promise.then(function (value) {
	                    _this.value = value;
	                    _this._isScalar = true;
	                    if (!subscriber.closed) {
	                        subscriber.next(value);
	                        subscriber.complete();
	                    }
	                }, function (err) {
	                    if (!subscriber.closed) {
	                        subscriber.error(err);
	                    }
	                })
	                    .then(null, function (err) {
	                    // escape the promise trap, throw unhandled errors
	                    root_1.root.setTimeout(function () { throw err; });
	                });
	            }
	        }
	        else {
	            if (this._isScalar) {
	                if (!subscriber.closed) {
	                    return scheduler.schedule(dispatchNext, 0, { value: this.value, subscriber: subscriber });
	                }
	            }
	            else {
	                promise.then(function (value) {
	                    _this.value = value;
	                    _this._isScalar = true;
	                    if (!subscriber.closed) {
	                        subscriber.add(scheduler.schedule(dispatchNext, 0, { value: value, subscriber: subscriber }));
	                    }
	                }, function (err) {
	                    if (!subscriber.closed) {
	                        subscriber.add(scheduler.schedule(dispatchError, 0, { err: err, subscriber: subscriber }));
	                    }
	                })
	                    .then(null, function (err) {
	                    // escape the promise trap, throw unhandled errors
	                    root_1.root.setTimeout(function () { throw err; });
	                });
	            }
	        }
	    };
	    return PromiseObservable;
	}(Observable_1.Observable));
	exports.PromiseObservable = PromiseObservable;
	function dispatchNext(arg) {
	    var value = arg.value, subscriber = arg.subscriber;
	    if (!subscriber.closed) {
	        subscriber.next(value);
	        subscriber.complete();
	    }
	}
	function dispatchError(arg) {
	    var err = arg.err, subscriber = arg.subscriber;
	    if (!subscriber.closed) {
	        subscriber.error(err);
	    }
	}
	//# sourceMappingURL=PromiseObservable.js.map

/***/ },
/* 113 */
/***/ function(module, exports, __webpack_require__) {

	(function webpackUniversalModuleDefinition(root, factory) {
		if(true)
			module.exports = factory(__webpack_require__(114), __webpack_require__(116), __webpack_require__(118), __webpack_require__(82), __webpack_require__(99), __webpack_require__(80), __webpack_require__(109));
		else if(typeof define === 'function' && define.amd)
			define(["rxjs/add/operator/do", "rxjs/add/operator/let", "rxjs/add/observable/fromEvent", "rxjs/Observable", "@angular/common", "@angular/core", "@angular/forms"], factory);
		else if(typeof exports === 'object')
			exports["ngb"] = factory(require("rxjs/add/operator/do"), require("rxjs/add/operator/let"), require("rxjs/add/observable/fromEvent"), require("rxjs/Observable"), require("@angular/common"), require("@angular/core"), require("@angular/forms"));
		else
			root["ngb"] = factory(root["Rx"]["Observable"]["prototype"], root["Rx"]["Observable"]["prototype"], root["Rx"]["Observable"], root["Rx"], root["ng"]["common"], root["ng"]["core"], root["ng"]["forms"]);
	})(this, function(__WEBPACK_EXTERNAL_MODULE_72__, __WEBPACK_EXTERNAL_MODULE_73__, __WEBPACK_EXTERNAL_MODULE_74__, __WEBPACK_EXTERNAL_MODULE_75__, __WEBPACK_EXTERNAL_MODULE_2__, __WEBPACK_EXTERNAL_MODULE_0__, __WEBPACK_EXTERNAL_MODULE_5__) {
	return /******/ (function(modules) { // webpackBootstrap
	/******/ 	// The module cache
	/******/ 	var installedModules = {};
	/******/
	/******/ 	// The require function
	/******/ 	function __webpack_require__(moduleId) {
	/******/
	/******/ 		// Check if module is in cache
	/******/ 		if(installedModules[moduleId])
	/******/ 			return installedModules[moduleId].exports;
	/******/
	/******/ 		// Create a new module (and put it into the cache)
	/******/ 		var module = installedModules[moduleId] = {
	/******/ 			i: moduleId,
	/******/ 			l: false,
	/******/ 			exports: {}
	/******/ 		};
	/******/
	/******/ 		// Execute the module function
	/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
	/******/
	/******/ 		// Flag the module as loaded
	/******/ 		module.l = true;
	/******/
	/******/ 		// Return the exports of the module
	/******/ 		return module.exports;
	/******/ 	}
	/******/
	/******/
	/******/ 	// expose the modules object (__webpack_modules__)
	/******/ 	__webpack_require__.m = modules;
	/******/
	/******/ 	// expose the module cache
	/******/ 	__webpack_require__.c = installedModules;
	/******/
	/******/ 	// identity function for calling harmory imports with the correct context
	/******/ 	__webpack_require__.i = function(value) { return value; };
	/******/
	/******/ 	// define getter function for harmory exports
	/******/ 	__webpack_require__.d = function(exports, name, getter) {
	/******/ 		Object.defineProperty(exports, name, {
	/******/ 			configurable: false,
	/******/ 			enumerable: true,
	/******/ 			get: getter
	/******/ 		});
	/******/ 	};
	/******/
	/******/ 	// getDefaultExport function for compatibility with non-harmony modules
	/******/ 	__webpack_require__.n = function(module) {
	/******/ 		var getter = module && module.__esModule ?
	/******/ 			function getDefault() { return module['default']; } :
	/******/ 			function getModuleExports() { return module; };
	/******/ 		__webpack_require__.d(getter, 'a', getter);
	/******/ 		return getter;
	/******/ 	};
	/******/
	/******/ 	// Object.prototype.hasOwnProperty.call
	/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
	/******/
	/******/ 	// __webpack_public_path__
	/******/ 	__webpack_require__.p = "";
	/******/
	/******/ 	// Load entry module and return exports
	/******/ 	return __webpack_require__(__webpack_require__.s = 76);
	/******/ })
	/************************************************************************/
	/******/ ([
	/* 0 */
	/***/ function(module, exports) {

	module.exports = __WEBPACK_EXTERNAL_MODULE_0__;

	/***/ },
	/* 1 */
	/***/ function(module, exports) {

	"use strict";
	"use strict";
	function toInteger(value) {
	    return parseInt("" + value, 10);
	}
	exports.toInteger = toInteger;
	function toString(value) {
	    return (value !== undefined && value !== null) ? "" + value : '';
	}
	exports.toString = toString;
	function getValueInRange(value, max, min) {
	    if (min === void 0) { min = 0; }
	    return Math.max(Math.min(value, max), min);
	}
	exports.getValueInRange = getValueInRange;
	function isString(value) {
	    return typeof value === 'string';
	}
	exports.isString = isString;
	function isNumber(value) {
	    return !isNaN(toInteger(value));
	}
	exports.isNumber = isNumber;
	function isDefined(value) {
	    return value !== undefined && value !== null;
	}
	exports.isDefined = isDefined;
	function padNumber(value) {
	    if (isNumber(value)) {
	        return ("0" + value).slice(-2);
	    }
	    else {
	        return '';
	    }
	}
	exports.padNumber = padNumber;
	function regExpEscape(text) {
	    return text.replace(/[-[\]{}()*+?.,\\^$|#\s]/g, '\\$&');
	}
	exports.regExpEscape = regExpEscape;
	//# sourceMappingURL=util.js.map

	/***/ },
	/* 2 */
	/***/ function(module, exports) {

	module.exports = __WEBPACK_EXTERNAL_MODULE_2__;

	/***/ },
	/* 3 */
	/***/ function(module, exports) {

	"use strict";
	"use strict";
	var NgbDate = (function () {
	    function NgbDate(year, month, day) {
	        this.year = year;
	        this.month = month;
	        this.day = day;
	    }
	    NgbDate.from = function (date) {
	        return date ? new NgbDate(date.year, date.month, date.day ? date.day : 1) : null;
	    };
	    NgbDate.prototype.equals = function (other) {
	        return other && this.year === other.year && this.month === other.month && this.day === other.day;
	    };
	    NgbDate.prototype.before = function (other) {
	        if (!other) {
	            return false;
	        }
	        if (this.year === other.year) {
	            if (this.month === other.month) {
	                return this.day === other.day ? false : this.day < other.day;
	            }
	            else {
	                return this.month < other.month;
	            }
	        }
	        else {
	            return this.year < other.year;
	        }
	    };
	    NgbDate.prototype.after = function (other) {
	        if (!other) {
	            return false;
	        }
	        if (this.year === other.year) {
	            if (this.month === other.month) {
	                return this.day === other.day ? false : this.day > other.day;
	            }
	            else {
	                return this.month > other.month;
	            }
	        }
	        else {
	            return this.year > other.year;
	        }
	    };
	    NgbDate.prototype.toString = function () { return this.year + "-" + this.month + "-" + this.day; };
	    return NgbDate;
	}());
	exports.NgbDate = NgbDate;
	//# sourceMappingURL=ngb-date.js.map

	/***/ },
	/* 4 */
	/***/ function(module, exports, __webpack_require__) {

	"use strict";
	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var core_1 = __webpack_require__(0);
	var WEEKDAYS = ['Mo', 'Tu', 'We', 'Th', 'Fr', 'Sa', 'Su'];
	var MONTHS = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
	/**
	 * Type of the service supplying month and weekday names to to NgbDatepicker component.
	 * See the i18n demo for how to extend this class and define a custom provider for i18n.
	 */
	var NgbDatepickerI18n = (function () {
	    function NgbDatepickerI18n() {
	    }
	    NgbDatepickerI18n = __decorate([
	        core_1.Injectable(), 
	        __metadata('design:paramtypes', [])
	    ], NgbDatepickerI18n);
	    return NgbDatepickerI18n;
	}());
	exports.NgbDatepickerI18n = NgbDatepickerI18n;
	var NgbDatepickerI18nDefault = (function (_super) {
	    __extends(NgbDatepickerI18nDefault, _super);
	    function NgbDatepickerI18nDefault() {
	        _super.apply(this, arguments);
	    }
	    NgbDatepickerI18nDefault.prototype.getWeekdayName = function (weekday) { return WEEKDAYS[weekday - 1]; };
	    NgbDatepickerI18nDefault.prototype.getMonthName = function (month) { return MONTHS[month - 1]; };
	    NgbDatepickerI18nDefault = __decorate([
	        core_1.Injectable(), 
	        __metadata('design:paramtypes', [])
	    ], NgbDatepickerI18nDefault);
	    return NgbDatepickerI18nDefault;
	}(NgbDatepickerI18n));
	exports.NgbDatepickerI18nDefault = NgbDatepickerI18nDefault;
	//# sourceMappingURL=datepicker-i18n.js.map

	/***/ },
	/* 5 */
	/***/ function(module, exports) {

	module.exports = __WEBPACK_EXTERNAL_MODULE_5__;

	/***/ },
	/* 6 */
	/***/ function(module, exports, __webpack_require__) {

	"use strict";
	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var ngb_date_1 = __webpack_require__(3);
	var core_1 = __webpack_require__(0);
	function fromJSDate(jsDate) {
	    return new ngb_date_1.NgbDate(jsDate.getFullYear(), jsDate.getMonth() + 1, jsDate.getDate());
	}
	function toJSDate(date) {
	    return new Date(date.year, date.month - 1, date.day);
	}
	var NgbCalendar = (function () {
	    function NgbCalendar() {
	    }
	    NgbCalendar = __decorate([
	        core_1.Injectable(), 
	        __metadata('design:paramtypes', [])
	    ], NgbCalendar);
	    return NgbCalendar;
	}());
	exports.NgbCalendar = NgbCalendar;
	var NgbCalendarGregorian = (function (_super) {
	    __extends(NgbCalendarGregorian, _super);
	    function NgbCalendarGregorian() {
	        _super.apply(this, arguments);
	    }
	    NgbCalendarGregorian.prototype.getDaysPerWeek = function () { return 7; };
	    NgbCalendarGregorian.prototype.getMonths = function () { return [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]; };
	    NgbCalendarGregorian.prototype.getWeeksPerMonth = function () { return 6; };
	    NgbCalendarGregorian.prototype.getNext = function (date, period, number) {
	        if (period === void 0) { period = 'd'; }
	        if (number === void 0) { number = 1; }
	        var jsDate = toJSDate(date);
	        switch (period) {
	            case 'y':
	                return new ngb_date_1.NgbDate(date.year + number, 1, 1);
	            case 'm':
	                jsDate = new Date(date.year, date.month + number - 1, 1);
	                break;
	            case 'd':
	                jsDate.setDate(jsDate.getDate() + number);
	                break;
	            default:
	                return date;
	        }
	        return fromJSDate(jsDate);
	    };
	    NgbCalendarGregorian.prototype.getPrev = function (date, period, number) {
	        if (period === void 0) { period = 'd'; }
	        if (number === void 0) { number = 1; }
	        return this.getNext(date, period, -number);
	    };
	    NgbCalendarGregorian.prototype.getWeekday = function (date) {
	        var jsDate = toJSDate(date);
	        var day = jsDate.getDay();
	        // in JS Date Sun=0, in ISO 8601 Sun=7
	        return day === 0 ? 7 : day;
	    };
	    NgbCalendarGregorian.prototype.getWeekNumber = function (week, firstDayOfWeek) {
	        // in JS Date Sun=0, in ISO 8601 Sun=7
	        if (firstDayOfWeek === 7) {
	            firstDayOfWeek = 0;
	        }
	        var thursdayIndex = (4 + 7 - firstDayOfWeek) % 7;
	        var date = week[thursdayIndex];
	        var jsDate = toJSDate(date);
	        jsDate.setDate(jsDate.getDate() + 4 - (jsDate.getDay() || 7)); // Thursday
	        var time = jsDate.getTime();
	        jsDate.setMonth(0); // Compare with Jan 1
	        jsDate.setDate(1);
	        return Math.floor(Math.round((time - jsDate.getTime()) / 86400000) / 7) + 1;
	    };
	    NgbCalendarGregorian.prototype.getToday = function () { return fromJSDate(new Date()); };
	    NgbCalendarGregorian = __decorate([
	        core_1.Injectable(), 
	        __metadata('design:paramtypes', [])
	    ], NgbCalendarGregorian);
	    return NgbCalendarGregorian;
	}(NgbCalendar));
	exports.NgbCalendarGregorian = NgbCalendarGregorian;
	//# sourceMappingURL=ngb-calendar.js.map

	/***/ },
	/* 7 */
	/***/ function(module, exports, __webpack_require__) {

	"use strict";
	"use strict";
	var core_1 = __webpack_require__(0);
	var ContentRef = (function () {
	    function ContentRef(nodes, viewRef, componentRef) {
	        this.nodes = nodes;
	        this.viewRef = viewRef;
	        this.componentRef = componentRef;
	    }
	    return ContentRef;
	}());
	exports.ContentRef = ContentRef;
	var PopupService = (function () {
	    function PopupService(type, _injector, _viewContainerRef, _renderer, componentFactoryResolver) {
	        this._injector = _injector;
	        this._viewContainerRef = _viewContainerRef;
	        this._renderer = _renderer;
	        this._windowFactory = componentFactoryResolver.resolveComponentFactory(type);
	    }
	    PopupService.prototype.open = function (content) {
	        if (!this._windowRef) {
	            this._contentRef = this._getContentRef(content);
	            this._windowRef =
	                this._viewContainerRef.createComponent(this._windowFactory, 0, this._injector, this._contentRef.nodes);
	        }
	        return this._windowRef;
	    };
	    PopupService.prototype.close = function () {
	        if (this._windowRef) {
	            this._viewContainerRef.remove(this._viewContainerRef.indexOf(this._windowRef.hostView));
	            this._windowRef = null;
	            if (this._contentRef.viewRef) {
	                this._viewContainerRef.remove(this._viewContainerRef.indexOf(this._contentRef.viewRef));
	                this._contentRef = null;
	            }
	        }
	    };
	    PopupService.prototype._getContentRef = function (content) {
	        if (!content) {
	            return new ContentRef([]);
	        }
	        else if (content instanceof core_1.TemplateRef) {
	            var viewRef = this._viewContainerRef.createEmbeddedView(content);
	            return new ContentRef([viewRef.rootNodes], viewRef);
	        }
	        else {
	            return new ContentRef([[this._renderer.createText(null, "" + content)]]);
	        }
	    };
	    return PopupService;
	}());
	exports.PopupService = PopupService;
	//# sourceMappingURL=popup.js.map

	/***/ },
	/* 8 */
	/***/ function(module, exports) {

	"use strict";
	"use strict";
	// previous version:
	// https://github.com/angular-ui/bootstrap/blob/07c31d0731f7cb068a1932b8e01d2312b796b4ec/src/position/position.js
	var Positioning = (function () {
	    function Positioning() {
	    }
	    Positioning.prototype.getStyle = function (element, prop) { return window.getComputedStyle(element)[prop]; };
	    Positioning.prototype.isStaticPositioned = function (element) {
	        return (this.getStyle(element, 'position') || 'static') === 'static';
	    };
	    Positioning.prototype.offsetParent = function (element) {
	        var offsetParentEl = element.offsetParent || document.documentElement;
	        while (offsetParentEl && offsetParentEl !== document.documentElement && this.isStaticPositioned(offsetParentEl)) {
	            offsetParentEl = offsetParentEl.offsetParent;
	        }
	        return offsetParentEl || document.documentElement;
	    };
	    Positioning.prototype.position = function (element, round) {
	        if (round === void 0) { round = true; }
	        var elPosition;
	        var parentOffset = { width: 0, height: 0, top: 0, bottom: 0, left: 0, right: 0 };
	        if (this.getStyle(element, 'position') === 'fixed') {
	            elPosition = element.getBoundingClientRect();
	        }
	        else {
	            var offsetParentEl = this.offsetParent(element);
	            elPosition = this.offset(element, false);
	            if (offsetParentEl !== document.documentElement) {
	                parentOffset = this.offset(offsetParentEl, false);
	            }
	            parentOffset.top += offsetParentEl.clientTop;
	            parentOffset.left += offsetParentEl.clientLeft;
	        }
	        elPosition.top -= parentOffset.top;
	        elPosition.bottom -= parentOffset.top;
	        elPosition.left -= parentOffset.left;
	        elPosition.right -= parentOffset.left;
	        if (round) {
	            elPosition.top = Math.round(elPosition.top);
	            elPosition.bottom = Math.round(elPosition.bottom);
	            elPosition.left = Math.round(elPosition.left);
	            elPosition.right = Math.round(elPosition.right);
	        }
	        return elPosition;
	    };
	    Positioning.prototype.offset = function (element, round) {
	        if (round === void 0) { round = true; }
	        var elBcr = element.getBoundingClientRect();
	        var viewportOffset = {
	            top: window.pageYOffset - document.documentElement.clientTop,
	            left: window.pageXOffset - document.documentElement.clientLeft
	        };
	        var elOffset = {
	            height: elBcr.height || element.offsetHeight,
	            width: elBcr.width || element.offsetWidth,
	            top: elBcr.top + viewportOffset.top,
	            bottom: elBcr.bottom + viewportOffset.top,
	            left: elBcr.left + viewportOffset.left,
	            right: elBcr.right + viewportOffset.left
	        };
	        if (round) {
	            elOffset.height = Math.round(elOffset.height);
	            elOffset.width = Math.round(elOffset.width);
	            elOffset.top = Math.round(elOffset.top);
	            elOffset.bottom = Math.round(elOffset.bottom);
	            elOffset.left = Math.round(elOffset.left);
	            elOffset.right = Math.round(elOffset.right);
	        }
	        return elOffset;
	    };
	    Positioning.prototype.positionElements = function (hostElement, targetElement, placement, appendToBody) {
	        var hostElPosition = appendToBody ? this.offset(hostElement, false) : this.position(hostElement, false);
	        var shiftWidth = {
	            left: hostElPosition.left,
	            center: hostElPosition.left + hostElPosition.width / 2 - targetElement.offsetWidth / 2,
	            right: hostElPosition.left + hostElPosition.width
	        };
	        var shiftHeight = {
	            top: hostElPosition.top,
	            center: hostElPosition.top + hostElPosition.height / 2 - targetElement.offsetHeight / 2,
	            bottom: hostElPosition.top + hostElPosition.height
	        };
	        var targetElBCR = targetElement.getBoundingClientRect();
	        var placementPrimary = placement.split('-')[0] || 'top';
	        var placementSecondary = placement.split('-')[1] || 'center';
	        var targetElPosition = {
	            height: targetElBCR.height || targetElement.offsetHeight,
	            width: targetElBCR.width || targetElement.offsetWidth,
	            top: 0,
	            bottom: targetElBCR.height || targetElement.offsetHeight,
	            left: 0,
	            right: targetElBCR.width || targetElement.offsetWidth
	        };
	        switch (placementPrimary) {
	            case 'top':
	                targetElPosition.top = hostElPosition.top - targetElement.offsetHeight;
	                targetElPosition.bottom += hostElPosition.top - targetElement.offsetHeight;
	                targetElPosition.left = shiftWidth[placementSecondary];
	                targetElPosition.right += shiftWidth[placementSecondary];
	                break;
	            case 'bottom':
	                targetElPosition.top = shiftHeight[placementPrimary];
	                targetElPosition.bottom += shiftHeight[placementPrimary];
	                targetElPosition.left = shiftWidth[placementSecondary];
	                targetElPosition.right += shiftWidth[placementSecondary];
	                break;
	            case 'left':
	                targetElPosition.top = shiftHeight[placementSecondary];
	                targetElPosition.bottom += shiftHeight[placementSecondary];
	                targetElPosition.left = hostElPosition.left - targetElement.offsetWidth;
	                targetElPosition.right += hostElPosition.left - targetElement.offsetWidth;
	                break;
	            case 'right':
	                targetElPosition.top = shiftHeight[placementSecondary];
	                targetElPosition.bottom += shiftHeight[placementSecondary];
	                targetElPosition.left = shiftWidth[placementPrimary];
	                targetElPosition.right += shiftWidth[placementPrimary];
	                break;
	        }
	        targetElPosition.top = Math.round(targetElPosition.top);
	        targetElPosition.bottom = Math.round(targetElPosition.bottom);
	        targetElPosition.left = Math.round(targetElPosition.left);
	        targetElPosition.right = Math.round(targetElPosition.right);
	        return targetElPosition;
	    };
	    return Positioning;
	}());
	exports.Positioning = Positioning;
	var positionService = new Positioning();
	function positionElements(hostElement, targetElement, placement, appendToBody) {
	    var pos = positionService.positionElements(hostElement, targetElement, placement, appendToBody);
	    targetElement.style.top = pos.top + "px";
	    targetElement.style.left = pos.left + "px";
	}
	exports.positionElements = positionElements;
	//# sourceMappingURL=positioning.js.map

	/***/ },
	/* 9 */
	/***/ function(module, exports, __webpack_require__) {

	"use strict";
	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var core_1 = __webpack_require__(0);
	var common_1 = __webpack_require__(2);
	var accordion_1 = __webpack_require__(42);
	var accordion_config_1 = __webpack_require__(25);
	var accordion_2 = __webpack_require__(42);
	exports.NgbAccordion = accordion_2.NgbAccordion;
	exports.NgbPanel = accordion_2.NgbPanel;
	exports.NgbPanelTitle = accordion_2.NgbPanelTitle;
	exports.NgbPanelContent = accordion_2.NgbPanelContent;
	var accordion_config_2 = __webpack_require__(25);
	exports.NgbAccordionConfig = accordion_config_2.NgbAccordionConfig;
	var NGB_ACCORDION_DIRECTIVES = [accordion_1.NgbAccordion, accordion_1.NgbPanel, accordion_1.NgbPanelTitle, accordion_1.NgbPanelContent];
	var NgbAccordionModule = (function () {
	    function NgbAccordionModule() {
	    }
	    NgbAccordionModule.forRoot = function () { return { ngModule: NgbAccordionModule, providers: [accordion_config_1.NgbAccordionConfig] }; };
	    NgbAccordionModule = __decorate([
	        core_1.NgModule({ declarations: NGB_ACCORDION_DIRECTIVES, exports: NGB_ACCORDION_DIRECTIVES, imports: [common_1.CommonModule] }), 
	        __metadata('design:paramtypes', [])
	    ], NgbAccordionModule);
	    return NgbAccordionModule;
	}());
	exports.NgbAccordionModule = NgbAccordionModule;
	//# sourceMappingURL=accordion.module.js.map

	/***/ },
	/* 10 */
	/***/ function(module, exports, __webpack_require__) {

	"use strict";
	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var core_1 = __webpack_require__(0);
	var common_1 = __webpack_require__(2);
	var alert_1 = __webpack_require__(43);
	var alert_config_1 = __webpack_require__(26);
	var alert_2 = __webpack_require__(43);
	exports.NgbAlert = alert_2.NgbAlert;
	var alert_config_2 = __webpack_require__(26);
	exports.NgbAlertConfig = alert_config_2.NgbAlertConfig;
	var NgbAlertModule = (function () {
	    function NgbAlertModule() {
	    }
	    NgbAlertModule.forRoot = function () { return { ngModule: NgbAlertModule, providers: [alert_config_1.NgbAlertConfig] }; };
	    NgbAlertModule = __decorate([
	        core_1.NgModule({ declarations: [alert_1.NgbAlert], exports: [alert_1.NgbAlert], imports: [common_1.CommonModule], entryComponents: [alert_1.NgbAlert] }), 
	        __metadata('design:paramtypes', [])
	    ], NgbAlertModule);
	    return NgbAlertModule;
	}());
	exports.NgbAlertModule = NgbAlertModule;
	//# sourceMappingURL=alert.module.js.map

	/***/ },
	/* 11 */
	/***/ function(module, exports, __webpack_require__) {

	"use strict";
	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var core_1 = __webpack_require__(0);
	var radio_1 = __webpack_require__(44);
	var radio_2 = __webpack_require__(44);
	exports.NgbRadio = radio_2.NgbRadio;
	exports.NgbActiveLabel = radio_2.NgbActiveLabel;
	exports.NgbRadioGroup = radio_2.NgbRadioGroup;
	var NGB_RADIO_DIRECTIVES = [radio_1.NgbRadio, radio_1.NgbActiveLabel, radio_1.NgbRadioGroup];
	var NgbButtonsModule = (function () {
	    function NgbButtonsModule() {
	    }
	    NgbButtonsModule.forRoot = function () { return { ngModule: NgbButtonsModule, providers: [] }; };
	    NgbButtonsModule = __decorate([
	        core_1.NgModule({ declarations: NGB_RADIO_DIRECTIVES, exports: NGB_RADIO_DIRECTIVES }), 
	        __metadata('design:paramtypes', [])
	    ], NgbButtonsModule);
	    return NgbButtonsModule;
	}());
	exports.NgbButtonsModule = NgbButtonsModule;
	//# sourceMappingURL=radio.module.js.map

	/***/ },
	/* 12 */
	/***/ function(module, exports, __webpack_require__) {

	"use strict";
	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var core_1 = __webpack_require__(0);
	var common_1 = __webpack_require__(2);
	var carousel_1 = __webpack_require__(45);
	var carousel_config_1 = __webpack_require__(27);
	var carousel_2 = __webpack_require__(45);
	exports.NgbCarousel = carousel_2.NgbCarousel;
	exports.NgbSlide = carousel_2.NgbSlide;
	var carousel_config_2 = __webpack_require__(27);
	exports.NgbCarouselConfig = carousel_config_2.NgbCarouselConfig;
	var NgbCarouselModule = (function () {
	    function NgbCarouselModule() {
	    }
	    NgbCarouselModule.forRoot = function () { return { ngModule: NgbCarouselModule, providers: [carousel_config_1.NgbCarouselConfig] }; };
	    NgbCarouselModule = __decorate([
	        core_1.NgModule({ declarations: carousel_1.NGB_CAROUSEL_DIRECTIVES, exports: carousel_1.NGB_CAROUSEL_DIRECTIVES, imports: [common_1.CommonModule] }), 
	        __metadata('design:paramtypes', [])
	    ], NgbCarouselModule);
	    return NgbCarouselModule;
	}());
	exports.NgbCarouselModule = NgbCarouselModule;
	//# sourceMappingURL=carousel.module.js.map

	/***/ },
	/* 13 */
	/***/ function(module, exports, __webpack_require__) {

	"use strict";
	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var core_1 = __webpack_require__(0);
	var collapse_1 = __webpack_require__(46);
	var collapse_2 = __webpack_require__(46);
	exports.NgbCollapse = collapse_2.NgbCollapse;
	var NgbCollapseModule = (function () {
	    function NgbCollapseModule() {
	    }
	    NgbCollapseModule.forRoot = function () { return { ngModule: NgbCollapseModule, providers: [] }; };
	    NgbCollapseModule = __decorate([
	        core_1.NgModule({ declarations: [collapse_1.NgbCollapse], exports: [collapse_1.NgbCollapse] }), 
	        __metadata('design:paramtypes', [])
	    ], NgbCollapseModule);
	    return NgbCollapseModule;
	}());
	exports.NgbCollapseModule = NgbCollapseModule;
	//# sourceMappingURL=collapse.module.js.map

	/***/ },
	/* 14 */
	/***/ function(module, exports, __webpack_require__) {

	"use strict";
	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var core_1 = __webpack_require__(0);
	var common_1 = __webpack_require__(2);
	var datepicker_1 = __webpack_require__(29);
	var datepicker_month_view_1 = __webpack_require__(49);
	var datepicker_navigation_1 = __webpack_require__(51);
	var datepicker_input_1 = __webpack_require__(48);
	var forms_1 = __webpack_require__(5);
	var datepicker_day_view_1 = __webpack_require__(47);
	var datepicker_i18n_1 = __webpack_require__(4);
	var ngb_calendar_1 = __webpack_require__(6);
	var ngb_date_parser_formatter_1 = __webpack_require__(30);
	var datepicker_service_1 = __webpack_require__(52);
	var datepicker_navigation_select_1 = __webpack_require__(50);
	var datepicker_config_1 = __webpack_require__(28);
	var datepicker_2 = __webpack_require__(29);
	exports.NgbDatepicker = datepicker_2.NgbDatepicker;
	var datepicker_input_2 = __webpack_require__(48);
	exports.NgbInputDatepicker = datepicker_input_2.NgbInputDatepicker;
	var datepicker_month_view_2 = __webpack_require__(49);
	exports.NgbDatepickerMonthView = datepicker_month_view_2.NgbDatepickerMonthView;
	var datepicker_day_view_2 = __webpack_require__(47);
	exports.NgbDatepickerDayView = datepicker_day_view_2.NgbDatepickerDayView;
	var datepicker_navigation_2 = __webpack_require__(51);
	exports.NgbDatepickerNavigation = datepicker_navigation_2.NgbDatepickerNavigation;
	var datepicker_navigation_select_2 = __webpack_require__(50);
	exports.NgbDatepickerNavigationSelect = datepicker_navigation_select_2.NgbDatepickerNavigationSelect;
	var datepicker_config_2 = __webpack_require__(28);
	exports.NgbDatepickerConfig = datepicker_config_2.NgbDatepickerConfig;
	var datepicker_i18n_2 = __webpack_require__(4);
	exports.NgbDatepickerI18n = datepicker_i18n_2.NgbDatepickerI18n;
	var ngb_date_parser_formatter_2 = __webpack_require__(30);
	exports.NgbDateParserFormatter = ngb_date_parser_formatter_2.NgbDateParserFormatter;
	var NgbDatepickerModule = (function () {
	    function NgbDatepickerModule() {
	    }
	    NgbDatepickerModule.forRoot = function () {
	        return {
	            ngModule: NgbDatepickerModule,
	            providers: [
	                { provide: ngb_calendar_1.NgbCalendar, useClass: ngb_calendar_1.NgbCalendarGregorian },
	                { provide: datepicker_i18n_1.NgbDatepickerI18n, useClass: datepicker_i18n_1.NgbDatepickerI18nDefault },
	                { provide: ngb_date_parser_formatter_1.NgbDateParserFormatter, useClass: ngb_date_parser_formatter_1.NgbDateISOParserFormatter }, datepicker_service_1.NgbDatepickerService,
	                datepicker_config_1.NgbDatepickerConfig
	            ]
	        };
	    };
	    NgbDatepickerModule = __decorate([
	        core_1.NgModule({
	            declarations: [
	                datepicker_1.NgbDatepicker, datepicker_month_view_1.NgbDatepickerMonthView, datepicker_navigation_1.NgbDatepickerNavigation, datepicker_navigation_select_1.NgbDatepickerNavigationSelect, datepicker_day_view_1.NgbDatepickerDayView,
	                datepicker_input_1.NgbInputDatepicker
	            ],
	            exports: [datepicker_1.NgbDatepicker, datepicker_input_1.NgbInputDatepicker],
	            imports: [common_1.CommonModule, forms_1.FormsModule],
	            entryComponents: [datepicker_1.NgbDatepicker]
	        }), 
	        __metadata('design:paramtypes', [])
	    ], NgbDatepickerModule);
	    return NgbDatepickerModule;
	}());
	exports.NgbDatepickerModule = NgbDatepickerModule;
	//# sourceMappingURL=datepicker.module.js.map

	/***/ },
	/* 15 */
	/***/ function(module, exports, __webpack_require__) {

	"use strict";
	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var core_1 = __webpack_require__(0);
	var dropdown_1 = __webpack_require__(54);
	var dropdown_config_1 = __webpack_require__(31);
	var dropdown_2 = __webpack_require__(54);
	exports.NgbDropdown = dropdown_2.NgbDropdown;
	exports.NgbDropdownToggle = dropdown_2.NgbDropdownToggle;
	var dropdown_config_2 = __webpack_require__(31);
	exports.NgbDropdownConfig = dropdown_config_2.NgbDropdownConfig;
	var NGB_DROPDOWN_DIRECTIVES = [dropdown_1.NgbDropdownToggle, dropdown_1.NgbDropdown];
	var NgbDropdownModule = (function () {
	    function NgbDropdownModule() {
	    }
	    NgbDropdownModule.forRoot = function () { return { ngModule: NgbDropdownModule, providers: [dropdown_config_1.NgbDropdownConfig] }; };
	    NgbDropdownModule = __decorate([
	        core_1.NgModule({ declarations: NGB_DROPDOWN_DIRECTIVES, exports: NGB_DROPDOWN_DIRECTIVES }), 
	        __metadata('design:paramtypes', [])
	    ], NgbDropdownModule);
	    return NgbDropdownModule;
	}());
	exports.NgbDropdownModule = NgbDropdownModule;
	//# sourceMappingURL=dropdown.module.js.map

	/***/ },
	/* 16 */
	/***/ function(module, exports, __webpack_require__) {

	"use strict";
	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var core_1 = __webpack_require__(0);
	var modal_container_1 = __webpack_require__(69);
	var modal_backdrop_1 = __webpack_require__(55);
	var modal_window_1 = __webpack_require__(58);
	var modal_stack_1 = __webpack_require__(32);
	var modal_1 = __webpack_require__(59);
	var modal_2 = __webpack_require__(59);
	exports.NgbModal = modal_2.NgbModal;
	var modal_ref_1 = __webpack_require__(57);
	exports.NgbModalRef = modal_ref_1.NgbModalRef;
	exports.NgbActiveModal = modal_ref_1.NgbActiveModal;
	var modal_dismiss_reasons_1 = __webpack_require__(56);
	exports.ModalDismissReasons = modal_dismiss_reasons_1.ModalDismissReasons;
	var NgbModalModule = (function () {
	    function NgbModalModule() {
	    }
	    NgbModalModule.forRoot = function () { return { ngModule: NgbModalModule, providers: [modal_1.NgbModal, modal_stack_1.NgbModalStack] }; };
	    NgbModalModule = __decorate([
	        core_1.NgModule({
	            declarations: [modal_container_1.NgbModalContainer, modal_backdrop_1.NgbModalBackdrop, modal_window_1.NgbModalWindow],
	            entryComponents: [modal_backdrop_1.NgbModalBackdrop, modal_window_1.NgbModalWindow],
	            providers: [modal_1.NgbModal],
	            exports: [modal_container_1.NgbModalContainer]
	        }), 
	        __metadata('design:paramtypes', [])
	    ], NgbModalModule);
	    return NgbModalModule;
	}());
	exports.NgbModalModule = NgbModalModule;
	//# sourceMappingURL=modal.module.js.map

	/***/ },
	/* 17 */
	/***/ function(module, exports, __webpack_require__) {

	"use strict";
	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var core_1 = __webpack_require__(0);
	var common_1 = __webpack_require__(2);
	var pagination_1 = __webpack_require__(60);
	var pagination_config_1 = __webpack_require__(33);
	var pagination_2 = __webpack_require__(60);
	exports.NgbPagination = pagination_2.NgbPagination;
	var pagination_config_2 = __webpack_require__(33);
	exports.NgbPaginationConfig = pagination_config_2.NgbPaginationConfig;
	var NgbPaginationModule = (function () {
	    function NgbPaginationModule() {
	    }
	    NgbPaginationModule.forRoot = function () { return { ngModule: NgbPaginationModule, providers: [pagination_config_1.NgbPaginationConfig] }; };
	    NgbPaginationModule = __decorate([
	        core_1.NgModule({ declarations: [pagination_1.NgbPagination], exports: [pagination_1.NgbPagination], imports: [common_1.CommonModule] }), 
	        __metadata('design:paramtypes', [])
	    ], NgbPaginationModule);
	    return NgbPaginationModule;
	}());
	exports.NgbPaginationModule = NgbPaginationModule;
	//# sourceMappingURL=pagination.module.js.map

	/***/ },
	/* 18 */
	/***/ function(module, exports, __webpack_require__) {

	"use strict";
	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var core_1 = __webpack_require__(0);
	var popover_1 = __webpack_require__(61);
	var popover_config_1 = __webpack_require__(34);
	var popover_2 = __webpack_require__(61);
	exports.NgbPopover = popover_2.NgbPopover;
	var popover_config_2 = __webpack_require__(34);
	exports.NgbPopoverConfig = popover_config_2.NgbPopoverConfig;
	var NgbPopoverModule = (function () {
	    function NgbPopoverModule() {
	    }
	    NgbPopoverModule.forRoot = function () { return { ngModule: NgbPopoverModule, providers: [popover_config_1.NgbPopoverConfig] }; };
	    NgbPopoverModule = __decorate([
	        core_1.NgModule({ declarations: [popover_1.NgbPopover, popover_1.NgbPopoverWindow], exports: [popover_1.NgbPopover], entryComponents: [popover_1.NgbPopoverWindow] }), 
	        __metadata('design:paramtypes', [])
	    ], NgbPopoverModule);
	    return NgbPopoverModule;
	}());
	exports.NgbPopoverModule = NgbPopoverModule;
	//# sourceMappingURL=popover.module.js.map

	/***/ },
	/* 19 */
	/***/ function(module, exports, __webpack_require__) {

	"use strict";
	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var core_1 = __webpack_require__(0);
	var progressbar_1 = __webpack_require__(62);
	var progressbar_config_1 = __webpack_require__(35);
	var progressbar_2 = __webpack_require__(62);
	exports.NgbProgressbar = progressbar_2.NgbProgressbar;
	var progressbar_config_2 = __webpack_require__(35);
	exports.NgbProgressbarConfig = progressbar_config_2.NgbProgressbarConfig;
	var NgbProgressbarModule = (function () {
	    function NgbProgressbarModule() {
	    }
	    NgbProgressbarModule.forRoot = function () { return { ngModule: NgbProgressbarModule, providers: [progressbar_config_1.NgbProgressbarConfig] }; };
	    NgbProgressbarModule = __decorate([
	        core_1.NgModule({ declarations: [progressbar_1.NgbProgressbar], exports: [progressbar_1.NgbProgressbar] }), 
	        __metadata('design:paramtypes', [])
	    ], NgbProgressbarModule);
	    return NgbProgressbarModule;
	}());
	exports.NgbProgressbarModule = NgbProgressbarModule;
	//# sourceMappingURL=progressbar.module.js.map

	/***/ },
	/* 20 */
	/***/ function(module, exports, __webpack_require__) {

	"use strict";
	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var core_1 = __webpack_require__(0);
	var common_1 = __webpack_require__(2);
	var rating_config_1 = __webpack_require__(36);
	var rating_1 = __webpack_require__(63);
	var rating_2 = __webpack_require__(63);
	exports.NgbRating = rating_2.NgbRating;
	var rating_config_2 = __webpack_require__(36);
	exports.NgbRatingConfig = rating_config_2.NgbRatingConfig;
	var NgbRatingModule = (function () {
	    function NgbRatingModule() {
	    }
	    NgbRatingModule.forRoot = function () { return { ngModule: NgbRatingModule, providers: [rating_config_1.NgbRatingConfig] }; };
	    NgbRatingModule = __decorate([
	        core_1.NgModule({ declarations: [rating_1.NgbRating], exports: [rating_1.NgbRating], imports: [common_1.CommonModule] }), 
	        __metadata('design:paramtypes', [])
	    ], NgbRatingModule);
	    return NgbRatingModule;
	}());
	exports.NgbRatingModule = NgbRatingModule;
	//# sourceMappingURL=rating.module.js.map

	/***/ },
	/* 21 */
	/***/ function(module, exports, __webpack_require__) {

	"use strict";
	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var core_1 = __webpack_require__(0);
	var common_1 = __webpack_require__(2);
	var tabset_1 = __webpack_require__(64);
	var tabset_config_1 = __webpack_require__(37);
	var tabset_2 = __webpack_require__(64);
	exports.NgbTabset = tabset_2.NgbTabset;
	exports.NgbTab = tabset_2.NgbTab;
	exports.NgbTabContent = tabset_2.NgbTabContent;
	exports.NgbTabTitle = tabset_2.NgbTabTitle;
	var tabset_config_2 = __webpack_require__(37);
	exports.NgbTabsetConfig = tabset_config_2.NgbTabsetConfig;
	var NGB_TABSET_DIRECTIVES = [tabset_1.NgbTabset, tabset_1.NgbTab, tabset_1.NgbTabContent, tabset_1.NgbTabTitle];
	var NgbTabsetModule = (function () {
	    function NgbTabsetModule() {
	    }
	    NgbTabsetModule.forRoot = function () { return { ngModule: NgbTabsetModule, providers: [tabset_config_1.NgbTabsetConfig] }; };
	    NgbTabsetModule = __decorate([
	        core_1.NgModule({ declarations: NGB_TABSET_DIRECTIVES, exports: NGB_TABSET_DIRECTIVES, imports: [common_1.CommonModule] }), 
	        __metadata('design:paramtypes', [])
	    ], NgbTabsetModule);
	    return NgbTabsetModule;
	}());
	exports.NgbTabsetModule = NgbTabsetModule;
	//# sourceMappingURL=tabset.module.js.map

	/***/ },
	/* 22 */
	/***/ function(module, exports, __webpack_require__) {

	"use strict";
	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var core_1 = __webpack_require__(0);
	var common_1 = __webpack_require__(2);
	var timepicker_1 = __webpack_require__(65);
	var timepicker_config_1 = __webpack_require__(38);
	var timepicker_2 = __webpack_require__(65);
	exports.NgbTimepicker = timepicker_2.NgbTimepicker;
	var timepicker_config_2 = __webpack_require__(38);
	exports.NgbTimepickerConfig = timepicker_config_2.NgbTimepickerConfig;
	var NgbTimepickerModule = (function () {
	    function NgbTimepickerModule() {
	    }
	    NgbTimepickerModule.forRoot = function () { return { ngModule: NgbTimepickerModule, providers: [timepicker_config_1.NgbTimepickerConfig] }; };
	    NgbTimepickerModule = __decorate([
	        core_1.NgModule({ declarations: [timepicker_1.NgbTimepicker], exports: [timepicker_1.NgbTimepicker], imports: [common_1.CommonModule] }), 
	        __metadata('design:paramtypes', [])
	    ], NgbTimepickerModule);
	    return NgbTimepickerModule;
	}());
	exports.NgbTimepickerModule = NgbTimepickerModule;
	//# sourceMappingURL=timepicker.module.js.map

	/***/ },
	/* 23 */
	/***/ function(module, exports, __webpack_require__) {

	"use strict";
	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var core_1 = __webpack_require__(0);
	var tooltip_1 = __webpack_require__(66);
	var tooltip_config_1 = __webpack_require__(39);
	var tooltip_config_2 = __webpack_require__(39);
	exports.NgbTooltipConfig = tooltip_config_2.NgbTooltipConfig;
	var tooltip_2 = __webpack_require__(66);
	exports.NgbTooltip = tooltip_2.NgbTooltip;
	var NgbTooltipModule = (function () {
	    function NgbTooltipModule() {
	    }
	    NgbTooltipModule.forRoot = function () { return { ngModule: NgbTooltipModule, providers: [tooltip_config_1.NgbTooltipConfig] }; };
	    NgbTooltipModule = __decorate([
	        core_1.NgModule({ declarations: [tooltip_1.NgbTooltip, tooltip_1.NgbTooltipWindow], exports: [tooltip_1.NgbTooltip], entryComponents: [tooltip_1.NgbTooltipWindow] }), 
	        __metadata('design:paramtypes', [])
	    ], NgbTooltipModule);
	    return NgbTooltipModule;
	}());
	exports.NgbTooltipModule = NgbTooltipModule;
	//# sourceMappingURL=tooltip.module.js.map

	/***/ },
	/* 24 */
	/***/ function(module, exports, __webpack_require__) {

	"use strict";
	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var core_1 = __webpack_require__(0);
	var common_1 = __webpack_require__(2);
	var highlight_1 = __webpack_require__(67);
	var typeahead_window_1 = __webpack_require__(41);
	var typeahead_1 = __webpack_require__(71);
	var typeahead_config_1 = __webpack_require__(40);
	var highlight_2 = __webpack_require__(67);
	exports.NgbHighlight = highlight_2.NgbHighlight;
	var typeahead_window_2 = __webpack_require__(41);
	exports.NgbTypeaheadWindow = typeahead_window_2.NgbTypeaheadWindow;
	var typeahead_config_2 = __webpack_require__(40);
	exports.NgbTypeaheadConfig = typeahead_config_2.NgbTypeaheadConfig;
	var NgbTypeaheadModule = (function () {
	    function NgbTypeaheadModule() {
	    }
	    NgbTypeaheadModule.forRoot = function () { return { ngModule: NgbTypeaheadModule, providers: [typeahead_config_1.NgbTypeaheadConfig] }; };
	    NgbTypeaheadModule = __decorate([
	        core_1.NgModule({
	            declarations: [typeahead_1.NgbTypeahead, highlight_1.NgbHighlight, typeahead_window_1.NgbTypeaheadWindow],
	            exports: [typeahead_1.NgbTypeahead],
	            imports: [common_1.CommonModule],
	            entryComponents: [typeahead_window_1.NgbTypeaheadWindow]
	        }), 
	        __metadata('design:paramtypes', [])
	    ], NgbTypeaheadModule);
	    return NgbTypeaheadModule;
	}());
	exports.NgbTypeaheadModule = NgbTypeaheadModule;
	//# sourceMappingURL=typeahead.module.js.map

	/***/ },
	/* 25 */
	/***/ function(module, exports, __webpack_require__) {

	"use strict";
	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var core_1 = __webpack_require__(0);
	/**
	 * Configuration service for the NgbAccordion component.
	 * You can inject this service, typically in your root component, and customize the values of its properties in
	 * order to provide default values for all the accordions used in the application.
	 */
	var NgbAccordionConfig = (function () {
	    function NgbAccordionConfig() {
	        this.closeOthers = false;
	    }
	    NgbAccordionConfig = __decorate([
	        core_1.Injectable(), 
	        __metadata('design:paramtypes', [])
	    ], NgbAccordionConfig);
	    return NgbAccordionConfig;
	}());
	exports.NgbAccordionConfig = NgbAccordionConfig;
	//# sourceMappingURL=accordion-config.js.map

	/***/ },
	/* 26 */
	/***/ function(module, exports, __webpack_require__) {

	"use strict";
	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var core_1 = __webpack_require__(0);
	/**
	 * Configuration service for the NgbAlert component.
	 * You can inject this service, typically in your root component, and customize the values of its properties in
	 * order to provide default values for all the alerts used in the application.
	 */
	var NgbAlertConfig = (function () {
	    function NgbAlertConfig() {
	        this.dismissible = true;
	        this.type = 'warning';
	    }
	    NgbAlertConfig = __decorate([
	        core_1.Injectable(), 
	        __metadata('design:paramtypes', [])
	    ], NgbAlertConfig);
	    return NgbAlertConfig;
	}());
	exports.NgbAlertConfig = NgbAlertConfig;
	//# sourceMappingURL=alert-config.js.map

	/***/ },
	/* 27 */
	/***/ function(module, exports, __webpack_require__) {

	"use strict";
	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var core_1 = __webpack_require__(0);
	/**
	 * Configuration service for the NgbCarousel component.
	 * You can inject this service, typically in your root component, and customize the values of its properties in
	 * order to provide default values for all the carousels used in the application.
	 */
	var NgbCarouselConfig = (function () {
	    function NgbCarouselConfig() {
	        this.interval = 5000;
	        this.wrap = true;
	        this.keyboard = true;
	    }
	    NgbCarouselConfig = __decorate([
	        core_1.Injectable(), 
	        __metadata('design:paramtypes', [])
	    ], NgbCarouselConfig);
	    return NgbCarouselConfig;
	}());
	exports.NgbCarouselConfig = NgbCarouselConfig;
	//# sourceMappingURL=carousel-config.js.map

	/***/ },
	/* 28 */
	/***/ function(module, exports, __webpack_require__) {

	"use strict";
	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var core_1 = __webpack_require__(0);
	/**
	 * Configuration service for the NgbDatepicker component.
	 * You can inject this service, typically in your root component, and customize the values of its properties in
	 * order to provide default values for all the datepickers used in the application.
	 */
	var NgbDatepickerConfig = (function () {
	    function NgbDatepickerConfig() {
	        this.displayMonths = 1;
	        this.firstDayOfWeek = 1;
	        this.navigation = 'select';
	        this.outsideDays = 'visible';
	        this.showWeekdays = true;
	        this.showWeekNumbers = false;
	    }
	    NgbDatepickerConfig = __decorate([
	        core_1.Injectable(), 
	        __metadata('design:paramtypes', [])
	    ], NgbDatepickerConfig);
	    return NgbDatepickerConfig;
	}());
	exports.NgbDatepickerConfig = NgbDatepickerConfig;
	//# sourceMappingURL=datepicker-config.js.map

	/***/ },
	/* 29 */
	/***/ function(module, exports, __webpack_require__) {

	"use strict";
	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var core_1 = __webpack_require__(0);
	var forms_1 = __webpack_require__(5);
	var ngb_calendar_1 = __webpack_require__(6);
	var ngb_date_1 = __webpack_require__(3);
	var datepicker_service_1 = __webpack_require__(52);
	var datepicker_view_model_1 = __webpack_require__(53);
	var util_1 = __webpack_require__(1);
	var datepicker_config_1 = __webpack_require__(28);
	var datepicker_i18n_1 = __webpack_require__(4);
	var NGB_DATEPICKER_VALUE_ACCESSOR = {
	    provide: forms_1.NG_VALUE_ACCESSOR,
	    useExisting: core_1.forwardRef(function () { return NgbDatepicker; }),
	    multi: true
	};
	/**
	 * A lightweight and highly configurable datepicker directive
	 */
	var NgbDatepicker = (function () {
	    function NgbDatepicker(_service, _calendar, i18n, config) {
	        this._service = _service;
	        this._calendar = _calendar;
	        this.i18n = i18n;
	        this.months = [];
	        /**
	         * An event fired when navigation happens and currently displayed month changes.
	         * See NgbDatepickerNavigateEvent for the payload info.
	         */
	        this.navigate = new core_1.EventEmitter();
	        this.disabled = false;
	        this.onChange = function (_) { };
	        this.onTouched = function () { };
	        this.dayTemplate = config.dayTemplate;
	        this.displayMonths = config.displayMonths;
	        this.firstDayOfWeek = config.firstDayOfWeek;
	        this.markDisabled = config.markDisabled;
	        this.minDate = config.minDate;
	        this.maxDate = config.maxDate;
	        this.navigation = config.navigation;
	        this.outsideDays = config.outsideDays;
	        this.showWeekdays = config.showWeekdays;
	        this.showWeekNumbers = config.showWeekNumbers;
	        this.startDate = config.startDate;
	    }
	    /**
	     * Navigates current view to provided date.
	     * With default calendar we use ISO 8601: 'month' is 1=Jan ... 12=Dec.
	     * If nothing provided calendar will open current month.
	     * Use 'startDate' input as an alternative
	     */
	    NgbDatepicker.prototype.navigateTo = function (date) {
	        this._setViewWithinLimits(date ? ngb_date_1.NgbDate.from(date) : this._calendar.getToday());
	        this._updateData();
	    };
	    NgbDatepicker.prototype.ngOnInit = function () {
	        this._setDates();
	        this.navigateTo(this.startDate);
	    };
	    NgbDatepicker.prototype.ngOnChanges = function (changes) {
	        this._setDates();
	        this._setViewWithinLimits(this.startDate ? ngb_date_1.NgbDate.from(this.startDate) : this._calendar.getToday());
	        if (changes['displayMonths']) {
	            this.displayMonths = util_1.toInteger(this.displayMonths);
	        }
	        // we have to force rebuild all months only if any of these inputs changes
	        if (['startDate', 'minDate', 'maxDate', 'navigation', 'firstDayOfWeek', 'markDisabled', 'displayMonths'].some(function (input) { return !!changes[input]; })) {
	            this._updateData(true);
	        }
	    };
	    NgbDatepicker.prototype.onDateSelect = function (date) {
	        this._setViewWithinLimits(date);
	        this.onTouched();
	        this.writeValue(date);
	        this.onChange({ year: date.year, month: date.month, day: date.day });
	        // switch current month
	        if (this._date.month !== this.months[0].number && this.displayMonths === 1) {
	            this._updateData();
	        }
	    };
	    NgbDatepicker.prototype.onNavigateDateSelect = function (date) {
	        this._setViewWithinLimits(date);
	        this._updateData();
	    };
	    NgbDatepicker.prototype.onNavigateEvent = function (event) {
	        switch (event) {
	            case datepicker_view_model_1.NavigationEvent.PREV:
	                this._setViewWithinLimits(this._calendar.getPrev(this.months[0].firstDate, 'm'));
	                break;
	            case datepicker_view_model_1.NavigationEvent.NEXT:
	                this._setViewWithinLimits(this._calendar.getNext(this.months[0].firstDate, 'm'));
	                break;
	        }
	        this._updateData();
	    };
	    NgbDatepicker.prototype.registerOnChange = function (fn) { this.onChange = fn; };
	    NgbDatepicker.prototype.registerOnTouched = function (fn) { this.onTouched = fn; };
	    NgbDatepicker.prototype.writeValue = function (value) { this.model = value ? new ngb_date_1.NgbDate(value.year, value.month, value.day) : null; };
	    NgbDatepicker.prototype.setDisabledState = function (isDisabled) { this.disabled = isDisabled; };
	    NgbDatepicker.prototype._setDates = function () {
	        this._maxDate = ngb_date_1.NgbDate.from(this.maxDate);
	        this._minDate = ngb_date_1.NgbDate.from(this.minDate);
	        this._date = this.startDate ? ngb_date_1.NgbDate.from(this.startDate) : this._calendar.getToday();
	        if (!this._minDate) {
	            this._minDate = this._calendar.getPrev(this._date, 'y', 10);
	        }
	        if (!this._maxDate) {
	            this._maxDate = this._calendar.getNext(this._date, 'y', 11);
	            this._maxDate = this._calendar.getPrev(this._maxDate);
	        }
	        if (this._minDate && this._maxDate && this._maxDate.before(this._minDate)) {
	            throw new Error("'maxDate' " + this._maxDate + " should be greater than 'minDate' " + this._minDate);
	        }
	    };
	    NgbDatepicker.prototype._setViewWithinLimits = function (date) {
	        if (this._minDate && date.before(this._minDate)) {
	            this._date = new ngb_date_1.NgbDate(this._minDate.year, this._minDate.month, 1);
	        }
	        else if (this._maxDate && date.after(this._maxDate)) {
	            this._date = new ngb_date_1.NgbDate(this._maxDate.year, this._maxDate.month, 1);
	        }
	        else {
	            this._date = new ngb_date_1.NgbDate(date.year, date.month, 1);
	        }
	    };
	    NgbDatepicker.prototype._updateData = function (force) {
	        if (force === void 0) { force = false; }
	        var newMonths = [];
	        var _loop_1 = function(i) {
	            var newDate_1 = this_1._calendar.getNext(this_1._date, 'm', i);
	            var index = this_1.months.findIndex(function (month) { return month.firstDate.equals(newDate_1); });
	            if (force || index === -1) {
	                newMonths.push(this_1._service.generateMonthViewModel(newDate_1, this_1._minDate, this_1._maxDate, util_1.toInteger(this_1.firstDayOfWeek), this_1.markDisabled));
	            }
	            else {
	                newMonths.push(this_1.months[index]);
	            }
	        };
	        var this_1 = this;
	        for (var i = 0; i < this.displayMonths; i++) {
	            _loop_1(i);
	        }
	        var newDate = newMonths[0].firstDate;
	        var oldDate = this.months[0] ? this.months[0].firstDate : null;
	        this.months = newMonths;
	        // emitting navigation event if the first month changes
	        if (!newDate.equals(oldDate)) {
	            this.navigate.emit({
	                current: oldDate ? { year: oldDate.year, month: oldDate.month } : null,
	                next: { year: newDate.year, month: newDate.month }
	            });
	        }
	    };
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', core_1.TemplateRef)
	    ], NgbDatepicker.prototype, "dayTemplate", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Number)
	    ], NgbDatepicker.prototype, "displayMonths", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Number)
	    ], NgbDatepicker.prototype, "firstDayOfWeek", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Function)
	    ], NgbDatepicker.prototype, "markDisabled", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Object)
	    ], NgbDatepicker.prototype, "minDate", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Object)
	    ], NgbDatepicker.prototype, "maxDate", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Object)
	    ], NgbDatepicker.prototype, "navigation", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Object)
	    ], NgbDatepicker.prototype, "outsideDays", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Boolean)
	    ], NgbDatepicker.prototype, "showWeekdays", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Boolean)
	    ], NgbDatepicker.prototype, "showWeekNumbers", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Object)
	    ], NgbDatepicker.prototype, "startDate", void 0);
	    __decorate([
	        core_1.Output(), 
	        __metadata('design:type', Object)
	    ], NgbDatepicker.prototype, "navigate", void 0);
	    NgbDatepicker = __decorate([
	        core_1.Component({
	            exportAs: 'ngbDatepicker',
	            selector: 'ngb-datepicker',
	            host: { 'class': 'd-inline-block' },
	            styles: ["\n    .month:first-child {\n      padding-left: 0 !important;\n    }\n  "],
	            template: "\n    <template #dt let-date=\"date\" let-currentMonth=\"currentMonth\" let-selected=\"selected\" let-disabled=\"disabled\">\n       <div ngbDatepickerDayView [date]=\"date\" [currentMonth]=\"currentMonth\" [selected]=\"selected\" [disabled]=\"disabled\"></div>\n    </template>\n\n    <ngb-datepicker-navigation *ngIf=\"navigation !== 'none'\"\n      [date]=\"months[0]?.firstDate\"\n      [minDate]=\"_minDate\"\n      [maxDate]=\"_maxDate\"\n      [disabled]=\"disabled\"\n      [showWeekNumbers]=\"showWeekNumbers\"\n      [showSelect]=\"navigation === 'select'\"\n      (navigate)=\"onNavigateEvent($event)\"\n      (select)=\"onNavigateDateSelect($event)\">\n    </ngb-datepicker-navigation>\n\n    <table>\n      <tr *ngIf=\"navigation !== 'select' || displayMonths > 1\">\n        <td *ngFor=\"let month of months\" class=\"text-xs-center font-weight-bold\">\n          {{ i18n.getMonthName(month.number) }} {{ month.year }}\n        </td>\n      </tr>\n      <tr>\n        <td *ngFor=\"let month of months\" class=\"pl-1 month\">\n          <ngb-datepicker-month-view\n            [month]=\"month\"\n            [selectedDate]=\"model\"\n            [dayTemplate]=\"dayTemplate || dt\"\n            [showWeekdays]=\"showWeekdays\"\n            [showWeekNumbers]=\"showWeekNumbers\"\n            [disabled]=\"disabled\"\n            [outsideDays]=\"displayMonths === 1 ? outsideDays : 'hidden'\"\n            (select)=\"onDateSelect($event)\">\n          </ngb-datepicker-month-view>\n        </td>\n      </tr>\n    </table>\n  ",
	            providers: [NGB_DATEPICKER_VALUE_ACCESSOR]
	        }), 
	        __metadata('design:paramtypes', [datepicker_service_1.NgbDatepickerService, ngb_calendar_1.NgbCalendar, datepicker_i18n_1.NgbDatepickerI18n, datepicker_config_1.NgbDatepickerConfig])
	    ], NgbDatepicker);
	    return NgbDatepicker;
	}());
	exports.NgbDatepicker = NgbDatepicker;
	//# sourceMappingURL=datepicker.js.map

	/***/ },
	/* 30 */
	/***/ function(module, exports, __webpack_require__) {

	"use strict";
	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var util_1 = __webpack_require__(1);
	/**
	 * Abstract type serving as a DI token for the service parsing and formatting dates for the NgbInputDatepicker
	 * directive. A default implementation using the ISO 8601 format is provided, but you can provide another implementation
	 * to use an alternative format.
	 */
	var NgbDateParserFormatter = (function () {
	    function NgbDateParserFormatter() {
	    }
	    return NgbDateParserFormatter;
	}());
	exports.NgbDateParserFormatter = NgbDateParserFormatter;
	var NgbDateISOParserFormatter = (function (_super) {
	    __extends(NgbDateISOParserFormatter, _super);
	    function NgbDateISOParserFormatter() {
	        _super.apply(this, arguments);
	    }
	    NgbDateISOParserFormatter.prototype.parse = function (value) {
	        if (value) {
	            var dateParts = value.trim().split('-');
	            if (dateParts.length === 1 && util_1.isNumber(dateParts[0])) {
	                return { year: util_1.toInteger(dateParts[0]), month: null, day: null };
	            }
	            else if (dateParts.length === 2 && util_1.isNumber(dateParts[0]) && util_1.isNumber(dateParts[1])) {
	                return { year: util_1.toInteger(dateParts[0]), month: util_1.toInteger(dateParts[1]), day: null };
	            }
	            else if (dateParts.length === 3 && util_1.isNumber(dateParts[0]) && util_1.isNumber(dateParts[1]) && util_1.isNumber(dateParts[2])) {
	                return { year: util_1.toInteger(dateParts[0]), month: util_1.toInteger(dateParts[1]), day: util_1.toInteger(dateParts[2]) };
	            }
	        }
	        return null;
	    };
	    NgbDateISOParserFormatter.prototype.format = function (date) {
	        return date ?
	            date.year + "-" + (util_1.isNumber(date.month) ? util_1.padNumber(date.month) : '') + "-" + (util_1.isNumber(date.day) ? util_1.padNumber(date.day) : '') :
	            '';
	    };
	    return NgbDateISOParserFormatter;
	}(NgbDateParserFormatter));
	exports.NgbDateISOParserFormatter = NgbDateISOParserFormatter;
	//# sourceMappingURL=ngb-date-parser-formatter.js.map

	/***/ },
	/* 31 */
	/***/ function(module, exports, __webpack_require__) {

	"use strict";
	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var core_1 = __webpack_require__(0);
	/**
	 * Configuration service for the NgbDropdown directive.
	 * You can inject this service, typically in your root component, and customize the values of its properties in
	 * order to provide default values for all the dropdowns used in the application.
	 */
	var NgbDropdownConfig = (function () {
	    function NgbDropdownConfig() {
	        this.up = false;
	        this.autoClose = true;
	    }
	    NgbDropdownConfig = __decorate([
	        core_1.Injectable(), 
	        __metadata('design:paramtypes', [])
	    ], NgbDropdownConfig);
	    return NgbDropdownConfig;
	}());
	exports.NgbDropdownConfig = NgbDropdownConfig;
	//# sourceMappingURL=dropdown-config.js.map

	/***/ },
	/* 32 */
	/***/ function(module, exports, __webpack_require__) {

	"use strict";
	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var core_1 = __webpack_require__(0);
	var NgbModalStack = (function () {
	    function NgbModalStack() {
	    }
	    NgbModalStack.prototype.open = function (moduleCFR, contentInjector, content, options) {
	        if (options === void 0) { options = {}; }
	        if (!this.modalContainer) {
	            throw new Error('Missing modal container, add <template ngbModalContainer></template> to one of your application templates.');
	        }
	        return this.modalContainer.open(moduleCFR, contentInjector, content, options);
	    };
	    NgbModalStack.prototype.registerContainer = function (modalContainer) { this.modalContainer = modalContainer; };
	    NgbModalStack = __decorate([
	        core_1.Injectable(), 
	        __metadata('design:paramtypes', [])
	    ], NgbModalStack);
	    return NgbModalStack;
	}());
	exports.NgbModalStack = NgbModalStack;
	//# sourceMappingURL=modal-stack.js.map

	/***/ },
	/* 33 */
	/***/ function(module, exports, __webpack_require__) {

	"use strict";
	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var core_1 = __webpack_require__(0);
	/**
	 * Configuration service for the NgbPagination component.
	 * You can inject this service, typically in your root component, and customize the values of its properties in
	 * order to provide default values for all the paginations used in the application.
	 */
	var NgbPaginationConfig = (function () {
	    function NgbPaginationConfig() {
	        this.boundaryLinks = false;
	        this.directionLinks = true;
	        this.ellipses = true;
	        this.maxSize = 0;
	        this.pageSize = 10;
	        this.rotate = false;
	    }
	    NgbPaginationConfig = __decorate([
	        core_1.Injectable(), 
	        __metadata('design:paramtypes', [])
	    ], NgbPaginationConfig);
	    return NgbPaginationConfig;
	}());
	exports.NgbPaginationConfig = NgbPaginationConfig;
	//# sourceMappingURL=pagination-config.js.map

	/***/ },
	/* 34 */
	/***/ function(module, exports, __webpack_require__) {

	"use strict";
	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var core_1 = __webpack_require__(0);
	/**
	 * Configuration service for the NgbPopover directive.
	 * You can inject this service, typically in your root component, and customize the values of its properties in
	 * order to provide default values for all the popovers used in the application.
	 */
	var NgbPopoverConfig = (function () {
	    function NgbPopoverConfig() {
	        this.placement = 'top';
	        this.triggers = 'click';
	    }
	    NgbPopoverConfig = __decorate([
	        core_1.Injectable(), 
	        __metadata('design:paramtypes', [])
	    ], NgbPopoverConfig);
	    return NgbPopoverConfig;
	}());
	exports.NgbPopoverConfig = NgbPopoverConfig;
	//# sourceMappingURL=popover-config.js.map

	/***/ },
	/* 35 */
	/***/ function(module, exports, __webpack_require__) {

	"use strict";
	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var core_1 = __webpack_require__(0);
	/**
	 * Configuration service for the NgbProgressbar component.
	 * You can inject this service, typically in your root component, and customize the values of its properties in
	 * order to provide default values for all the progress bars used in the application.
	 */
	var NgbProgressbarConfig = (function () {
	    function NgbProgressbarConfig() {
	        this.max = 100;
	        this.animated = false;
	        this.striped = false;
	    }
	    NgbProgressbarConfig = __decorate([
	        core_1.Injectable(), 
	        __metadata('design:paramtypes', [])
	    ], NgbProgressbarConfig);
	    return NgbProgressbarConfig;
	}());
	exports.NgbProgressbarConfig = NgbProgressbarConfig;
	//# sourceMappingURL=progressbar-config.js.map

	/***/ },
	/* 36 */
	/***/ function(module, exports, __webpack_require__) {

	"use strict";
	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var core_1 = __webpack_require__(0);
	/**
	 * Configuration service for the NgbRating component.
	 * You can inject this service, typically in your root component, and customize the values of its properties in
	 * order to provide default values for all the ratings used in the application.
	 */
	var NgbRatingConfig = (function () {
	    function NgbRatingConfig() {
	        this.max = 10;
	        this.readonly = false;
	    }
	    NgbRatingConfig = __decorate([
	        core_1.Injectable(), 
	        __metadata('design:paramtypes', [])
	    ], NgbRatingConfig);
	    return NgbRatingConfig;
	}());
	exports.NgbRatingConfig = NgbRatingConfig;
	//# sourceMappingURL=rating-config.js.map

	/***/ },
	/* 37 */
	/***/ function(module, exports, __webpack_require__) {

	"use strict";
	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var core_1 = __webpack_require__(0);
	/**
	 * Configuration service for the NgbTabset component.
	 * You can inject this service, typically in your root component, and customize the values of its properties in
	 * order to provide default values for all the tabsets used in the application.
	 */
	var NgbTabsetConfig = (function () {
	    function NgbTabsetConfig() {
	        this.type = 'tabs';
	    }
	    NgbTabsetConfig = __decorate([
	        core_1.Injectable(), 
	        __metadata('design:paramtypes', [])
	    ], NgbTabsetConfig);
	    return NgbTabsetConfig;
	}());
	exports.NgbTabsetConfig = NgbTabsetConfig;
	//# sourceMappingURL=tabset-config.js.map

	/***/ },
	/* 38 */
	/***/ function(module, exports, __webpack_require__) {

	"use strict";
	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var core_1 = __webpack_require__(0);
	/**
	 * Configuration service for the NgbTimepicker component.
	 * You can inject this service, typically in your root component, and customize the values of its properties in
	 * order to provide default values for all the timepickers used in the application.
	 */
	var NgbTimepickerConfig = (function () {
	    function NgbTimepickerConfig() {
	        this.meridian = false;
	        this.spinners = true;
	        this.seconds = false;
	        this.hourStep = 1;
	        this.minuteStep = 1;
	        this.secondStep = 1;
	        this.disabled = false;
	        this.readonlyInputs = false;
	    }
	    NgbTimepickerConfig = __decorate([
	        core_1.Injectable(), 
	        __metadata('design:paramtypes', [])
	    ], NgbTimepickerConfig);
	    return NgbTimepickerConfig;
	}());
	exports.NgbTimepickerConfig = NgbTimepickerConfig;
	//# sourceMappingURL=timepicker-config.js.map

	/***/ },
	/* 39 */
	/***/ function(module, exports, __webpack_require__) {

	"use strict";
	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var core_1 = __webpack_require__(0);
	/**
	 * Configuration service for the NgbTooltip directive.
	 * You can inject this service, typically in your root component, and customize the values of its properties in
	 * order to provide default values for all the tooltips used in the application.
	 */
	var NgbTooltipConfig = (function () {
	    function NgbTooltipConfig() {
	        this.placement = 'top';
	        this.triggers = 'hover';
	    }
	    NgbTooltipConfig = __decorate([
	        core_1.Injectable(), 
	        __metadata('design:paramtypes', [])
	    ], NgbTooltipConfig);
	    return NgbTooltipConfig;
	}());
	exports.NgbTooltipConfig = NgbTooltipConfig;
	//# sourceMappingURL=tooltip-config.js.map

	/***/ },
	/* 40 */
	/***/ function(module, exports, __webpack_require__) {

	"use strict";
	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var core_1 = __webpack_require__(0);
	/**
	 * Configuration service for the NgbTypeahead component.
	 * You can inject this service, typically in your root component, and customize the values of its properties in
	 * order to provide default values for all the typeaheads used in the application.
	 */
	var NgbTypeaheadConfig = (function () {
	    function NgbTypeaheadConfig() {
	        this.editable = true;
	        this.focusFirst = true;
	        this.showHint = false;
	    }
	    NgbTypeaheadConfig = __decorate([
	        core_1.Injectable(), 
	        __metadata('design:paramtypes', [])
	    ], NgbTypeaheadConfig);
	    return NgbTypeaheadConfig;
	}());
	exports.NgbTypeaheadConfig = NgbTypeaheadConfig;
	//# sourceMappingURL=typeahead-config.js.map

	/***/ },
	/* 41 */
	/***/ function(module, exports, __webpack_require__) {

	"use strict";
	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var core_1 = __webpack_require__(0);
	var util_1 = __webpack_require__(1);
	var NgbTypeaheadWindow = (function () {
	    function NgbTypeaheadWindow() {
	        this.activeIdx = 0;
	        /**
	         * Flag indicating if the first row should be active initially
	         */
	        this.focusFirst = true;
	        /**
	         * A function used to format a given result before display. This function should return a formatted string without any
	         * HTML markup
	         */
	        this.formatter = util_1.toString;
	        /**
	         * Event raised when user selects a particular result row
	         */
	        this.selectEvent = new core_1.EventEmitter();
	    }
	    NgbTypeaheadWindow.prototype.getActive = function () { return this.results[this.activeIdx]; };
	    NgbTypeaheadWindow.prototype.markActive = function (activeIdx) { this.activeIdx = activeIdx; };
	    NgbTypeaheadWindow.prototype.next = function () {
	        if (this.activeIdx === this.results.length - 1) {
	            this.activeIdx = this.focusFirst ? (this.activeIdx + 1) % this.results.length : -1;
	        }
	        else {
	            this.activeIdx++;
	        }
	    };
	    NgbTypeaheadWindow.prototype.prev = function () {
	        if (this.activeIdx < 0) {
	            this.activeIdx = this.results.length - 1;
	        }
	        else if (this.activeIdx === 0) {
	            this.activeIdx = this.focusFirst ? this.results.length - 1 : -1;
	        }
	        else {
	            this.activeIdx--;
	        }
	    };
	    NgbTypeaheadWindow.prototype.select = function (item) { this.selectEvent.emit(item); };
	    NgbTypeaheadWindow.prototype.ngOnInit = function () { this.activeIdx = this.focusFirst ? 0 : -1; };
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Object)
	    ], NgbTypeaheadWindow.prototype, "focusFirst", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Object)
	    ], NgbTypeaheadWindow.prototype, "results", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', String)
	    ], NgbTypeaheadWindow.prototype, "term", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Object)
	    ], NgbTypeaheadWindow.prototype, "formatter", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', core_1.TemplateRef)
	    ], NgbTypeaheadWindow.prototype, "resultTemplate", void 0);
	    __decorate([
	        core_1.Output('select'), 
	        __metadata('design:type', Object)
	    ], NgbTypeaheadWindow.prototype, "selectEvent", void 0);
	    NgbTypeaheadWindow = __decorate([
	        core_1.Component({
	            selector: 'ngb-typeahead-window',
	            exportAs: 'ngbTypeaheadWindow',
	            host: { 'class': 'dropdown-menu', 'style': 'display: block' },
	            template: "\n    <template #rt let-result=\"result\" let-term=\"term\" let-formatter=\"formatter\">\n      <ngb-highlight [result]=\"formatter(result)\" [term]=\"term\"></ngb-highlight>\n    </template>\n    <template ngFor [ngForOf]=\"results\" let-result let-idx=\"index\">\n      <button type=\"button\" class=\"dropdown-item\" [class.active]=\"idx === activeIdx\" \n        (mouseenter)=\"markActive(idx)\" \n        (click)=\"select(result)\">\n          <template [ngTemplateOutlet]=\"resultTemplate || rt\" \n          [ngOutletContext]=\"{result: result, term: term, formatter: formatter}\"></template>\n      </button>\n    </template>\n  "
	        }), 
	        __metadata('design:paramtypes', [])
	    ], NgbTypeaheadWindow);
	    return NgbTypeaheadWindow;
	}());
	exports.NgbTypeaheadWindow = NgbTypeaheadWindow;
	//# sourceMappingURL=typeahead-window.js.map

	/***/ },
	/* 42 */
	/***/ function(module, exports, __webpack_require__) {

	"use strict";
	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var core_1 = __webpack_require__(0);
	var util_1 = __webpack_require__(1);
	var accordion_config_1 = __webpack_require__(25);
	var nextId = 0;
	/**
	 * This directive should be used to wrap accordion panel titles that need to contain HTML markup or other directives.
	 */
	var NgbPanelTitle = (function () {
	    function NgbPanelTitle(templateRef) {
	        this.templateRef = templateRef;
	    }
	    NgbPanelTitle = __decorate([
	        core_1.Directive({ selector: 'template[ngbPanelTitle]' }), 
	        __metadata('design:paramtypes', [core_1.TemplateRef])
	    ], NgbPanelTitle);
	    return NgbPanelTitle;
	}());
	exports.NgbPanelTitle = NgbPanelTitle;
	/**
	 * This directive must be used to wrap accordion panel content.
	 */
	var NgbPanelContent = (function () {
	    function NgbPanelContent(templateRef) {
	        this.templateRef = templateRef;
	    }
	    NgbPanelContent = __decorate([
	        core_1.Directive({ selector: 'template[ngbPanelContent]' }), 
	        __metadata('design:paramtypes', [core_1.TemplateRef])
	    ], NgbPanelContent);
	    return NgbPanelContent;
	}());
	exports.NgbPanelContent = NgbPanelContent;
	/**
	 * The NgbPanel directive represents an in individual panel with the title and collapsible
	 * content
	 */
	var NgbPanel = (function () {
	    function NgbPanel() {
	        /**
	         *  A flag determining whether the panel is disabled or not.
	         *  When disabled, the panel cannot be toggled.
	         */
	        this.disabled = false;
	        /**
	         *  An optional id for the panel. The id should be unique.
	         *  If not provided, it will be auto-generated.
	         */
	        this.id = "ngb-panel-" + nextId++;
	    }
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Object)
	    ], NgbPanel.prototype, "disabled", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Object)
	    ], NgbPanel.prototype, "id", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', String)
	    ], NgbPanel.prototype, "title", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', String)
	    ], NgbPanel.prototype, "type", void 0);
	    __decorate([
	        core_1.ContentChild(NgbPanelContent), 
	        __metadata('design:type', NgbPanelContent)
	    ], NgbPanel.prototype, "contentTpl", void 0);
	    __decorate([
	        core_1.ContentChild(NgbPanelTitle), 
	        __metadata('design:type', NgbPanelTitle)
	    ], NgbPanel.prototype, "titleTpl", void 0);
	    NgbPanel = __decorate([
	        core_1.Directive({ selector: 'ngb-panel' }), 
	        __metadata('design:paramtypes', [])
	    ], NgbPanel);
	    return NgbPanel;
	}());
	exports.NgbPanel = NgbPanel;
	/**
	 * The NgbAccordion directive is a collection of panels.
	 * It can assure that only panel can be opened at a time.
	 */
	var NgbAccordion = (function () {
	    function NgbAccordion(config) {
	        /**
	         * An array or comma separated strings of panel identifiers that should be opened
	         */
	        this.activeIds = [];
	        /**
	         * A panel change event fired right before the panel toggle happens. See NgbPanelChangeEvent for payload details
	         */
	        this.panelChange = new core_1.EventEmitter();
	        /**
	         * A map that stores each panel state
	         */
	        this._states = new Map();
	        /**
	         * A map that stores references to all panels
	         */
	        this._panelRefs = new Map();
	        this.type = config.type;
	        this.closeOtherPanels = config.closeOthers;
	    }
	    /**
	     * Programmatically toggle a panel with a given id.
	     */
	    NgbAccordion.prototype.toggle = function (panelId) {
	        var panel = this._panelRefs.get(panelId);
	        if (panel && !panel.disabled) {
	            var nextState = !this._states.get(panelId);
	            var defaultPrevented_1 = false;
	            this.panelChange.emit({ panelId: panelId, nextState: nextState, preventDefault: function () { defaultPrevented_1 = true; } });
	            if (!defaultPrevented_1) {
	                this._states.set(panelId, nextState);
	                if (this.closeOtherPanels) {
	                    this._closeOthers(panelId);
	                }
	                this._updateActiveIds();
	            }
	        }
	    };
	    NgbAccordion.prototype.ngAfterContentChecked = function () {
	        // active id updates
	        if (util_1.isString(this.activeIds)) {
	            this.activeIds = this.activeIds.split(/\s*,\s*/);
	        }
	        this._updateStates();
	        // closeOthers updates
	        if (this.activeIds.length > 1 && this.closeOtherPanels) {
	            this._closeOthers(this.activeIds[0]);
	            this._updateActiveIds();
	        }
	    };
	    /**
	     * @internal
	     */
	    NgbAccordion.prototype.isOpen = function (panelId) { return this._states.get(panelId); };
	    NgbAccordion.prototype._closeOthers = function (panelId) {
	        var _this = this;
	        this._states.forEach(function (state, id) {
	            if (id !== panelId) {
	                _this._states.set(id, false);
	            }
	        });
	    };
	    NgbAccordion.prototype._updateActiveIds = function () {
	        var _this = this;
	        this.activeIds =
	            this.panels.toArray().filter(function (panel) { return _this.isOpen(panel.id) && !panel.disabled; }).map(function (panel) { return panel.id; });
	    };
	    NgbAccordion.prototype._updateStates = function () {
	        var _this = this;
	        this._states.clear();
	        this._panelRefs.clear();
	        this.panels.toArray().forEach(function (panel) {
	            _this._states.set(panel.id, _this.activeIds.indexOf(panel.id) > -1 && !panel.disabled);
	            _this._panelRefs.set(panel.id, panel);
	        });
	    };
	    __decorate([
	        core_1.ContentChildren(NgbPanel), 
	        __metadata('design:type', core_1.QueryList)
	    ], NgbAccordion.prototype, "panels", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Object)
	    ], NgbAccordion.prototype, "activeIds", void 0);
	    __decorate([
	        core_1.Input('closeOthers'), 
	        __metadata('design:type', Boolean)
	    ], NgbAccordion.prototype, "closeOtherPanels", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', String)
	    ], NgbAccordion.prototype, "type", void 0);
	    __decorate([
	        core_1.Output(), 
	        __metadata('design:type', Object)
	    ], NgbAccordion.prototype, "panelChange", void 0);
	    NgbAccordion = __decorate([
	        core_1.Component({
	            selector: 'ngb-accordion',
	            exportAs: 'ngbAccordion',
	            host: { 'role': 'tablist', '[attr.aria-multiselectable]': '!closeOtherPanels' },
	            template: "\n  <div class=\"card\">\n    <template ngFor let-panel [ngForOf]=\"panels\">\n      <div role=\"tab\" id=\"{{panel.id}}-header\" \n        [class]=\"'card-header ' + (panel.type ? 'card-'+panel.type: type ? 'card-'+type : '')\" [class.active]=\"isOpen(panel.id)\">\n        <a href (click)=\"!!toggle(panel.id)\" [class.text-muted]=\"panel.disabled\" \n          [attr.aria-expanded]=\"isOpen(panel.id)\" [attr.aria-controls]=\"panel.id\">\n          {{panel.title}}<template [ngTemplateOutlet]=\"panel.titleTpl?.templateRef\"></template>\n        </a>\n      </div>\n      <div id=\"{{panel.id}}\" role=\"tabpanel\" [attr.aria-labelledby]=\"panel.id + '-header'\" class=\"card-block\" *ngIf=\"isOpen(panel.id)\">\n        <template [ngTemplateOutlet]=\"panel.contentTpl.templateRef\"></template>\n      </div>\n    </template>\n  </div>\n"
	        }), 
	        __metadata('design:paramtypes', [accordion_config_1.NgbAccordionConfig])
	    ], NgbAccordion);
	    return NgbAccordion;
	}());
	exports.NgbAccordion = NgbAccordion;
	//# sourceMappingURL=accordion.js.map

	/***/ },
	/* 43 */
	/***/ function(module, exports, __webpack_require__) {

	"use strict";
	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var core_1 = __webpack_require__(0);
	var alert_config_1 = __webpack_require__(26);
	/**
	 * Alerts can be used to provide feedback messages.
	 */
	var NgbAlert = (function () {
	    function NgbAlert(config) {
	        /**
	         * An event emitted when the close button is clicked. This event has no payload. Only relevant for dismissible alerts.
	         */
	        this.close = new core_1.EventEmitter();
	        this.dismissible = config.dismissible;
	        this.type = config.type;
	    }
	    NgbAlert.prototype.closeHandler = function () { this.close.emit(null); };
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Boolean)
	    ], NgbAlert.prototype, "dismissible", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', String)
	    ], NgbAlert.prototype, "type", void 0);
	    __decorate([
	        core_1.Output(), 
	        __metadata('design:type', Object)
	    ], NgbAlert.prototype, "close", void 0);
	    NgbAlert = __decorate([
	        core_1.Component({
	            selector: 'ngb-alert',
	            changeDetection: core_1.ChangeDetectionStrategy.OnPush,
	            template: "\n    <div [class]=\"'alert alert-' + type\" role=\"alert\">\n      <button *ngIf=\"dismissible\" type=\"button\" class=\"close\" aria-label=\"Close\" (click)=\"closeHandler()\">\n            <span aria-hidden=\"true\">&times;</span>\n      </button>\n      <ng-content></ng-content>\n    </div>\n    "
	        }), 
	        __metadata('design:paramtypes', [alert_config_1.NgbAlertConfig])
	    ], NgbAlert);
	    return NgbAlert;
	}());
	exports.NgbAlert = NgbAlert;
	//# sourceMappingURL=alert.js.map

	/***/ },
	/* 44 */
	/***/ function(module, exports, __webpack_require__) {

	"use strict";
	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var __param = (this && this.__param) || function (paramIndex, decorator) {
	    return function (target, key) { decorator(target, key, paramIndex); }
	};
	var core_1 = __webpack_require__(0);
	var forms_1 = __webpack_require__(5);
	var NGB_RADIO_VALUE_ACCESSOR = {
	    provide: forms_1.NG_VALUE_ACCESSOR,
	    useExisting: core_1.forwardRef(function () { return NgbRadioGroup; }),
	    multi: true
	};
	/**
	 * Easily create Bootstrap-style radio buttons. A value of a selected button is bound to a variable
	 * specified via ngModel.
	 */
	var NgbRadioGroup = (function () {
	    function NgbRadioGroup() {
	        this._radios = new Set();
	        this._value = null;
	        this.onChange = function (_) { };
	        this.onTouched = function () { };
	    }
	    NgbRadioGroup.prototype.onRadioChange = function (radio) {
	        this.writeValue(radio.value);
	        this.onChange(radio.value);
	    };
	    NgbRadioGroup.prototype.onRadioValueUpdate = function () { this._updateRadios(); };
	    NgbRadioGroup.prototype.register = function (radio) { this._radios.add(radio); };
	    NgbRadioGroup.prototype.registerOnChange = function (fn) { this.onChange = fn; };
	    NgbRadioGroup.prototype.registerOnTouched = function (fn) { this.onTouched = fn; };
	    NgbRadioGroup.prototype.setDisabledState = function (isDisabled) {
	        this._disabled = isDisabled;
	        this._updateRadios();
	    };
	    NgbRadioGroup.prototype.unregister = function (radio) { this._radios.delete(radio); };
	    NgbRadioGroup.prototype.writeValue = function (value) {
	        this._value = value;
	        this._updateRadios();
	    };
	    NgbRadioGroup.prototype._updateRadios = function () {
	        var _this = this;
	        this._radios.forEach(function (radio) { return radio.update(_this._value, _this._disabled); });
	    };
	    NgbRadioGroup = __decorate([
	        core_1.Directive({
	            selector: '[ngbRadioGroup]',
	            host: { 'data-toggle': 'buttons', 'class': 'btn-group' },
	            providers: [NGB_RADIO_VALUE_ACCESSOR]
	        }), 
	        __metadata('design:paramtypes', [])
	    ], NgbRadioGroup);
	    return NgbRadioGroup;
	}());
	exports.NgbRadioGroup = NgbRadioGroup;
	var NgbActiveLabel = (function () {
	    function NgbActiveLabel(_renderer, _elRef) {
	        this._renderer = _renderer;
	        this._elRef = _elRef;
	    }
	    Object.defineProperty(NgbActiveLabel.prototype, "active", {
	        set: function (isActive) { this._renderer.setElementClass(this._elRef.nativeElement, 'active', isActive); },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(NgbActiveLabel.prototype, "disabled", {
	        set: function (isDisabled) {
	            this._renderer.setElementClass(this._elRef.nativeElement, 'disabled', isDisabled);
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(NgbActiveLabel.prototype, "focused", {
	        set: function (isFocused) { this._renderer.setElementClass(this._elRef.nativeElement, 'focus', isFocused); },
	        enumerable: true,
	        configurable: true
	    });
	    NgbActiveLabel = __decorate([
	        core_1.Directive({ selector: 'label.btn' }), 
	        __metadata('design:paramtypes', [core_1.Renderer, core_1.ElementRef])
	    ], NgbActiveLabel);
	    return NgbActiveLabel;
	}());
	exports.NgbActiveLabel = NgbActiveLabel;
	/**
	 * Marks an input of type "radio" as part of the NgbRadioGroup.
	 */
	var NgbRadio = (function () {
	    function NgbRadio(_group, _label, _renderer, _element) {
	        this._group = _group;
	        this._label = _label;
	        this._renderer = _renderer;
	        this._element = _element;
	        this._value = null;
	        if (this._group) {
	            this._group.register(this);
	        }
	    }
	    Object.defineProperty(NgbRadio.prototype, "value", {
	        get: function () { return this._value; },
	        /**
	         * You can specify model value of a given radio by binding to the value property.
	        */
	        set: function (value) {
	            this._value = value;
	            var stringValue = value ? value.toString() : '';
	            this._renderer.setElementProperty(this._element.nativeElement, 'value', stringValue);
	            if (this._group) {
	                this._group.onRadioValueUpdate();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(NgbRadio.prototype, "checked", {
	        get: function () { return this._checked; },
	        set: function (value) {
	            this._checked = this._element.nativeElement.hasAttribute('checked') ? true : value;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(NgbRadio.prototype, "disabled", {
	        get: function () { return this._disabled; },
	        set: function (value) {
	            this._disabled = this._element.nativeElement.hasAttribute('disabled') ? true : value;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    Object.defineProperty(NgbRadio.prototype, "focused", {
	        set: function (isFocused) {
	            if (this._label) {
	                this._label.focused = isFocused;
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    NgbRadio.prototype.ngOnDestroy = function () {
	        if (this._group) {
	            this._group.unregister(this);
	        }
	    };
	    NgbRadio.prototype.onChange = function () {
	        if (this._group) {
	            this._group.onRadioChange(this);
	        }
	    };
	    NgbRadio.prototype.update = function (value, isDisabled) {
	        this._checked = (this.value === value && value !== null);
	        this._disabled = isDisabled;
	        this._label.active = this._checked;
	        this._label.disabled = this._disabled;
	    };
	    __decorate([
	        core_1.Input('value'), 
	        __metadata('design:type', Object), 
	        __metadata('design:paramtypes', [Object])
	    ], NgbRadio.prototype, "value", null);
	    __decorate([
	        core_1.Input('checked'), 
	        __metadata('design:type', Object), 
	        __metadata('design:paramtypes', [Object])
	    ], NgbRadio.prototype, "checked", null);
	    __decorate([
	        core_1.Input('disabled'), 
	        __metadata('design:type', Object), 
	        __metadata('design:paramtypes', [Object])
	    ], NgbRadio.prototype, "disabled", null);
	    NgbRadio = __decorate([
	        core_1.Directive({
	            selector: 'input[type=radio]',
	            host: {
	                '[checked]': 'checked',
	                '[disabled]': 'disabled',
	                '(change)': 'onChange()',
	                '(focus)': 'focused = true',
	                '(blur)': 'focused = false'
	            }
	        }),
	        __param(0, core_1.Optional()),
	        __param(1, core_1.Optional()), 
	        __metadata('design:paramtypes', [NgbRadioGroup, NgbActiveLabel, core_1.Renderer, core_1.ElementRef])
	    ], NgbRadio);
	    return NgbRadio;
	}());
	exports.NgbRadio = NgbRadio;
	//# sourceMappingURL=radio.js.map

	/***/ },
	/* 45 */
	/***/ function(module, exports, __webpack_require__) {

	"use strict";
	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var core_1 = __webpack_require__(0);
	var carousel_config_1 = __webpack_require__(27);
	var nextId = 0;
	/**
	 * Represents an individual slide to be used within a carousel.
	 */
	var NgbSlide = (function () {
	    function NgbSlide(tplRef) {
	        this.tplRef = tplRef;
	        /**
	         * Unique slide identifier. Must be unique for the entire document for proper accessibility support.
	         * Will be auto-generated if not provided.
	         */
	        this.id = "ngb-slide-" + nextId++;
	    }
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Object)
	    ], NgbSlide.prototype, "id", void 0);
	    NgbSlide = __decorate([
	        core_1.Directive({ selector: 'template[ngbSlide]' }), 
	        __metadata('design:paramtypes', [core_1.TemplateRef])
	    ], NgbSlide);
	    return NgbSlide;
	}());
	exports.NgbSlide = NgbSlide;
	/**
	 * Directive to easily create carousels based on Bootstrap's markup.
	 */
	var NgbCarousel = (function () {
	    function NgbCarousel(config) {
	        this.interval = config.interval;
	        this.wrap = config.wrap;
	        this.keyboard = config.keyboard;
	    }
	    NgbCarousel.prototype.ngAfterContentChecked = function () {
	        var activeSlide = this._getSlideById(this.activeId);
	        this.activeId = activeSlide ? activeSlide.id : (this.slides.length ? this.slides.first.id : null);
	    };
	    NgbCarousel.prototype.ngOnInit = function () { this._startTimer(); };
	    NgbCarousel.prototype.ngOnDestroy = function () { clearInterval(this._slideChangeInterval); };
	    /**
	     * Navigate to a slide with the specified identifier.
	     */
	    NgbCarousel.prototype.select = function (slideId) {
	        this.cycleToSelected(slideId);
	        this._restartTimer();
	    };
	    /**
	     * Navigate to the next slide.
	     */
	    NgbCarousel.prototype.prev = function () {
	        this.cycleToPrev();
	        this._restartTimer();
	    };
	    /**
	     * Navigate to the next slide.
	     */
	    NgbCarousel.prototype.next = function () {
	        this.cycleToNext();
	        this._restartTimer();
	    };
	    /**
	     * Stops the carousel from cycling through items.
	     */
	    NgbCarousel.prototype.pause = function () { this._stopTimer(); };
	    /**
	     * Restarts cycling through the carousel slides from left to right.
	     */
	    NgbCarousel.prototype.cycle = function () { this._startTimer(); };
	    NgbCarousel.prototype.cycleToNext = function () { this.cycleToSelected(this._getNextSlide(this.activeId)); };
	    NgbCarousel.prototype.cycleToPrev = function () { this.cycleToSelected(this._getPrevSlide(this.activeId)); };
	    NgbCarousel.prototype.cycleToSelected = function (slideIdx) {
	        var selectedSlide = this._getSlideById(slideIdx);
	        if (selectedSlide) {
	            this.activeId = selectedSlide.id;
	        }
	    };
	    NgbCarousel.prototype.keyPrev = function () {
	        if (this.keyboard) {
	            this.prev();
	        }
	    };
	    NgbCarousel.prototype.keyNext = function () {
	        if (this.keyboard) {
	            this.next();
	        }
	    };
	    NgbCarousel.prototype._restartTimer = function () {
	        this._stopTimer();
	        this._startTimer();
	    };
	    NgbCarousel.prototype._startTimer = function () {
	        var _this = this;
	        if (this.interval > 0) {
	            this._slideChangeInterval = setInterval(function () { _this.cycleToNext(); }, this.interval);
	        }
	    };
	    NgbCarousel.prototype._stopTimer = function () { clearInterval(this._slideChangeInterval); };
	    NgbCarousel.prototype._getSlideById = function (slideId) {
	        var slideWithId = this.slides.filter(function (slide) { return slide.id === slideId; });
	        return slideWithId.length ? slideWithId[0] : null;
	    };
	    NgbCarousel.prototype._getSlideIdxById = function (slideId) {
	        return this.slides.toArray().indexOf(this._getSlideById(slideId));
	    };
	    NgbCarousel.prototype._getNextSlide = function (currentSlideId) {
	        var slideArr = this.slides.toArray();
	        var currentSlideIdx = this._getSlideIdxById(currentSlideId);
	        var isLastSlide = currentSlideIdx === slideArr.length - 1;
	        return isLastSlide ? (this.wrap ? slideArr[0].id : slideArr[slideArr.length - 1].id) :
	            slideArr[currentSlideIdx + 1].id;
	    };
	    NgbCarousel.prototype._getPrevSlide = function (currentSlideId) {
	        var slideArr = this.slides.toArray();
	        var currentSlideIdx = this._getSlideIdxById(currentSlideId);
	        var isFirstSlide = currentSlideIdx === 0;
	        return isFirstSlide ? (this.wrap ? slideArr[slideArr.length - 1].id : slideArr[0].id) :
	            slideArr[currentSlideIdx - 1].id;
	    };
	    __decorate([
	        core_1.ContentChildren(NgbSlide), 
	        __metadata('design:type', core_1.QueryList)
	    ], NgbCarousel.prototype, "slides", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Number)
	    ], NgbCarousel.prototype, "interval", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Boolean)
	    ], NgbCarousel.prototype, "wrap", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Boolean)
	    ], NgbCarousel.prototype, "keyboard", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', String)
	    ], NgbCarousel.prototype, "activeId", void 0);
	    NgbCarousel = __decorate([
	        core_1.Component({
	            selector: 'ngb-carousel',
	            exportAs: 'ngbCarousel',
	            host: {
	                'class': 'carousel slide',
	                '[style.display]': '"block"',
	                'tabIndex': '0',
	                '(mouseenter)': 'pause()',
	                '(mouseleave)': 'cycle()',
	                '(keydown.arrowLeft)': 'keyPrev()',
	                '(keydown.arrowRight)': 'keyNext()'
	            },
	            template: "\n    <ol class=\"carousel-indicators\">\n      <li *ngFor=\"let slide of slides\" [id]=\"slide.id\" [class.active]=\"slide.id === activeId\" (click)=\"cycleToSelected(slide.id)\"></li>\n    </ol>\n    <div class=\"carousel-inner\" role=\"listbox\">\n      <div *ngFor=\"let slide of slides\" class=\"carousel-item\" [class.active]=\"slide.id === activeId\">\n        <template [ngTemplateOutlet]=\"slide.tplRef\"></template>\n      </div>\n    </div>\n    <a class=\"left carousel-control\" role=\"button\" (click)=\"cycleToPrev()\">\n      <span class=\"icon-prev\" aria-hidden=\"true\"></span>\n      <span class=\"sr-only\">Previous</span>\n    </a>\n    <a class=\"right carousel-control\" role=\"button\" (click)=\"cycleToNext()\">\n      <span class=\"icon-next\" aria-hidden=\"true\"></span>\n      <span class=\"sr-only\">Next</span>\n    </a>\n    "
	        }), 
	        __metadata('design:paramtypes', [carousel_config_1.NgbCarouselConfig])
	    ], NgbCarousel);
	    return NgbCarousel;
	}());
	exports.NgbCarousel = NgbCarousel;
	exports.NGB_CAROUSEL_DIRECTIVES = [NgbCarousel, NgbSlide];
	//# sourceMappingURL=carousel.js.map

	/***/ },
	/* 46 */
	/***/ function(module, exports, __webpack_require__) {

	"use strict";
	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var core_1 = __webpack_require__(0);
	/**
	 * The NgbCollapse directive provides a simple way to hide and show an element with animations.
	 */
	var NgbCollapse = (function () {
	    function NgbCollapse() {
	        /**
	         * A flag indicating collapsed (true) or open (false) state.
	         */
	        this.collapsed = false;
	    }
	    __decorate([
	        core_1.Input('ngbCollapse'), 
	        __metadata('design:type', Object)
	    ], NgbCollapse.prototype, "collapsed", void 0);
	    NgbCollapse = __decorate([
	        core_1.Directive({
	            selector: '[ngbCollapse]',
	            exportAs: 'ngbCollapse',
	            host: { '[class.collapse]': 'true', '[class.in]': '!collapsed', '[attr.aria-expanded]': '!collapsed' }
	        }), 
	        __metadata('design:paramtypes', [])
	    ], NgbCollapse);
	    return NgbCollapse;
	}());
	exports.NgbCollapse = NgbCollapse;
	//# sourceMappingURL=collapse.js.map

	/***/ },
	/* 47 */
	/***/ function(module, exports, __webpack_require__) {

	"use strict";
	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var core_1 = __webpack_require__(0);
	var NgbDatepickerDayView = (function () {
	    function NgbDatepickerDayView() {
	    }
	    NgbDatepickerDayView.prototype.isMuted = function () { return !this.selected && (this.date.month !== this.currentMonth || this.disabled); };
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Number)
	    ], NgbDatepickerDayView.prototype, "currentMonth", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Object)
	    ], NgbDatepickerDayView.prototype, "date", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Boolean)
	    ], NgbDatepickerDayView.prototype, "disabled", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Boolean)
	    ], NgbDatepickerDayView.prototype, "selected", void 0);
	    NgbDatepickerDayView = __decorate([
	        core_1.Component({
	            selector: '[ngbDatepickerDayView]',
	            styles: ["\n    :host {      \n      text-align: center;\n      padding: 0.185rem 0.25rem;      \n      border-radius: 0.25rem;\n    }\n  "],
	            host: {
	                '[class.bg-primary]': 'selected',
	                '[class.text-white]': 'selected',
	                '[class.text-muted]': 'isMuted()',
	                '[class.btn-secondary]': '!disabled'
	            },
	            template: "{{ date.day }}"
	        }), 
	        __metadata('design:paramtypes', [])
	    ], NgbDatepickerDayView);
	    return NgbDatepickerDayView;
	}());
	exports.NgbDatepickerDayView = NgbDatepickerDayView;
	//# sourceMappingURL=datepicker-day-view.js.map

	/***/ },
	/* 48 */
	/***/ function(module, exports, __webpack_require__) {

	"use strict";
	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var core_1 = __webpack_require__(0);
	var forms_1 = __webpack_require__(5);
	var ngb_date_1 = __webpack_require__(3);
	var datepicker_1 = __webpack_require__(29);
	var ngb_date_parser_formatter_1 = __webpack_require__(30);
	var positioning_1 = __webpack_require__(8);
	var NGB_DATEPICKER_VALUE_ACCESSOR = {
	    provide: forms_1.NG_VALUE_ACCESSOR,
	    useExisting: core_1.forwardRef(function () { return NgbInputDatepicker; }),
	    multi: true
	};
	/**
	 * A directive that makes it possible to have datepickers on input fields.
	 * Manages integration with the input field itself (data entry) and ngModel (validation etc.).
	 */
	var NgbInputDatepicker = (function () {
	    function NgbInputDatepicker(_parserFormatter, _elRef, _vcRef, _renderer, _cfr, ngZone) {
	        var _this = this;
	        this._parserFormatter = _parserFormatter;
	        this._elRef = _elRef;
	        this._vcRef = _vcRef;
	        this._renderer = _renderer;
	        this._cfr = _cfr;
	        this._cRef = null;
	        /**
	         * An event fired when navigation happens and currently displayed month changes.
	         * See NgbDatepickerNavigateEvent for the payload info.
	         */
	        this.navigate = new core_1.EventEmitter();
	        this._onChange = function (_) { };
	        this._onTouched = function () { };
	        this._zoneSubscription = ngZone.onStable.subscribe(function () {
	            if (_this._cRef) {
	                positioning_1.positionElements(_this._elRef.nativeElement, _this._cRef.location.nativeElement, 'bottom-left');
	            }
	        });
	    }
	    NgbInputDatepicker.prototype.registerOnChange = function (fn) { this._onChange = fn; };
	    NgbInputDatepicker.prototype.registerOnTouched = function (fn) { this._onTouched = fn; };
	    NgbInputDatepicker.prototype.writeValue = function (value) {
	        this._model = value ? new ngb_date_1.NgbDate(value.year, value.month, value.day) : null;
	        this._writeModelValue(this._model);
	    };
	    NgbInputDatepicker.prototype.setDisabledState = function (isDisabled) {
	        this._renderer.setElementProperty(this._elRef.nativeElement, 'disabled', isDisabled);
	        if (this.isOpen()) {
	            this._cRef.instance.setDisabledState(isDisabled);
	        }
	    };
	    NgbInputDatepicker.prototype.manualDateChange = function (value) {
	        this._model = ngb_date_1.NgbDate.from(this._parserFormatter.parse(value));
	        this._onChange(this._model ? { year: this._model.year, month: this._model.month, day: this._model.day } : null);
	        this._writeModelValue(this._model);
	    };
	    NgbInputDatepicker.prototype.isOpen = function () { return !!this._cRef; };
	    /**
	     * Opens the datepicker with the selected date indicated by the ngModel value.
	     */
	    NgbInputDatepicker.prototype.open = function () {
	        var _this = this;
	        if (!this.isOpen()) {
	            var cf = this._cfr.resolveComponentFactory(datepicker_1.NgbDatepicker);
	            this._cRef = this._vcRef.createComponent(cf);
	            this._applyPopupStyling(this._cRef.location.nativeElement);
	            this._cRef.instance.writeValue(this._model);
	            this._applyDatepickerInputs(this._cRef.instance);
	            this._subscribeForDatepickerOutputs(this._cRef.instance);
	            this._cRef.instance.ngOnInit();
	            // date selection event handling
	            this._cRef.instance.registerOnChange(function (selectedDate) {
	                _this.writeValue(selectedDate);
	                _this._onChange(selectedDate);
	                _this.close();
	            });
	        }
	    };
	    /**
	     * Closes the datepicker popup.
	     */
	    NgbInputDatepicker.prototype.close = function () {
	        if (this.isOpen()) {
	            this._vcRef.remove(this._vcRef.indexOf(this._cRef.hostView));
	            this._cRef = null;
	        }
	    };
	    /**
	     * Toggles the datepicker popup (opens when closed and closes when opened).
	     */
	    NgbInputDatepicker.prototype.toggle = function () {
	        if (this.isOpen()) {
	            this.close();
	        }
	        else {
	            this.open();
	        }
	    };
	    /**
	     * Navigates current view to provided date.
	     * With default calendar we use ISO 8601: 'month' is 1=Jan ... 12=Dec.
	     * If nothing provided calendar will open current month.
	     * Use 'startDate' input as an alternative
	     */
	    NgbInputDatepicker.prototype.navigateTo = function (date) {
	        if (this.isOpen()) {
	            this._cRef.instance.navigateTo(date);
	        }
	    };
	    NgbInputDatepicker.prototype.onBlur = function () { this._onTouched(); };
	    NgbInputDatepicker.prototype._applyDatepickerInputs = function (datepickerInstance) {
	        var _this = this;
	        ['dayTemplate', 'displayMonths', 'firstDayOfWeek', 'markDisabled', 'minDate', 'maxDate', 'navigation',
	            'outsideDays', 'showNavigation', 'showWeekdays', 'showWeekNumbers']
	            .forEach(function (optionName) {
	            if (_this[optionName] !== undefined) {
	                datepickerInstance[optionName] = _this[optionName];
	            }
	        });
	        datepickerInstance.startDate = this.startDate || this._model;
	    };
	    NgbInputDatepicker.prototype._applyPopupStyling = function (nativeElement) {
	        this._renderer.setElementClass(nativeElement, 'dropdown-menu', true);
	        this._renderer.setElementStyle(nativeElement, 'display', 'block');
	        this._renderer.setElementStyle(nativeElement, 'padding', '0.40rem');
	    };
	    NgbInputDatepicker.prototype._subscribeForDatepickerOutputs = function (datepickerInstance) {
	        var _this = this;
	        datepickerInstance.navigate.subscribe(function (date) { return _this.navigate.emit(date); });
	    };
	    NgbInputDatepicker.prototype._writeModelValue = function (model) {
	        this._renderer.setElementProperty(this._elRef.nativeElement, 'value', this._parserFormatter.format(model));
	        if (this.isOpen()) {
	            this._cRef.instance.writeValue(model);
	            this._onTouched();
	        }
	    };
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', core_1.TemplateRef)
	    ], NgbInputDatepicker.prototype, "dayTemplate", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Number)
	    ], NgbInputDatepicker.prototype, "displayMonths", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Number)
	    ], NgbInputDatepicker.prototype, "firstDayOfWeek", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Function)
	    ], NgbInputDatepicker.prototype, "markDisabled", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Object)
	    ], NgbInputDatepicker.prototype, "minDate", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Object)
	    ], NgbInputDatepicker.prototype, "maxDate", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Object)
	    ], NgbInputDatepicker.prototype, "navigation", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Object)
	    ], NgbInputDatepicker.prototype, "outsideDays", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Boolean)
	    ], NgbInputDatepicker.prototype, "showWeekdays", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Boolean)
	    ], NgbInputDatepicker.prototype, "showWeekNumbers", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Object)
	    ], NgbInputDatepicker.prototype, "startDate", void 0);
	    __decorate([
	        core_1.Output(), 
	        __metadata('design:type', Object)
	    ], NgbInputDatepicker.prototype, "navigate", void 0);
	    NgbInputDatepicker = __decorate([
	        core_1.Directive({
	            selector: 'input[ngbDatepicker]',
	            exportAs: 'ngbDatepicker',
	            host: { '(change)': 'manualDateChange($event.target.value)', '(keyup.esc)': 'close()', '(blur)': 'onBlur()' },
	            providers: [NGB_DATEPICKER_VALUE_ACCESSOR]
	        }), 
	        __metadata('design:paramtypes', [ngb_date_parser_formatter_1.NgbDateParserFormatter, core_1.ElementRef, core_1.ViewContainerRef, core_1.Renderer, core_1.ComponentFactoryResolver, core_1.NgZone])
	    ], NgbInputDatepicker);
	    return NgbInputDatepicker;
	}());
	exports.NgbInputDatepicker = NgbInputDatepicker;
	//# sourceMappingURL=datepicker-input.js.map

	/***/ },
	/* 49 */
	/***/ function(module, exports, __webpack_require__) {

	"use strict";
	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var core_1 = __webpack_require__(0);
	var ngb_date_1 = __webpack_require__(3);
	var datepicker_i18n_1 = __webpack_require__(4);
	var NgbDatepickerMonthView = (function () {
	    function NgbDatepickerMonthView(i18n) {
	        this.i18n = i18n;
	        this.select = new core_1.EventEmitter();
	    }
	    NgbDatepickerMonthView.prototype.doSelect = function (day) {
	        if (!this.isDisabled(day) && !this.isCollapsed(day) && !this.isHidden(day)) {
	            this.select.emit(ngb_date_1.NgbDate.from(day.date));
	        }
	    };
	    NgbDatepickerMonthView.prototype.isDisabled = function (day) { return this.disabled || day.disabled; };
	    NgbDatepickerMonthView.prototype.isSelected = function (date) { return this.selectedDate && this.selectedDate.equals(date); };
	    NgbDatepickerMonthView.prototype.isCollapsed = function (day) { return this.outsideDays === 'collapsed' && this.month.number !== day.date.month; };
	    NgbDatepickerMonthView.prototype.isHidden = function (day) { return this.outsideDays === 'hidden' && this.month.number !== day.date.month; };
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', core_1.TemplateRef)
	    ], NgbDatepickerMonthView.prototype, "dayTemplate", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Boolean)
	    ], NgbDatepickerMonthView.prototype, "disabled", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Object)
	    ], NgbDatepickerMonthView.prototype, "month", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Object)
	    ], NgbDatepickerMonthView.prototype, "outsideDays", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', ngb_date_1.NgbDate)
	    ], NgbDatepickerMonthView.prototype, "selectedDate", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Object)
	    ], NgbDatepickerMonthView.prototype, "showWeekdays", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Object)
	    ], NgbDatepickerMonthView.prototype, "showWeekNumbers", void 0);
	    __decorate([
	        core_1.Output(), 
	        __metadata('design:type', Object)
	    ], NgbDatepickerMonthView.prototype, "select", void 0);
	    NgbDatepickerMonthView = __decorate([
	        core_1.Component({
	            selector: 'ngb-datepicker-month-view',
	            styles: ["\n    .weekday {\n    }\n    .weeknumber {\n    }\n    .day {\n      padding: 0;\n      height: 100%;\n      cursor: pointer;\n    }\n    .day.disabled, .day.hidden, .day.collapsed {\n      cursor: default;\n    }\n    :host/deep/.day.collapsed > * {\n      display: none;\n    }\n    :host/deep/.day.hidden > * {\n      visibility: hidden;\n    }\n  "],
	            template: "\n    <table>\n      <tr *ngIf=\"showWeekdays\">\n        <td *ngIf=\"showWeekNumbers\"></td>\n        <td *ngFor=\"let w of month.weekdays\" class=\"weekday text-xs-center font-weight-bold\">{{ i18n.getWeekdayName(w) }}</td>\n      </tr>\n      <tr *ngFor=\"let week of month.weeks\">\n        <td *ngIf=\"showWeekNumbers\" class=\"weeknumber small text-xs-center\">{{ week.number }}</td>\n        <td *ngFor=\"let day of week.days\" (click)=\"doSelect(day)\" class=\"day\" [class.disabled]=\"isDisabled(day)\"\n        [class.collapsed]=\"isCollapsed(day)\" [class.hidden]=\"isHidden(day)\">\n            <template [ngTemplateOutlet]=\"dayTemplate\"\n            [ngOutletContext]=\"{date: {year: day.date.year, month: day.date.month, day: day.date.day},\n              currentMonth: month.number,\n              disabled: isDisabled(day),\n              selected: isSelected(day.date)}\">\n            </template>\n        </td>\n      </tr>\n    </table>\n  "
	        }), 
	        __metadata('design:paramtypes', [datepicker_i18n_1.NgbDatepickerI18n])
	    ], NgbDatepickerMonthView);
	    return NgbDatepickerMonthView;
	}());
	exports.NgbDatepickerMonthView = NgbDatepickerMonthView;
	//# sourceMappingURL=datepicker-month-view.js.map

	/***/ },
	/* 50 */
	/***/ function(module, exports, __webpack_require__) {

	"use strict";
	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var core_1 = __webpack_require__(0);
	var ngb_date_1 = __webpack_require__(3);
	var util_1 = __webpack_require__(1);
	var datepicker_i18n_1 = __webpack_require__(4);
	var ngb_calendar_1 = __webpack_require__(6);
	var NgbDatepickerNavigationSelect = (function () {
	    function NgbDatepickerNavigationSelect(i18n, calendar) {
	        this.i18n = i18n;
	        this.calendar = calendar;
	        this.years = [];
	        this.select = new core_1.EventEmitter();
	        this.months = calendar.getMonths();
	    }
	    NgbDatepickerNavigationSelect.prototype.ngOnChanges = function (changes) {
	        if (changes['maxDate'] || changes['minDate']) {
	            this._generateYears();
	            this._generateMonths();
	        }
	        if (changes['date'] && changes['date'].currentValue.year !== changes['date'].previousValue.year) {
	            this._generateMonths();
	        }
	    };
	    NgbDatepickerNavigationSelect.prototype.changeMonth = function (month) { this.select.emit(new ngb_date_1.NgbDate(this.date.year, util_1.toInteger(month), 1)); };
	    NgbDatepickerNavigationSelect.prototype.changeYear = function (year) { this.select.emit(new ngb_date_1.NgbDate(util_1.toInteger(year), this.date.month, 1)); };
	    NgbDatepickerNavigationSelect.prototype._generateMonths = function () {
	        var _this = this;
	        this.months = this.calendar.getMonths();
	        if (this.date.year === this.minDate.year) {
	            var index = this.months.findIndex(function (month) { return month === _this.minDate.month; });
	            this.months = this.months.slice(index);
	        }
	        if (this.date.year === this.maxDate.year) {
	            var index = this.months.findIndex(function (month) { return month === _this.maxDate.month; });
	            this.months = this.months.slice(0, index + 1);
	        }
	    };
	    NgbDatepickerNavigationSelect.prototype._generateYears = function () {
	        var _this = this;
	        this.years = Array.from({ length: this.maxDate.year - this.minDate.year + 1 }, function (e, i) { return _this.minDate.year + i; });
	    };
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', ngb_date_1.NgbDate)
	    ], NgbDatepickerNavigationSelect.prototype, "date", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Boolean)
	    ], NgbDatepickerNavigationSelect.prototype, "disabled", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', ngb_date_1.NgbDate)
	    ], NgbDatepickerNavigationSelect.prototype, "maxDate", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', ngb_date_1.NgbDate)
	    ], NgbDatepickerNavigationSelect.prototype, "minDate", void 0);
	    __decorate([
	        core_1.Output(), 
	        __metadata('design:type', Object)
	    ], NgbDatepickerNavigationSelect.prototype, "select", void 0);
	    NgbDatepickerNavigationSelect = __decorate([
	        core_1.Component({
	            selector: 'ngb-datepicker-navigation-select',
	            styles: ["\n    select {\n      /* to align with btn-sm */\n      padding: 0.25rem 0.5rem;\n      font-size: 0.875rem;      \n      line-height: 1.25;\n      /* to cancel the custom height set by custom-select */\n      height: inherit;\n      width: 50%;\n    }\n  "],
	            template: "\n    <select [disabled]=\"disabled\" class=\"custom-select d-inline-block\" [value]=\"date.month\" (change)=\"changeMonth($event.target.value)\">\n      <option *ngFor=\"let m of months\" [value]=\"m\">{{ i18n.getMonthName(m) }}</option>\n    </select>" +
	                "<select [disabled]=\"disabled\" class=\"custom-select d-inline-block\" [value]=\"date.year\" (change)=\"changeYear($event.target.value)\">\n      <option *ngFor=\"let y of years\" [value]=\"y\">{{ y }}</option>\n    </select> \n  " // template needs to be formatted in a certain way so we don't add empty text nodes
	        }), 
	        __metadata('design:paramtypes', [datepicker_i18n_1.NgbDatepickerI18n, ngb_calendar_1.NgbCalendar])
	    ], NgbDatepickerNavigationSelect);
	    return NgbDatepickerNavigationSelect;
	}());
	exports.NgbDatepickerNavigationSelect = NgbDatepickerNavigationSelect;
	//# sourceMappingURL=datepicker-navigation-select.js.map

	/***/ },
	/* 51 */
	/***/ function(module, exports, __webpack_require__) {

	"use strict";
	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var core_1 = __webpack_require__(0);
	var datepicker_view_model_1 = __webpack_require__(53);
	var ngb_date_1 = __webpack_require__(3);
	var datepicker_i18n_1 = __webpack_require__(4);
	var ngb_calendar_1 = __webpack_require__(6);
	var NgbDatepickerNavigation = (function () {
	    function NgbDatepickerNavigation(i18n, _calendar) {
	        this.i18n = i18n;
	        this._calendar = _calendar;
	        this.navigation = datepicker_view_model_1.NavigationEvent;
	        this.navigate = new core_1.EventEmitter();
	        this.select = new core_1.EventEmitter();
	    }
	    NgbDatepickerNavigation.prototype.doNavigate = function (event) { this.navigate.emit(event); };
	    NgbDatepickerNavigation.prototype.nextDisabled = function () {
	        return this.disabled || (this.maxDate && this._calendar.getNext(this.date, 'm').after(this.maxDate));
	    };
	    NgbDatepickerNavigation.prototype.prevDisabled = function () {
	        var prevDate = this._calendar.getPrev(this.date, 'm');
	        return this.disabled || (this.minDate && prevDate.year <= this.minDate.year && prevDate.month < this.minDate.month);
	    };
	    NgbDatepickerNavigation.prototype.selectDate = function (date) { this.select.emit(date); };
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', ngb_date_1.NgbDate)
	    ], NgbDatepickerNavigation.prototype, "date", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Boolean)
	    ], NgbDatepickerNavigation.prototype, "disabled", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', ngb_date_1.NgbDate)
	    ], NgbDatepickerNavigation.prototype, "maxDate", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', ngb_date_1.NgbDate)
	    ], NgbDatepickerNavigation.prototype, "minDate", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Boolean)
	    ], NgbDatepickerNavigation.prototype, "showSelect", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Boolean)
	    ], NgbDatepickerNavigation.prototype, "showWeekNumbers", void 0);
	    __decorate([
	        core_1.Output(), 
	        __metadata('design:type', Object)
	    ], NgbDatepickerNavigation.prototype, "navigate", void 0);
	    __decorate([
	        core_1.Output(), 
	        __metadata('design:type', Object)
	    ], NgbDatepickerNavigation.prototype, "select", void 0);
	    NgbDatepickerNavigation = __decorate([
	        core_1.Component({
	            selector: 'ngb-datepicker-navigation',
	            styles: ["\n    .collapsed {\n        margin-bottom: -1.7rem;\n    }\n  "],
	            template: "\n    <table class=\"w-100\" [class.collapsed]=\"!showSelect\">\n      <tr>\n        <td class=\"text-sm-left\">\n          <button type=\"button\" (click)=\"doNavigate(navigation.PREV)\" class=\"btn btn-sm btn-secondary btn-inline\" \n            [disabled]=\"prevDisabled()\">&lt;</button>\n        </td>\n        \n        <td *ngIf=\"showSelect\">\n          <ngb-datepicker-navigation-select\n            [date]=\"date\"\n            [minDate]=\"minDate\"\n            [maxDate]=\"maxDate\"\n            [disabled] = \"disabled\"\n            (select)=\"selectDate($event)\">\n          </ngb-datepicker-navigation-select>\n        </td>        \n        \n        <div class=\"text-sm-right\">\n          <button type=\"button\" (click)=\"doNavigate(navigation.NEXT)\" class=\"next btn btn-sm btn-secondary btn-inline\" \n            [disabled]=\"nextDisabled()\">&gt;</button>\n        </div>\n      </tr>\n    </table>\n  "
	        }), 
	        __metadata('design:paramtypes', [datepicker_i18n_1.NgbDatepickerI18n, ngb_calendar_1.NgbCalendar])
	    ], NgbDatepickerNavigation);
	    return NgbDatepickerNavigation;
	}());
	exports.NgbDatepickerNavigation = NgbDatepickerNavigation;
	//# sourceMappingURL=datepicker-navigation.js.map

	/***/ },
	/* 52 */
	/***/ function(module, exports, __webpack_require__) {

	"use strict";
	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var ngb_calendar_1 = __webpack_require__(6);
	var ngb_date_1 = __webpack_require__(3);
	var core_1 = __webpack_require__(0);
	var NgbDatepickerService = (function () {
	    function NgbDatepickerService(_calendar) {
	        this._calendar = _calendar;
	    }
	    NgbDatepickerService.prototype.generateMonthViewModel = function (date, minDate, maxDate, firstDayOfWeek, markDisabled) {
	        var month = { firstDate: null, number: date.month, year: date.year, weeks: [], weekdays: [] };
	        date = this._getFirstViewDate(date, firstDayOfWeek);
	        // month has weeks
	        for (var w = 0; w < this._calendar.getWeeksPerMonth(); w++) {
	            var days = [];
	            // week has days
	            for (var d = 0; d < this._calendar.getDaysPerWeek(); d++) {
	                if (w === 0) {
	                    month.weekdays.push(this._calendar.getWeekday(date));
	                }
	                var newDate = new ngb_date_1.NgbDate(date.year, date.month, date.day);
	                var disabled = (minDate && newDate.before(minDate)) || (maxDate && newDate.after(maxDate));
	                if (!disabled && markDisabled) {
	                    disabled = markDisabled(newDate, { month: month.number, year: month.year });
	                }
	                // saving first date of the month
	                if (month.firstDate === null && date.month === month.number) {
	                    month.firstDate = newDate;
	                }
	                days.push({ date: newDate, disabled: disabled });
	                date = this._calendar.getNext(date);
	            }
	            month.weeks.push({ number: this._calendar.getWeekNumber(days.map(function (day) { return ngb_date_1.NgbDate.from(day.date); }), firstDayOfWeek), days: days });
	        }
	        return month;
	    };
	    NgbDatepickerService.prototype._getFirstViewDate = function (date, firstDayOfWeek) {
	        var _this = this;
	        var currentMonth = date.month;
	        var today = new ngb_date_1.NgbDate(date.year, date.month, date.day);
	        var yesterday = this._calendar.getPrev(today);
	        var firstDayOfCurrentMonthIsAlsoFirstDayOfWeek = function () { return today.month !== yesterday.month && firstDayOfWeek === _this._calendar.getWeekday(today); };
	        var reachedTheFirstDayOfTheLastWeekOfPreviousMonth = function () { return today.month !== currentMonth && firstDayOfWeek === _this._calendar.getWeekday(today); };
	        // going back in time
	        while (!reachedTheFirstDayOfTheLastWeekOfPreviousMonth() && !firstDayOfCurrentMonthIsAlsoFirstDayOfWeek()) {
	            today = new ngb_date_1.NgbDate(yesterday.year, yesterday.month, yesterday.day);
	            yesterday = this._calendar.getPrev(yesterday);
	        }
	        return today;
	    };
	    NgbDatepickerService = __decorate([
	        core_1.Injectable(), 
	        __metadata('design:paramtypes', [ngb_calendar_1.NgbCalendar])
	    ], NgbDatepickerService);
	    return NgbDatepickerService;
	}());
	exports.NgbDatepickerService = NgbDatepickerService;
	//# sourceMappingURL=datepicker-service.js.map

	/***/ },
	/* 53 */
	/***/ function(module, exports) {

	"use strict";
	"use strict";
	(function (NavigationEvent) {
	    NavigationEvent[NavigationEvent["PREV"] = 0] = "PREV";
	    NavigationEvent[NavigationEvent["NEXT"] = 1] = "NEXT";
	})(exports.NavigationEvent || (exports.NavigationEvent = {}));
	var NavigationEvent = exports.NavigationEvent;
	//# sourceMappingURL=datepicker-view-model.js.map

	/***/ },
	/* 54 */
	/***/ function(module, exports, __webpack_require__) {

	"use strict";
	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var core_1 = __webpack_require__(0);
	var dropdown_config_1 = __webpack_require__(31);
	/**
	 * Transforms a node into a dropdown.
	 */
	var NgbDropdown = (function () {
	    function NgbDropdown(config) {
	        /**
	         *  Defines whether or not the dropdown-menu is open initially.
	         */
	        this._open = false;
	        /**
	         *  An event fired when the dropdown is opened or closed.
	         *  Event's payload equals whether dropdown is open.
	         */
	        this.openChange = new core_1.EventEmitter();
	        this.up = config.up;
	        this.autoClose = config.autoClose;
	    }
	    /**
	     * Checks if the dropdown menu is open or not.
	     */
	    NgbDropdown.prototype.isOpen = function () { return this._open; };
	    /**
	     * Opens the dropdown menu of a given navbar or tabbed navigation.
	     */
	    NgbDropdown.prototype.open = function () {
	        if (!this._open) {
	            this._open = true;
	            this.openChange.emit(true);
	        }
	    };
	    /**
	     * Closes the dropdown menu of a given navbar or tabbed navigation.
	     */
	    NgbDropdown.prototype.close = function () {
	        if (this._open) {
	            this._open = false;
	            this.openChange.emit(false);
	        }
	    };
	    /**
	     * Toggles the dropdown menu of a given navbar or tabbed navigation.
	     */
	    NgbDropdown.prototype.toggle = function () {
	        if (this.isOpen()) {
	            this.close();
	        }
	        else {
	            this.open();
	        }
	    };
	    NgbDropdown.prototype.closeFromOutsideClick = function ($event) {
	        if (this.autoClose && !this._isEventFromToggle($event)) {
	            this.close();
	        }
	    };
	    NgbDropdown.prototype.closeFromOutsideEsc = function () {
	        if (this.autoClose) {
	            this.close();
	        }
	    };
	    Object.defineProperty(NgbDropdown.prototype, "toggleElement", {
	        /**
	         * @internal
	         */
	        set: function (toggleElement) { this._toggleElement = toggleElement; },
	        enumerable: true,
	        configurable: true
	    });
	    NgbDropdown.prototype._isEventFromToggle = function ($event) { return !!this._toggleElement && this._toggleElement.contains($event.target); };
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Boolean)
	    ], NgbDropdown.prototype, "up", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Boolean)
	    ], NgbDropdown.prototype, "autoClose", void 0);
	    __decorate([
	        core_1.Input('open'), 
	        __metadata('design:type', Object)
	    ], NgbDropdown.prototype, "_open", void 0);
	    __decorate([
	        core_1.Output(), 
	        __metadata('design:type', Object)
	    ], NgbDropdown.prototype, "openChange", void 0);
	    NgbDropdown = __decorate([
	        core_1.Directive({
	            selector: '[ngbDropdown]',
	            exportAs: 'ngbDropdown',
	            host: {
	                '[class.dropdown]': '!up',
	                '[class.dropup]': 'up',
	                '[class.open]': 'isOpen()',
	                '(keyup.esc)': 'closeFromOutsideEsc()',
	                '(document:click)': 'closeFromOutsideClick($event)'
	            }
	        }), 
	        __metadata('design:paramtypes', [dropdown_config_1.NgbDropdownConfig])
	    ], NgbDropdown);
	    return NgbDropdown;
	}());
	exports.NgbDropdown = NgbDropdown;
	/**
	 * Allows the dropdown to be toggled via click. This directive is optional.
	 */
	var NgbDropdownToggle = (function () {
	    function NgbDropdownToggle(dropdown, elementRef) {
	        this.dropdown = dropdown;
	        dropdown.toggleElement = elementRef.nativeElement;
	    }
	    NgbDropdownToggle.prototype.toggleOpen = function () { this.dropdown.toggle(); };
	    NgbDropdownToggle = __decorate([
	        core_1.Directive({
	            selector: '[ngbDropdownToggle]',
	            host: {
	                'class': 'dropdown-toggle',
	                'aria-haspopup': 'true',
	                '[attr.aria-expanded]': 'dropdown.isOpen()',
	                '(click)': 'toggleOpen()'
	            }
	        }), 
	        __metadata('design:paramtypes', [NgbDropdown, core_1.ElementRef])
	    ], NgbDropdownToggle);
	    return NgbDropdownToggle;
	}());
	exports.NgbDropdownToggle = NgbDropdownToggle;
	//# sourceMappingURL=dropdown.js.map

	/***/ },
	/* 55 */
	/***/ function(module, exports, __webpack_require__) {

	"use strict";
	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var core_1 = __webpack_require__(0);
	var NgbModalBackdrop = (function () {
	    function NgbModalBackdrop() {
	    }
	    NgbModalBackdrop = __decorate([
	        core_1.Component({ selector: 'ngb-modal-backdrop', template: '', host: { 'class': 'modal-backdrop fade in' } }), 
	        __metadata('design:paramtypes', [])
	    ], NgbModalBackdrop);
	    return NgbModalBackdrop;
	}());
	exports.NgbModalBackdrop = NgbModalBackdrop;
	//# sourceMappingURL=modal-backdrop.js.map

	/***/ },
	/* 56 */
	/***/ function(module, exports) {

	"use strict";
	"use strict";
	(function (ModalDismissReasons) {
	    ModalDismissReasons[ModalDismissReasons["BACKDROP_CLICK"] = 0] = "BACKDROP_CLICK";
	    ModalDismissReasons[ModalDismissReasons["ESC"] = 1] = "ESC";
	})(exports.ModalDismissReasons || (exports.ModalDismissReasons = {}));
	var ModalDismissReasons = exports.ModalDismissReasons;
	//# sourceMappingURL=modal-dismiss-reasons.js.map

	/***/ },
	/* 57 */
	/***/ function(module, exports, __webpack_require__) {

	"use strict";
	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var core_1 = __webpack_require__(0);
	var popup_1 = __webpack_require__(7);
	/**
	 * A reference to an active (currently opened) modal. Instances of this class
	 * can be injected into components passed as modal content.
	 */
	var NgbActiveModal = (function () {
	    function NgbActiveModal() {
	    }
	    /**
	     * Can be used to close a modal, passing an optional result.
	     */
	    NgbActiveModal.prototype.close = function (result) { };
	    /**
	     * Can be used to dismiss a modal, passing an optional reason.
	     */
	    NgbActiveModal.prototype.dismiss = function (reason) { };
	    NgbActiveModal = __decorate([
	        core_1.Injectable(), 
	        __metadata('design:paramtypes', [])
	    ], NgbActiveModal);
	    return NgbActiveModal;
	}());
	exports.NgbActiveModal = NgbActiveModal;
	/**
	 * A reference to a newly opened modal.
	 */
	var NgbModalRef = (function () {
	    function NgbModalRef(_viewContainerRef, _windowCmptRef, _contentRef, _backdropCmptRef) {
	        var _this = this;
	        this._viewContainerRef = _viewContainerRef;
	        this._windowCmptRef = _windowCmptRef;
	        this._contentRef = _contentRef;
	        this._backdropCmptRef = _backdropCmptRef;
	        _windowCmptRef.instance.dismissEvent.subscribe(function (reason) { _this.dismiss(reason); });
	        this.result = new Promise(function (resolve, reject) {
	            _this._resolve = resolve;
	            _this._reject = reject;
	        });
	        this.result.then(null, function () { });
	    }
	    Object.defineProperty(NgbModalRef.prototype, "componentInstance", {
	        /**
	         * The instance of component used as modal's content.
	         * Undefined when a TemplateRef is used as modal's content.
	         */
	        get: function () {
	            if (this._contentRef.componentRef) {
	                return this._contentRef.componentRef.instance;
	            }
	        },
	        // only needed to keep TS1.8 compatibility
	        set: function (instance) { },
	        enumerable: true,
	        configurable: true
	    });
	    /**
	     * Can be used to close a modal, passing an optional result.
	     */
	    NgbModalRef.prototype.close = function (result) {
	        if (this._windowCmptRef) {
	            this._resolve(result);
	            this._removeModalElements();
	        }
	    };
	    /**
	     * Can be used to dismiss a modal, passing an optional reason.
	     */
	    NgbModalRef.prototype.dismiss = function (reason) {
	        if (this._windowCmptRef) {
	            this._reject(reason);
	            this._removeModalElements();
	        }
	    };
	    NgbModalRef.prototype._removeModalElements = function () {
	        this._viewContainerRef.remove(this._viewContainerRef.indexOf(this._windowCmptRef.hostView));
	        if (this._backdropCmptRef) {
	            this._viewContainerRef.remove(this._viewContainerRef.indexOf(this._backdropCmptRef.hostView));
	        }
	        if (this._contentRef && this._contentRef.viewRef) {
	            this._viewContainerRef.remove(this._viewContainerRef.indexOf(this._contentRef.viewRef));
	        }
	        this._windowCmptRef = null;
	        this._backdropCmptRef = null;
	        this._contentRef = null;
	    };
	    NgbModalRef = __decorate([
	        core_1.Injectable(), 
	        __metadata('design:paramtypes', [core_1.ViewContainerRef, core_1.ComponentRef, popup_1.ContentRef, core_1.ComponentRef])
	    ], NgbModalRef);
	    return NgbModalRef;
	}());
	exports.NgbModalRef = NgbModalRef;
	//# sourceMappingURL=modal-ref.js.map

	/***/ },
	/* 58 */
	/***/ function(module, exports, __webpack_require__) {

	"use strict";
	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var core_1 = __webpack_require__(0);
	var modal_dismiss_reasons_1 = __webpack_require__(56);
	var NgbModalWindow = (function () {
	    function NgbModalWindow(_elRef, _renderer) {
	        this._elRef = _elRef;
	        this._renderer = _renderer;
	        this.backdrop = true;
	        this.keyboard = true;
	        this.dismissEvent = new core_1.EventEmitter();
	    }
	    NgbModalWindow.prototype.backdropClick = function ($event) {
	        if (this.backdrop === true && this._elRef.nativeElement === $event.target) {
	            this.dismiss(modal_dismiss_reasons_1.ModalDismissReasons.BACKDROP_CLICK);
	        }
	    };
	    NgbModalWindow.prototype.escKey = function ($event) {
	        if (this.keyboard && !$event.defaultPrevented) {
	            this.dismiss(modal_dismiss_reasons_1.ModalDismissReasons.ESC);
	        }
	    };
	    NgbModalWindow.prototype.dismiss = function (reason) { this.dismissEvent.emit(reason); };
	    NgbModalWindow.prototype.ngOnInit = function () {
	        this._elWithFocus = document.activeElement;
	        this._renderer.setElementClass(document.body, 'modal-open', true);
	    };
	    NgbModalWindow.prototype.ngAfterViewInit = function () {
	        if (!this._elRef.nativeElement.contains(document.activeElement)) {
	            this._renderer.invokeElementMethod(this._elRef.nativeElement, 'focus', []);
	        }
	    };
	    NgbModalWindow.prototype.ngOnDestroy = function () {
	        if (this._elWithFocus && document.body.contains(this._elWithFocus)) {
	            this._renderer.invokeElementMethod(this._elWithFocus, 'focus', []);
	        }
	        else {
	            this._renderer.invokeElementMethod(document.body, 'focus', []);
	        }
	        this._elWithFocus = null;
	        this._renderer.setElementClass(document.body, 'modal-open', false);
	    };
	    __decorate([
	        // element that is focused prior to modal opening
	        core_1.Input(), 
	        __metadata('design:type', Object)
	    ], NgbModalWindow.prototype, "backdrop", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Object)
	    ], NgbModalWindow.prototype, "keyboard", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', String)
	    ], NgbModalWindow.prototype, "size", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', String)
	    ], NgbModalWindow.prototype, "windowClass", void 0);
	    __decorate([
	        core_1.Output('dismiss'), 
	        __metadata('design:type', Object)
	    ], NgbModalWindow.prototype, "dismissEvent", void 0);
	    NgbModalWindow = __decorate([
	        core_1.Component({
	            selector: 'ngb-modal-window',
	            host: {
	                '[class]': '"modal fade in" + (windowClass ? " " + windowClass : "")',
	                'role': 'dialog',
	                'tabindex': '-1',
	                'style': 'display: block;',
	                '(keyup.esc)': 'escKey($event)',
	                '(click)': 'backdropClick($event)'
	            },
	            template: "\n    <div [class]=\"'modal-dialog' + (size ? ' modal-' + size : '')\" role=\"document\">\n        <div class=\"modal-content\"><ng-content></ng-content></div>\n    </div>\n    "
	        }), 
	        __metadata('design:paramtypes', [core_1.ElementRef, core_1.Renderer])
	    ], NgbModalWindow);
	    return NgbModalWindow;
	}());
	exports.NgbModalWindow = NgbModalWindow;
	//# sourceMappingURL=modal-window.js.map

	/***/ },
	/* 59 */
	/***/ function(module, exports, __webpack_require__) {

	"use strict";
	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var core_1 = __webpack_require__(0);
	var modal_stack_1 = __webpack_require__(32);
	/**
	 * A service to open modal windows. Creating a modal is straightforward: create a template and pass it as an argument to
	 * the "open" method!
	 */
	var NgbModal = (function () {
	    function NgbModal(_moduleCFR, _injector, _modalStack) {
	        this._moduleCFR = _moduleCFR;
	        this._injector = _injector;
	        this._modalStack = _modalStack;
	    }
	    /**
	     * Opens a new modal window with the specified content and using supplied options. Content can be provided
	     * as a TemplateRef or a component type. If you pass a component type as content than instances of those
	     * components can be injected with an instance of the NgbActiveModal class. You can use methods on the
	     * NgbActiveModal class to close / dismiss modals from "inside" of a component.
	     */
	    NgbModal.prototype.open = function (content, options) {
	        if (options === void 0) { options = {}; }
	        return this._modalStack.open(this._moduleCFR, this._injector, content, options);
	    };
	    NgbModal = __decorate([
	        core_1.Injectable(), 
	        __metadata('design:paramtypes', [core_1.ComponentFactoryResolver, core_1.Injector, modal_stack_1.NgbModalStack])
	    ], NgbModal);
	    return NgbModal;
	}());
	exports.NgbModal = NgbModal;
	//# sourceMappingURL=modal.js.map

	/***/ },
	/* 60 */
	/***/ function(module, exports, __webpack_require__) {

	"use strict";
	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var core_1 = __webpack_require__(0);
	var util_1 = __webpack_require__(1);
	var pagination_config_1 = __webpack_require__(33);
	/**
	 * A directive that will take care of visualising a pagination bar and enable / disable buttons correctly!
	 */
	var NgbPagination = (function () {
	    function NgbPagination(config) {
	        this.pageCount = 0;
	        this.pages = [];
	        /**
	         *  Current page.
	         */
	        this.page = 0;
	        /**
	         *  An event fired when the page is changed.
	         *  Event's payload equals to the newly selected page.
	         */
	        this.pageChange = new core_1.EventEmitter(true);
	        this.boundaryLinks = config.boundaryLinks;
	        this.directionLinks = config.directionLinks;
	        this.ellipses = config.ellipses;
	        this.maxSize = config.maxSize;
	        this.pageSize = config.pageSize;
	        this.rotate = config.rotate;
	        this.size = config.size;
	    }
	    NgbPagination.prototype.hasPrevious = function () { return this.page > 1; };
	    NgbPagination.prototype.hasNext = function () { return this.page < this.pageCount; };
	    NgbPagination.prototype.selectPage = function (pageNumber) { this._updatePages(pageNumber); };
	    NgbPagination.prototype.ngOnChanges = function (changes) { this._updatePages(this.page); };
	    /**
	     * @internal
	     */
	    NgbPagination.prototype.isEllipsis = function (pageNumber) { return pageNumber === -1; };
	    /**
	     * Appends ellipses and first/last page number to the displayed pages
	     */
	    NgbPagination.prototype._applyEllipses = function (start, end) {
	        if (this.ellipses) {
	            if (start > 0) {
	                this.pages.unshift(-1);
	                this.pages.unshift(1);
	            }
	            if (end < this.pageCount) {
	                this.pages.push(-1);
	                this.pages.push(this.pageCount);
	            }
	        }
	    };
	    /**
	     * Rotates page numbers based on maxSize items visible.
	     * Currently selected page stays in the middle:
	     *
	     * Ex. for selected page = 6:
	     * [5,*6*,7] for maxSize = 3
	     * [4,5,*6*,7] for maxSize = 4
	     */
	    NgbPagination.prototype._applyRotation = function () {
	        var start = 0;
	        var end = this.pageCount;
	        var leftOffset = Math.floor(this.maxSize / 2);
	        var rightOffset = this.maxSize % 2 === 0 ? leftOffset - 1 : leftOffset;
	        if (this.page <= leftOffset) {
	            // very beginning, no rotation -> [0..maxSize]
	            end = this.maxSize;
	        }
	        else if (this.pageCount - this.page < leftOffset) {
	            // very end, no rotation -> [len-maxSize..len]
	            start = this.pageCount - this.maxSize;
	        }
	        else {
	            // rotate
	            start = this.page - leftOffset - 1;
	            end = this.page + rightOffset;
	        }
	        return [start, end];
	    };
	    /**
	     * Paginates page numbers based on maxSize items per page
	     */
	    NgbPagination.prototype._applyPagination = function () {
	        var page = Math.ceil(this.page / this.maxSize) - 1;
	        var start = page * this.maxSize;
	        var end = start + this.maxSize;
	        return [start, end];
	    };
	    NgbPagination.prototype._setPageInRange = function (newPageNo) {
	        var prevPageNo = this.page;
	        this.page = util_1.getValueInRange(newPageNo, this.pageCount, 1);
	        if (this.page !== prevPageNo) {
	            this.pageChange.emit(this.page);
	        }
	    };
	    NgbPagination.prototype._updatePages = function (newPage) {
	        this.pageCount = Math.ceil(this.collectionSize / this.pageSize);
	        if (!util_1.isNumber(this.pageCount)) {
	            this.pageCount = 0;
	        }
	        // fill-in model needed to render pages
	        this.pages.length = 0;
	        for (var i = 1; i <= this.pageCount; i++) {
	            this.pages.push(i);
	        }
	        // set page within 1..max range
	        this._setPageInRange(newPage);
	        // apply maxSize if necessary
	        if (this.maxSize > 0 && this.pageCount > this.maxSize) {
	            var start = 0;
	            var end = this.pageCount;
	            // either paginating or rotating page numbers
	            if (this.rotate) {
	                _a = this._applyRotation(), start = _a[0], end = _a[1];
	            }
	            else {
	                _b = this._applyPagination(), start = _b[0], end = _b[1];
	            }
	            this.pages = this.pages.slice(start, end);
	            // adding ellipses
	            this._applyEllipses(start, end);
	        }
	        var _a, _b;
	    };
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Boolean)
	    ], NgbPagination.prototype, "boundaryLinks", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Boolean)
	    ], NgbPagination.prototype, "directionLinks", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Boolean)
	    ], NgbPagination.prototype, "ellipses", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Boolean)
	    ], NgbPagination.prototype, "rotate", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Number)
	    ], NgbPagination.prototype, "collectionSize", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Number)
	    ], NgbPagination.prototype, "maxSize", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Object)
	    ], NgbPagination.prototype, "page", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Number)
	    ], NgbPagination.prototype, "pageSize", void 0);
	    __decorate([
	        core_1.Output(), 
	        __metadata('design:type', Object)
	    ], NgbPagination.prototype, "pageChange", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Object)
	    ], NgbPagination.prototype, "size", void 0);
	    NgbPagination = __decorate([
	        core_1.Component({
	            selector: 'ngb-pagination',
	            changeDetection: core_1.ChangeDetectionStrategy.OnPush,
	            template: "\n    <nav>\n      <ul [class]=\"'pagination' + (size ? ' pagination-' + size : '')\">\n        <li *ngIf=\"boundaryLinks\" class=\"page-item\" [class.disabled]=\"!hasPrevious()\">\n          <a aria-label=\"First\" class=\"page-link\" href (click)=\"!!selectPage(1)\">\n            <span aria-hidden=\"true\">&laquo;&laquo;</span>\n            <span class=\"sr-only\">First</span>\n          </a>                \n        </li>\n      \n        <li *ngIf=\"directionLinks\" class=\"page-item\" [class.disabled]=\"!hasPrevious()\">\n          <a aria-label=\"Previous\" class=\"page-link\" href (click)=\"!!selectPage(page-1)\">\n            <span aria-hidden=\"true\">&laquo;</span>\n            <span class=\"sr-only\">Previous</span>\n          </a>\n        </li>\n\n        <li *ngFor=\"let pageNumber of pages\" class=\"page-item\" [class.active]=\"pageNumber === page\" \n          [class.disabled]=\"isEllipsis(pageNumber)\">\n          <a *ngIf=\"isEllipsis(pageNumber)\" class=\"page-link\">...</a>\n          <a *ngIf=\"!isEllipsis(pageNumber)\" class=\"page-link\" href (click)=\"!!selectPage(pageNumber)\">{{pageNumber}}</a>\n        </li>\n\n        <li *ngIf=\"directionLinks\" class=\"page-item\" [class.disabled]=\"!hasNext()\">\n          <a aria-label=\"Next\" class=\"page-link\" href (click)=\"!!selectPage(page+1)\">\n            <span aria-hidden=\"true\">&raquo;</span>\n            <span class=\"sr-only\">Next</span>\n          </a>\n        </li>\n        \n        <li *ngIf=\"boundaryLinks\" class=\"page-item\" [class.disabled]=\"!hasNext()\">\n          <a aria-label=\"Last\" class=\"page-link\" href (click)=\"!!selectPage(pageCount)\">\n            <span aria-hidden=\"true\">&raquo;&raquo;</span>\n            <span class=\"sr-only\">Last</span>\n          </a>                \n        </li>        \n      </ul>\n    </nav>\n  "
	        }), 
	        __metadata('design:paramtypes', [pagination_config_1.NgbPaginationConfig])
	    ], NgbPagination);
	    return NgbPagination;
	}());
	exports.NgbPagination = NgbPagination;
	//# sourceMappingURL=pagination.js.map

	/***/ },
	/* 61 */
	/***/ function(module, exports, __webpack_require__) {

	"use strict";
	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var core_1 = __webpack_require__(0);
	var triggers_1 = __webpack_require__(68);
	var positioning_1 = __webpack_require__(8);
	var popup_1 = __webpack_require__(7);
	var popover_config_1 = __webpack_require__(34);
	var NgbPopoverWindow = (function () {
	    function NgbPopoverWindow() {
	        this.placement = 'top';
	    }
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Object)
	    ], NgbPopoverWindow.prototype, "placement", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', String)
	    ], NgbPopoverWindow.prototype, "title", void 0);
	    NgbPopoverWindow = __decorate([
	        core_1.Component({
	            selector: 'ngb-popover-window',
	            changeDetection: core_1.ChangeDetectionStrategy.OnPush,
	            host: { '[class]': '"popover in popover-" + placement', 'role': 'tooltip' },
	            // TODO remove the div.popover-arrow, which is there only to maintain compatibility with bootstrap alpha.4
	            template: "\n    <div class=\"popover-arrow\"></div>\n    <h3 class=\"popover-title\">{{title}}</h3><div class=\"popover-content\"><ng-content></ng-content></div>\n    "
	        }), 
	        __metadata('design:paramtypes', [])
	    ], NgbPopoverWindow);
	    return NgbPopoverWindow;
	}());
	exports.NgbPopoverWindow = NgbPopoverWindow;
	/**
	 * A lightweight, extensible directive for fancy popover creation.
	 */
	var NgbPopover = (function () {
	    function NgbPopover(_elementRef, _renderer, injector, componentFactoryResolver, viewContainerRef, config, ngZone) {
	        var _this = this;
	        this._elementRef = _elementRef;
	        this._renderer = _renderer;
	        /**
	         * Emits an event when the popover is shown
	         */
	        this.shown = new core_1.EventEmitter();
	        /**
	         * Emits an event when the popover is hidden
	         */
	        this.hidden = new core_1.EventEmitter();
	        this.placement = config.placement;
	        this.triggers = config.triggers;
	        this.container = config.container;
	        this._popupService = new popup_1.PopupService(NgbPopoverWindow, injector, viewContainerRef, _renderer, componentFactoryResolver);
	        this._zoneSubscription = ngZone.onStable.subscribe(function () {
	            if (_this._windowRef) {
	                positioning_1.positionElements(_this._elementRef.nativeElement, _this._windowRef.location.nativeElement, _this.placement, _this.container === 'body');
	            }
	        });
	    }
	    /**
	     * Opens an element’s popover. This is considered a “manual” triggering of the popover.
	     */
	    NgbPopover.prototype.open = function () {
	        if (!this._windowRef) {
	            this._windowRef = this._popupService.open(this.ngbPopover);
	            this._windowRef.instance.placement = this.placement;
	            this._windowRef.instance.title = this.popoverTitle;
	            if (this.container === 'body') {
	                window.document.querySelector(this.container).appendChild(this._windowRef.location.nativeElement);
	            }
	            // we need to manually invoke change detection since events registered via
	            // Renderer::listen() are not picked up by change detection with the OnPush strategy
	            this._windowRef.changeDetectorRef.markForCheck();
	            this.shown.emit();
	        }
	    };
	    /**
	     * Closes an element’s popover. This is considered a “manual” triggering of the popover.
	     */
	    NgbPopover.prototype.close = function () {
	        if (this._windowRef) {
	            this._popupService.close();
	            this._windowRef = null;
	            this.hidden.emit();
	        }
	    };
	    /**
	     * Toggles an element’s popover. This is considered a “manual” triggering of the popover.
	     */
	    NgbPopover.prototype.toggle = function () {
	        if (this._windowRef) {
	            this.close();
	        }
	        else {
	            this.open();
	        }
	    };
	    /**
	     * Returns whether or not the popover is currently being shown
	     */
	    NgbPopover.prototype.isOpen = function () { return this._windowRef != null; };
	    NgbPopover.prototype.ngOnInit = function () {
	        this._unregisterListenersFn = triggers_1.listenToTriggers(this._renderer, this._elementRef.nativeElement, this.triggers, this.open.bind(this), this.close.bind(this), this.toggle.bind(this));
	    };
	    NgbPopover.prototype.ngOnDestroy = function () {
	        this.close();
	        this._unregisterListenersFn();
	        this._zoneSubscription.unsubscribe();
	    };
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Object)
	    ], NgbPopover.prototype, "ngbPopover", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', String)
	    ], NgbPopover.prototype, "popoverTitle", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Object)
	    ], NgbPopover.prototype, "placement", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', String)
	    ], NgbPopover.prototype, "triggers", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', String)
	    ], NgbPopover.prototype, "container", void 0);
	    __decorate([
	        core_1.Output(), 
	        __metadata('design:type', Object)
	    ], NgbPopover.prototype, "shown", void 0);
	    __decorate([
	        core_1.Output(), 
	        __metadata('design:type', Object)
	    ], NgbPopover.prototype, "hidden", void 0);
	    NgbPopover = __decorate([
	        core_1.Directive({ selector: '[ngbPopover]', exportAs: 'ngbPopover' }), 
	        __metadata('design:paramtypes', [core_1.ElementRef, core_1.Renderer, core_1.Injector, core_1.ComponentFactoryResolver, core_1.ViewContainerRef, popover_config_1.NgbPopoverConfig, core_1.NgZone])
	    ], NgbPopover);
	    return NgbPopover;
	}());
	exports.NgbPopover = NgbPopover;
	//# sourceMappingURL=popover.js.map

	/***/ },
	/* 62 */
	/***/ function(module, exports, __webpack_require__) {

	"use strict";
	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var core_1 = __webpack_require__(0);
	var util_1 = __webpack_require__(1);
	var progressbar_config_1 = __webpack_require__(35);
	/**
	 * Directive that can be used to provide feedback on the progress of a workflow or an action.
	 */
	var NgbProgressbar = (function () {
	    function NgbProgressbar(config) {
	        /**
	         * Current value to be displayed in the progressbar. Should be smaller or equal to "max" value.
	         */
	        this.value = 0;
	        this.max = config.max;
	        this.animated = config.animated;
	        this.striped = config.striped;
	        this.type = config.type;
	    }
	    NgbProgressbar.prototype.getValue = function () { return util_1.getValueInRange(this.value, this.max); };
	    NgbProgressbar.prototype.getPercentValue = function () { return 100 * this.getValue() / this.max; };
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Number)
	    ], NgbProgressbar.prototype, "max", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Boolean)
	    ], NgbProgressbar.prototype, "animated", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Boolean)
	    ], NgbProgressbar.prototype, "striped", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', String)
	    ], NgbProgressbar.prototype, "type", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Object)
	    ], NgbProgressbar.prototype, "value", void 0);
	    NgbProgressbar = __decorate([
	        core_1.Component({
	            selector: 'ngb-progressbar',
	            changeDetection: core_1.ChangeDetectionStrategy.OnPush,
	            template: "\n    <progress class=\"progress{{type ? ' progress-' + type : ''}}{{animated ? ' progress-animated' : ''}}{{striped ? \n    ' progress-striped' : ''}}\" \n      [max]=\"max\" [value]=\"getValue()\">\n      <div class=\"progress\">\n        <span class=\"progress-bar\" [style.width.%]=\"getPercentValue()\"><ng-content></ng-content></span>\n      </div>\n    </progress>\n  "
	        }), 
	        __metadata('design:paramtypes', [progressbar_config_1.NgbProgressbarConfig])
	    ], NgbProgressbar);
	    return NgbProgressbar;
	}());
	exports.NgbProgressbar = NgbProgressbar;
	//# sourceMappingURL=progressbar.js.map

	/***/ },
	/* 63 */
	/***/ function(module, exports, __webpack_require__) {

	"use strict";
	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var core_1 = __webpack_require__(0);
	var rating_config_1 = __webpack_require__(36);
	var util_1 = __webpack_require__(1);
	var Key;
	(function (Key) {
	    Key[Key["End"] = 35] = "End";
	    Key[Key["Home"] = 36] = "Home";
	    Key[Key["ArrowLeft"] = 37] = "ArrowLeft";
	    Key[Key["ArrowUp"] = 38] = "ArrowUp";
	    Key[Key["ArrowRight"] = 39] = "ArrowRight";
	    Key[Key["ArrowDown"] = 40] = "ArrowDown";
	})(Key || (Key = {}));
	/**
	 * Rating directive that will take care of visualising a star rating bar.
	 */
	var NgbRating = (function () {
	    function NgbRating(config) {
	        this.range = [];
	        /**
	         * An event fired when a user is hovering over a given rating.
	         * Event's payload equals to the rating being hovered over.
	         */
	        this.hover = new core_1.EventEmitter();
	        /**
	         * An event fired when a user stops hovering over a given rating.
	         * Event's payload equals to the rating of the last item being hovered over.
	         */
	        this.leave = new core_1.EventEmitter();
	        /**
	         * An event fired when a user selects a new rating.
	         * Event's payload equals to the newly selected rating.
	         */
	        this.rateChange = new core_1.EventEmitter();
	        this.max = config.max;
	        this.readonly = config.readonly;
	    }
	    NgbRating.prototype.ariaValueText = function () { return this.rate + " out of " + this.max; };
	    NgbRating.prototype.enter = function (value) {
	        if (!this.readonly) {
	            this.rate = value;
	        }
	        this.hover.emit(value);
	    };
	    NgbRating.prototype.handleKeyDown = function (event) {
	        if (Key[util_1.toString(event.which)]) {
	            event.preventDefault();
	            switch (event.which) {
	                case Key.ArrowDown:
	                case Key.ArrowLeft:
	                    this.update(this.rate - 1);
	                    break;
	                case Key.ArrowUp:
	                case Key.ArrowRight:
	                    this.update(this.rate + 1);
	                    break;
	                case Key.Home:
	                    this.update(0);
	                    break;
	                case Key.End:
	                    this.update(this.max);
	                    break;
	            }
	        }
	    };
	    NgbRating.prototype.getFillValue = function (index) {
	        var diff = this.rate - index;
	        if (diff >= 1) {
	            return 100;
	        }
	        if (diff < 1 && diff > 0) {
	            return Number.parseInt((diff * 100).toFixed(2));
	        }
	        return 0;
	    };
	    NgbRating.prototype.ngOnChanges = function (changes) {
	        if (changes['rate']) {
	            this._oldRate = this.rate;
	        }
	    };
	    NgbRating.prototype.ngOnInit = function () { this.range = Array.from({ length: this.max }, function (v, k) { return k + 1; }); };
	    NgbRating.prototype.reset = function () {
	        this.leave.emit(this.rate);
	        this.rate = this._oldRate;
	    };
	    NgbRating.prototype.update = function (value) {
	        if (!this.readonly) {
	            var newRate = util_1.getValueInRange(value, this.max, 0);
	            if (this._oldRate !== newRate) {
	                this._oldRate = newRate;
	                this.rate = newRate;
	                this.rateChange.emit(newRate);
	            }
	        }
	    };
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Number)
	    ], NgbRating.prototype, "max", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Number)
	    ], NgbRating.prototype, "rate", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Boolean)
	    ], NgbRating.prototype, "readonly", void 0);
	    __decorate([
	        core_1.Input(),
	        core_1.ContentChild(core_1.TemplateRef), 
	        __metadata('design:type', core_1.TemplateRef)
	    ], NgbRating.prototype, "starTemplate", void 0);
	    __decorate([
	        core_1.Output(), 
	        __metadata('design:type', Object)
	    ], NgbRating.prototype, "hover", void 0);
	    __decorate([
	        core_1.Output(), 
	        __metadata('design:type', Object)
	    ], NgbRating.prototype, "leave", void 0);
	    __decorate([
	        core_1.Output(), 
	        __metadata('design:type', Object)
	    ], NgbRating.prototype, "rateChange", void 0);
	    NgbRating = __decorate([
	        core_1.Component({
	            selector: 'ngb-rating',
	            changeDetection: core_1.ChangeDetectionStrategy.OnPush,
	            host: { '(keydown)': 'handleKeyDown($event)' },
	            template: "\n    <template #t let-fill=\"fill\">{{ fill === 100 ? '&#9733;' : '&#9734;' }}</template>\n    <span tabindex=\"0\" (mouseleave)=\"reset()\" role=\"slider\" aria-valuemin=\"0\"\n      [attr.aria-valuemax]=\"max\" [attr.aria-valuenow]=\"rate\" [attr.aria-valuetext]=\"ariaValueText()\">\n      <template ngFor [ngForOf]=\"range\" let-index=\"index\">\n        <span class=\"sr-only\">({{ index < rate ? '*' : ' ' }})</span>\n        <span (mouseenter)=\"enter(index + 1)\" (click)=\"update(index + 1)\" \n        [style.cursor]=\"readonly ? 'default' : 'pointer'\">\n          <template [ngTemplateOutlet]=\"starTemplate || t\" [ngOutletContext]=\"{fill: getFillValue(index)}\"></template>\n        </span>\n      </template>\n    </span>\n  "
	        }), 
	        __metadata('design:paramtypes', [rating_config_1.NgbRatingConfig])
	    ], NgbRating);
	    return NgbRating;
	}());
	exports.NgbRating = NgbRating;
	//# sourceMappingURL=rating.js.map

	/***/ },
	/* 64 */
	/***/ function(module, exports, __webpack_require__) {

	"use strict";
	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var core_1 = __webpack_require__(0);
	var tabset_config_1 = __webpack_require__(37);
	var nextId = 0;
	/**
	 * This directive should be used to wrap tab titles that need to contain HTML markup or other directives.
	 */
	var NgbTabTitle = (function () {
	    function NgbTabTitle(templateRef) {
	        this.templateRef = templateRef;
	    }
	    NgbTabTitle = __decorate([
	        core_1.Directive({ selector: 'template[ngbTabTitle]' }), 
	        __metadata('design:paramtypes', [core_1.TemplateRef])
	    ], NgbTabTitle);
	    return NgbTabTitle;
	}());
	exports.NgbTabTitle = NgbTabTitle;
	/**
	 * This directive must be used to wrap content to be displayed in a tab.
	 */
	var NgbTabContent = (function () {
	    function NgbTabContent(templateRef) {
	        this.templateRef = templateRef;
	    }
	    NgbTabContent = __decorate([
	        core_1.Directive({ selector: 'template[ngbTabContent]' }), 
	        __metadata('design:paramtypes', [core_1.TemplateRef])
	    ], NgbTabContent);
	    return NgbTabContent;
	}());
	exports.NgbTabContent = NgbTabContent;
	/**
	 * A directive representing an individual tab.
	 */
	var NgbTab = (function () {
	    function NgbTab() {
	        /**
	         * Unique tab identifier. Must be unique for the entire document for proper accessibility support.
	         */
	        this.id = "ngb-tab-" + nextId++;
	        /**
	         * Allows toggling disabled state of a given state. Disabled tabs can't be selected.
	         */
	        this.disabled = false;
	    }
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', String)
	    ], NgbTab.prototype, "id", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', String)
	    ], NgbTab.prototype, "title", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Object)
	    ], NgbTab.prototype, "disabled", void 0);
	    __decorate([
	        core_1.ContentChild(NgbTabContent), 
	        __metadata('design:type', NgbTabContent)
	    ], NgbTab.prototype, "contentTpl", void 0);
	    __decorate([
	        core_1.ContentChild(NgbTabTitle), 
	        __metadata('design:type', NgbTabTitle)
	    ], NgbTab.prototype, "titleTpl", void 0);
	    NgbTab = __decorate([
	        core_1.Directive({ selector: 'ngb-tab' }), 
	        __metadata('design:paramtypes', [])
	    ], NgbTab);
	    return NgbTab;
	}());
	exports.NgbTab = NgbTab;
	/**
	 * A component that makes it easy to create tabbed interface.
	 */
	var NgbTabset = (function () {
	    function NgbTabset(config) {
	        /**
	         * A tab change event fired right before the tab selection happens. See NgbTabChangeEvent for payload details
	         */
	        this.tabChange = new core_1.EventEmitter();
	        this.type = config.type;
	    }
	    /**
	     * Selects the tab with the given id and shows its associated pane.
	     * Any other tab that was previously selected becomes unselected and its associated pane is hidden.
	     */
	    NgbTabset.prototype.select = function (tabId) {
	        var selectedTab = this._getTabById(tabId);
	        if (selectedTab && !selectedTab.disabled && this.activeId !== selectedTab.id) {
	            var defaultPrevented_1 = false;
	            this.tabChange.emit({ activeId: this.activeId, nextId: selectedTab.id, preventDefault: function () { defaultPrevented_1 = true; } });
	            if (!defaultPrevented_1) {
	                this.activeId = selectedTab.id;
	            }
	        }
	    };
	    NgbTabset.prototype.ngAfterContentChecked = function () {
	        // auto-correct activeId that might have been set incorrectly as input
	        var activeTab = this._getTabById(this.activeId);
	        this.activeId = activeTab ? activeTab.id : (this.tabs.length ? this.tabs.first.id : null);
	    };
	    NgbTabset.prototype._getTabById = function (id) {
	        var tabsWithId = this.tabs.filter(function (tab) { return tab.id === id; });
	        return tabsWithId.length ? tabsWithId[0] : null;
	    };
	    __decorate([
	        core_1.ContentChildren(NgbTab), 
	        __metadata('design:type', core_1.QueryList)
	    ], NgbTabset.prototype, "tabs", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', String)
	    ], NgbTabset.prototype, "activeId", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Object)
	    ], NgbTabset.prototype, "type", void 0);
	    __decorate([
	        core_1.Output(), 
	        __metadata('design:type', Object)
	    ], NgbTabset.prototype, "tabChange", void 0);
	    NgbTabset = __decorate([
	        core_1.Component({
	            selector: 'ngb-tabset',
	            exportAs: 'ngbTabset',
	            template: "\n    <ul [class]=\"'nav nav-' + type\" role=\"tablist\">\n      <li class=\"nav-item\" *ngFor=\"let tab of tabs\">\n        <a [id]=\"tab.id\" class=\"nav-link\" [class.active]=\"tab.id === activeId\" [class.disabled]=\"tab.disabled\" \n          href (click)=\"!!select(tab.id)\">\n          {{tab.title}}<template [ngTemplateOutlet]=\"tab.titleTpl?.templateRef\"></template>\n        </a>\n      </li>\n    </ul>\n    <div class=\"tab-content\">\n      <template ngFor let-tab [ngForOf]=\"tabs\">\n        <div class=\"tab-pane active\" *ngIf=\"tab.id === activeId\" role=\"tabpanel\" [attr.aria-labelledby]=\"tab.id\">\n          <template [ngTemplateOutlet]=\"tab.contentTpl.templateRef\"></template>\n        </div>\n      </template>\n    </div>\n  "
	        }), 
	        __metadata('design:paramtypes', [tabset_config_1.NgbTabsetConfig])
	    ], NgbTabset);
	    return NgbTabset;
	}());
	exports.NgbTabset = NgbTabset;
	//# sourceMappingURL=tabset.js.map

	/***/ },
	/* 65 */
	/***/ function(module, exports, __webpack_require__) {

	"use strict";
	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var core_1 = __webpack_require__(0);
	var forms_1 = __webpack_require__(5);
	var util_1 = __webpack_require__(1);
	var ngb_time_1 = __webpack_require__(70);
	var timepicker_config_1 = __webpack_require__(38);
	var NGB_TIMEPICKER_VALUE_ACCESSOR = {
	    provide: forms_1.NG_VALUE_ACCESSOR,
	    useExisting: core_1.forwardRef(function () { return NgbTimepicker; }),
	    multi: true
	};
	/**
	 * A lightweight & configurable timepicker directive.
	 */
	var NgbTimepicker = (function () {
	    function NgbTimepicker(config) {
	        this.onChange = function (_) { };
	        this.onTouched = function () { };
	        this.meridian = config.meridian;
	        this.spinners = config.spinners;
	        this.seconds = config.seconds;
	        this.hourStep = config.hourStep;
	        this.minuteStep = config.minuteStep;
	        this.secondStep = config.secondStep;
	        this.disabled = config.disabled;
	        this.readonlyInputs = config.readonlyInputs;
	    }
	    NgbTimepicker.prototype.writeValue = function (value) {
	        this.model = value ? new ngb_time_1.NgbTime(value.hour, value.minute, value.second) : new ngb_time_1.NgbTime();
	        if (!this.seconds && (!value || !util_1.isNumber(value.second))) {
	            this.model.second = 0;
	        }
	    };
	    NgbTimepicker.prototype.registerOnChange = function (fn) { this.onChange = fn; };
	    NgbTimepicker.prototype.registerOnTouched = function (fn) { this.onTouched = fn; };
	    NgbTimepicker.prototype.setDisabledState = function (isDisabled) { this.disabled = isDisabled; };
	    NgbTimepicker.prototype.changeHour = function (step) {
	        this.model.changeHour(step);
	        this.propagateModelChange();
	    };
	    NgbTimepicker.prototype.changeMinute = function (step) {
	        this.model.changeMinute(step);
	        this.propagateModelChange();
	    };
	    NgbTimepicker.prototype.changeSecond = function (step) {
	        this.model.changeSecond(step);
	        this.propagateModelChange();
	    };
	    NgbTimepicker.prototype.updateHour = function (newVal) {
	        this.model.updateHour(util_1.toInteger(newVal));
	        this.propagateModelChange();
	    };
	    NgbTimepicker.prototype.updateMinute = function (newVal) {
	        this.model.updateMinute(util_1.toInteger(newVal));
	        this.propagateModelChange();
	    };
	    NgbTimepicker.prototype.updateSecond = function (newVal) {
	        this.model.updateSecond(util_1.toInteger(newVal));
	        this.propagateModelChange();
	    };
	    NgbTimepicker.prototype.toggleMeridian = function () {
	        if (this.meridian) {
	            this.changeHour(12);
	        }
	    };
	    NgbTimepicker.prototype.formatHour = function (value) {
	        if (util_1.isNumber(value)) {
	            if (this.meridian) {
	                return util_1.padNumber(value % 12 === 0 ? 12 : value % 12);
	            }
	            else {
	                return util_1.padNumber(value % 24);
	            }
	        }
	        else {
	            return util_1.padNumber(NaN);
	        }
	    };
	    NgbTimepicker.prototype.formatMinSec = function (value) { return util_1.padNumber(value); };
	    NgbTimepicker.prototype.ngOnChanges = function (changes) {
	        if (changes['seconds'] && !this.seconds && this.model && !util_1.isNumber(this.model.second)) {
	            this.model.second = 0;
	            this.propagateModelChange(false);
	        }
	    };
	    NgbTimepicker.prototype.propagateModelChange = function (touched) {
	        if (touched === void 0) { touched = true; }
	        if (touched) {
	            this.onTouched();
	        }
	        if (this.model.isValid(this.seconds)) {
	            this.onChange({ hour: this.model.hour, minute: this.model.minute, second: this.model.second });
	        }
	        else {
	            this.onChange(null);
	        }
	    };
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Boolean)
	    ], NgbTimepicker.prototype, "meridian", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Boolean)
	    ], NgbTimepicker.prototype, "spinners", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Boolean)
	    ], NgbTimepicker.prototype, "seconds", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Number)
	    ], NgbTimepicker.prototype, "hourStep", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Number)
	    ], NgbTimepicker.prototype, "minuteStep", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Number)
	    ], NgbTimepicker.prototype, "secondStep", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Boolean)
	    ], NgbTimepicker.prototype, "readonlyInputs", void 0);
	    NgbTimepicker = __decorate([
	        core_1.Component({
	            selector: 'ngb-timepicker',
	            styles: ["\n    .chevron::before {\n      border-style: solid;\n      border-width: 0.29em 0.29em 0 0;\n      content: '';\n      display: inline-block;\n      height: 0.69em;\n      left: 0.05em;\n      position: relative;\n      top: 0.15em;\n      transform: rotate(-45deg);\n      -webkit-transform: rotate(-45deg);\n      -ms-transform: rotate(-45deg);\n      vertical-align: middle;\n      width: 0.71em;\n    }\n    \n    .chevron.bottom:before {\n      top: -.3em;\n      -webkit-transform: rotate(135deg);\n      -ms-transform: rotate(135deg);\n      transform: rotate(135deg);\n    }\n    \n    .btn-link {\n      outline: 0;\n    }\n\n    .btn-link.disabled {\n      cursor: not-allowed;\n      opacity: .65;\n    }\n  "],
	            template: "\n     <fieldset [disabled]=\"disabled\" [class.disabled]=\"disabled\">\n      <table>\n        <tr *ngIf=\"spinners\">\n          <td class=\"text-xs-center\">\n            <button type=\"button\" class=\"btn-link\" (click)=\"changeHour(hourStep)\"\n              [disabled]=\"disabled\" [class.disabled]=\"disabled\">\n              <span class=\"chevron\"></span>\n            </button>\n          </td>\n          <td>&nbsp;</td>\n          <td class=\"text-xs-center\">\n            <button type=\"button\" class=\"btn-link\" (click)=\"changeMinute(minuteStep)\"\n              [disabled]=\"disabled\" [class.disabled]=\"disabled\">\n                <span class=\"chevron\"></span>\n            </button>\n          </td>\n          <template [ngIf]=\"seconds\">\n            <td>&nbsp;</td>\n            <td class=\"text-xs-center\">\n              <button type=\"button\" class=\"btn-link\" (click)=\"changeSecond(secondStep)\"\n                [disabled]=\"disabled\" [class.disabled]=\"disabled\">\n                <span class=\"chevron\"></span>\n              </button>\n            </td>\n          </template>\n          <template [ngIf]=\"meridian\">\n            <td>&nbsp;</td>\n            <td>&nbsp;</td>\n          </template>\n        </tr>\n        <tr>\n          <td>\n            <input type=\"text\" class=\"form-control\" maxlength=\"2\" size=\"2\" placeholder=\"HH\"\n              [value]=\"formatHour(model?.hour)\" (change)=\"updateHour($event.target.value)\" \n              [readonly]=\"readonlyInputs\" [disabled]=\"disabled\">\n          </td>\n          <td>&nbsp;:&nbsp;</td>\n          <td>\n            <input type=\"text\" class=\"form-control\" maxlength=\"2\" size=\"2\" placeholder=\"MM\"\n              [value]=\"formatMinSec(model?.minute)\" (change)=\"updateMinute($event.target.value)\" \n              [readonly]=\"readonlyInputs\" [disabled]=\"disabled\">\n          </td>\n          <template [ngIf]=\"seconds\">\n            <td>&nbsp;:&nbsp;</td>\n            <input type=\"text\" class=\"form-control\" maxlength=\"2\" size=\"2\" placeholder=\"SS\"\n              [value]=\"formatMinSec(model?.second)\" (change)=\"updateSecond($event.target.value)\" \n              [readonly]=\"readonlyInputs\" [disabled]=\"disabled\">\n          </template>\n          <template [ngIf]=\"meridian\">\n            <td>&nbsp;&nbsp;</td>\n            <td>\n              <button type=\"button\" class=\"btn btn-outline-primary\" (click)=\"toggleMeridian()\">{{model.hour >= 12 ? 'PM' : 'AM'}}</button>\n            </td>\n          </template>\n        </tr>\n        <tr *ngIf=\"spinners\">\n          <td class=\"text-xs-center\">\n            <button type=\"button\" class=\"btn-link\" (click)=\"changeHour(-hourStep)\" \n              [disabled]=\"disabled\" [class.disabled]=\"disabled\">\n              <span class=\"chevron bottom\"></span>\n            </button>\n          </td>\n          <td>&nbsp;</td>\n          <td class=\"text-xs-center\">\n            <button type=\"button\" class=\"btn-link\" (click)=\"changeMinute(-minuteStep)\"\n              [disabled]=\"disabled\" [class.disabled]=\"disabled\">\n              <span class=\"chevron bottom\"></span>\n            </button>\n          </td>\n          <template [ngIf]=\"seconds\">\n            <td>&nbsp;</td>\n            <td class=\"text-xs-center\">\n              <button type=\"button\" class=\"btn-link\" (click)=\"changeSecond(-secondStep)\"\n                [disabled]=\"disabled\" [class.disabled]=\"disabled\">\n                <span class=\"chevron bottom\"></span>\n              </button>\n            </td>\n          </template>\n          <template [ngIf]=\"meridian\">\n            <td>&nbsp;</td>\n            <td>&nbsp;</td>\n          </template>\n        </tr>\n      </table>\n    </fieldset>\n  ",
	            providers: [NGB_TIMEPICKER_VALUE_ACCESSOR]
	        }), 
	        __metadata('design:paramtypes', [timepicker_config_1.NgbTimepickerConfig])
	    ], NgbTimepicker);
	    return NgbTimepicker;
	}());
	exports.NgbTimepicker = NgbTimepicker;
	//# sourceMappingURL=timepicker.js.map

	/***/ },
	/* 66 */
	/***/ function(module, exports, __webpack_require__) {

	"use strict";
	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var core_1 = __webpack_require__(0);
	var triggers_1 = __webpack_require__(68);
	var positioning_1 = __webpack_require__(8);
	var popup_1 = __webpack_require__(7);
	var tooltip_config_1 = __webpack_require__(39);
	var NgbTooltipWindow = (function () {
	    function NgbTooltipWindow() {
	        this.placement = 'top';
	    }
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Object)
	    ], NgbTooltipWindow.prototype, "placement", void 0);
	    NgbTooltipWindow = __decorate([
	        core_1.Component({
	            selector: 'ngb-tooltip-window',
	            changeDetection: core_1.ChangeDetectionStrategy.OnPush,
	            host: { '[class]': '"tooltip in tooltip-" + placement', 'role': 'tooltip' },
	            // TODO remove the div.tooltip-arrow, which is there only to maintain compatibility with bootstrap alpha.4
	            template: "\n    <div class=\"tooltip-arrow\"></div>\n    <div class=\"tooltip-inner\"><ng-content></ng-content></div>\n    "
	        }), 
	        __metadata('design:paramtypes', [])
	    ], NgbTooltipWindow);
	    return NgbTooltipWindow;
	}());
	exports.NgbTooltipWindow = NgbTooltipWindow;
	/**
	 * A lightweight, extensible directive for fancy tooltip creation.
	 */
	var NgbTooltip = (function () {
	    function NgbTooltip(_elementRef, _renderer, injector, componentFactoryResolver, viewContainerRef, config, ngZone) {
	        var _this = this;
	        this._elementRef = _elementRef;
	        this._renderer = _renderer;
	        /**
	       * Emits an event when the tooltip is shown
	       */
	        this.shown = new core_1.EventEmitter();
	        /**
	         * Emits an event when the tooltip is hidden
	         */
	        this.hidden = new core_1.EventEmitter();
	        this.placement = config.placement;
	        this.triggers = config.triggers;
	        this.container = config.container;
	        this._popupService = new popup_1.PopupService(NgbTooltipWindow, injector, viewContainerRef, _renderer, componentFactoryResolver);
	        this._zoneSubscription = ngZone.onStable.subscribe(function () {
	            if (_this._windowRef) {
	                positioning_1.positionElements(_this._elementRef.nativeElement, _this._windowRef.location.nativeElement, _this.placement, _this.container === 'body');
	            }
	        });
	    }
	    Object.defineProperty(NgbTooltip.prototype, "ngbTooltip", {
	        get: function () { return this._ngbTooltip; },
	        /**
	         * Content to be displayed as tooltip. If falsy, the tooltip won't open.
	         */
	        set: function (value) {
	            this._ngbTooltip = value;
	            if (!value && this._windowRef) {
	                this.close();
	            }
	        },
	        enumerable: true,
	        configurable: true
	    });
	    /**
	     * Opens an element’s tooltip. This is considered a “manual” triggering of the tooltip.
	     */
	    NgbTooltip.prototype.open = function () {
	        if (!this._windowRef && this._ngbTooltip) {
	            this._windowRef = this._popupService.open(this._ngbTooltip);
	            this._windowRef.instance.placement = this.placement;
	            if (this.container === 'body') {
	                window.document.querySelector(this.container).appendChild(this._windowRef.location.nativeElement);
	            }
	            // we need to manually invoke change detection since events registered via
	            // Renderer::listen() - to be determined if this is a bug in the Angular 2
	            this._windowRef.changeDetectorRef.markForCheck();
	            this.shown.emit();
	        }
	    };
	    /**
	     * Closes an element’s tooltip. This is considered a “manual” triggering of the tooltip.
	     */
	    NgbTooltip.prototype.close = function () {
	        if (this._windowRef != null) {
	            this._popupService.close();
	            this._windowRef = null;
	            this.hidden.emit();
	        }
	    };
	    /**
	     * Toggles an element’s tooltip. This is considered a “manual” triggering of the tooltip.
	     */
	    NgbTooltip.prototype.toggle = function () {
	        if (this._windowRef) {
	            this.close();
	        }
	        else {
	            this.open();
	        }
	    };
	    /**
	     * Returns whether or not the tooltip is currently being shown
	     */
	    NgbTooltip.prototype.isOpen = function () { return this._windowRef != null; };
	    NgbTooltip.prototype.ngOnInit = function () {
	        this._unregisterListenersFn = triggers_1.listenToTriggers(this._renderer, this._elementRef.nativeElement, this.triggers, this.open.bind(this), this.close.bind(this), this.toggle.bind(this));
	    };
	    NgbTooltip.prototype.ngOnDestroy = function () {
	        this.close();
	        this._unregisterListenersFn();
	        this._zoneSubscription.unsubscribe();
	    };
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Object)
	    ], NgbTooltip.prototype, "placement", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', String)
	    ], NgbTooltip.prototype, "triggers", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', String)
	    ], NgbTooltip.prototype, "container", void 0);
	    __decorate([
	        core_1.Output(), 
	        __metadata('design:type', Object)
	    ], NgbTooltip.prototype, "shown", void 0);
	    __decorate([
	        core_1.Output(), 
	        __metadata('design:type', Object)
	    ], NgbTooltip.prototype, "hidden", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Object), 
	        __metadata('design:paramtypes', [Object])
	    ], NgbTooltip.prototype, "ngbTooltip", null);
	    NgbTooltip = __decorate([
	        core_1.Directive({ selector: '[ngbTooltip]', exportAs: 'ngbTooltip' }), 
	        __metadata('design:paramtypes', [core_1.ElementRef, core_1.Renderer, core_1.Injector, core_1.ComponentFactoryResolver, core_1.ViewContainerRef, tooltip_config_1.NgbTooltipConfig, core_1.NgZone])
	    ], NgbTooltip);
	    return NgbTooltip;
	}());
	exports.NgbTooltip = NgbTooltip;
	//# sourceMappingURL=tooltip.js.map

	/***/ },
	/* 67 */
	/***/ function(module, exports, __webpack_require__) {

	"use strict";
	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var core_1 = __webpack_require__(0);
	var util_1 = __webpack_require__(1);
	var NgbHighlight = (function () {
	    function NgbHighlight() {
	        this.highlightClass = 'ngb-highlight';
	    }
	    NgbHighlight.prototype.ngOnChanges = function (changes) {
	        var resultStr = util_1.toString(this.result);
	        var resultLC = resultStr.toLowerCase();
	        var termLC = util_1.toString(this.term).toLowerCase();
	        var currentIdx = 0;
	        if (termLC.length > 0) {
	            this.parts = resultLC.split(new RegExp("(" + util_1.regExpEscape(termLC) + ")")).map(function (part) {
	                var originalPart = resultStr.substr(currentIdx, part.length);
	                currentIdx += part.length;
	                return originalPart;
	            });
	        }
	        else {
	            this.parts = [resultStr];
	        }
	    };
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Object)
	    ], NgbHighlight.prototype, "highlightClass", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', String)
	    ], NgbHighlight.prototype, "result", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', String)
	    ], NgbHighlight.prototype, "term", void 0);
	    NgbHighlight = __decorate([
	        core_1.Component({
	            selector: 'ngb-highlight',
	            changeDetection: core_1.ChangeDetectionStrategy.OnPush,
	            template: "<template ngFor [ngForOf]=\"parts\" let-part let-isOdd=\"odd\">" +
	                "<span *ngIf=\"isOdd\" class=\"{{highlightClass}}\">{{part}}</span><template [ngIf]=\"!isOdd\">{{part}}</template>" +
	                "</template>",
	            styles: ["\n    .ngb-highlight {\n      font-weight: bold;\n    }\n  "]
	        }), 
	        __metadata('design:paramtypes', [])
	    ], NgbHighlight);
	    return NgbHighlight;
	}());
	exports.NgbHighlight = NgbHighlight;
	//# sourceMappingURL=highlight.js.map

	/***/ },
	/* 68 */
	/***/ function(module, exports) {

	"use strict";
	"use strict";
	var Trigger = (function () {
	    function Trigger(open, close) {
	        this.open = open;
	        this.close = close;
	        if (!close) {
	            this.close = open;
	        }
	    }
	    Trigger.prototype.isManual = function () { return this.open === 'manual' || this.close === 'manual'; };
	    return Trigger;
	}());
	exports.Trigger = Trigger;
	var DEFAULT_ALIASES = {
	    hover: ['mouseenter', 'mouseleave']
	};
	function parseTriggers(triggers, aliases) {
	    if (aliases === void 0) { aliases = DEFAULT_ALIASES; }
	    var trimmedTriggers = (triggers || '').trim();
	    if (trimmedTriggers.length === 0) {
	        return [];
	    }
	    var parsedTriggers = trimmedTriggers.split(/\s+/).map(function (trigger) { return trigger.split(':'); }).map(function (triggerPair) {
	        var alias = aliases[triggerPair[0]] || triggerPair;
	        return new Trigger(alias[0], alias[1]);
	    });
	    var manualTriggers = parsedTriggers.filter(function (triggerPair) { return triggerPair.isManual(); });
	    if (manualTriggers.length > 1) {
	        throw 'Triggers parse error: only one manual trigger is allowed';
	    }
	    if (manualTriggers.length === 1 && parsedTriggers.length > 1) {
	        throw 'Triggers parse error: manual trigger can\'t be mixed with other triggers';
	    }
	    return parsedTriggers;
	}
	exports.parseTriggers = parseTriggers;
	var noopFn = function () { };
	function listenToTriggers(renderer, nativeElement, triggers, openFn, closeFn, toggleFn) {
	    var parsedTriggers = parseTriggers(triggers);
	    var listeners = [];
	    if (parsedTriggers.length === 1 && parsedTriggers[0].isManual()) {
	        return noopFn;
	    }
	    parsedTriggers.forEach(function (trigger) {
	        if (trigger.open === trigger.close) {
	            listeners.push(renderer.listen(nativeElement, trigger.open, toggleFn));
	        }
	        else {
	            listeners.push(renderer.listen(nativeElement, trigger.open, openFn), renderer.listen(nativeElement, trigger.close, closeFn));
	        }
	    });
	    return function () { listeners.forEach(function (unsubscribeFn) { return unsubscribeFn(); }); };
	}
	exports.listenToTriggers = listenToTriggers;
	//# sourceMappingURL=triggers.js.map

	/***/ },
	/* 69 */
	/***/ function(module, exports, __webpack_require__) {

	"use strict";
	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var core_1 = __webpack_require__(0);
	var util_1 = __webpack_require__(1);
	var popup_1 = __webpack_require__(7);
	var modal_backdrop_1 = __webpack_require__(55);
	var modal_window_1 = __webpack_require__(58);
	var modal_stack_1 = __webpack_require__(32);
	var modal_ref_1 = __webpack_require__(57);
	var NgbModalContainer = (function () {
	    function NgbModalContainer(_injector, _renderer, _viewContainerRef, _componentFactoryResolver, ngbModalStack) {
	        this._injector = _injector;
	        this._renderer = _renderer;
	        this._viewContainerRef = _viewContainerRef;
	        this._componentFactoryResolver = _componentFactoryResolver;
	        this._backdropFactory = _componentFactoryResolver.resolveComponentFactory(modal_backdrop_1.NgbModalBackdrop);
	        this._windowFactory = _componentFactoryResolver.resolveComponentFactory(modal_window_1.NgbModalWindow);
	        ngbModalStack.registerContainer(this);
	    }
	    NgbModalContainer.prototype.open = function (moduleCFR, contentInjector, content, options) {
	        var activeModal = new modal_ref_1.NgbActiveModal();
	        var contentRef = this._getContentRef(moduleCFR, contentInjector, content, activeModal);
	        var windowCmptRef;
	        var backdropCmptRef;
	        var ngbModalRef;
	        if (options.backdrop !== false) {
	            backdropCmptRef = this._viewContainerRef.createComponent(this._backdropFactory, 0, this._injector);
	        }
	        windowCmptRef = this._viewContainerRef.createComponent(this._windowFactory, this._viewContainerRef.length - 1, this._injector, contentRef.nodes);
	        ngbModalRef = new modal_ref_1.NgbModalRef(this._viewContainerRef, windowCmptRef, contentRef, backdropCmptRef);
	        activeModal.close = function (result) { ngbModalRef.close(result); };
	        activeModal.dismiss = function (reason) { ngbModalRef.dismiss(reason); };
	        this._applyWindowOptions(windowCmptRef.instance, options);
	        return ngbModalRef;
	    };
	    NgbModalContainer.prototype._applyWindowOptions = function (windowInstance, options) {
	        ['backdrop', 'keyboard', 'size', 'windowClass'].forEach(function (optionName) {
	            if (util_1.isDefined(options[optionName])) {
	                windowInstance[optionName] = options[optionName];
	            }
	        });
	    };
	    NgbModalContainer.prototype._getContentRef = function (moduleCFR, contentInjector, content, context) {
	        if (!content) {
	            return new popup_1.ContentRef([]);
	        }
	        else if (content instanceof core_1.TemplateRef) {
	            var viewRef = this._viewContainerRef.createEmbeddedView(content, context);
	            return new popup_1.ContentRef([viewRef.rootNodes], viewRef);
	        }
	        else if (util_1.isString(content)) {
	            return new popup_1.ContentRef([[this._renderer.createText(null, "" + content)]]);
	        }
	        else {
	            var contentCmptFactory = moduleCFR.resolveComponentFactory(content);
	            var modalContentInjector = core_1.ReflectiveInjector.resolveAndCreate([{ provide: modal_ref_1.NgbActiveModal, useValue: context }], contentInjector);
	            var componentRef = this._viewContainerRef.createComponent(contentCmptFactory, 0, modalContentInjector);
	            return new popup_1.ContentRef([[componentRef.location.nativeElement]], componentRef.hostView, componentRef);
	        }
	    };
	    NgbModalContainer = __decorate([
	        core_1.Directive({ selector: 'template[ngbModalContainer]' }), 
	        __metadata('design:paramtypes', [core_1.Injector, core_1.Renderer, core_1.ViewContainerRef, core_1.ComponentFactoryResolver, modal_stack_1.NgbModalStack])
	    ], NgbModalContainer);
	    return NgbModalContainer;
	}());
	exports.NgbModalContainer = NgbModalContainer;
	//# sourceMappingURL=modal-container.js.map

	/***/ },
	/* 70 */
	/***/ function(module, exports, __webpack_require__) {

	"use strict";
	"use strict";
	var util_1 = __webpack_require__(1);
	var NgbTime = (function () {
	    function NgbTime(hour, minute, second) {
	        this.hour = util_1.toInteger(hour);
	        this.minute = util_1.toInteger(minute);
	        this.second = util_1.toInteger(second);
	    }
	    NgbTime.prototype.changeHour = function (step) {
	        if (step === void 0) { step = 1; }
	        this.updateHour((isNaN(this.hour) ? 0 : this.hour) + step);
	    };
	    NgbTime.prototype.updateHour = function (hour) {
	        if (util_1.isNumber(hour)) {
	            this.hour = (hour < 0 ? 24 + hour : hour) % 24;
	        }
	        else {
	            this.hour = NaN;
	        }
	    };
	    NgbTime.prototype.changeMinute = function (step) {
	        if (step === void 0) { step = 1; }
	        this.updateMinute((isNaN(this.minute) ? 0 : this.minute) + step);
	    };
	    NgbTime.prototype.updateMinute = function (minute) {
	        if (util_1.isNumber(minute)) {
	            this.minute = minute % 60 < 0 ? 60 + minute % 60 : minute % 60;
	            this.changeHour(Math.floor(minute / 60));
	        }
	        else {
	            this.minute = NaN;
	        }
	    };
	    NgbTime.prototype.changeSecond = function (step) {
	        if (step === void 0) { step = 1; }
	        this.updateSecond((isNaN(this.second) ? 0 : this.second) + step);
	    };
	    NgbTime.prototype.updateSecond = function (second) {
	        if (util_1.isNumber(second)) {
	            this.second = second < 0 ? 60 + second % 60 : second % 60;
	            this.changeMinute(Math.floor(second / 60));
	        }
	        else {
	            this.second = NaN;
	        }
	    };
	    NgbTime.prototype.isValid = function (checkSecs) {
	        if (checkSecs === void 0) { checkSecs = true; }
	        return util_1.isNumber(this.hour) && util_1.isNumber(this.minute) && (checkSecs ? util_1.isNumber(this.second) : true);
	    };
	    NgbTime.prototype.toString = function () { return (this.hour || 0) + ":" + (this.minute || 0) + ":" + (this.second || 0); };
	    return NgbTime;
	}());
	exports.NgbTime = NgbTime;
	//# sourceMappingURL=ngb-time.js.map

	/***/ },
	/* 71 */
	/***/ function(module, exports, __webpack_require__) {

	"use strict";
	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var core_1 = __webpack_require__(0);
	var forms_1 = __webpack_require__(5);
	var Observable_1 = __webpack_require__(75);
	__webpack_require__(74);
	__webpack_require__(72);
	__webpack_require__(73);
	var positioning_1 = __webpack_require__(8);
	var typeahead_window_1 = __webpack_require__(41);
	var popup_1 = __webpack_require__(7);
	var util_1 = __webpack_require__(1);
	var typeahead_config_1 = __webpack_require__(40);
	var Key;
	(function (Key) {
	    Key[Key["Tab"] = 9] = "Tab";
	    Key[Key["Enter"] = 13] = "Enter";
	    Key[Key["Escape"] = 27] = "Escape";
	    Key[Key["ArrowUp"] = 38] = "ArrowUp";
	    Key[Key["ArrowDown"] = 40] = "ArrowDown";
	})(Key || (Key = {}));
	var NGB_TYPEAHEAD_VALUE_ACCESSOR = {
	    provide: forms_1.NG_VALUE_ACCESSOR,
	    useExisting: core_1.forwardRef(function () { return NgbTypeahead; }),
	    multi: true
	};
	/**
	 * NgbTypeahead directive provides a simple way of creating powerful typeaheads from any text input
	 */
	var NgbTypeahead = (function () {
	    function NgbTypeahead(_elementRef, _viewContainerRef, _renderer, _injector, componentFactoryResolver, config, ngZone) {
	        var _this = this;
	        this._elementRef = _elementRef;
	        this._viewContainerRef = _viewContainerRef;
	        this._renderer = _renderer;
	        this._injector = _injector;
	        /**
	         * An event emitted when a match is selected. Event payload is of type NgbTypeaheadSelectItemEvent.
	         */
	        this.selectItem = new core_1.EventEmitter();
	        this._onTouched = function () { };
	        this._onChange = function (_) { };
	        this.editable = config.editable;
	        this.focusFirst = config.focusFirst;
	        this.showHint = config.showHint;
	        this._valueChanges = Observable_1.Observable.fromEvent(_elementRef.nativeElement, 'input', function ($event) { return $event.target.value; });
	        this._popupService = new popup_1.PopupService(typeahead_window_1.NgbTypeaheadWindow, _injector, _viewContainerRef, _renderer, componentFactoryResolver);
	        this._zoneSubscription = ngZone.onStable.subscribe(function () {
	            if (_this._windowRef) {
	                positioning_1.positionElements(_this._elementRef.nativeElement, _this._windowRef.location.nativeElement, 'bottom-left');
	            }
	        });
	    }
	    NgbTypeahead.prototype.ngOnInit = function () {
	        var _this = this;
	        this._subscription = this._subscribeToUserInput(this._valueChanges
	            .do(function (value) {
	            _this._userInput = value;
	            if (_this.editable) {
	                _this._onChange(value);
	            }
	        })
	            .let(this.ngbTypeahead)
	            .do(function (_) {
	            if (!_this.editable) {
	                _this._onChange(undefined);
	            }
	        }));
	    };
	    NgbTypeahead.prototype.ngOnDestroy = function () {
	        this._unsubscribeFromUserInput();
	        this._zoneSubscription.unsubscribe();
	    };
	    NgbTypeahead.prototype.registerOnChange = function (fn) { this._onChange = fn; };
	    NgbTypeahead.prototype.registerOnTouched = function (fn) { this._onTouched = fn; };
	    NgbTypeahead.prototype.writeValue = function (value) { this._writeInputValue(this._formatItemForInput(value)); };
	    NgbTypeahead.prototype.setDisabledState = function (isDisabled) {
	        this._renderer.setElementProperty(this._elementRef.nativeElement, 'disabled', isDisabled);
	    };
	    NgbTypeahead.prototype.dismissPopup = function () {
	        if (this.isPopupOpen()) {
	            this._closePopup();
	            this._writeInputValue(this._userInput);
	        }
	    };
	    NgbTypeahead.prototype.isPopupOpen = function () { return this._windowRef != null; };
	    NgbTypeahead.prototype.handleBlur = function () { this._onTouched(); };
	    NgbTypeahead.prototype.handleKeyDown = function (event) {
	        if (!this._windowRef) {
	            return;
	        }
	        if (Key[util_1.toString(event.which)]) {
	            switch (event.which) {
	                case Key.ArrowDown:
	                    event.preventDefault();
	                    this._windowRef.instance.next();
	                    this._showHint();
	                    break;
	                case Key.ArrowUp:
	                    event.preventDefault();
	                    this._windowRef.instance.prev();
	                    this._showHint();
	                    break;
	                case Key.Enter:
	                case Key.Tab:
	                    var result = this._windowRef.instance.getActive();
	                    if (util_1.isDefined(result)) {
	                        event.preventDefault();
	                        event.stopPropagation();
	                        this._selectResult(result);
	                    }
	                    this._closePopup();
	                    break;
	                case Key.Escape:
	                    event.preventDefault();
	                    this.dismissPopup();
	                    break;
	            }
	        }
	    };
	    NgbTypeahead.prototype._openPopup = function () {
	        var _this = this;
	        if (!this._windowRef) {
	            this._windowRef = this._popupService.open();
	            this._windowRef.instance.selectEvent.subscribe(function (result) { return _this._selectResultClosePopup(result); });
	        }
	    };
	    NgbTypeahead.prototype._closePopup = function () {
	        this._popupService.close();
	        this._windowRef = null;
	    };
	    NgbTypeahead.prototype._selectResult = function (result) {
	        var defaultPrevented = false;
	        this.selectItem.emit({ item: result, preventDefault: function () { defaultPrevented = true; } });
	        if (!defaultPrevented) {
	            this.writeValue(result);
	            this._onChange(result);
	        }
	    };
	    NgbTypeahead.prototype._selectResultClosePopup = function (result) {
	        this._selectResult(result);
	        this._closePopup();
	    };
	    NgbTypeahead.prototype._showHint = function () {
	        if (this.showHint) {
	            var userInputLowerCase = this._userInput.toLowerCase();
	            var formattedVal = this._formatItemForInput(this._windowRef.instance.getActive());
	            if (userInputLowerCase === formattedVal.substr(0, this._userInput.length).toLowerCase()) {
	                this._writeInputValue(this._userInput + formattedVal.substr(this._userInput.length));
	                this._renderer.invokeElementMethod(this._elementRef.nativeElement, 'setSelectionRange', [this._userInput.length, formattedVal.length]);
	            }
	            else {
	                this.writeValue(this._windowRef.instance.getActive());
	            }
	        }
	    };
	    NgbTypeahead.prototype._formatItemForInput = function (item) {
	        return item && this.inputFormatter ? this.inputFormatter(item) : util_1.toString(item);
	    };
	    NgbTypeahead.prototype._writeInputValue = function (value) {
	        this._renderer.setElementProperty(this._elementRef.nativeElement, 'value', value);
	    };
	    NgbTypeahead.prototype._subscribeToUserInput = function (userInput$) {
	        var _this = this;
	        return userInput$.subscribe(function (results) {
	            if (!results || results.length === 0) {
	                _this._closePopup();
	            }
	            else {
	                _this._openPopup();
	                _this._windowRef.instance.focusFirst = _this.focusFirst;
	                _this._windowRef.instance.results = results;
	                _this._windowRef.instance.term = _this._elementRef.nativeElement.value;
	                if (_this.resultFormatter) {
	                    _this._windowRef.instance.formatter = _this.resultFormatter;
	                }
	                if (_this.resultTemplate) {
	                    _this._windowRef.instance.resultTemplate = _this.resultTemplate;
	                }
	                _this._showHint();
	                // The observable stream we are subscribing to might have async steps
	                // and if a component containing typeahead is using the OnPush strategy
	                // the change detection turn wouldn't be invoked automatically.
	                _this._windowRef.changeDetectorRef.detectChanges();
	            }
	        });
	    };
	    NgbTypeahead.prototype._unsubscribeFromUserInput = function () {
	        if (this._subscription) {
	            this._subscription.unsubscribe();
	        }
	        this._subscription = null;
	    };
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Boolean)
	    ], NgbTypeahead.prototype, "editable", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Boolean)
	    ], NgbTypeahead.prototype, "focusFirst", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Function)
	    ], NgbTypeahead.prototype, "inputFormatter", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Function)
	    ], NgbTypeahead.prototype, "ngbTypeahead", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Function)
	    ], NgbTypeahead.prototype, "resultFormatter", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', core_1.TemplateRef)
	    ], NgbTypeahead.prototype, "resultTemplate", void 0);
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Boolean)
	    ], NgbTypeahead.prototype, "showHint", void 0);
	    __decorate([
	        core_1.Output(), 
	        __metadata('design:type', Object)
	    ], NgbTypeahead.prototype, "selectItem", void 0);
	    NgbTypeahead = __decorate([
	        core_1.Directive({
	            selector: 'input[ngbTypeahead]',
	            host: {
	                '(blur)': 'handleBlur()',
	                '[class.open]': 'isPopupOpen()',
	                '(document:click)': 'dismissPopup()',
	                '(keydown)': 'handleKeyDown($event)',
	                'autocomplete': 'off',
	                'autocapitalize': 'off',
	                'autocorrect': 'off'
	            },
	            providers: [NGB_TYPEAHEAD_VALUE_ACCESSOR]
	        }), 
	        __metadata('design:paramtypes', [core_1.ElementRef, core_1.ViewContainerRef, core_1.Renderer, core_1.Injector, core_1.ComponentFactoryResolver, typeahead_config_1.NgbTypeaheadConfig, core_1.NgZone])
	    ], NgbTypeahead);
	    return NgbTypeahead;
	}());
	exports.NgbTypeahead = NgbTypeahead;
	//# sourceMappingURL=typeahead.js.map

	/***/ },
	/* 72 */
	/***/ function(module, exports) {

	module.exports = __WEBPACK_EXTERNAL_MODULE_72__;

	/***/ },
	/* 73 */
	/***/ function(module, exports) {

	module.exports = __WEBPACK_EXTERNAL_MODULE_73__;

	/***/ },
	/* 74 */
	/***/ function(module, exports) {

	module.exports = __WEBPACK_EXTERNAL_MODULE_74__;

	/***/ },
	/* 75 */
	/***/ function(module, exports) {

	module.exports = __WEBPACK_EXTERNAL_MODULE_75__;

	/***/ },
	/* 76 */
	/***/ function(module, exports, __webpack_require__) {

	"use strict";
	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var core_1 = __webpack_require__(0);
	var accordion_module_1 = __webpack_require__(9);
	var alert_module_1 = __webpack_require__(10);
	var radio_module_1 = __webpack_require__(11);
	var carousel_module_1 = __webpack_require__(12);
	var collapse_module_1 = __webpack_require__(13);
	var datepicker_module_1 = __webpack_require__(14);
	var dropdown_module_1 = __webpack_require__(15);
	var modal_module_1 = __webpack_require__(16);
	var pagination_module_1 = __webpack_require__(17);
	var popover_module_1 = __webpack_require__(18);
	var progressbar_module_1 = __webpack_require__(19);
	var rating_module_1 = __webpack_require__(20);
	var tabset_module_1 = __webpack_require__(21);
	var timepicker_module_1 = __webpack_require__(22);
	var tooltip_module_1 = __webpack_require__(23);
	var typeahead_module_1 = __webpack_require__(24);
	var accordion_module_2 = __webpack_require__(9);
	exports.NgbAccordionModule = accordion_module_2.NgbAccordionModule;
	exports.NgbAccordionConfig = accordion_module_2.NgbAccordionConfig;
	var alert_module_2 = __webpack_require__(10);
	exports.NgbAlertModule = alert_module_2.NgbAlertModule;
	exports.NgbAlertConfig = alert_module_2.NgbAlertConfig;
	var radio_module_2 = __webpack_require__(11);
	exports.NgbButtonsModule = radio_module_2.NgbButtonsModule;
	var carousel_module_2 = __webpack_require__(12);
	exports.NgbCarouselModule = carousel_module_2.NgbCarouselModule;
	exports.NgbCarouselConfig = carousel_module_2.NgbCarouselConfig;
	var collapse_module_2 = __webpack_require__(13);
	exports.NgbCollapseModule = collapse_module_2.NgbCollapseModule;
	var datepicker_module_2 = __webpack_require__(14);
	exports.NgbDatepickerModule = datepicker_module_2.NgbDatepickerModule;
	exports.NgbDatepickerI18n = datepicker_module_2.NgbDatepickerI18n;
	exports.NgbDatepickerConfig = datepicker_module_2.NgbDatepickerConfig;
	exports.NgbDateParserFormatter = datepicker_module_2.NgbDateParserFormatter;
	var dropdown_module_2 = __webpack_require__(15);
	exports.NgbDropdownModule = dropdown_module_2.NgbDropdownModule;
	exports.NgbDropdownConfig = dropdown_module_2.NgbDropdownConfig;
	var modal_module_2 = __webpack_require__(16);
	exports.NgbModalModule = modal_module_2.NgbModalModule;
	exports.NgbModal = modal_module_2.NgbModal;
	exports.NgbActiveModal = modal_module_2.NgbActiveModal;
	exports.NgbModalRef = modal_module_2.NgbModalRef;
	exports.ModalDismissReasons = modal_module_2.ModalDismissReasons;
	var pagination_module_2 = __webpack_require__(17);
	exports.NgbPaginationModule = pagination_module_2.NgbPaginationModule;
	exports.NgbPaginationConfig = pagination_module_2.NgbPaginationConfig;
	var popover_module_2 = __webpack_require__(18);
	exports.NgbPopoverModule = popover_module_2.NgbPopoverModule;
	exports.NgbPopoverConfig = popover_module_2.NgbPopoverConfig;
	var progressbar_module_2 = __webpack_require__(19);
	exports.NgbProgressbarModule = progressbar_module_2.NgbProgressbarModule;
	exports.NgbProgressbarConfig = progressbar_module_2.NgbProgressbarConfig;
	var rating_module_2 = __webpack_require__(20);
	exports.NgbRatingModule = rating_module_2.NgbRatingModule;
	exports.NgbRatingConfig = rating_module_2.NgbRatingConfig;
	var tabset_module_2 = __webpack_require__(21);
	exports.NgbTabsetModule = tabset_module_2.NgbTabsetModule;
	exports.NgbTabsetConfig = tabset_module_2.NgbTabsetConfig;
	var timepicker_module_2 = __webpack_require__(22);
	exports.NgbTimepickerModule = timepicker_module_2.NgbTimepickerModule;
	exports.NgbTimepickerConfig = timepicker_module_2.NgbTimepickerConfig;
	var tooltip_module_2 = __webpack_require__(23);
	exports.NgbTooltipModule = tooltip_module_2.NgbTooltipModule;
	exports.NgbTooltipConfig = tooltip_module_2.NgbTooltipConfig;
	var typeahead_module_2 = __webpack_require__(24);
	exports.NgbTypeaheadModule = typeahead_module_2.NgbTypeaheadModule;
	exports.NgbTypeaheadConfig = typeahead_module_2.NgbTypeaheadConfig;
	var NGB_MODULES = [
	    accordion_module_1.NgbAccordionModule, alert_module_1.NgbAlertModule, radio_module_1.NgbButtonsModule, carousel_module_1.NgbCarouselModule, collapse_module_1.NgbCollapseModule, datepicker_module_1.NgbDatepickerModule,
	    dropdown_module_1.NgbDropdownModule, modal_module_1.NgbModalModule, pagination_module_1.NgbPaginationModule, popover_module_1.NgbPopoverModule, progressbar_module_1.NgbProgressbarModule, rating_module_1.NgbRatingModule,
	    tabset_module_1.NgbTabsetModule, timepicker_module_1.NgbTimepickerModule, tooltip_module_1.NgbTooltipModule, typeahead_module_1.NgbTypeaheadModule
	];
	var NgbRootModule = (function () {
	    function NgbRootModule() {
	    }
	    NgbRootModule = __decorate([
	        core_1.NgModule({
	            imports: [
	                alert_module_1.NgbAlertModule.forRoot(), radio_module_1.NgbButtonsModule.forRoot(), collapse_module_1.NgbCollapseModule.forRoot(), progressbar_module_1.NgbProgressbarModule.forRoot(),
	                tooltip_module_1.NgbTooltipModule.forRoot(), typeahead_module_1.NgbTypeaheadModule.forRoot(), accordion_module_1.NgbAccordionModule.forRoot(), carousel_module_1.NgbCarouselModule.forRoot(),
	                datepicker_module_1.NgbDatepickerModule.forRoot(), dropdown_module_1.NgbDropdownModule.forRoot(), modal_module_1.NgbModalModule.forRoot(), pagination_module_1.NgbPaginationModule.forRoot(),
	                popover_module_1.NgbPopoverModule.forRoot(), progressbar_module_1.NgbProgressbarModule.forRoot(), rating_module_1.NgbRatingModule.forRoot(), tabset_module_1.NgbTabsetModule.forRoot(),
	                timepicker_module_1.NgbTimepickerModule.forRoot(), tooltip_module_1.NgbTooltipModule.forRoot()
	            ],
	            exports: NGB_MODULES
	        }), 
	        __metadata('design:paramtypes', [])
	    ], NgbRootModule);
	    return NgbRootModule;
	}());
	exports.NgbRootModule = NgbRootModule;
	var NgbModule = (function () {
	    function NgbModule() {
	    }
	    NgbModule.forRoot = function () { return { ngModule: NgbRootModule }; };
	    NgbModule = __decorate([
	        core_1.NgModule({ imports: NGB_MODULES, exports: NGB_MODULES }), 
	        __metadata('design:paramtypes', [])
	    ], NgbModule);
	    return NgbModule;
	}());
	exports.NgbModule = NgbModule;
	//# sourceMappingURL=index.js.map

	/***/ }
	/******/ ]);
	});
	//# sourceMappingURL=ng-bootstrap.js.map

/***/ },
/* 114 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var Observable_1 = __webpack_require__(82);
	var do_1 = __webpack_require__(115);
	Observable_1.Observable.prototype.do = do_1._do;
	Observable_1.Observable.prototype._do = do_1._do;
	//# sourceMappingURL=do.js.map

/***/ },
/* 115 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var Subscriber_1 = __webpack_require__(85);
	/**
	 * Perform a side effect for every emission on the source Observable, but return
	 * an Observable that is identical to the source.
	 *
	 * <span class="informal">Intercepts each emission on the source and runs a
	 * function, but returns an output which is identical to the source.</span>
	 *
	 * <img src="./img/do.png" width="100%">
	 *
	 * Returns a mirrored Observable of the source Observable, but modified so that
	 * the provided Observer is called to perform a side effect for every value,
	 * error, and completion emitted by the source. Any errors that are thrown in
	 * the aforementioned Observer or handlers are safely sent down the error path
	 * of the output Observable.
	 *
	 * This operator is useful for debugging your Observables for the correct values
	 * or performing other side effects.
	 *
	 * Note: this is different to a `subscribe` on the Observable. If the Observable
	 * returned by `do` is not subscribed, the side effects specified by the
	 * Observer will never happen. `do` therefore simply spies on existing
	 * execution, it does not trigger an execution to happen like `subscribe` does.
	 *
	 * @example <caption>Map every every click to the clientX position of that click, while also logging the click event</caption>
	 * var clicks = Rx.Observable.fromEvent(document, 'click');
	 * var positions = clicks
	 *   .do(ev => console.log(ev))
	 *   .map(ev => ev.clientX);
	 * positions.subscribe(x => console.log(x));
	 *
	 * @see {@link map}
	 * @see {@link subscribe}
	 *
	 * @param {Observer|function} [nextOrObserver] A normal Observer object or a
	 * callback for `next`.
	 * @param {function} [error] Callback for errors in the source.
	 * @param {function} [complete] Callback for the completion of the source.
	 * @return {Observable} An Observable identical to the source, but runs the
	 * specified Observer or callback(s) for each item.
	 * @method do
	 * @name do
	 * @owner Observable
	 */
	function _do(nextOrObserver, error, complete) {
	    return this.lift(new DoOperator(nextOrObserver, error, complete));
	}
	exports._do = _do;
	var DoOperator = (function () {
	    function DoOperator(nextOrObserver, error, complete) {
	        this.nextOrObserver = nextOrObserver;
	        this.error = error;
	        this.complete = complete;
	    }
	    DoOperator.prototype.call = function (subscriber, source) {
	        return source._subscribe(new DoSubscriber(subscriber, this.nextOrObserver, this.error, this.complete));
	    };
	    return DoOperator;
	}());
	/**
	 * We need this JSDoc comment for affecting ESDoc.
	 * @ignore
	 * @extends {Ignored}
	 */
	var DoSubscriber = (function (_super) {
	    __extends(DoSubscriber, _super);
	    function DoSubscriber(destination, nextOrObserver, error, complete) {
	        _super.call(this, destination);
	        var safeSubscriber = new Subscriber_1.Subscriber(nextOrObserver, error, complete);
	        safeSubscriber.syncErrorThrowable = true;
	        this.add(safeSubscriber);
	        this.safeSubscriber = safeSubscriber;
	    }
	    DoSubscriber.prototype._next = function (value) {
	        var safeSubscriber = this.safeSubscriber;
	        safeSubscriber.next(value);
	        if (safeSubscriber.syncErrorThrown) {
	            this.destination.error(safeSubscriber.syncErrorValue);
	        }
	        else {
	            this.destination.next(value);
	        }
	    };
	    DoSubscriber.prototype._error = function (err) {
	        var safeSubscriber = this.safeSubscriber;
	        safeSubscriber.error(err);
	        if (safeSubscriber.syncErrorThrown) {
	            this.destination.error(safeSubscriber.syncErrorValue);
	        }
	        else {
	            this.destination.error(err);
	        }
	    };
	    DoSubscriber.prototype._complete = function () {
	        var safeSubscriber = this.safeSubscriber;
	        safeSubscriber.complete();
	        if (safeSubscriber.syncErrorThrown) {
	            this.destination.error(safeSubscriber.syncErrorValue);
	        }
	        else {
	            this.destination.complete();
	        }
	    };
	    return DoSubscriber;
	}(Subscriber_1.Subscriber));
	//# sourceMappingURL=do.js.map

/***/ },
/* 116 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var Observable_1 = __webpack_require__(82);
	var let_1 = __webpack_require__(117);
	Observable_1.Observable.prototype.let = let_1.letProto;
	Observable_1.Observable.prototype.letBind = let_1.letProto;
	//# sourceMappingURL=let.js.map

/***/ },
/* 117 */
/***/ function(module, exports) {

	"use strict";
	/**
	 * @param func
	 * @return {Observable<R>}
	 * @method let
	 * @owner Observable
	 */
	function letProto(func) {
	    return func(this);
	}
	exports.letProto = letProto;
	//# sourceMappingURL=let.js.map

/***/ },
/* 118 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var Observable_1 = __webpack_require__(82);
	var fromEvent_1 = __webpack_require__(119);
	Observable_1.Observable.fromEvent = fromEvent_1.fromEvent;
	//# sourceMappingURL=fromEvent.js.map

/***/ },
/* 119 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var FromEventObservable_1 = __webpack_require__(120);
	exports.fromEvent = FromEventObservable_1.FromEventObservable.create;
	//# sourceMappingURL=fromEvent.js.map

/***/ },
/* 120 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var Observable_1 = __webpack_require__(82);
	var tryCatch_1 = __webpack_require__(90);
	var isFunction_1 = __webpack_require__(86);
	var errorObject_1 = __webpack_require__(91);
	var Subscription_1 = __webpack_require__(87);
	function isNodeStyleEventEmmitter(sourceObj) {
	    return !!sourceObj && typeof sourceObj.addListener === 'function' && typeof sourceObj.removeListener === 'function';
	}
	function isJQueryStyleEventEmitter(sourceObj) {
	    return !!sourceObj && typeof sourceObj.on === 'function' && typeof sourceObj.off === 'function';
	}
	function isNodeList(sourceObj) {
	    return !!sourceObj && sourceObj.toString() === '[object NodeList]';
	}
	function isHTMLCollection(sourceObj) {
	    return !!sourceObj && sourceObj.toString() === '[object HTMLCollection]';
	}
	function isEventTarget(sourceObj) {
	    return !!sourceObj && typeof sourceObj.addEventListener === 'function' && typeof sourceObj.removeEventListener === 'function';
	}
	/**
	 * We need this JSDoc comment for affecting ESDoc.
	 * @extends {Ignored}
	 * @hide true
	 */
	var FromEventObservable = (function (_super) {
	    __extends(FromEventObservable, _super);
	    function FromEventObservable(sourceObj, eventName, selector, options) {
	        _super.call(this);
	        this.sourceObj = sourceObj;
	        this.eventName = eventName;
	        this.selector = selector;
	        this.options = options;
	    }
	    /* tslint:enable:max-line-length */
	    /**
	     * Creates an Observable that emits events of a specific type coming from the
	     * given event target.
	     *
	     * <span class="informal">Creates an Observable from DOM events, or Node
	     * EventEmitter events or others.</span>
	     *
	     * <img src="./img/fromEvent.png" width="100%">
	     *
	     * Creates an Observable by attaching an event listener to an "event target",
	     * which may be an object with `addEventListener` and `removeEventListener`,
	     * a Node.js EventEmitter, a jQuery style EventEmitter, a NodeList from the
	     * DOM, or an HTMLCollection from the DOM. The event handler is attached when
	     * the output Observable is subscribed, and removed when the Subscription is
	     * unsubscribed.
	     *
	     * @example <caption>Emits clicks happening on the DOM document</caption>
	     * var clicks = Rx.Observable.fromEvent(document, 'click');
	     * clicks.subscribe(x => console.log(x));
	     *
	     * @see {@link from}
	     * @see {@link fromEventPattern}
	     *
	     * @param {EventTargetLike} target The DOMElement, event target, Node.js
	     * EventEmitter, NodeList or HTMLCollection to attach the event handler to.
	     * @param {string} eventName The event name of interest, being emitted by the
	     * `target`.
	     * @parm {EventListenerOptions} [options] Options to pass through to addEventListener
	     * @param {SelectorMethodSignature<T>} [selector] An optional function to
	     * post-process results. It takes the arguments from the event handler and
	     * should return a single value.
	     * @return {Observable<T>}
	     * @static true
	     * @name fromEvent
	     * @owner Observable
	     */
	    FromEventObservable.create = function (target, eventName, options, selector) {
	        if (isFunction_1.isFunction(options)) {
	            selector = options;
	            options = undefined;
	        }
	        return new FromEventObservable(target, eventName, selector, options);
	    };
	    FromEventObservable.setupSubscription = function (sourceObj, eventName, handler, subscriber, options) {
	        var unsubscribe;
	        if (isNodeList(sourceObj) || isHTMLCollection(sourceObj)) {
	            for (var i = 0, len = sourceObj.length; i < len; i++) {
	                FromEventObservable.setupSubscription(sourceObj[i], eventName, handler, subscriber, options);
	            }
	        }
	        else if (isEventTarget(sourceObj)) {
	            var source_1 = sourceObj;
	            sourceObj.addEventListener(eventName, handler, options);
	            unsubscribe = function () { return source_1.removeEventListener(eventName, handler); };
	        }
	        else if (isJQueryStyleEventEmitter(sourceObj)) {
	            var source_2 = sourceObj;
	            sourceObj.on(eventName, handler);
	            unsubscribe = function () { return source_2.off(eventName, handler); };
	        }
	        else if (isNodeStyleEventEmmitter(sourceObj)) {
	            var source_3 = sourceObj;
	            sourceObj.addListener(eventName, handler);
	            unsubscribe = function () { return source_3.removeListener(eventName, handler); };
	        }
	        subscriber.add(new Subscription_1.Subscription(unsubscribe));
	    };
	    FromEventObservable.prototype._subscribe = function (subscriber) {
	        var sourceObj = this.sourceObj;
	        var eventName = this.eventName;
	        var options = this.options;
	        var selector = this.selector;
	        var handler = selector ? function () {
	            var args = [];
	            for (var _i = 0; _i < arguments.length; _i++) {
	                args[_i - 0] = arguments[_i];
	            }
	            var result = tryCatch_1.tryCatch(selector).apply(void 0, args);
	            if (result === errorObject_1.errorObject) {
	                subscriber.error(errorObject_1.errorObject.e);
	            }
	            else {
	                subscriber.next(result);
	            }
	        } : function (e) { return subscriber.next(e); };
	        FromEventObservable.setupSubscription(sourceObj, eventName, handler, subscriber, options);
	    };
	    return FromEventObservable;
	}(Observable_1.Observable));
	exports.FromEventObservable = FromEventObservable;
	//# sourceMappingURL=FromEventObservable.js.map

/***/ },
/* 121 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var core_1 = __webpack_require__(80);
	// import {Tip} from './tip';
	// import { TipService } from './tip.service';
	var AppComponent = (function () {
	    function AppComponent() {
	    }
	    AppComponent = __decorate([
	        core_1.Component({
	            selector: 'my-app',
	            template: "\n  <div class=\"list-title\">\n    <h2>My List</h2>\n  </div>\n    <router-outlet></router-outlet>   \n    ",
	        }), 
	        __metadata('design:paramtypes', [])
	    ], AppComponent);
	    return AppComponent;
	}());
	exports.AppComponent = AppComponent;


/***/ },
/* 122 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var core_1 = __webpack_require__(80);
	var angular_2_local_storage_1 = __webpack_require__(101);
	var tip_service_1 = __webpack_require__(123);
	// @Component({
	//     selector: 'child',
	//     template: `
	//         <h2>child {{content}}</h2>
	//     `
	// })
	var Child = (function () {
	    function Child() {
	    }
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Number)
	    ], Child.prototype, "id", void 0);
	    return Child;
	}());
	var TodolistComponent = (function () {
	    function TodolistComponent(tipService, localStorageService) {
	        this.tipService = tipService;
	        this.localStorageService = localStorageService;
	        // @Input() id:number;
	        this.tips = [];
	    }
	    TodolistComponent.prototype.reNew = function () {
	        this.tipService.reNew();
	    };
	    TodolistComponent.prototype.clickCheckBox = function (id) {
	        this.tipService.clickCheckBox(id);
	    };
	    TodolistComponent.prototype.ngOnInit = function () {
	        var _this = this;
	        this.tipService.getTips().then(function (tips) {
	            _this.tips = tips;
	        });
	        // this.tipService.clickCheckBox(Tip.id);
	        // this.tipService.getTip(1);
	        this.editId = 1;
	        // this.a = this.localStorageService.get('tip13');
	        // this.editId = this.a;
	        console.log(this.editId);
	    };
	    TodolistComponent.prototype.ngOnChanges = function () {
	        this.editId = 2;
	        console.log(this.editId);
	    };
	    TodolistComponent.prototype.getId = function (id) {
	        this.editId = id;
	        console.log(this.editId);
	        // this.localStorageService.set('tip13',id);
	    };
	    TodolistComponent = __decorate([
	        core_1.Directive({
	            selector: '[child]'
	        }),
	        core_1.Component({
	            selector: 'my-app',
	            templateUrl: '/todo_list.component.html',
	        }), 
	        __metadata('design:paramtypes', [tip_service_1.TipService, angular_2_local_storage_1.LocalStorageService])
	    ], TodolistComponent);
	    return TodolistComponent;
	}());
	exports.TodolistComponent = TodolistComponent;
	// @Component({
	//   selector: 'my-app',
	//   templateUrl: '/todo_list.component.html',
	// })
	// export class OnChangesComponent extends TodolistComponent implements OnChanges  {
	//   ngOnChanges() {
	//     console.log(this.editId)
	//       this.editId = 2; console.log(this.editId);
	//   }
	//    ngAfterViewInit() { this.editId = 2; console.log(this.editId)}
	//   // Beware! Called frequently!
	//   // Called in every change detection cycle anywhere on the page
	//   ngAfterViewChecked() { this.editId = 3; console.log(this.editId)}
	//  getId(id: number){
	//       this.editId = id;
	//       // console.log(this.editId);
	//       console.log(this.editId);
	//     }
	// } 


/***/ },
/* 123 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var core_1 = __webpack_require__(80);
	var tip_1 = __webpack_require__(124);
	var mock_tips_1 = __webpack_require__(125);
	var TipService = (function () {
	    function TipService() {
	    }
	    TipService.prototype.getTips = function () {
	        return Promise.resolve(mock_tips_1.TIPS);
	    };
	    TipService.prototype.getTip = function (id) {
	        return this.getTips()
	            .then(function (tips) { return tips.find(function (tip) { return tip.id === id; }); });
	    };
	    TipService.prototype.getId = function (id) {
	        var editId = id;
	        return editId;
	    };
	    TipService.prototype.reNew = function () {
	        var tip = new tip_1.Tip;
	        return Promise.resolve(tip);
	    };
	    TipService.prototype.clickCheckBox = function (id) {
	        var flag = mock_tips_1.TIPS[id - 1].state;
	        if (!flag) {
	            flag = true;
	        }
	        else {
	            flag = false;
	        }
	        return mock_tips_1.TIPS[id - 1].state = flag;
	        // this.getTip(id)
	        // .then(check => Tip[] = flag)
	    };
	    TipService.prototype.deleteTip = function (id) {
	        return this.getTips()
	            .then(function (del) {
	            if (id < mock_tips_1.TIPS.length) {
	                for (var i = id; i < mock_tips_1.TIPS.length; i++) {
	                    mock_tips_1.TIPS[i].id = mock_tips_1.TIPS[i].id - 1;
	                }
	            }
	            mock_tips_1.TIPS.splice(id - 1, 1);
	        });
	    };
	    TipService.prototype.setTip = function (name, expirationTime, description) {
	        var tip = new tip_1.Tip;
	        var notice = false;
	        if (name == undefined || name == '') {
	            notice = true;
	        }
	        else {
	            var id = mock_tips_1.TIPS.length + 1;
	            tip.id = id;
	            tip.name = name;
	            tip.expirationTime = expirationTime;
	            tip.description = description;
	            mock_tips_1.TIPS.push(tip);
	        }
	        return notice;
	    };
	    TipService.prototype.noSave = function (id, tip2) {
	        this.getTips();
	        mock_tips_1.TIPS[id - 1] = tip2;
	        console.log(mock_tips_1.TIPS[id - 1]);
	    };
	    TipService = __decorate([
	        core_1.Injectable(), 
	        __metadata('design:paramtypes', [])
	    ], TipService);
	    return TipService;
	}());
	exports.TipService = TipService;


/***/ },
/* 124 */
/***/ function(module, exports) {

	"use strict";
	var Tip = (function () {
	    function Tip() {
	    }
	    return Tip;
	}());
	exports.Tip = Tip;


/***/ },
/* 125 */
/***/ function(module, exports) {

	"use strict";
	exports.TIPS = [
	    { id: 1, name: '写日报', state: false, expirationTime: '2016-12-30', description: '每天的日报反映了当天的学习、工作情况，应该及时完成' },
	    { id: 2, name: '买水果', state: false, expirationTime: '2016-12-30', description: '回家去菜市买苹果和香蕉' },
	];


/***/ },
/* 126 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	__webpack_require__(127);
	var core_1 = __webpack_require__(80);
	var router_1 = __webpack_require__(134);
	var common_1 = __webpack_require__(99);
	var tip_1 = __webpack_require__(124);
	var tip_service_1 = __webpack_require__(123);
	var TipDetailComponent = (function () {
	    function TipDetailComponent(tipService, route, location) {
	        this.tipService = tipService;
	        this.route = route;
	        this.location = location;
	    }
	    TipDetailComponent.prototype.ngOnInit = function () {
	        var _this = this;
	        this.route.params
	            .switchMap(function (params) { return _this.tipService.getTip(+params['id']); })
	            .subscribe(function (tip) { return _this.tip = tip; });
	    };
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', tip_1.Tip)
	    ], TipDetailComponent.prototype, "tip", void 0);
	    TipDetailComponent = __decorate([
	        core_1.Component({
	            selector: 'my-app',
	            templateUrl: 'tip_detail.component.html',
	        }), 
	        __metadata('design:paramtypes', [tip_service_1.TipService, router_1.ActivatedRoute, common_1.Location])
	    ], TipDetailComponent);
	    return TipDetailComponent;
	}());
	exports.TipDetailComponent = TipDetailComponent;


/***/ },
/* 127 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var Observable_1 = __webpack_require__(82);
	var switchMap_1 = __webpack_require__(128);
	Observable_1.Observable.prototype.switchMap = switchMap_1.switchMap;
	//# sourceMappingURL=switchMap.js.map

/***/ },
/* 128 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var OuterSubscriber_1 = __webpack_require__(129);
	var subscribeToResult_1 = __webpack_require__(130);
	/**
	 * Projects each source value to an Observable which is merged in the output
	 * Observable, emitting values only from the most recently projected Observable.
	 *
	 * <span class="informal">Maps each value to an Observable, then flattens all of
	 * these inner Observables using {@link switch}.</span>
	 *
	 * <img src="./img/switchMap.png" width="100%">
	 *
	 * Returns an Observable that emits items based on applying a function that you
	 * supply to each item emitted by the source Observable, where that function
	 * returns an (so-called "inner") Observable. Each time it observes one of these
	 * inner Observables, the output Observable begins emitting the items emitted by
	 * that inner Observable. When a new inner Observable is emitted, `switchMap`
	 * stops emitting items from the earlier-emitted inner Observable and begins
	 * emitting items from the new one. It continues to behave like this for
	 * subsequent inner Observables.
	 *
	 * @example <caption>Rerun an interval Observable on every click event</caption>
	 * var clicks = Rx.Observable.fromEvent(document, 'click');
	 * var result = clicks.switchMap((ev) => Rx.Observable.interval(1000));
	 * result.subscribe(x => console.log(x));
	 *
	 * @see {@link concatMap}
	 * @see {@link exhaustMap}
	 * @see {@link mergeMap}
	 * @see {@link switch}
	 * @see {@link switchMapTo}
	 *
	 * @param {function(value: T, ?index: number): Observable} project A function
	 * that, when applied to an item emitted by the source Observable, returns an
	 * Observable.
	 * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]
	 * A function to produce the value on the output Observable based on the values
	 * and the indices of the source (outer) emission and the inner Observable
	 * emission. The arguments passed to this function are:
	 * - `outerValue`: the value that came from the source
	 * - `innerValue`: the value that came from the projected Observable
	 * - `outerIndex`: the "index" of the value that came from the source
	 * - `innerIndex`: the "index" of the value from the projected Observable
	 * @return {Observable} An Observable that emits the result of applying the
	 * projection function (and the optional `resultSelector`) to each item emitted
	 * by the source Observable and taking only the values from the most recently
	 * projected inner Observable.
	 * @method switchMap
	 * @owner Observable
	 */
	function switchMap(project, resultSelector) {
	    return this.lift(new SwitchMapOperator(project, resultSelector));
	}
	exports.switchMap = switchMap;
	var SwitchMapOperator = (function () {
	    function SwitchMapOperator(project, resultSelector) {
	        this.project = project;
	        this.resultSelector = resultSelector;
	    }
	    SwitchMapOperator.prototype.call = function (subscriber, source) {
	        return source._subscribe(new SwitchMapSubscriber(subscriber, this.project, this.resultSelector));
	    };
	    return SwitchMapOperator;
	}());
	/**
	 * We need this JSDoc comment for affecting ESDoc.
	 * @ignore
	 * @extends {Ignored}
	 */
	var SwitchMapSubscriber = (function (_super) {
	    __extends(SwitchMapSubscriber, _super);
	    function SwitchMapSubscriber(destination, project, resultSelector) {
	        _super.call(this, destination);
	        this.project = project;
	        this.resultSelector = resultSelector;
	        this.index = 0;
	    }
	    SwitchMapSubscriber.prototype._next = function (value) {
	        var result;
	        var index = this.index++;
	        try {
	            result = this.project(value, index);
	        }
	        catch (error) {
	            this.destination.error(error);
	            return;
	        }
	        this._innerSub(result, value, index);
	    };
	    SwitchMapSubscriber.prototype._innerSub = function (result, value, index) {
	        var innerSubscription = this.innerSubscription;
	        if (innerSubscription) {
	            innerSubscription.unsubscribe();
	        }
	        this.add(this.innerSubscription = subscribeToResult_1.subscribeToResult(this, result, value, index));
	    };
	    SwitchMapSubscriber.prototype._complete = function () {
	        var innerSubscription = this.innerSubscription;
	        if (!innerSubscription || innerSubscription.closed) {
	            _super.prototype._complete.call(this);
	        }
	    };
	    SwitchMapSubscriber.prototype._unsubscribe = function () {
	        this.innerSubscription = null;
	    };
	    SwitchMapSubscriber.prototype.notifyComplete = function (innerSub) {
	        this.remove(innerSub);
	        this.innerSubscription = null;
	        if (this.isStopped) {
	            _super.prototype._complete.call(this);
	        }
	    };
	    SwitchMapSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
	        if (this.resultSelector) {
	            this._tryNotifyNext(outerValue, innerValue, outerIndex, innerIndex);
	        }
	        else {
	            this.destination.next(innerValue);
	        }
	    };
	    SwitchMapSubscriber.prototype._tryNotifyNext = function (outerValue, innerValue, outerIndex, innerIndex) {
	        var result;
	        try {
	            result = this.resultSelector(outerValue, innerValue, outerIndex, innerIndex);
	        }
	        catch (err) {
	            this.destination.error(err);
	            return;
	        }
	        this.destination.next(result);
	    };
	    return SwitchMapSubscriber;
	}(OuterSubscriber_1.OuterSubscriber));
	//# sourceMappingURL=switchMap.js.map

/***/ },
/* 129 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var Subscriber_1 = __webpack_require__(85);
	/**
	 * We need this JSDoc comment for affecting ESDoc.
	 * @ignore
	 * @extends {Ignored}
	 */
	var OuterSubscriber = (function (_super) {
	    __extends(OuterSubscriber, _super);
	    function OuterSubscriber() {
	        _super.apply(this, arguments);
	    }
	    OuterSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
	        this.destination.next(innerValue);
	    };
	    OuterSubscriber.prototype.notifyError = function (error, innerSub) {
	        this.destination.error(error);
	    };
	    OuterSubscriber.prototype.notifyComplete = function (innerSub) {
	        this.destination.complete();
	    };
	    return OuterSubscriber;
	}(Subscriber_1.Subscriber));
	exports.OuterSubscriber = OuterSubscriber;
	//# sourceMappingURL=OuterSubscriber.js.map

/***/ },
/* 130 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var root_1 = __webpack_require__(83);
	var isArray_1 = __webpack_require__(88);
	var isPromise_1 = __webpack_require__(131);
	var Observable_1 = __webpack_require__(82);
	var iterator_1 = __webpack_require__(132);
	var InnerSubscriber_1 = __webpack_require__(133);
	var observable_1 = __webpack_require__(95);
	function subscribeToResult(outerSubscriber, result, outerValue, outerIndex) {
	    var destination = new InnerSubscriber_1.InnerSubscriber(outerSubscriber, outerValue, outerIndex);
	    if (destination.closed) {
	        return null;
	    }
	    if (result instanceof Observable_1.Observable) {
	        if (result._isScalar) {
	            destination.next(result.value);
	            destination.complete();
	            return null;
	        }
	        else {
	            return result.subscribe(destination);
	        }
	    }
	    if (isArray_1.isArray(result)) {
	        for (var i = 0, len = result.length; i < len && !destination.closed; i++) {
	            destination.next(result[i]);
	        }
	        if (!destination.closed) {
	            destination.complete();
	        }
	    }
	    else if (isPromise_1.isPromise(result)) {
	        result.then(function (value) {
	            if (!destination.closed) {
	                destination.next(value);
	                destination.complete();
	            }
	        }, function (err) { return destination.error(err); })
	            .then(null, function (err) {
	            // Escaping the Promise trap: globally throw unhandled errors
	            root_1.root.setTimeout(function () { throw err; });
	        });
	        return destination;
	    }
	    else if (typeof result[iterator_1.$$iterator] === 'function') {
	        var iterator = result[iterator_1.$$iterator]();
	        do {
	            var item = iterator.next();
	            if (item.done) {
	                destination.complete();
	                break;
	            }
	            destination.next(item.value);
	            if (destination.closed) {
	                break;
	            }
	        } while (true);
	    }
	    else if (typeof result[observable_1.$$observable] === 'function') {
	        var obs = result[observable_1.$$observable]();
	        if (typeof obs.subscribe !== 'function') {
	            destination.error(new Error('invalid observable'));
	        }
	        else {
	            return obs.subscribe(new InnerSubscriber_1.InnerSubscriber(outerSubscriber, outerValue, outerIndex));
	        }
	    }
	    else {
	        destination.error(new TypeError('unknown type returned'));
	    }
	    return null;
	}
	exports.subscribeToResult = subscribeToResult;
	//# sourceMappingURL=subscribeToResult.js.map

/***/ },
/* 131 */
/***/ function(module, exports) {

	"use strict";
	function isPromise(value) {
	    return value && typeof value.subscribe !== 'function' && typeof value.then === 'function';
	}
	exports.isPromise = isPromise;
	//# sourceMappingURL=isPromise.js.map

/***/ },
/* 132 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var root_1 = __webpack_require__(83);
	var Symbol = root_1.root.Symbol;
	if (typeof Symbol === 'function') {
	    if (Symbol.iterator) {
	        exports.$$iterator = Symbol.iterator;
	    }
	    else if (typeof Symbol.for === 'function') {
	        exports.$$iterator = Symbol.for('iterator');
	    }
	}
	else {
	    if (root_1.root.Set && typeof new root_1.root.Set()['@@iterator'] === 'function') {
	        // Bug for mozilla version
	        exports.$$iterator = '@@iterator';
	    }
	    else if (root_1.root.Map) {
	        // es6-shim specific logic
	        var keys = Object.getOwnPropertyNames(root_1.root.Map.prototype);
	        for (var i = 0; i < keys.length; ++i) {
	            var key = keys[i];
	            if (key !== 'entries' && key !== 'size' && root_1.root.Map.prototype[key] === root_1.root.Map.prototype['entries']) {
	                exports.$$iterator = key;
	                break;
	            }
	        }
	    }
	    else {
	        exports.$$iterator = '@@iterator';
	    }
	}
	//# sourceMappingURL=iterator.js.map

/***/ },
/* 133 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var Subscriber_1 = __webpack_require__(85);
	/**
	 * We need this JSDoc comment for affecting ESDoc.
	 * @ignore
	 * @extends {Ignored}
	 */
	var InnerSubscriber = (function (_super) {
	    __extends(InnerSubscriber, _super);
	    function InnerSubscriber(parent, outerValue, outerIndex) {
	        _super.call(this);
	        this.parent = parent;
	        this.outerValue = outerValue;
	        this.outerIndex = outerIndex;
	        this.index = 0;
	    }
	    InnerSubscriber.prototype._next = function (value) {
	        this.parent.notifyNext(this.outerValue, value, this.outerIndex, this.index++, this);
	    };
	    InnerSubscriber.prototype._error = function (error) {
	        this.parent.notifyError(error, this);
	        this.unsubscribe();
	    };
	    InnerSubscriber.prototype._complete = function () {
	        this.parent.notifyComplete(this);
	        this.unsubscribe();
	    };
	    return InnerSubscriber;
	}(Subscriber_1.Subscriber));
	exports.InnerSubscriber = InnerSubscriber;
	//# sourceMappingURL=InnerSubscriber.js.map

/***/ },
/* 134 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * @license Angular v3.2.3
	 * (c) 2010-2016 Google, Inc. https://angular.io/
	 * License: MIT
	 */(function (global, factory) {
	     true ? factory(exports, __webpack_require__(99), __webpack_require__(80), __webpack_require__(135), __webpack_require__(81), __webpack_require__(136), __webpack_require__(146), __webpack_require__(147), __webpack_require__(149), __webpack_require__(150), __webpack_require__(152), __webpack_require__(148), __webpack_require__(153), __webpack_require__(82), __webpack_require__(154), __webpack_require__(155), __webpack_require__(151), __webpack_require__(111), __webpack_require__(157), __webpack_require__(156), __webpack_require__(98), __webpack_require__(158)) :
	    typeof define === 'function' && define.amd ? define(['exports', '@angular/common', '@angular/core', 'rxjs/BehaviorSubject', 'rxjs/Subject', 'rxjs/observable/from', 'rxjs/observable/of', 'rxjs/operator/concatMap', 'rxjs/operator/every', 'rxjs/operator/first', 'rxjs/operator/map', 'rxjs/operator/mergeMap', 'rxjs/operator/reduce', 'rxjs/Observable', 'rxjs/operator/catch', 'rxjs/operator/concatAll', 'rxjs/util/EmptyError', 'rxjs/observable/fromPromise', 'rxjs/operator/last', 'rxjs/operator/mergeAll', '@angular/platform-browser', 'rxjs/operator/filter'], factory) :
	    (factory((global.ng = global.ng || {}, global.ng.router = global.ng.router || {}),global.ng.common,global.ng.core,global.Rx,global.Rx,global.Rx.Observable,global.Rx.Observable,global.Rx.Observable.prototype,global.Rx.Observable.prototype,global.Rx.Observable.prototype,global.Rx.Observable.prototype,global.Rx.Observable.prototype,global.Rx.Observable.prototype,global.Rx,global.Rx.Observable.prototype,global.Rx.Observable.prototype,global.Rx,global.Rx.Observable,global.Rx.Observable.prototype,global.Rx.Observable.prototype,global.ng.platformBrowser,global.Rx.Observable.prototype));
	}(this, function (exports,_angular_common,_angular_core,rxjs_BehaviorSubject,rxjs_Subject,rxjs_observable_from,rxjs_observable_of,rxjs_operator_concatMap,rxjs_operator_every,rxjs_operator_first,rxjs_operator_map,rxjs_operator_mergeMap,rxjs_operator_reduce,rxjs_Observable,rxjs_operator_catch,rxjs_operator_concatAll,rxjs_util_EmptyError,rxjs_observable_fromPromise,l,rxjs_operator_mergeAll,_angular_platformBrowser,rxjs_operator_filter) { 'use strict';

	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    var __extends = (this && this.__extends) || function (d, b) {
	        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	    /**
	     * @whatItDoes Name of the primary outlet.
	     *
	     * @stable
	     */
	    var PRIMARY_OUTLET = 'primary';
	    var NavigationCancelingError = (function (_super) {
	        __extends(NavigationCancelingError, _super);
	        function NavigationCancelingError(message) {
	            _super.call(this, message);
	            this.message = message;
	            this.stack = (new Error(message)).stack;
	        }
	        NavigationCancelingError.prototype.toString = function () { return this.message; };
	        return NavigationCancelingError;
	    }(Error));
	    function defaultUrlMatcher(segments, segmentGroup, route) {
	        var path = route.path;
	        var parts = path.split('/');
	        var posParams = {};
	        var consumed = [];
	        var currentIndex = 0;
	        for (var i = 0; i < parts.length; ++i) {
	            if (currentIndex >= segments.length)
	                return null;
	            var current = segments[currentIndex];
	            var p = parts[i];
	            var isPosParam = p.startsWith(':');
	            if (!isPosParam && p !== current.path)
	                return null;
	            if (isPosParam) {
	                posParams[p.substring(1)] = current;
	            }
	            consumed.push(current);
	            currentIndex++;
	        }
	        if (route.pathMatch === 'full' &&
	            (segmentGroup.hasChildren() || currentIndex < segments.length)) {
	            return null;
	        }
	        else {
	            return { consumed: consumed, posParams: posParams };
	        }
	    }

	    function shallowEqualArrays(a, b) {
	        if (a.length !== b.length)
	            return false;
	        for (var i = 0; i < a.length; ++i) {
	            if (!shallowEqual(a[i], b[i]))
	                return false;
	        }
	        return true;
	    }
	    function shallowEqual(a, b) {
	        var k1 = Object.keys(a);
	        var k2 = Object.keys(b);
	        if (k1.length != k2.length) {
	            return false;
	        }
	        var key;
	        for (var i = 0; i < k1.length; i++) {
	            key = k1[i];
	            if (a[key] !== b[key]) {
	                return false;
	            }
	        }
	        return true;
	    }
	    function flatten(a) {
	        var target = [];
	        for (var i = 0; i < a.length; ++i) {
	            for (var j = 0; j < a[i].length; ++j) {
	                target.push(a[i][j]);
	            }
	        }
	        return target;
	    }
	    function last(a) {
	        return a.length > 0 ? a[a.length - 1] : null;
	    }
	    function merge(m1, m2) {
	        var m = {};
	        for (var attr in m1) {
	            if (m1.hasOwnProperty(attr)) {
	                m[attr] = m1[attr];
	            }
	        }
	        for (var attr in m2) {
	            if (m2.hasOwnProperty(attr)) {
	                m[attr] = m2[attr];
	            }
	        }
	        return m;
	    }
	    function forEach(map, callback) {
	        for (var prop in map) {
	            if (map.hasOwnProperty(prop)) {
	                callback(map[prop], prop);
	            }
	        }
	    }
	    function waitForMap(obj, fn) {
	        var waitFor = [];
	        var res = {};
	        forEach(obj, function (a, k) {
	            if (k === PRIMARY_OUTLET) {
	                waitFor.push(rxjs_operator_map.map.call(fn(k, a), function (_) {
	                    res[k] = _;
	                    return _;
	                }));
	            }
	        });
	        forEach(obj, function (a, k) {
	            if (k !== PRIMARY_OUTLET) {
	                waitFor.push(rxjs_operator_map.map.call(fn(k, a), function (_) {
	                    res[k] = _;
	                    return _;
	                }));
	            }
	        });
	        if (waitFor.length > 0) {
	            var concatted$ = rxjs_operator_concatAll.concatAll.call(rxjs_observable_of.of.apply(void 0, waitFor));
	            var last$ = l.last.call(concatted$);
	            return rxjs_operator_map.map.call(last$, function () { return res; });
	        }
	        else {
	            return rxjs_observable_of.of(res);
	        }
	    }
	    function andObservables(observables) {
	        var merged$ = rxjs_operator_mergeAll.mergeAll.call(observables);
	        return rxjs_operator_every.every.call(merged$, function (result) { return result === true; });
	    }
	    function wrapIntoObservable(value) {
	        if (value instanceof rxjs_Observable.Observable) {
	            return value;
	        }
	        else if (value instanceof Promise) {
	            return rxjs_observable_fromPromise.fromPromise(value);
	        }
	        else {
	            return rxjs_observable_of.of(value);
	        }
	    }

	    /**
	     * @experimental
	     */
	    var ROUTES = new _angular_core.OpaqueToken('ROUTES');
	    var LoadedRouterConfig = (function () {
	        function LoadedRouterConfig(routes, injector, factoryResolver, injectorFactory) {
	            this.routes = routes;
	            this.injector = injector;
	            this.factoryResolver = factoryResolver;
	            this.injectorFactory = injectorFactory;
	        }
	        return LoadedRouterConfig;
	    }());
	    var RouterConfigLoader = (function () {
	        function RouterConfigLoader(loader, compiler) {
	            this.loader = loader;
	            this.compiler = compiler;
	        }
	        RouterConfigLoader.prototype.load = function (parentInjector, loadChildren) {
	            return rxjs_operator_map.map.call(this.loadModuleFactory(loadChildren), function (r) {
	                var ref = r.create(parentInjector);
	                var injectorFactory = function (parent) { return r.create(parent).injector; };
	                return new LoadedRouterConfig(flatten(ref.injector.get(ROUTES)), ref.injector, ref.componentFactoryResolver, injectorFactory);
	            });
	        };
	        RouterConfigLoader.prototype.loadModuleFactory = function (loadChildren) {
	            var _this = this;
	            if (typeof loadChildren === 'string') {
	                return rxjs_observable_fromPromise.fromPromise(this.loader.load(loadChildren));
	            }
	            else {
	                var offlineMode_1 = this.compiler instanceof _angular_core.Compiler;
	                return rxjs_operator_mergeMap.mergeMap.call(wrapIntoObservable(loadChildren()), function (t) { return offlineMode_1 ? rxjs_observable_of.of(t) : rxjs_observable_fromPromise.fromPromise(_this.compiler.compileModuleAsync(t)); });
	            }
	        };
	        return RouterConfigLoader;
	    }());

	    function createEmptyUrlTree() {
	        return new UrlTree(new UrlSegmentGroup([], {}), {}, null);
	    }
	    function containsTree(container, containee, exact) {
	        if (exact) {
	            return equalQueryParams(container.queryParams, containee.queryParams) &&
	                equalSegmentGroups(container.root, containee.root);
	        }
	        else {
	            return containsQueryParams(container.queryParams, containee.queryParams) &&
	                containsSegmentGroup(container.root, containee.root);
	        }
	    }
	    function equalQueryParams(container, containee) {
	        return shallowEqual(container, containee);
	    }
	    function equalSegmentGroups(container, containee) {
	        if (!equalPath(container.segments, containee.segments))
	            return false;
	        if (container.numberOfChildren !== containee.numberOfChildren)
	            return false;
	        for (var c in containee.children) {
	            if (!container.children[c])
	                return false;
	            if (!equalSegmentGroups(container.children[c], containee.children[c]))
	                return false;
	        }
	        return true;
	    }
	    function containsQueryParams(container, containee) {
	        return Object.keys(containee) <= Object.keys(container) &&
	            Object.keys(containee).every(function (key) { return containee[key] === container[key]; });
	    }
	    function containsSegmentGroup(container, containee) {
	        return containsSegmentGroupHelper(container, containee, containee.segments);
	    }
	    function containsSegmentGroupHelper(container, containee, containeePaths) {
	        if (container.segments.length > containeePaths.length) {
	            var current = container.segments.slice(0, containeePaths.length);
	            if (!equalPath(current, containeePaths))
	                return false;
	            if (containee.hasChildren())
	                return false;
	            return true;
	        }
	        else if (container.segments.length === containeePaths.length) {
	            if (!equalPath(container.segments, containeePaths))
	                return false;
	            for (var c in containee.children) {
	                if (!container.children[c])
	                    return false;
	                if (!containsSegmentGroup(container.children[c], containee.children[c]))
	                    return false;
	            }
	            return true;
	        }
	        else {
	            var current = containeePaths.slice(0, container.segments.length);
	            var next = containeePaths.slice(container.segments.length);
	            if (!equalPath(container.segments, current))
	                return false;
	            if (!container.children[PRIMARY_OUTLET])
	                return false;
	            return containsSegmentGroupHelper(container.children[PRIMARY_OUTLET], containee, next);
	        }
	    }
	    /**
	     * @whatItDoes Represents the parsed URL.
	     *
	     * @howToUse
	     *
	     * ```
	     * @Component({templateUrl:'template.html'})
	     * class MyComponent {
	     *   constructor(router: Router) {
	     *     const tree: UrlTree =
	     * router.parseUrl('/team/33/(user/victor//support:help)?debug=true#fragment');
	     *     const f = tree.fragment; // return 'fragment'
	     *     const q = tree.queryParams; // returns {debug: 'true'}
	     *     const g: UrlSegmentGroup = tree.root.children[PRIMARY_OUTLET];
	     *     const s: UrlSegment[] = g.segments; // returns 2 segments 'team' and '33'
	     *     g.children[PRIMARY_OUTLET].segments; // returns 2 segments 'user' and 'victor'
	     *     g.children['support'].segments; // return 1 segment 'help'
	     *   }
	     * }
	     * ```
	     *
	     * @description
	     *
	     * Since a router state is a tree, and the URL is nothing but a serialized state, the URL is a
	     * serialized tree.
	     * UrlTree is a data structure that provides a lot of affordances in dealing with URLs
	     *
	     * @stable
	     */
	    var UrlTree = (function () {
	        /**
	         * @internal
	         */
	        function UrlTree(
	            /**
	            * The root segment group of the URL tree.
	             */
	            root, 
	            /**
	             * The query params of the URL.
	             */
	            queryParams, 
	            /**
	             * The fragment of the URL.
	             */
	            fragment) {
	            this.root = root;
	            this.queryParams = queryParams;
	            this.fragment = fragment;
	        }
	        /**
	         * @docsNotRequired
	         */
	        UrlTree.prototype.toString = function () { return new DefaultUrlSerializer().serialize(this); };
	        return UrlTree;
	    }());
	    /**
	     * @whatItDoes Represents the parsed URL segment.
	     *
	     * See {@link UrlTree} for more information.
	     *
	     * @stable
	     */
	    var UrlSegmentGroup = (function () {
	        function UrlSegmentGroup(
	            /**
	             * The URL segments of this group. See {@link UrlSegment} for more information.
	             */
	            segments, 
	            /**
	             * The list of children of this group.
	             */
	            children) {
	            var _this = this;
	            this.segments = segments;
	            this.children = children;
	            /**
	             * The parent node in the url tree.
	             */
	            this.parent = null;
	            forEach(children, function (v, k) { return v.parent = _this; });
	        }
	        /**
	         * Return true if the segment has child segments
	         */
	        UrlSegmentGroup.prototype.hasChildren = function () { return this.numberOfChildren > 0; };
	        Object.defineProperty(UrlSegmentGroup.prototype, "numberOfChildren", {
	            /**
	             * Returns the number of child sements.
	             */
	            get: function () { return Object.keys(this.children).length; },
	            enumerable: true,
	            configurable: true
	        });
	        /**
	         * @docsNotRequired
	         */
	        UrlSegmentGroup.prototype.toString = function () { return serializePaths(this); };
	        return UrlSegmentGroup;
	    }());
	    /**
	     * @whatItDoes Represents a single URL segment.
	     *
	     * @howToUse
	     *
	     * ```
	     * @Component({templateUrl:'template.html'})
	     * class MyComponent {
	     *   constructor(router: Router) {
	     *     const tree: UrlTree = router.parseUrl('/team;id=33');
	     *     const g: UrlSegmentGroup = tree.root.children[PRIMARY_OUTLET];
	     *     const s: UrlSegment[] = g.segments;
	     *     s[0].path; // returns 'team'
	     *     s[0].parameters; // returns {id: 33}
	     *   }
	     * }
	     * ```
	     *
	     * @description
	     *
	     * A UrlSegment is a part of a URL between the two slashes. It contains a path and
	     * the matrix parameters associated with the segment.
	     *
	     * @stable
	     */
	    var UrlSegment = (function () {
	        function UrlSegment(
	            /**
	             * The path part of a URL segment.
	             */
	            path, 
	            /**
	             * The matrix parameters associated with a segment.
	             */
	            parameters) {
	            this.path = path;
	            this.parameters = parameters;
	        }
	        /**
	         * @docsNotRequired
	         */
	        UrlSegment.prototype.toString = function () { return serializePath(this); };
	        return UrlSegment;
	    }());
	    function equalSegments(a, b) {
	        if (a.length !== b.length)
	            return false;
	        for (var i = 0; i < a.length; ++i) {
	            if (a[i].path !== b[i].path)
	                return false;
	            if (!shallowEqual(a[i].parameters, b[i].parameters))
	                return false;
	        }
	        return true;
	    }
	    function equalPath(a, b) {
	        if (a.length !== b.length)
	            return false;
	        for (var i = 0; i < a.length; ++i) {
	            if (a[i].path !== b[i].path)
	                return false;
	        }
	        return true;
	    }
	    function mapChildrenIntoArray(segment, fn) {
	        var res = [];
	        forEach(segment.children, function (child, childOutlet) {
	            if (childOutlet === PRIMARY_OUTLET) {
	                res = res.concat(fn(child, childOutlet));
	            }
	        });
	        forEach(segment.children, function (child, childOutlet) {
	            if (childOutlet !== PRIMARY_OUTLET) {
	                res = res.concat(fn(child, childOutlet));
	            }
	        });
	        return res;
	    }
	    /**
	     * @whatItDoes Serializes and deserializes a URL string into a URL tree.
	     *
	     * @description The url serialization strategy is customizable. You can
	     * make all URLs case insensitive by providing a custom UrlSerializer.
	     *
	     * See {@link DefaultUrlSerializer} for an example of a URL serializer.
	     *
	     * @stable
	     */
	    var UrlSerializer = (function () {
	        function UrlSerializer() {
	        }
	        return UrlSerializer;
	    }());
	    /**
	     * @whatItDoes A default implementation of the {@link UrlSerializer}.
	     *
	     * @description
	     *
	     * Example URLs:
	     *
	     * ```
	     * /inbox/33(popup:compose)
	     * /inbox/33;open=true/messages/44
	     * ```
	     *
	     * DefaultUrlSerializer uses parentheses to serialize secondary segments (e.g., popup:compose), the
	     * colon syntax to specify the outlet, and the ';parameter=value' syntax (e.g., open=true) to
	     * specify route specific parameters.
	     *
	     * @stable
	     */
	    var DefaultUrlSerializer = (function () {
	        function DefaultUrlSerializer() {
	        }
	        /**
	         * Parse a url into a {@link UrlTree}.
	         */
	        DefaultUrlSerializer.prototype.parse = function (url) {
	            var p = new UrlParser(url);
	            return new UrlTree(p.parseRootSegment(), p.parseQueryParams(), p.parseFragment());
	        };
	        /**
	         * Converts a {@link UrlTree} into a url.
	         */
	        DefaultUrlSerializer.prototype.serialize = function (tree) {
	            var segment = "/" + serializeSegment(tree.root, true);
	            var query = serializeQueryParams(tree.queryParams);
	            var fragment = tree.fragment !== null && tree.fragment !== undefined ? "#" + encodeURI(tree.fragment) : '';
	            return "" + segment + query + fragment;
	        };
	        return DefaultUrlSerializer;
	    }());
	    function serializePaths(segment) {
	        return segment.segments.map(function (p) { return serializePath(p); }).join('/');
	    }
	    function serializeSegment(segment, root) {
	        if (segment.hasChildren() && root) {
	            var primary = segment.children[PRIMARY_OUTLET] ?
	                serializeSegment(segment.children[PRIMARY_OUTLET], false) :
	                '';
	            var children_1 = [];
	            forEach(segment.children, function (v, k) {
	                if (k !== PRIMARY_OUTLET) {
	                    children_1.push(k + ":" + serializeSegment(v, false));
	                }
	            });
	            if (children_1.length > 0) {
	                return primary + "(" + children_1.join('//') + ")";
	            }
	            else {
	                return "" + primary;
	            }
	        }
	        else if (segment.hasChildren() && !root) {
	            var children = mapChildrenIntoArray(segment, function (v, k) {
	                if (k === PRIMARY_OUTLET) {
	                    return [serializeSegment(segment.children[PRIMARY_OUTLET], false)];
	                }
	                else {
	                    return [(k + ":" + serializeSegment(v, false))];
	                }
	            });
	            return serializePaths(segment) + "/(" + children.join('//') + ")";
	        }
	        else {
	            return serializePaths(segment);
	        }
	    }
	    function encode(s) {
	        return encodeURIComponent(s);
	    }
	    function decode(s) {
	        return decodeURIComponent(s);
	    }
	    function serializePath(path) {
	        return "" + encode(path.path) + serializeParams(path.parameters);
	    }
	    function serializeParams(params) {
	        return pairs(params).map(function (p) { return (";" + encode(p.first) + "=" + encode(p.second)); }).join('');
	    }
	    function serializeQueryParams(params) {
	        var strs = pairs(params).map(function (p) { return (encode(p.first) + "=" + encode(p.second)); });
	        return strs.length > 0 ? "?" + strs.join("&") : '';
	    }
	    var Pair = (function () {
	        function Pair(first, second) {
	            this.first = first;
	            this.second = second;
	        }
	        return Pair;
	    }());
	    function pairs(obj) {
	        var res = [];
	        for (var prop in obj) {
	            if (obj.hasOwnProperty(prop)) {
	                res.push(new Pair(prop, obj[prop]));
	            }
	        }
	        return res;
	    }
	    var SEGMENT_RE = /^[^\/\(\)\?;=&#]+/;
	    function matchSegments(str) {
	        SEGMENT_RE.lastIndex = 0;
	        var match = str.match(SEGMENT_RE);
	        return match ? match[0] : '';
	    }
	    var QUERY_PARAM_RE = /^[^=\?&#]+/;
	    function matchQueryParams(str) {
	        QUERY_PARAM_RE.lastIndex = 0;
	        var match = str.match(SEGMENT_RE);
	        return match ? match[0] : '';
	    }
	    var QUERY_PARAM_VALUE_RE = /^[^\?&#]+/;
	    function matchUrlQueryParamValue(str) {
	        QUERY_PARAM_VALUE_RE.lastIndex = 0;
	        var match = str.match(QUERY_PARAM_VALUE_RE);
	        return match ? match[0] : '';
	    }
	    var UrlParser = (function () {
	        function UrlParser(url) {
	            this.url = url;
	            this.remaining = url;
	        }
	        UrlParser.prototype.peekStartsWith = function (str) { return this.remaining.startsWith(str); };
	        UrlParser.prototype.capture = function (str) {
	            if (!this.remaining.startsWith(str)) {
	                throw new Error("Expected \"" + str + "\".");
	            }
	            this.remaining = this.remaining.substring(str.length);
	        };
	        UrlParser.prototype.parseRootSegment = function () {
	            if (this.remaining.startsWith('/')) {
	                this.capture('/');
	            }
	            if (this.remaining === '' || this.remaining.startsWith('?') || this.remaining.startsWith('#')) {
	                return new UrlSegmentGroup([], {});
	            }
	            else {
	                return new UrlSegmentGroup([], this.parseChildren());
	            }
	        };
	        UrlParser.prototype.parseChildren = function () {
	            if (this.remaining.length == 0) {
	                return {};
	            }
	            if (this.peekStartsWith('/')) {
	                this.capture('/');
	            }
	            var paths = [];
	            if (!this.peekStartsWith('(')) {
	                paths.push(this.parseSegments());
	            }
	            while (this.peekStartsWith('/') && !this.peekStartsWith('//') && !this.peekStartsWith('/(')) {
	                this.capture('/');
	                paths.push(this.parseSegments());
	            }
	            var children = {};
	            if (this.peekStartsWith('/(')) {
	                this.capture('/');
	                children = this.parseParens(true);
	            }
	            var res = {};
	            if (this.peekStartsWith('(')) {
	                res = this.parseParens(false);
	            }
	            if (paths.length > 0 || Object.keys(children).length > 0) {
	                res[PRIMARY_OUTLET] = new UrlSegmentGroup(paths, children);
	            }
	            return res;
	        };
	        UrlParser.prototype.parseSegments = function () {
	            var path = matchSegments(this.remaining);
	            if (path === '' && this.peekStartsWith(';')) {
	                throw new Error("Empty path url segment cannot have parameters: '" + this.remaining + "'.");
	            }
	            this.capture(path);
	            var matrixParams = {};
	            if (this.peekStartsWith(';')) {
	                matrixParams = this.parseMatrixParams();
	            }
	            return new UrlSegment(decode(path), matrixParams);
	        };
	        UrlParser.prototype.parseQueryParams = function () {
	            var params = {};
	            if (this.peekStartsWith('?')) {
	                this.capture('?');
	                this.parseQueryParam(params);
	                while (this.remaining.length > 0 && this.peekStartsWith('&')) {
	                    this.capture('&');
	                    this.parseQueryParam(params);
	                }
	            }
	            return params;
	        };
	        UrlParser.prototype.parseFragment = function () {
	            if (this.peekStartsWith('#')) {
	                return decodeURI(this.remaining.substring(1));
	            }
	            else {
	                return null;
	            }
	        };
	        UrlParser.prototype.parseMatrixParams = function () {
	            var params = {};
	            while (this.remaining.length > 0 && this.peekStartsWith(';')) {
	                this.capture(';');
	                this.parseParam(params);
	            }
	            return params;
	        };
	        UrlParser.prototype.parseParam = function (params) {
	            var key = matchSegments(this.remaining);
	            if (!key) {
	                return;
	            }
	            this.capture(key);
	            var value = '';
	            if (this.peekStartsWith('=')) {
	                this.capture('=');
	                var valueMatch = matchSegments(this.remaining);
	                if (valueMatch) {
	                    value = valueMatch;
	                    this.capture(value);
	                }
	            }
	            params[decode(key)] = decode(value);
	        };
	        UrlParser.prototype.parseQueryParam = function (params) {
	            var key = matchQueryParams(this.remaining);
	            if (!key) {
	                return;
	            }
	            this.capture(key);
	            var value = '';
	            if (this.peekStartsWith('=')) {
	                this.capture('=');
	                var valueMatch = matchUrlQueryParamValue(this.remaining);
	                if (valueMatch) {
	                    value = valueMatch;
	                    this.capture(value);
	                }
	            }
	            params[decode(key)] = decode(value);
	        };
	        UrlParser.prototype.parseParens = function (allowPrimary) {
	            var segments = {};
	            this.capture('(');
	            while (!this.peekStartsWith(')') && this.remaining.length > 0) {
	                var path = matchSegments(this.remaining);
	                var next = this.remaining[path.length];
	                // if is is not one of these characters, then the segment was unescaped
	                // or the group was not closed
	                if (next !== '/' && next !== ')' && next !== ';') {
	                    throw new Error("Cannot parse url '" + this.url + "'");
	                }
	                var outletName = void 0;
	                if (path.indexOf(':') > -1) {
	                    outletName = path.substr(0, path.indexOf(':'));
	                    this.capture(outletName);
	                    this.capture(':');
	                }
	                else if (allowPrimary) {
	                    outletName = PRIMARY_OUTLET;
	                }
	                var children = this.parseChildren();
	                segments[outletName] = Object.keys(children).length === 1 ? children[PRIMARY_OUTLET] :
	                    new UrlSegmentGroup([], children);
	                if (this.peekStartsWith('//')) {
	                    this.capture('//');
	                }
	            }
	            this.capture(')');
	            return segments;
	        };
	        return UrlParser;
	    }());

	    var NoMatch = (function () {
	        function NoMatch(segmentGroup) {
	            if (segmentGroup === void 0) { segmentGroup = null; }
	            this.segmentGroup = segmentGroup;
	        }
	        return NoMatch;
	    }());
	    var AbsoluteRedirect = (function () {
	        function AbsoluteRedirect(urlTree) {
	            this.urlTree = urlTree;
	        }
	        return AbsoluteRedirect;
	    }());
	    function noMatch(segmentGroup) {
	        return new rxjs_Observable.Observable(function (obs) { return obs.error(new NoMatch(segmentGroup)); });
	    }
	    function absoluteRedirect(newTree) {
	        return new rxjs_Observable.Observable(function (obs) { return obs.error(new AbsoluteRedirect(newTree)); });
	    }
	    function namedOutletsRedirect(redirectTo) {
	        return new rxjs_Observable.Observable(function (obs) { return obs.error(new Error("Only absolute redirects can have named outlets. redirectTo: '" + redirectTo + "'")); });
	    }
	    function canLoadFails(route) {
	        return new rxjs_Observable.Observable(function (obs) { return obs.error(new NavigationCancelingError("Cannot load children because the guard of the route \"path: '" + route.path + "'\" returned false")); });
	    }
	    function applyRedirects(injector, configLoader, urlSerializer, urlTree, config) {
	        return new ApplyRedirects(injector, configLoader, urlSerializer, urlTree, config).apply();
	    }
	    var ApplyRedirects = (function () {
	        function ApplyRedirects(injector, configLoader, urlSerializer, urlTree, config) {
	            this.injector = injector;
	            this.configLoader = configLoader;
	            this.urlSerializer = urlSerializer;
	            this.urlTree = urlTree;
	            this.config = config;
	            this.allowRedirects = true;
	        }
	        ApplyRedirects.prototype.apply = function () {
	            var _this = this;
	            var expanded$ = this.expandSegmentGroup(this.injector, this.config, this.urlTree.root, PRIMARY_OUTLET);
	            var urlTrees$ = rxjs_operator_map.map.call(expanded$, function (rootSegmentGroup) { return _this.createUrlTree(rootSegmentGroup, _this.urlTree.queryParams, _this.urlTree.fragment); });
	            return rxjs_operator_catch._catch.call(urlTrees$, function (e) {
	                if (e instanceof AbsoluteRedirect) {
	                    // after an absolute redirect we do not apply any more redirects!
	                    _this.allowRedirects = false;
	                    // we need to run matching, so we can fetch all lazy-loaded modules
	                    return _this.match(e.urlTree);
	                }
	                else if (e instanceof NoMatch) {
	                    throw _this.noMatchError(e);
	                }
	                else {
	                    throw e;
	                }
	            });
	        };
	        ApplyRedirects.prototype.match = function (tree) {
	            var _this = this;
	            var expanded$ = this.expandSegmentGroup(this.injector, this.config, tree.root, PRIMARY_OUTLET);
	            var mapped$ = rxjs_operator_map.map.call(expanded$, function (rootSegmentGroup) {
	                return _this.createUrlTree(rootSegmentGroup, tree.queryParams, tree.fragment);
	            });
	            return rxjs_operator_catch._catch.call(mapped$, function (e) {
	                if (e instanceof NoMatch) {
	                    throw _this.noMatchError(e);
	                }
	                else {
	                    throw e;
	                }
	            });
	        };
	        ApplyRedirects.prototype.noMatchError = function (e) {
	            return new Error("Cannot match any routes. URL Segment: '" + e.segmentGroup + "'");
	        };
	        ApplyRedirects.prototype.createUrlTree = function (rootCandidate, queryParams, fragment) {
	            var root = rootCandidate.segments.length > 0 ?
	                new UrlSegmentGroup([], (_a = {}, _a[PRIMARY_OUTLET] = rootCandidate, _a)) :
	                rootCandidate;
	            return new UrlTree(root, queryParams, fragment);
	            var _a;
	        };
	        ApplyRedirects.prototype.expandSegmentGroup = function (injector, routes, segmentGroup, outlet) {
	            if (segmentGroup.segments.length === 0 && segmentGroup.hasChildren()) {
	                return rxjs_operator_map.map.call(this.expandChildren(injector, routes, segmentGroup), function (children) { return new UrlSegmentGroup([], children); });
	            }
	            else {
	                return this.expandSegment(injector, segmentGroup, routes, segmentGroup.segments, outlet, true);
	            }
	        };
	        ApplyRedirects.prototype.expandChildren = function (injector, routes, segmentGroup) {
	            var _this = this;
	            return waitForMap(segmentGroup.children, function (childOutlet, child) { return _this.expandSegmentGroup(injector, routes, child, childOutlet); });
	        };
	        ApplyRedirects.prototype.expandSegment = function (injector, segmentGroup, routes, segments, outlet, allowRedirects) {
	            var _this = this;
	            var routes$ = rxjs_observable_of.of.apply(void 0, routes);
	            var processedRoutes$ = rxjs_operator_map.map.call(routes$, function (r) {
	                var expanded$ = _this.expandSegmentAgainstRoute(injector, segmentGroup, routes, r, segments, outlet, allowRedirects);
	                return rxjs_operator_catch._catch.call(expanded$, function (e) {
	                    if (e instanceof NoMatch)
	                        return rxjs_observable_of.of(null);
	                    else
	                        throw e;
	                });
	            });
	            var concattedProcessedRoutes$ = rxjs_operator_concatAll.concatAll.call(processedRoutes$);
	            var first$ = rxjs_operator_first.first.call(concattedProcessedRoutes$, function (s) { return !!s; });
	            return rxjs_operator_catch._catch.call(first$, function (e, _) {
	                if (e instanceof rxjs_util_EmptyError.EmptyError) {
	                    if (_this.noLeftoversInUrl(segmentGroup, segments, outlet)) {
	                        return rxjs_observable_of.of(new UrlSegmentGroup([], {}));
	                    }
	                    else {
	                        throw new NoMatch(segmentGroup);
	                    }
	                }
	                else {
	                    throw e;
	                }
	            });
	        };
	        ApplyRedirects.prototype.noLeftoversInUrl = function (segmentGroup, segments, outlet) {
	            return segments.length === 0 && !segmentGroup.children[outlet];
	        };
	        ApplyRedirects.prototype.expandSegmentAgainstRoute = function (injector, segmentGroup, routes, route, paths, outlet, allowRedirects) {
	            if (getOutlet$1(route) !== outlet)
	                return noMatch(segmentGroup);
	            if (route.redirectTo !== undefined && !(allowRedirects && this.allowRedirects))
	                return noMatch(segmentGroup);
	            if (route.redirectTo === undefined) {
	                return this.matchSegmentAgainstRoute(injector, segmentGroup, route, paths);
	            }
	            else {
	                return this.expandSegmentAgainstRouteUsingRedirect(injector, segmentGroup, routes, route, paths, outlet);
	            }
	        };
	        ApplyRedirects.prototype.expandSegmentAgainstRouteUsingRedirect = function (injector, segmentGroup, routes, route, segments, outlet) {
	            if (route.path === '**') {
	                return this.expandWildCardWithParamsAgainstRouteUsingRedirect(injector, routes, route, outlet);
	            }
	            else {
	                return this.expandRegularSegmentAgainstRouteUsingRedirect(injector, segmentGroup, routes, route, segments, outlet);
	            }
	        };
	        ApplyRedirects.prototype.expandWildCardWithParamsAgainstRouteUsingRedirect = function (injector, routes, route, outlet) {
	            var _this = this;
	            var newTree = this.applyRedirectCommands([], route.redirectTo, {});
	            if (route.redirectTo.startsWith('/')) {
	                return absoluteRedirect(newTree);
	            }
	            else {
	                return rxjs_operator_mergeMap.mergeMap.call(this.lineralizeSegments(route, newTree), function (newSegments) {
	                    var group = new UrlSegmentGroup(newSegments, {});
	                    return _this.expandSegment(injector, group, routes, newSegments, outlet, false);
	                });
	            }
	        };
	        ApplyRedirects.prototype.expandRegularSegmentAgainstRouteUsingRedirect = function (injector, segmentGroup, routes, route, segments, outlet) {
	            var _this = this;
	            var _a = match(segmentGroup, route, segments), matched = _a.matched, consumedSegments = _a.consumedSegments, lastChild = _a.lastChild, positionalParamSegments = _a.positionalParamSegments;
	            if (!matched)
	                return noMatch(segmentGroup);
	            var newTree = this.applyRedirectCommands(consumedSegments, route.redirectTo, positionalParamSegments);
	            if (route.redirectTo.startsWith('/')) {
	                return absoluteRedirect(newTree);
	            }
	            else {
	                return rxjs_operator_mergeMap.mergeMap.call(this.lineralizeSegments(route, newTree), function (newSegments) {
	                    return _this.expandSegment(injector, segmentGroup, routes, newSegments.concat(segments.slice(lastChild)), outlet, false);
	                });
	            }
	        };
	        ApplyRedirects.prototype.matchSegmentAgainstRoute = function (injector, rawSegmentGroup, route, segments) {
	            var _this = this;
	            if (route.path === '**') {
	                if (route.loadChildren) {
	                    return rxjs_operator_map.map.call(this.configLoader.load(injector, route.loadChildren), function (r) {
	                        route._loadedConfig = r;
	                        return rxjs_observable_of.of(new UrlSegmentGroup(segments, {}));
	                    });
	                }
	                else {
	                    return rxjs_observable_of.of(new UrlSegmentGroup(segments, {}));
	                }
	            }
	            else {
	                var _a = match(rawSegmentGroup, route, segments), matched = _a.matched, consumedSegments_1 = _a.consumedSegments, lastChild = _a.lastChild;
	                if (!matched)
	                    return noMatch(rawSegmentGroup);
	                var rawSlicedSegments_1 = segments.slice(lastChild);
	                var childConfig$ = this.getChildConfig(injector, route);
	                return rxjs_operator_mergeMap.mergeMap.call(childConfig$, function (routerConfig) {
	                    var childInjector = routerConfig.injector;
	                    var childConfig = routerConfig.routes;
	                    var _a = split(rawSegmentGroup, consumedSegments_1, rawSlicedSegments_1, childConfig), segmentGroup = _a.segmentGroup, slicedSegments = _a.slicedSegments;
	                    if (slicedSegments.length === 0 && segmentGroup.hasChildren()) {
	                        var expanded$ = _this.expandChildren(childInjector, childConfig, segmentGroup);
	                        return rxjs_operator_map.map.call(expanded$, function (children) { return new UrlSegmentGroup(consumedSegments_1, children); });
	                    }
	                    else if (childConfig.length === 0 && slicedSegments.length === 0) {
	                        return rxjs_observable_of.of(new UrlSegmentGroup(consumedSegments_1, {}));
	                    }
	                    else {
	                        var expanded$ = _this.expandSegment(childInjector, segmentGroup, childConfig, slicedSegments, PRIMARY_OUTLET, true);
	                        return rxjs_operator_map.map.call(expanded$, function (cs) { return new UrlSegmentGroup(consumedSegments_1.concat(cs.segments), cs.children); });
	                    }
	                });
	            }
	        };
	        ApplyRedirects.prototype.getChildConfig = function (injector, route) {
	            var _this = this;
	            if (route.children) {
	                return rxjs_observable_of.of(new LoadedRouterConfig(route.children, injector, null, null));
	            }
	            else if (route.loadChildren) {
	                return rxjs_operator_mergeMap.mergeMap.call(runGuards(injector, route), function (shouldLoad) {
	                    if (shouldLoad) {
	                        if (route._loadedConfig) {
	                            return rxjs_observable_of.of(route._loadedConfig);
	                        }
	                        else {
	                            return rxjs_operator_map.map.call(_this.configLoader.load(injector, route.loadChildren), function (r) {
	                                route._loadedConfig = r;
	                                return r;
	                            });
	                        }
	                    }
	                    else {
	                        return canLoadFails(route);
	                    }
	                });
	            }
	            else {
	                return rxjs_observable_of.of(new LoadedRouterConfig([], injector, null, null));
	            }
	        };
	        ApplyRedirects.prototype.lineralizeSegments = function (route, urlTree) {
	            var res = [];
	            var c = urlTree.root;
	            while (true) {
	                res = res.concat(c.segments);
	                if (c.numberOfChildren === 0) {
	                    return rxjs_observable_of.of(res);
	                }
	                else if (c.numberOfChildren > 1 || !c.children[PRIMARY_OUTLET]) {
	                    return namedOutletsRedirect(route.redirectTo);
	                }
	                else {
	                    c = c.children[PRIMARY_OUTLET];
	                }
	            }
	        };
	        ApplyRedirects.prototype.applyRedirectCommands = function (segments, redirectTo, posParams) {
	            var t = this.urlSerializer.parse(redirectTo);
	            return this.applyRedirectCreatreUrlTree(redirectTo, this.urlSerializer.parse(redirectTo), segments, posParams);
	        };
	        ApplyRedirects.prototype.applyRedirectCreatreUrlTree = function (redirectTo, urlTree, segments, posParams) {
	            var newRoot = this.createSegmentGroup(redirectTo, urlTree.root, segments, posParams);
	            return new UrlTree(newRoot, this.createQueryParams(urlTree.queryParams, this.urlTree.queryParams), urlTree.fragment);
	        };
	        ApplyRedirects.prototype.createQueryParams = function (redirectToParams, actualParams) {
	            var res = {};
	            forEach(redirectToParams, function (v, k) {
	                if (v.startsWith(':')) {
	                    res[k] = actualParams[v.substring(1)];
	                }
	                else {
	                    res[k] = v;
	                }
	            });
	            return res;
	        };
	        ApplyRedirects.prototype.createSegmentGroup = function (redirectTo, group, segments, posParams) {
	            var _this = this;
	            var updatedSegments = this.createSegments(redirectTo, group.segments, segments, posParams);
	            var children = {};
	            forEach(group.children, function (child, name) {
	                children[name] = _this.createSegmentGroup(redirectTo, child, segments, posParams);
	            });
	            return new UrlSegmentGroup(updatedSegments, children);
	        };
	        ApplyRedirects.prototype.createSegments = function (redirectTo, redirectToSegments, actualSegments, posParams) {
	            var _this = this;
	            return redirectToSegments.map(function (s) { return s.path.startsWith(':') ? _this.findPosParam(redirectTo, s, posParams) :
	                _this.findOrReturn(s, actualSegments); });
	        };
	        ApplyRedirects.prototype.findPosParam = function (redirectTo, redirectToUrlSegment, posParams) {
	            var pos = posParams[redirectToUrlSegment.path.substring(1)];
	            if (!pos)
	                throw new Error("Cannot redirect to '" + redirectTo + "'. Cannot find '" + redirectToUrlSegment.path + "'.");
	            return pos;
	        };
	        ApplyRedirects.prototype.findOrReturn = function (redirectToUrlSegment, actualSegments) {
	            var idx = 0;
	            for (var _i = 0, actualSegments_1 = actualSegments; _i < actualSegments_1.length; _i++) {
	                var s = actualSegments_1[_i];
	                if (s.path === redirectToUrlSegment.path) {
	                    actualSegments.splice(idx);
	                    return s;
	                }
	                idx++;
	            }
	            return redirectToUrlSegment;
	        };
	        return ApplyRedirects;
	    }());
	    function runGuards(injector, route) {
	        var canLoad = route.canLoad;
	        if (!canLoad || canLoad.length === 0)
	            return rxjs_observable_of.of(true);
	        var obs = rxjs_operator_map.map.call(rxjs_observable_from.from(canLoad), function (c) {
	            var guard = injector.get(c);
	            if (guard.canLoad) {
	                return wrapIntoObservable(guard.canLoad(route));
	            }
	            else {
	                return wrapIntoObservable(guard(route));
	            }
	        });
	        return andObservables(obs);
	    }
	    function match(segmentGroup, route, segments) {
	        var noMatch = { matched: false, consumedSegments: [], lastChild: 0, positionalParamSegments: {} };
	        if (route.path === '') {
	            if ((route.pathMatch === 'full') && (segmentGroup.hasChildren() || segments.length > 0)) {
	                return { matched: false, consumedSegments: [], lastChild: 0, positionalParamSegments: {} };
	            }
	            else {
	                return { matched: true, consumedSegments: [], lastChild: 0, positionalParamSegments: {} };
	            }
	        }
	        var matcher = route.matcher || defaultUrlMatcher;
	        var res = matcher(segments, segmentGroup, route);
	        if (!res)
	            return noMatch;
	        return {
	            matched: true,
	            consumedSegments: res.consumed,
	            lastChild: res.consumed.length,
	            positionalParamSegments: res.posParams
	        };
	    }
	    function split(segmentGroup, consumedSegments, slicedSegments, config) {
	        if (slicedSegments.length > 0 &&
	            containsEmptyPathRedirectsWithNamedOutlets(segmentGroup, slicedSegments, config)) {
	            var s = new UrlSegmentGroup(consumedSegments, createChildrenForEmptySegments(config, new UrlSegmentGroup(slicedSegments, segmentGroup.children)));
	            return { segmentGroup: mergeTrivialChildren(s), slicedSegments: [] };
	        }
	        else if (slicedSegments.length === 0 &&
	            containsEmptyPathRedirects(segmentGroup, slicedSegments, config)) {
	            var s = new UrlSegmentGroup(segmentGroup.segments, addEmptySegmentsToChildrenIfNeeded(segmentGroup, slicedSegments, config, segmentGroup.children));
	            return { segmentGroup: mergeTrivialChildren(s), slicedSegments: slicedSegments };
	        }
	        else {
	            return { segmentGroup: segmentGroup, slicedSegments: slicedSegments };
	        }
	    }
	    function mergeTrivialChildren(s) {
	        if (s.numberOfChildren === 1 && s.children[PRIMARY_OUTLET]) {
	            var c = s.children[PRIMARY_OUTLET];
	            return new UrlSegmentGroup(s.segments.concat(c.segments), c.children);
	        }
	        else {
	            return s;
	        }
	    }
	    function addEmptySegmentsToChildrenIfNeeded(segmentGroup, slicedSegments, routes, children) {
	        var res = {};
	        for (var _i = 0, routes_1 = routes; _i < routes_1.length; _i++) {
	            var r = routes_1[_i];
	            if (emptyPathRedirect(segmentGroup, slicedSegments, r) && !children[getOutlet$1(r)]) {
	                res[getOutlet$1(r)] = new UrlSegmentGroup([], {});
	            }
	        }
	        return merge(children, res);
	    }
	    function createChildrenForEmptySegments(routes, primarySegmentGroup) {
	        var res = {};
	        res[PRIMARY_OUTLET] = primarySegmentGroup;
	        for (var _i = 0, routes_2 = routes; _i < routes_2.length; _i++) {
	            var r = routes_2[_i];
	            if (r.path === '' && getOutlet$1(r) !== PRIMARY_OUTLET) {
	                res[getOutlet$1(r)] = new UrlSegmentGroup([], {});
	            }
	        }
	        return res;
	    }
	    function containsEmptyPathRedirectsWithNamedOutlets(segmentGroup, slicedSegments, routes) {
	        return routes
	            .filter(function (r) { return emptyPathRedirect(segmentGroup, slicedSegments, r) &&
	            getOutlet$1(r) !== PRIMARY_OUTLET; })
	            .length > 0;
	    }
	    function containsEmptyPathRedirects(segmentGroup, slicedSegments, routes) {
	        return routes.filter(function (r) { return emptyPathRedirect(segmentGroup, slicedSegments, r); }).length > 0;
	    }
	    function emptyPathRedirect(segmentGroup, slicedSegments, r) {
	        if ((segmentGroup.hasChildren() || slicedSegments.length > 0) && r.pathMatch === 'full')
	            return false;
	        return r.path === '' && r.redirectTo !== undefined;
	    }
	    function getOutlet$1(route) {
	        return route.outlet ? route.outlet : PRIMARY_OUTLET;
	    }

	    function validateConfig(config) {
	        // forEach doesn't iterate undefined values
	        for (var i = 0; i < config.length; i++) {
	            validateNode(config[i]);
	        }
	    }
	    function validateNode(route) {
	        if (!route) {
	            throw new Error("\n      Invalid route configuration: Encountered undefined route.\n      The reason might be an extra comma.\n       \n      Example: \n      const routes: Routes = [\n        { path: '', redirectTo: '/dashboard', pathMatch: 'full' },\n        { path: 'dashboard',  component: DashboardComponent },, << two commas\n        { path: 'detail/:id', component: HeroDetailComponent }\n      ];\n    ");
	        }
	        if (Array.isArray(route)) {
	            throw new Error("Invalid route configuration: Array cannot be specified");
	        }
	        if (route.component === undefined && (route.outlet && route.outlet !== PRIMARY_OUTLET)) {
	            throw new Error("Invalid route configuration of route '" + route.path + "': a componentless route cannot have a named outlet set");
	        }
	        if (!!route.redirectTo && !!route.children) {
	            throw new Error("Invalid configuration of route '" + route.path + "': redirectTo and children cannot be used together");
	        }
	        if (!!route.redirectTo && !!route.loadChildren) {
	            throw new Error("Invalid configuration of route '" + route.path + "': redirectTo and loadChildren cannot be used together");
	        }
	        if (!!route.children && !!route.loadChildren) {
	            throw new Error("Invalid configuration of route '" + route.path + "': children and loadChildren cannot be used together");
	        }
	        if (!!route.redirectTo && !!route.component) {
	            throw new Error("Invalid configuration of route '" + route.path + "': redirectTo and component cannot be used together");
	        }
	        if (!!route.path && !!route.matcher) {
	            throw new Error("Invalid configuration of route '" + route.path + "': path and matcher cannot be used together");
	        }
	        if (route.redirectTo === undefined && !route.component && !route.children &&
	            !route.loadChildren) {
	            throw new Error("Invalid configuration of route '" + route.path + "': one of the following must be provided (component or redirectTo or children or loadChildren)");
	        }
	        if (route.path === undefined) {
	            throw new Error("Invalid route configuration: routes must have path specified");
	        }
	        if (route.path.startsWith('/')) {
	            throw new Error("Invalid route configuration of route '" + route.path + "': path cannot start with a slash");
	        }
	        if (route.path === '' && route.redirectTo !== undefined && route.pathMatch === undefined) {
	            var exp = "The default value of 'pathMatch' is 'prefix', but often the intent is to use 'full'.";
	            throw new Error("Invalid route configuration of route '{path: \"" + route.path + "\", redirectTo: \"" + route.redirectTo + "\"}': please provide 'pathMatch'. " + exp);
	        }
	        if (route.pathMatch !== undefined && route.pathMatch !== 'full' && route.pathMatch !== 'prefix') {
	            throw new Error("Invalid configuration of route '" + route.path + "': pathMatch can only be set to 'prefix' or 'full'");
	        }
	    }

	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    var Tree = (function () {
	        function Tree(root) {
	            this._root = root;
	        }
	        Object.defineProperty(Tree.prototype, "root", {
	            get: function () { return this._root.value; },
	            enumerable: true,
	            configurable: true
	        });
	        /**
	         * @internal
	         */
	        Tree.prototype.parent = function (t) {
	            var p = this.pathFromRoot(t);
	            return p.length > 1 ? p[p.length - 2] : null;
	        };
	        /**
	         * @internal
	         */
	        Tree.prototype.children = function (t) {
	            var n = findNode(t, this._root);
	            return n ? n.children.map(function (t) { return t.value; }) : [];
	        };
	        /**
	         * @internal
	         */
	        Tree.prototype.firstChild = function (t) {
	            var n = findNode(t, this._root);
	            return n && n.children.length > 0 ? n.children[0].value : null;
	        };
	        /**
	         * @internal
	         */
	        Tree.prototype.siblings = function (t) {
	            var p = findPath(t, this._root, []);
	            if (p.length < 2)
	                return [];
	            var c = p[p.length - 2].children.map(function (c) { return c.value; });
	            return c.filter(function (cc) { return cc !== t; });
	        };
	        /**
	         * @internal
	         */
	        Tree.prototype.pathFromRoot = function (t) { return findPath(t, this._root, []).map(function (s) { return s.value; }); };
	        return Tree;
	    }());
	    function findNode(expected, c) {
	        if (expected === c.value)
	            return c;
	        for (var _i = 0, _a = c.children; _i < _a.length; _i++) {
	            var cc = _a[_i];
	            var r = findNode(expected, cc);
	            if (r)
	                return r;
	        }
	        return null;
	    }
	    function findPath(expected, c, collected) {
	        collected.push(c);
	        if (expected === c.value)
	            return collected;
	        for (var _i = 0, _a = c.children; _i < _a.length; _i++) {
	            var cc = _a[_i];
	            var cloned = collected.slice(0);
	            var r = findPath(expected, cc, cloned);
	            if (r.length > 0)
	                return r;
	        }
	        return [];
	    }
	    var TreeNode = (function () {
	        function TreeNode(value, children) {
	            this.value = value;
	            this.children = children;
	        }
	        TreeNode.prototype.toString = function () { return "TreeNode(" + this.value + ")"; };
	        return TreeNode;
	    }());

	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    var __extends$1 = (this && this.__extends) || function (d, b) {
	        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	        function __() { this.constructor = d; }
	        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	    };
	    /**
	     * @whatItDoes Represents the state of the router.
	     *
	     * @howToUse
	     *
	     * ```
	     * @Component({templateUrl:'template.html'})
	     * class MyComponent {
	     *   constructor(router: Router) {
	     *     const state: RouterState = router.routerState;
	     *     const root: ActivatedRoute = state.root;
	     *     const child = root.firstChild;
	     *     const id: Observable<string> = child.params.map(p => p.id);
	     *     //...
	     *   }
	     * }
	     * ```
	     *
	     * @description
	     * RouterState is a tree of activated routes. Every node in this tree knows about the "consumed" URL
	     * segments,
	     * the extracted parameters, and the resolved data.
	     *
	     * See {@link ActivatedRoute} for more information.
	     *
	     * @stable
	     */
	    var RouterState = (function (_super) {
	        __extends$1(RouterState, _super);
	        /**
	         * @internal
	         */
	        function RouterState(root, 
	            /**
	             * The current snapshot of the router state.
	             */
	            snapshot) {
	            _super.call(this, root);
	            this.snapshot = snapshot;
	            setRouterStateSnapshot(this, root);
	        }
	        RouterState.prototype.toString = function () { return this.snapshot.toString(); };
	        return RouterState;
	    }(Tree));
	    function createEmptyState(urlTree, rootComponent) {
	        var snapshot = createEmptyStateSnapshot(urlTree, rootComponent);
	        var emptyUrl = new rxjs_BehaviorSubject.BehaviorSubject([new UrlSegment('', {})]);
	        var emptyParams = new rxjs_BehaviorSubject.BehaviorSubject({});
	        var emptyData = new rxjs_BehaviorSubject.BehaviorSubject({});
	        var emptyQueryParams = new rxjs_BehaviorSubject.BehaviorSubject({});
	        var fragment = new rxjs_BehaviorSubject.BehaviorSubject('');
	        var activated = new ActivatedRoute(emptyUrl, emptyParams, emptyQueryParams, fragment, emptyData, PRIMARY_OUTLET, rootComponent, snapshot.root);
	        activated.snapshot = snapshot.root;
	        return new RouterState(new TreeNode(activated, []), snapshot);
	    }
	    function createEmptyStateSnapshot(urlTree, rootComponent) {
	        var emptyParams = {};
	        var emptyData = {};
	        var emptyQueryParams = {};
	        var fragment = '';
	        var activated = new ActivatedRouteSnapshot([], emptyParams, emptyQueryParams, fragment, emptyData, PRIMARY_OUTLET, rootComponent, null, urlTree.root, -1, {});
	        return new RouterStateSnapshot('', new TreeNode(activated, []));
	    }
	    /**
	     * @whatItDoes Contains the information about a route associated with a component loaded in an
	     * outlet.
	     * ActivatedRoute can also be used to traverse the router state tree.
	     *
	     * @howToUse
	     *
	     * ```
	     * @Component({templateUrl:'./my-component.html'})
	     * class MyComponent {
	     *   constructor(route: ActivatedRoute) {
	     *     const id: Observable<string> = route.params.map(p => p.id);
	     *     const url: Observable<string> = route.url.map(s => s.join(''));
	     *     const user = route.data.map(d => d.user); //includes `data` and `resolve`
	     *   }
	     * }
	     * ```
	     *
	     * @stable
	     */
	    var ActivatedRoute = (function () {
	        /**
	         * @internal
	         */
	        function ActivatedRoute(
	            /**
	             *  The URL segments matched by this route. The observable will emit a new value when
	             *  the array of segments changes.
	             */
	            url, 
	            /**
	             * The matrix parameters scoped to this route. The observable will emit a new value when
	             * the set of the parameters changes.
	             */
	            params, 
	            /**
	             * The query parameters shared by all the routes. The observable will emit a new value when
	             * the set of the parameters changes.
	             */
	            queryParams, 
	            /**
	             * The URL fragment shared by all the routes. The observable will emit a new value when
	             * the URL fragment changes.
	             */
	            fragment, 
	            /**
	             * The static and resolved data of this route. The observable will emit a new value when
	             * any of the resolvers returns a new object.
	             */
	            data, 
	            /**
	             * The outlet name of the route. It's a constant.
	             */
	            outlet, 
	            /**
	             * The component of the route. It's a constant.
	             */
	            component, // TODO: vsavkin: remove |string
	            futureSnapshot) {
	            this.url = url;
	            this.params = params;
	            this.queryParams = queryParams;
	            this.fragment = fragment;
	            this.data = data;
	            this.outlet = outlet;
	            this.component = component;
	            this._futureSnapshot = futureSnapshot;
	        }
	        Object.defineProperty(ActivatedRoute.prototype, "routeConfig", {
	            /**
	             * The configuration used to match this route.
	             */
	            get: function () { return this._futureSnapshot.routeConfig; },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(ActivatedRoute.prototype, "root", {
	            /**
	             * The root of the router state.
	             */
	            get: function () { return this._routerState.root; },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(ActivatedRoute.prototype, "parent", {
	            /**
	             * The parent of this route in the router state tree.
	             */
	            get: function () { return this._routerState.parent(this); },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(ActivatedRoute.prototype, "firstChild", {
	            /**
	             * The first child of this route in the router state tree.
	             */
	            get: function () { return this._routerState.firstChild(this); },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(ActivatedRoute.prototype, "children", {
	            /**
	             * The children of this route in the router state tree.
	             */
	            get: function () { return this._routerState.children(this); },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(ActivatedRoute.prototype, "pathFromRoot", {
	            /**
	             * The path from the root of the router state tree to this route.
	             */
	            get: function () { return this._routerState.pathFromRoot(this); },
	            enumerable: true,
	            configurable: true
	        });
	        /**
	         * @docsNotRequired
	         */
	        ActivatedRoute.prototype.toString = function () {
	            return this.snapshot ? this.snapshot.toString() : "Future(" + this._futureSnapshot + ")";
	        };
	        return ActivatedRoute;
	    }());
	    /**
	     * @internal
	     */
	    function inheritedParamsDataResolve(route) {
	        var pathToRoot = route.pathFromRoot;
	        var inhertingStartingFrom = pathToRoot.length - 1;
	        while (inhertingStartingFrom >= 1) {
	            var current = pathToRoot[inhertingStartingFrom];
	            var parent_1 = pathToRoot[inhertingStartingFrom - 1];
	            // current route is an empty path => inherits its parent's params and data
	            if (current.routeConfig && current.routeConfig.path === '') {
	                inhertingStartingFrom--;
	            }
	            else if (!parent_1.component) {
	                inhertingStartingFrom--;
	            }
	            else {
	                break;
	            }
	        }
	        return pathToRoot.slice(inhertingStartingFrom).reduce(function (res, curr) {
	            var params = merge(res.params, curr.params);
	            var data = merge(res.data, curr.data);
	            var resolve = merge(res.resolve, curr._resolvedData);
	            return { params: params, data: data, resolve: resolve };
	        }, { params: {}, data: {}, resolve: {} });
	    }
	    /**
	     * @whatItDoes Contains the information about a route associated with a component loaded in an
	     * outlet
	     * at a particular moment in time. ActivatedRouteSnapshot can also be used to traverse the router
	     * state tree.
	     *
	     * @howToUse
	     *
	     * ```
	     * @Component({templateUrl:'./my-component.html'})
	     * class MyComponent {
	     *   constructor(route: ActivatedRoute) {
	     *     const id: string = route.snapshot.params.id;
	     *     const url: string = route.snapshot.url.join('');
	     *     const user = route.snapshot.data.user;
	     *   }
	     * }
	     * ```
	     *
	     * @stable
	     */
	    var ActivatedRouteSnapshot = (function () {
	        /**
	         * @internal
	         */
	        function ActivatedRouteSnapshot(
	            /**
	             *  The URL segments matched by this route.
	             */
	            url, 
	            /**
	             * The matrix parameters scoped to this route.
	             */
	            params, 
	            /**
	             * The query parameters shared by all the routes.
	             */
	            queryParams, 
	            /**
	             * The URL fragment shared by all the routes.
	             */
	            fragment, 
	            /**
	             * The static and resolved data of this route.
	             */
	            data, 
	            /**
	             * The outlet name of the route.
	             */
	            outlet, 
	            /**
	             * The component of the route.
	             */
	            component, routeConfig, urlSegment, lastPathIndex, resolve) {
	            this.url = url;
	            this.params = params;
	            this.queryParams = queryParams;
	            this.fragment = fragment;
	            this.data = data;
	            this.outlet = outlet;
	            this.component = component;
	            this._routeConfig = routeConfig;
	            this._urlSegment = urlSegment;
	            this._lastPathIndex = lastPathIndex;
	            this._resolve = resolve;
	        }
	        Object.defineProperty(ActivatedRouteSnapshot.prototype, "routeConfig", {
	            /**
	             * The configuration used to match this route.
	             */
	            get: function () { return this._routeConfig; },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(ActivatedRouteSnapshot.prototype, "root", {
	            /**
	             * The root of the router state.
	             */
	            get: function () { return this._routerState.root; },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(ActivatedRouteSnapshot.prototype, "parent", {
	            /**
	             * The parent of this route in the router state tree.
	             */
	            get: function () { return this._routerState.parent(this); },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(ActivatedRouteSnapshot.prototype, "firstChild", {
	            /**
	             * The first child of this route in the router state tree.
	             */
	            get: function () { return this._routerState.firstChild(this); },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(ActivatedRouteSnapshot.prototype, "children", {
	            /**
	             * The children of this route in the router state tree.
	             */
	            get: function () { return this._routerState.children(this); },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(ActivatedRouteSnapshot.prototype, "pathFromRoot", {
	            /**
	             * The path from the root of the router state tree to this route.
	             */
	            get: function () { return this._routerState.pathFromRoot(this); },
	            enumerable: true,
	            configurable: true
	        });
	        /**
	         * @docsNotRequired
	         */
	        ActivatedRouteSnapshot.prototype.toString = function () {
	            var url = this.url.map(function (s) { return s.toString(); }).join('/');
	            var matched = this._routeConfig ? this._routeConfig.path : '';
	            return "Route(url:'" + url + "', path:'" + matched + "')";
	        };
	        return ActivatedRouteSnapshot;
	    }());
	    /**
	     * @whatItDoes Represents the state of the router at a moment in time.
	     *
	     * @howToUse
	     *
	     * ```
	     * @Component({templateUrl:'template.html'})
	     * class MyComponent {
	     *   constructor(router: Router) {
	     *     const state: RouterState = router.routerState;
	     *     const snapshot: RouterStateSnapshot = state.snapshot;
	     *     const root: ActivatedRouteSnapshot = snapshot.root;
	     *     const child = root.firstChild;
	     *     const id: Observable<string> = child.params.map(p => p.id);
	     *     //...
	     *   }
	     * }
	     * ```
	     *
	     * @description
	     * RouterStateSnapshot is a tree of activated route snapshots. Every node in this tree knows about
	     * the "consumed" URL segments, the extracted parameters, and the resolved data.
	     *
	     * @stable
	     */
	    var RouterStateSnapshot = (function (_super) {
	        __extends$1(RouterStateSnapshot, _super);
	        /**
	         * @internal
	         */
	        function RouterStateSnapshot(
	            /** The url from which this snapshot was created */
	            url, root) {
	            _super.call(this, root);
	            this.url = url;
	            setRouterStateSnapshot(this, root);
	        }
	        RouterStateSnapshot.prototype.toString = function () { return serializeNode(this._root); };
	        return RouterStateSnapshot;
	    }(Tree));
	    function setRouterStateSnapshot(state, node) {
	        node.value._routerState = state;
	        node.children.forEach(function (c) { return setRouterStateSnapshot(state, c); });
	    }
	    function serializeNode(node) {
	        var c = node.children.length > 0 ? " { " + node.children.map(serializeNode).join(", ") + " } " : '';
	        return "" + node.value + c;
	    }
	    /**
	     * The expectation is that the activate route is created with the right set of parameters.
	     * So we push new values into the observables only when they are not the initial values.
	     * And we detect that by checking if the snapshot field is set.
	     */
	    function advanceActivatedRoute(route) {
	        if (route.snapshot) {
	            if (!shallowEqual(route.snapshot.queryParams, route._futureSnapshot.queryParams)) {
	                route.queryParams.next(route._futureSnapshot.queryParams);
	            }
	            if (route.snapshot.fragment !== route._futureSnapshot.fragment) {
	                route.fragment.next(route._futureSnapshot.fragment);
	            }
	            if (!shallowEqual(route.snapshot.params, route._futureSnapshot.params)) {
	                route.params.next(route._futureSnapshot.params);
	            }
	            if (!shallowEqualArrays(route.snapshot.url, route._futureSnapshot.url)) {
	                route.url.next(route._futureSnapshot.url);
	            }
	            if (!equalParamsAndUrlSegments(route.snapshot, route._futureSnapshot)) {
	                route.data.next(route._futureSnapshot.data);
	            }
	            route.snapshot = route._futureSnapshot;
	        }
	        else {
	            route.snapshot = route._futureSnapshot;
	            // this is for resolved data
	            route.data.next(route._futureSnapshot.data);
	        }
	    }
	    function equalParamsAndUrlSegments(a, b) {
	        return shallowEqual(a.params, b.params) && equalSegments(a.url, b.url);
	    }

	    function createRouterState(curr, prevState) {
	        var root = createNode(curr._root, prevState ? prevState._root : undefined);
	        return new RouterState(root, curr);
	    }
	    function createNode(curr, prevState) {
	        if (prevState && equalRouteSnapshots(prevState.value.snapshot, curr.value)) {
	            var value = prevState.value;
	            value._futureSnapshot = curr.value;
	            var children = createOrReuseChildren(curr, prevState);
	            return new TreeNode(value, children);
	        }
	        else {
	            var value = createActivatedRoute(curr.value);
	            var children = curr.children.map(function (c) { return createNode(c); });
	            return new TreeNode(value, children);
	        }
	    }
	    function createOrReuseChildren(curr, prevState) {
	        return curr.children.map(function (child) {
	            for (var _i = 0, _a = prevState.children; _i < _a.length; _i++) {
	                var p = _a[_i];
	                if (equalRouteSnapshots(p.value.snapshot, child.value)) {
	                    return createNode(child, p);
	                }
	            }
	            return createNode(child);
	        });
	    }
	    function createActivatedRoute(c) {
	        return new ActivatedRoute(new rxjs_BehaviorSubject.BehaviorSubject(c.url), new rxjs_BehaviorSubject.BehaviorSubject(c.params), new rxjs_BehaviorSubject.BehaviorSubject(c.queryParams), new rxjs_BehaviorSubject.BehaviorSubject(c.fragment), new rxjs_BehaviorSubject.BehaviorSubject(c.data), c.outlet, c.component, c);
	    }
	    function equalRouteSnapshots(a, b) {
	        return a._routeConfig === b._routeConfig;
	    }

	    function createUrlTree(route, urlTree, commands, queryParams, fragment) {
	        if (commands.length === 0) {
	            return tree(urlTree.root, urlTree.root, urlTree, queryParams, fragment);
	        }
	        var normalizedCommands = normalizeCommands(commands);
	        validateCommands(normalizedCommands);
	        if (navigateToRoot(normalizedCommands)) {
	            return tree(urlTree.root, new UrlSegmentGroup([], {}), urlTree, queryParams, fragment);
	        }
	        var startingPosition = findStartingPosition(normalizedCommands, urlTree, route);
	        var segmentGroup = startingPosition.processChildren ?
	            updateSegmentGroupChildren(startingPosition.segmentGroup, startingPosition.index, normalizedCommands.commands) :
	            updateSegmentGroup(startingPosition.segmentGroup, startingPosition.index, normalizedCommands.commands);
	        return tree(startingPosition.segmentGroup, segmentGroup, urlTree, queryParams, fragment);
	    }
	    function validateCommands(n) {
	        if (n.isAbsolute && n.commands.length > 0 && isMatrixParams(n.commands[0])) {
	            throw new Error('Root segment cannot have matrix parameters');
	        }
	        var c = n.commands.filter(function (c) { return typeof c === 'object' && c.outlets !== undefined; });
	        if (c.length > 0 && c[0] !== n.commands[n.commands.length - 1]) {
	            throw new Error('{outlets:{}} has to be the last command');
	        }
	    }
	    function isMatrixParams(command) {
	        return typeof command === 'object' && command.outlets === undefined &&
	            command.segmentPath === undefined;
	    }
	    function tree(oldSegmentGroup, newSegmentGroup, urlTree, queryParams, fragment) {
	        if (urlTree.root === oldSegmentGroup) {
	            return new UrlTree(newSegmentGroup, stringify(queryParams), fragment);
	        }
	        else {
	            return new UrlTree(replaceSegment(urlTree.root, oldSegmentGroup, newSegmentGroup), stringify(queryParams), fragment);
	        }
	    }
	    function replaceSegment(current, oldSegment, newSegment) {
	        var children = {};
	        forEach(current.children, function (c, outletName) {
	            if (c === oldSegment) {
	                children[outletName] = newSegment;
	            }
	            else {
	                children[outletName] = replaceSegment(c, oldSegment, newSegment);
	            }
	        });
	        return new UrlSegmentGroup(current.segments, children);
	    }
	    function navigateToRoot(normalizedChange) {
	        return normalizedChange.isAbsolute && normalizedChange.commands.length === 1 &&
	            normalizedChange.commands[0] == '/';
	    }
	    var NormalizedNavigationCommands = (function () {
	        function NormalizedNavigationCommands(isAbsolute, numberOfDoubleDots, commands) {
	            this.isAbsolute = isAbsolute;
	            this.numberOfDoubleDots = numberOfDoubleDots;
	            this.commands = commands;
	        }
	        return NormalizedNavigationCommands;
	    }());
	    function normalizeCommands(commands) {
	        if ((typeof commands[0] === 'string') && commands.length === 1 && commands[0] == '/') {
	            return new NormalizedNavigationCommands(true, 0, commands);
	        }
	        var numberOfDoubleDots = 0;
	        var isAbsolute = false;
	        var res = [];
	        var _loop_1 = function(i) {
	            var c = commands[i];
	            if (typeof c === 'object' && c.outlets !== undefined) {
	                var r_1 = {};
	                forEach(c.outlets, function (commands, name) {
	                    if (typeof commands === 'string') {
	                        r_1[name] = commands.split('/');
	                    }
	                    else {
	                        r_1[name] = commands;
	                    }
	                });
	                res.push({ outlets: r_1 });
	                return "continue";
	            }
	            if (typeof c === 'object' && c.segmentPath !== undefined) {
	                res.push(c.segmentPath);
	                return "continue";
	            }
	            if (!(typeof c === 'string')) {
	                res.push(c);
	                return "continue";
	            }
	            if (i === 0) {
	                var parts = c.split('/');
	                for (var j = 0; j < parts.length; ++j) {
	                    var cc = parts[j];
	                    if (j == 0 && cc == '.') {
	                    }
	                    else if (j == 0 && cc == '') {
	                        isAbsolute = true;
	                    }
	                    else if (cc == '..') {
	                        numberOfDoubleDots++;
	                    }
	                    else if (cc != '') {
	                        res.push(cc);
	                    }
	                }
	            }
	            else {
	                res.push(c);
	            }
	        };
	        for (var i = 0; i < commands.length; ++i) {
	            _loop_1(i);
	        }
	        return new NormalizedNavigationCommands(isAbsolute, numberOfDoubleDots, res);
	    }
	    var Position = (function () {
	        function Position(segmentGroup, processChildren, index) {
	            this.segmentGroup = segmentGroup;
	            this.processChildren = processChildren;
	            this.index = index;
	        }
	        return Position;
	    }());
	    function findStartingPosition(normalizedChange, urlTree, route) {
	        if (normalizedChange.isAbsolute) {
	            return new Position(urlTree.root, true, 0);
	        }
	        else if (route.snapshot._lastPathIndex === -1) {
	            return new Position(route.snapshot._urlSegment, true, 0);
	        }
	        else {
	            var modifier = isMatrixParams(normalizedChange.commands[0]) ? 0 : 1;
	            var index = route.snapshot._lastPathIndex + modifier;
	            return createPositionApplyingDoubleDots(route.snapshot._urlSegment, index, normalizedChange.numberOfDoubleDots);
	        }
	    }
	    function createPositionApplyingDoubleDots(group, index, numberOfDoubleDots) {
	        var g = group;
	        var ci = index;
	        var dd = numberOfDoubleDots;
	        while (dd > ci) {
	            dd -= ci;
	            g = g.parent;
	            if (!g) {
	                throw new Error('Invalid number of \'../\'');
	            }
	            ci = g.segments.length;
	        }
	        return new Position(g, false, ci - dd);
	    }
	    function getPath(command) {
	        if (typeof command === 'object' && command.outlets)
	            return command.outlets[PRIMARY_OUTLET];
	        return "" + command;
	    }
	    function getOutlets(commands) {
	        if (!(typeof commands[0] === 'object'))
	            return (_a = {}, _a[PRIMARY_OUTLET] = commands, _a);
	        if (commands[0].outlets === undefined)
	            return (_b = {}, _b[PRIMARY_OUTLET] = commands, _b);
	        return commands[0].outlets;
	        var _a, _b;
	    }
	    function updateSegmentGroup(segmentGroup, startIndex, commands) {
	        if (!segmentGroup) {
	            segmentGroup = new UrlSegmentGroup([], {});
	        }
	        if (segmentGroup.segments.length === 0 && segmentGroup.hasChildren()) {
	            return updateSegmentGroupChildren(segmentGroup, startIndex, commands);
	        }
	        var m = prefixedWith(segmentGroup, startIndex, commands);
	        var slicedCommands = commands.slice(m.commandIndex);
	        if (m.match && m.pathIndex < segmentGroup.segments.length) {
	            var g = new UrlSegmentGroup(segmentGroup.segments.slice(0, m.pathIndex), {});
	            g.children[PRIMARY_OUTLET] =
	                new UrlSegmentGroup(segmentGroup.segments.slice(m.pathIndex), segmentGroup.children);
	            return updateSegmentGroupChildren(g, 0, slicedCommands);
	        }
	        else if (m.match && slicedCommands.length === 0) {
	            return new UrlSegmentGroup(segmentGroup.segments, {});
	        }
	        else if (m.match && !segmentGroup.hasChildren()) {
	            return createNewSegmentGroup(segmentGroup, startIndex, commands);
	        }
	        else if (m.match) {
	            return updateSegmentGroupChildren(segmentGroup, 0, slicedCommands);
	        }
	        else {
	            return createNewSegmentGroup(segmentGroup, startIndex, commands);
	        }
	    }
	    function updateSegmentGroupChildren(segmentGroup, startIndex, commands) {
	        if (commands.length === 0) {
	            return new UrlSegmentGroup(segmentGroup.segments, {});
	        }
	        else {
	            var outlets_1 = getOutlets(commands);
	            var children_1 = {};
	            forEach(outlets_1, function (commands, outlet) {
	                if (commands !== null) {
	                    children_1[outlet] = updateSegmentGroup(segmentGroup.children[outlet], startIndex, commands);
	                }
	            });
	            forEach(segmentGroup.children, function (child, childOutlet) {
	                if (outlets_1[childOutlet] === undefined) {
	                    children_1[childOutlet] = child;
	                }
	            });
	            return new UrlSegmentGroup(segmentGroup.segments, children_1);
	        }
	    }
	    function prefixedWith(segmentGroup, startIndex, commands) {
	        var currentCommandIndex = 0;
	        var currentPathIndex = startIndex;
	        var noMatch = { match: false, pathIndex: 0, commandIndex: 0 };
	        while (currentPathIndex < segmentGroup.segments.length) {
	            if (currentCommandIndex >= commands.length)
	                return noMatch;
	            var path = segmentGroup.segments[currentPathIndex];
	            var curr = getPath(commands[currentCommandIndex]);
	            var next = currentCommandIndex < commands.length - 1 ? commands[currentCommandIndex + 1] : null;
	            if (currentPathIndex > 0 && curr === undefined)
	                break;
	            if (curr && next && (typeof next === 'object') && next.outlets === undefined) {
	                if (!compare(curr, next, path))
	                    return noMatch;
	                currentCommandIndex += 2;
	            }
	            else {
	                if (!compare(curr, {}, path))
	                    return noMatch;
	                currentCommandIndex++;
	            }
	            currentPathIndex++;
	        }
	        return { match: true, pathIndex: currentPathIndex, commandIndex: currentCommandIndex };
	    }
	    function createNewSegmentGroup(segmentGroup, startIndex, commands) {
	        var paths = segmentGroup.segments.slice(0, startIndex);
	        var i = 0;
	        while (i < commands.length) {
	            if (typeof commands[i] === 'object' && commands[i].outlets !== undefined) {
	                var children = createNewSegmentChldren(commands[i].outlets);
	                return new UrlSegmentGroup(paths, children);
	            }
	            // if we start with an object literal, we need to reuse the path part from the segment
	            if (i === 0 && isMatrixParams(commands[0])) {
	                var p = segmentGroup.segments[startIndex];
	                paths.push(new UrlSegment(p.path, commands[0]));
	                i++;
	                continue;
	            }
	            var curr = getPath(commands[i]);
	            var next = (i < commands.length - 1) ? commands[i + 1] : null;
	            if (curr && next && isMatrixParams(next)) {
	                paths.push(new UrlSegment(curr, stringify(next)));
	                i += 2;
	            }
	            else {
	                paths.push(new UrlSegment(curr, {}));
	                i++;
	            }
	        }
	        return new UrlSegmentGroup(paths, {});
	    }
	    function createNewSegmentChldren(outlets) {
	        var children = {};
	        forEach(outlets, function (commands, outlet) {
	            if (commands !== null) {
	                children[outlet] = createNewSegmentGroup(new UrlSegmentGroup([], {}), 0, commands);
	            }
	        });
	        return children;
	    }
	    function stringify(params) {
	        var res = {};
	        forEach(params, function (v, k) { return res[k] = "" + v; });
	        return res;
	    }
	    function compare(path, params, segment) {
	        return path == segment.path && shallowEqual(params, segment.parameters);
	    }

	    var NoMatch$1 = (function () {
	        function NoMatch() {
	        }
	        return NoMatch;
	    }());
	    function recognize(rootComponentType, config, urlTree, url) {
	        return new Recognizer(rootComponentType, config, urlTree, url).recognize();
	    }
	    var Recognizer = (function () {
	        function Recognizer(rootComponentType, config, urlTree, url) {
	            this.rootComponentType = rootComponentType;
	            this.config = config;
	            this.urlTree = urlTree;
	            this.url = url;
	        }
	        Recognizer.prototype.recognize = function () {
	            try {
	                var rootSegmentGroup = split$1(this.urlTree.root, [], [], this.config).segmentGroup;
	                var children = this.processSegmentGroup(this.config, rootSegmentGroup, PRIMARY_OUTLET);
	                var root = new ActivatedRouteSnapshot([], Object.freeze({}), Object.freeze(this.urlTree.queryParams), this.urlTree.fragment, {}, PRIMARY_OUTLET, this.rootComponentType, null, this.urlTree.root, -1, {});
	                var rootNode = new TreeNode(root, children);
	                var routeState = new RouterStateSnapshot(this.url, rootNode);
	                this.inheriteParamsAndData(routeState._root);
	                return rxjs_observable_of.of(routeState);
	            }
	            catch (e) {
	                return new rxjs_Observable.Observable(function (obs) { return obs.error(e); });
	            }
	        };
	        Recognizer.prototype.inheriteParamsAndData = function (routeNode) {
	            var _this = this;
	            var route = routeNode.value;
	            var i = inheritedParamsDataResolve(route);
	            route.params = Object.freeze(i.params);
	            route.data = Object.freeze(i.data);
	            routeNode.children.forEach(function (n) { return _this.inheriteParamsAndData(n); });
	        };
	        Recognizer.prototype.processSegmentGroup = function (config, segmentGroup, outlet) {
	            if (segmentGroup.segments.length === 0 && segmentGroup.hasChildren()) {
	                return this.processChildren(config, segmentGroup);
	            }
	            else {
	                return this.processSegment(config, segmentGroup, 0, segmentGroup.segments, outlet);
	            }
	        };
	        Recognizer.prototype.processChildren = function (config, segmentGroup) {
	            var _this = this;
	            var children = mapChildrenIntoArray(segmentGroup, function (child, childOutlet) { return _this.processSegmentGroup(config, child, childOutlet); });
	            checkOutletNameUniqueness(children);
	            sortActivatedRouteSnapshots(children);
	            return children;
	        };
	        Recognizer.prototype.processSegment = function (config, segmentGroup, pathIndex, segments, outlet) {
	            for (var _i = 0, config_1 = config; _i < config_1.length; _i++) {
	                var r = config_1[_i];
	                try {
	                    return this.processSegmentAgainstRoute(r, segmentGroup, pathIndex, segments, outlet);
	                }
	                catch (e) {
	                    if (!(e instanceof NoMatch$1))
	                        throw e;
	                }
	            }
	            if (this.noLeftoversInUrl(segmentGroup, segments, outlet)) {
	                return [];
	            }
	            else {
	                throw new NoMatch$1();
	            }
	        };
	        Recognizer.prototype.noLeftoversInUrl = function (segmentGroup, segments, outlet) {
	            return segments.length === 0 && !segmentGroup.children[outlet];
	        };
	        Recognizer.prototype.processSegmentAgainstRoute = function (route, rawSegment, pathIndex, segments, outlet) {
	            if (route.redirectTo)
	                throw new NoMatch$1();
	            if ((route.outlet ? route.outlet : PRIMARY_OUTLET) !== outlet)
	                throw new NoMatch$1();
	            if (route.path === '**') {
	                var params = segments.length > 0 ? last(segments).parameters : {};
	                var snapshot_1 = new ActivatedRouteSnapshot(segments, params, Object.freeze(this.urlTree.queryParams), this.urlTree.fragment, getData(route), outlet, route.component, route, getSourceSegmentGroup(rawSegment), getPathIndexShift(rawSegment) + segments.length, getResolve(route));
	                return [new TreeNode(snapshot_1, [])];
	            }
	            var _a = match$1(rawSegment, route, segments), consumedSegments = _a.consumedSegments, parameters = _a.parameters, lastChild = _a.lastChild;
	            var rawSlicedSegments = segments.slice(lastChild);
	            var childConfig = getChildConfig(route);
	            var _b = split$1(rawSegment, consumedSegments, rawSlicedSegments, childConfig), segmentGroup = _b.segmentGroup, slicedSegments = _b.slicedSegments;
	            var snapshot = new ActivatedRouteSnapshot(consumedSegments, parameters, Object.freeze(this.urlTree.queryParams), this.urlTree.fragment, getData(route), outlet, route.component, route, getSourceSegmentGroup(rawSegment), getPathIndexShift(rawSegment) + consumedSegments.length, getResolve(route));
	            if (slicedSegments.length === 0 && segmentGroup.hasChildren()) {
	                var children = this.processChildren(childConfig, segmentGroup);
	                return [new TreeNode(snapshot, children)];
	            }
	            else if (childConfig.length === 0 && slicedSegments.length === 0) {
	                return [new TreeNode(snapshot, [])];
	            }
	            else {
	                var children = this.processSegment(childConfig, segmentGroup, pathIndex + lastChild, slicedSegments, PRIMARY_OUTLET);
	                return [new TreeNode(snapshot, children)];
	            }
	        };
	        return Recognizer;
	    }());
	    function sortActivatedRouteSnapshots(nodes) {
	        nodes.sort(function (a, b) {
	            if (a.value.outlet === PRIMARY_OUTLET)
	                return -1;
	            if (b.value.outlet === PRIMARY_OUTLET)
	                return 1;
	            return a.value.outlet.localeCompare(b.value.outlet);
	        });
	    }
	    function getChildConfig(route) {
	        if (route.children) {
	            return route.children;
	        }
	        else if (route.loadChildren) {
	            return route._loadedConfig.routes;
	        }
	        else {
	            return [];
	        }
	    }
	    function match$1(segmentGroup, route, segments) {
	        if (route.path === '') {
	            if (route.pathMatch === 'full' && (segmentGroup.hasChildren() || segments.length > 0)) {
	                throw new NoMatch$1();
	            }
	            else {
	                return { consumedSegments: [], lastChild: 0, parameters: {} };
	            }
	        }
	        var matcher = route.matcher || defaultUrlMatcher;
	        var res = matcher(segments, segmentGroup, route);
	        if (!res)
	            throw new NoMatch$1();
	        var posParams = {};
	        forEach(res.posParams, function (v, k) { posParams[k] = v.path; });
	        var parameters = merge(posParams, res.consumed[res.consumed.length - 1].parameters);
	        return { consumedSegments: res.consumed, lastChild: res.consumed.length, parameters: parameters };
	    }
	    function checkOutletNameUniqueness(nodes) {
	        var names = {};
	        nodes.forEach(function (n) {
	            var routeWithSameOutletName = names[n.value.outlet];
	            if (routeWithSameOutletName) {
	                var p = routeWithSameOutletName.url.map(function (s) { return s.toString(); }).join('/');
	                var c = n.value.url.map(function (s) { return s.toString(); }).join('/');
	                throw new Error("Two segments cannot have the same outlet name: '" + p + "' and '" + c + "'.");
	            }
	            names[n.value.outlet] = n.value;
	        });
	    }
	    function getSourceSegmentGroup(segmentGroup) {
	        var s = segmentGroup;
	        while (s._sourceSegment) {
	            s = s._sourceSegment;
	        }
	        return s;
	    }
	    function getPathIndexShift(segmentGroup) {
	        var s = segmentGroup;
	        var res = (s._segmentIndexShift ? s._segmentIndexShift : 0);
	        while (s._sourceSegment) {
	            s = s._sourceSegment;
	            res += (s._segmentIndexShift ? s._segmentIndexShift : 0);
	        }
	        return res - 1;
	    }
	    function split$1(segmentGroup, consumedSegments, slicedSegments, config) {
	        if (slicedSegments.length > 0 &&
	            containsEmptyPathMatchesWithNamedOutlets(segmentGroup, slicedSegments, config)) {
	            var s = new UrlSegmentGroup(consumedSegments, createChildrenForEmptyPaths(segmentGroup, consumedSegments, config, new UrlSegmentGroup(slicedSegments, segmentGroup.children)));
	            s._sourceSegment = segmentGroup;
	            s._segmentIndexShift = consumedSegments.length;
	            return { segmentGroup: s, slicedSegments: [] };
	        }
	        else if (slicedSegments.length === 0 &&
	            containsEmptyPathMatches(segmentGroup, slicedSegments, config)) {
	            var s = new UrlSegmentGroup(segmentGroup.segments, addEmptyPathsToChildrenIfNeeded(segmentGroup, slicedSegments, config, segmentGroup.children));
	            s._sourceSegment = segmentGroup;
	            s._segmentIndexShift = consumedSegments.length;
	            return { segmentGroup: s, slicedSegments: slicedSegments };
	        }
	        else {
	            var s = new UrlSegmentGroup(segmentGroup.segments, segmentGroup.children);
	            s._sourceSegment = segmentGroup;
	            s._segmentIndexShift = consumedSegments.length;
	            return { segmentGroup: s, slicedSegments: slicedSegments };
	        }
	    }
	    function addEmptyPathsToChildrenIfNeeded(segmentGroup, slicedSegments, routes, children) {
	        var res = {};
	        for (var _i = 0, routes_1 = routes; _i < routes_1.length; _i++) {
	            var r = routes_1[_i];
	            if (emptyPathMatch(segmentGroup, slicedSegments, r) && !children[getOutlet$2(r)]) {
	                var s = new UrlSegmentGroup([], {});
	                s._sourceSegment = segmentGroup;
	                s._segmentIndexShift = segmentGroup.segments.length;
	                res[getOutlet$2(r)] = s;
	            }
	        }
	        return merge(children, res);
	    }
	    function createChildrenForEmptyPaths(segmentGroup, consumedSegments, routes, primarySegment) {
	        var res = {};
	        res[PRIMARY_OUTLET] = primarySegment;
	        primarySegment._sourceSegment = segmentGroup;
	        primarySegment._segmentIndexShift = consumedSegments.length;
	        for (var _i = 0, routes_2 = routes; _i < routes_2.length; _i++) {
	            var r = routes_2[_i];
	            if (r.path === '' && getOutlet$2(r) !== PRIMARY_OUTLET) {
	                var s = new UrlSegmentGroup([], {});
	                s._sourceSegment = segmentGroup;
	                s._segmentIndexShift = consumedSegments.length;
	                res[getOutlet$2(r)] = s;
	            }
	        }
	        return res;
	    }
	    function containsEmptyPathMatchesWithNamedOutlets(segmentGroup, slicedSegments, routes) {
	        return routes
	            .filter(function (r) { return emptyPathMatch(segmentGroup, slicedSegments, r) &&
	            getOutlet$2(r) !== PRIMARY_OUTLET; })
	            .length > 0;
	    }
	    function containsEmptyPathMatches(segmentGroup, slicedSegments, routes) {
	        return routes.filter(function (r) { return emptyPathMatch(segmentGroup, slicedSegments, r); }).length > 0;
	    }
	    function emptyPathMatch(segmentGroup, slicedSegments, r) {
	        if ((segmentGroup.hasChildren() || slicedSegments.length > 0) && r.pathMatch === 'full')
	            return false;
	        return r.path === '' && r.redirectTo === undefined;
	    }
	    function getOutlet$2(route) {
	        return route.outlet ? route.outlet : PRIMARY_OUTLET;
	    }
	    function getData(route) {
	        return route.data ? route.data : {};
	    }
	    function getResolve(route) {
	        return route.resolve ? route.resolve : {};
	    }

	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    /**
	     * @whatItDoes Contains all the router outlets created in a component.
	     *
	     * @stable
	     */
	    var RouterOutletMap = (function () {
	        function RouterOutletMap() {
	            /** @internal */
	            this._outlets = {};
	        }
	        /**
	         * Adds an outlet to this map.
	         */
	        RouterOutletMap.prototype.registerOutlet = function (name, outlet) { this._outlets[name] = outlet; };
	        /**
	         * Removes an outlet from this map.
	         */
	        RouterOutletMap.prototype.removeOutlet = function (name) { this._outlets[name] = undefined; };
	        return RouterOutletMap;
	    }());

	    /**
	     * @license
	     * Copyright Google Inc. All Rights Reserved.
	     *
	     * Use of this source code is governed by an MIT-style license that can be
	     * found in the LICENSE file at https://angular.io/license
	     */
	    /**
	     * @whatItDoes Provides a way to migrate Angular 1 applications to Angular 2.
	     *
	     * @experimental
	     */
	    var UrlHandlingStrategy = (function () {
	        function UrlHandlingStrategy() {
	        }
	        return UrlHandlingStrategy;
	    }());
	    /**
	     * @experimental
	     */
	    var DefaultUrlHandlingStrategy = (function () {
	        function DefaultUrlHandlingStrategy() {
	        }
	        DefaultUrlHandlingStrategy.prototype.shouldProcessUrl = function (url) { return true; };
	        DefaultUrlHandlingStrategy.prototype.extract = function (url) { return url; };
	        DefaultUrlHandlingStrategy.prototype.merge = function (newUrlPart, wholeUrl) { return newUrlPart; };
	        return DefaultUrlHandlingStrategy;
	    }());

	    /**
	     * @whatItDoes Represents an event triggered when a navigation starts.
	     *
	     * @stable
	     */
	    var NavigationStart = (function () {
	        // TODO: vsavkin: make internal
	        function NavigationStart(
	            /** @docsNotRequired */
	            id, 
	            /** @docsNotRequired */
	            url) {
	            this.id = id;
	            this.url = url;
	        }
	        /** @docsNotRequired */
	        NavigationStart.prototype.toString = function () { return "NavigationStart(id: " + this.id + ", url: '" + this.url + "')"; };
	        return NavigationStart;
	    }());
	    /**
	     * @whatItDoes Represents an event triggered when a navigation ends successfully.
	     *
	     * @stable
	     */
	    var NavigationEnd = (function () {
	        // TODO: vsavkin: make internal
	        function NavigationEnd(
	            /** @docsNotRequired */
	            id, 
	            /** @docsNotRequired */
	            url, 
	            /** @docsNotRequired */
	            urlAfterRedirects) {
	            this.id = id;
	            this.url = url;
	            this.urlAfterRedirects = urlAfterRedirects;
	        }
	        /** @docsNotRequired */
	        NavigationEnd.prototype.toString = function () {
	            return "NavigationEnd(id: " + this.id + ", url: '" + this.url + "', urlAfterRedirects: '" + this.urlAfterRedirects + "')";
	        };
	        return NavigationEnd;
	    }());
	    /**
	     * @whatItDoes Represents an event triggered when a navigation is canceled.
	     *
	     * @stable
	     */
	    var NavigationCancel = (function () {
	        // TODO: vsavkin: make internal
	        function NavigationCancel(
	            /** @docsNotRequired */
	            id, 
	            /** @docsNotRequired */
	            url, 
	            /** @docsNotRequired */
	            reason) {
	            this.id = id;
	            this.url = url;
	            this.reason = reason;
	        }
	        /** @docsNotRequired */
	        NavigationCancel.prototype.toString = function () { return "NavigationCancel(id: " + this.id + ", url: '" + this.url + "')"; };
	        return NavigationCancel;
	    }());
	    /**
	     * @whatItDoes Represents an event triggered when a navigation fails due to an unexpected error.
	     *
	     * @stable
	     */
	    var NavigationError = (function () {
	        // TODO: vsavkin: make internal
	        function NavigationError(
	            /** @docsNotRequired */
	            id, 
	            /** @docsNotRequired */
	            url, 
	            /** @docsNotRequired */
	            error) {
	            this.id = id;
	            this.url = url;
	            this.error = error;
	        }
	        /** @docsNotRequired */
	        NavigationError.prototype.toString = function () {
	            return "NavigationError(id: " + this.id + ", url: '" + this.url + "', error: " + this.error + ")";
	        };
	        return NavigationError;
	    }());
	    /**
	     * @whatItDoes Represents an event triggered when routes are recognized.
	     *
	     * @stable
	     */
	    var RoutesRecognized = (function () {
	        // TODO: vsavkin: make internal
	        function RoutesRecognized(
	            /** @docsNotRequired */
	            id, 
	            /** @docsNotRequired */
	            url, 
	            /** @docsNotRequired */
	            urlAfterRedirects, 
	            /** @docsNotRequired */
	            state) {
	            this.id = id;
	            this.url = url;
	            this.urlAfterRedirects = urlAfterRedirects;
	            this.state = state;
	        }
	        /** @docsNotRequired */
	        RoutesRecognized.prototype.toString = function () {
	            return "RoutesRecognized(id: " + this.id + ", url: '" + this.url + "', urlAfterRedirects: '" + this.urlAfterRedirects + "', state: " + this.state + ")";
	        };
	        return RoutesRecognized;
	    }());
	    function defaultErrorHandler(error) {
	        throw error;
	    }
	    /**
	     * @whatItDoes Provides the navigation and url manipulation capabilities.
	     *
	     * See {@link Routes} for more details and examples.
	     *
	     * @ngModule RouterModule
	     *
	     * @stable
	     */
	    var Router = (function () {
	        /**
	         * Creates the router service.
	         */
	        // TODO: vsavkin make internal after the final is out.
	        function Router(rootComponentType, urlSerializer, outletMap, location, injector, loader, compiler, config) {
	            this.rootComponentType = rootComponentType;
	            this.urlSerializer = urlSerializer;
	            this.outletMap = outletMap;
	            this.location = location;
	            this.injector = injector;
	            this.config = config;
	            this.navigations = new rxjs_BehaviorSubject.BehaviorSubject(null);
	            this.routerEvents = new rxjs_Subject.Subject();
	            this.navigationId = 0;
	            /**
	             * Error handler that is invoked when a navigation errors.
	             *
	             * See {@link ErrorHandler} for more information.
	             */
	            this.errorHandler = defaultErrorHandler;
	            /**
	             * Indicates if at least one navigation happened.
	             */
	            this.navigated = false;
	            /**
	             * Extracts and merges URLs. Used for Angular 1 to Angular 2 migrations.
	             */
	            this.urlHandlingStrategy = new DefaultUrlHandlingStrategy();
	            this.resetConfig(config);
	            this.currentUrlTree = createEmptyUrlTree();
	            this.rawUrlTree = this.currentUrlTree;
	            this.configLoader = new RouterConfigLoader(loader, compiler);
	            this.currentRouterState = createEmptyState(this.currentUrlTree, this.rootComponentType);
	            this.processNavigations();
	        }
	        /**
	         * @internal
	         * TODO: this should be removed once the constructor of the router made internal
	         */
	        Router.prototype.resetRootComponentType = function (rootComponentType) {
	            this.rootComponentType = rootComponentType;
	            // TODO: vsavkin router 4.0 should make the root component set to null
	            // this will simplify the lifecycle of the router.
	            this.currentRouterState.root.component = this.rootComponentType;
	        };
	        /**
	         * Sets up the location change listener and performs the initial navigation.
	         */
	        Router.prototype.initialNavigation = function () {
	            this.setUpLocationChangeListener();
	            this.navigateByUrl(this.location.path(true), { replaceUrl: true });
	        };
	        /**
	         * Sets up the location change listener.
	         */
	        Router.prototype.setUpLocationChangeListener = function () {
	            var _this = this;
	            // Zone.current.wrap is needed because of the issue with RxJS scheduler,
	            // which does not work properly with zone.js in IE and Safari
	            this.locationSubscription = this.location.subscribe(Zone.current.wrap(function (change) {
	                var rawUrlTree = _this.urlSerializer.parse(change['url']);
	                setTimeout(function () {
	                    _this.scheduleNavigation(rawUrlTree, { skipLocationChange: change['pop'], replaceUrl: true });
	                }, 0);
	            }));
	        };
	        Object.defineProperty(Router.prototype, "routerState", {
	            /**
	             * Returns the current route state.
	             */
	            get: function () { return this.currentRouterState; },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(Router.prototype, "url", {
	            /**
	             * Returns the current url.
	             */
	            get: function () { return this.serializeUrl(this.currentUrlTree); },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(Router.prototype, "events", {
	            /**
	             * Returns an observable of route events
	             */
	            get: function () { return this.routerEvents; },
	            enumerable: true,
	            configurable: true
	        });
	        /**
	         * Resets the configuration used for navigation and generating links.
	         *
	         * ### Usage
	         *
	         * ```
	         * router.resetConfig([
	         *  { path: 'team/:id', component: TeamCmp, children: [
	         *    { path: 'simple', component: SimpleCmp },
	         *    { path: 'user/:name', component: UserCmp }
	         *  ] }
	         * ]);
	         * ```
	         */
	        Router.prototype.resetConfig = function (config) {
	            validateConfig(config);
	            this.config = config;
	        };
	        /**
	         * @docsNotRequired
	         */
	        Router.prototype.ngOnDestroy = function () { this.dispose(); };
	        /**
	         * Disposes of the router.
	         */
	        Router.prototype.dispose = function () { this.locationSubscription.unsubscribe(); };
	        /**
	         * Applies an array of commands to the current url tree and creates a new url tree.
	         *
	         * When given an activate route, applies the given commands starting from the route.
	         * When not given a route, applies the given command starting from the root.
	         *
	         * ### Usage
	         *
	         * ```
	         * // create /team/33/user/11
	         * router.createUrlTree(['/team', 33, 'user', 11]);
	         *
	         * // create /team/33;expand=true/user/11
	         * router.createUrlTree(['/team', 33, {expand: true}, 'user', 11]);
	         *
	         * // you can collapse static segments like this (this works only with the first passed-in value):
	         * router.createUrlTree(['/team/33/user', userId]);
	         *
	         * // If the first segment can contain slashes, and you do not want the router to split it, you
	         * // can do the following:
	         *
	         * router.createUrlTree([{segmentPath: '/one/two'}]);
	         *
	         * // create /team/33/(user/11//right:chat)
	         * router.createUrlTree(['/team', 33, {outlets: {primary: 'user/11', right: 'chat'}}]);
	         *
	         * // remove the right secondary node
	         * router.createUrlTree(['/team', 33, {outlets: {primary: 'user/11', right: null}}]);
	         *
	         * // assuming the current url is `/team/33/user/11` and the route points to `user/11`
	         *
	         * // navigate to /team/33/user/11/details
	         * router.createUrlTree(['details'], {relativeTo: route});
	         *
	         * // navigate to /team/33/user/22
	         * router.createUrlTree(['../22'], {relativeTo: route});
	         *
	         * // navigate to /team/44/user/22
	         * router.createUrlTree(['../../team/44/user/22'], {relativeTo: route});
	         * ```
	         */
	        Router.prototype.createUrlTree = function (commands, _a) {
	            var _b = _a === void 0 ? {} : _a, relativeTo = _b.relativeTo, queryParams = _b.queryParams, fragment = _b.fragment, preserveQueryParams = _b.preserveQueryParams, preserveFragment = _b.preserveFragment;
	            var a = relativeTo ? relativeTo : this.routerState.root;
	            var q = preserveQueryParams ? this.currentUrlTree.queryParams : queryParams;
	            var f = preserveFragment ? this.currentUrlTree.fragment : fragment;
	            return createUrlTree(a, this.currentUrlTree, commands, q, f);
	        };
	        /**
	         * Navigate based on the provided url. This navigation is always absolute.
	         *
	         * Returns a promise that:
	         * - is resolved with 'true' when navigation succeeds
	         * - is resolved with 'false' when navigation fails
	         * - is rejected when an error happens
	         *
	         * ### Usage
	         *
	         * ```
	         * router.navigateByUrl("/team/33/user/11");
	         *
	         * // Navigate without updating the URL
	         * router.navigateByUrl("/team/33/user/11", { skipLocationChange: true });
	         * ```
	         *
	         * In opposite to `navigate`, `navigateByUrl` takes a whole URL
	         * and does not apply any delta to the current one.
	         */
	        Router.prototype.navigateByUrl = function (url, extras) {
	            if (extras === void 0) { extras = { skipLocationChange: false }; }
	            if (url instanceof UrlTree) {
	                return this.scheduleNavigation(this.urlHandlingStrategy.merge(url, this.rawUrlTree), extras);
	            }
	            else {
	                var urlTree = this.urlSerializer.parse(url);
	                return this.scheduleNavigation(this.urlHandlingStrategy.merge(urlTree, this.rawUrlTree), extras);
	            }
	        };
	        /**
	         * Navigate based on the provided array of commands and a starting point.
	         * If no starting route is provided, the navigation is absolute.
	         *
	         * Returns a promise that:
	         * - is resolved with 'true' when navigation succeeds
	         * - is resolved with 'false' when navigation fails
	         * - is rejected when an error happens
	         *
	         * ### Usage
	         *
	         * ```
	         * router.navigate(['team', 33, 'user', 11], {relativeTo: route});
	         *
	         * // Navigate without updating the URL
	         * router.navigate(['team', 33, 'user', 11], {relativeTo: route, skipLocationChange: true });
	         * ```
	         *
	         * In opposite to `navigateByUrl`, `navigate` always takes a delta
	         * that is applied to the current URL.
	         */
	        Router.prototype.navigate = function (commands, extras) {
	            if (extras === void 0) { extras = { skipLocationChange: false }; }
	            if (typeof extras.queryParams === 'object' && extras.queryParams !== null) {
	                extras.queryParams = this.removeEmptyProps(extras.queryParams);
	            }
	            return this.navigateByUrl(this.createUrlTree(commands, extras), extras);
	        };
	        /**
	         * Serializes a {@link UrlTree} into a string.
	         */
	        Router.prototype.serializeUrl = function (url) { return this.urlSerializer.serialize(url); };
	        /**
	         * Parses a string into a {@link UrlTree}.
	         */
	        Router.prototype.parseUrl = function (url) { return this.urlSerializer.parse(url); };
	        /**
	         * Returns if the url is activated or not.
	         */
	        Router.prototype.isActive = function (url, exact) {
	            if (url instanceof UrlTree) {
	                return containsTree(this.currentUrlTree, url, exact);
	            }
	            else {
	                var urlTree = this.urlSerializer.parse(url);
	                return containsTree(this.currentUrlTree, urlTree, exact);
	            }
	        };
	        Router.prototype.removeEmptyProps = function (params) {
	            return Object.keys(params).reduce(function (result, key) {
	                var value = params[key];
	                if (value !== null && value !== undefined) {
	                    result[key] = value;
	                }
	                return result;
	            }, {});
	        };
	        Router.prototype.processNavigations = function () {
	            var _this = this;
	            rxjs_operator_concatMap.concatMap
	                .call(this.navigations, function (nav) {
	                if (nav) {
	                    _this.executeScheduledNavigation(nav);
	                    // a failed navigation should not stop the router from processing
	                    // further navigations => the catch
	                    return nav.promise.catch(function () { });
	                }
	                else {
	                    return rxjs_observable_of.of(null);
	                }
	            })
	                .subscribe(function () { });
	        };
	        Router.prototype.scheduleNavigation = function (rawUrl, extras) {
	            var prevRawUrl = this.navigations.value ? this.navigations.value.rawUrl : null;
	            if (prevRawUrl && prevRawUrl.toString() === rawUrl.toString()) {
	                return this.navigations.value.promise;
	            }
	            var resolve = null;
	            var reject = null;
	            var promise = new Promise(function (res, rej) {
	                resolve = res;
	                reject = rej;
	            });
	            var id = ++this.navigationId;
	            this.navigations.next({ id: id, rawUrl: rawUrl, prevRawUrl: prevRawUrl, extras: extras, resolve: resolve, reject: reject, promise: promise });
	            // Make sure that the error is propagated even though `processNavigations` catch
	            // handler does not rethrow
	            return promise.catch(function (e) { return Promise.reject(e); });
	        };
	        Router.prototype.executeScheduledNavigation = function (_a) {
	            var _this = this;
	            var id = _a.id, rawUrl = _a.rawUrl, prevRawUrl = _a.prevRawUrl, extras = _a.extras, resolve = _a.resolve, reject = _a.reject;
	            var url = this.urlHandlingStrategy.extract(rawUrl);
	            var prevUrl = prevRawUrl ? this.urlHandlingStrategy.extract(prevRawUrl) : null;
	            var urlTransition = !prevUrl || url.toString() !== prevUrl.toString();
	            if (urlTransition && this.urlHandlingStrategy.shouldProcessUrl(rawUrl)) {
	                this.routerEvents.next(new NavigationStart(id, this.serializeUrl(url)));
	                Promise.resolve()
	                    .then(function (_) { return _this.runNavigate(url, rawUrl, extras.skipLocationChange, extras.replaceUrl, id, null); })
	                    .then(resolve, reject);
	            }
	            else if (urlTransition && prevRawUrl && this.urlHandlingStrategy.shouldProcessUrl(prevRawUrl)) {
	                this.routerEvents.next(new NavigationStart(id, this.serializeUrl(url)));
	                Promise.resolve()
	                    .then(function (_) { return _this.runNavigate(url, rawUrl, false, false, id, createEmptyState(url, _this.rootComponentType).snapshot); })
	                    .then(resolve, reject);
	            }
	            else {
	                this.rawUrlTree = rawUrl;
	                resolve(null);
	            }
	        };
	        Router.prototype.runNavigate = function (url, rawUrl, shouldPreventPushState, shouldReplaceUrl, id, precreatedState) {
	            var _this = this;
	            if (id !== this.navigationId) {
	                this.location.go(this.urlSerializer.serialize(this.currentUrlTree));
	                this.routerEvents.next(new NavigationCancel(id, this.serializeUrl(url), "Navigation ID " + id + " is not equal to the current navigation id " + this.navigationId));
	                return Promise.resolve(false);
	            }
	            return new Promise(function (resolvePromise, rejectPromise) {
	                // create an observable of the url and route state snapshot
	                // this operation do not result in any side effects
	                var urlAndSnapshot$;
	                if (!precreatedState) {
	                    var redirectsApplied$ = applyRedirects(_this.injector, _this.configLoader, _this.urlSerializer, url, _this.config);
	                    urlAndSnapshot$ = rxjs_operator_mergeMap.mergeMap.call(redirectsApplied$, function (appliedUrl) {
	                        return rxjs_operator_map.map.call(recognize(_this.rootComponentType, _this.config, appliedUrl, _this.serializeUrl(appliedUrl)), function (snapshot) {
	                            _this.routerEvents.next(new RoutesRecognized(id, _this.serializeUrl(url), _this.serializeUrl(appliedUrl), snapshot));
	                            return { appliedUrl: appliedUrl, snapshot: snapshot };
	                        });
	                    });
	                }
	                else {
	                    urlAndSnapshot$ = rxjs_observable_of.of({ appliedUrl: url, snapshot: precreatedState });
	                }
	                // run preactivation: guards and data resolvers
	                var preActivation;
	                var preactivationTraverse$ = rxjs_operator_map.map.call(urlAndSnapshot$, function (_a) {
	                    var appliedUrl = _a.appliedUrl, snapshot = _a.snapshot;
	                    preActivation =
	                        new PreActivation(snapshot, _this.currentRouterState.snapshot, _this.injector);
	                    preActivation.traverse(_this.outletMap);
	                    return { appliedUrl: appliedUrl, snapshot: snapshot };
	                });
	                var preactivationCheckGuards = rxjs_operator_mergeMap.mergeMap.call(preactivationTraverse$, function (_a) {
	                    var appliedUrl = _a.appliedUrl, snapshot = _a.snapshot;
	                    if (_this.navigationId !== id)
	                        return rxjs_observable_of.of(false);
	                    return rxjs_operator_map.map.call(preActivation.checkGuards(), function (shouldActivate) {
	                        return { appliedUrl: appliedUrl, snapshot: snapshot, shouldActivate: shouldActivate };
	                    });
	                });
	                var preactivationResolveData$ = rxjs_operator_mergeMap.mergeMap.call(preactivationCheckGuards, function (p) {
	                    if (_this.navigationId !== id)
	                        return rxjs_observable_of.of(false);
	                    if (p.shouldActivate) {
	                        return rxjs_operator_map.map.call(preActivation.resolveData(), function () { return p; });
	                    }
	                    else {
	                        return rxjs_observable_of.of(p);
	                    }
	                });
	                // create router state
	                // this operation has side effects => route state is being affected
	                var routerState$ = rxjs_operator_map.map.call(preactivationResolveData$, function (_a) {
	                    var appliedUrl = _a.appliedUrl, snapshot = _a.snapshot, shouldActivate = _a.shouldActivate;
	                    if (shouldActivate) {
	                        var state = createRouterState(snapshot, _this.currentRouterState);
	                        return { appliedUrl: appliedUrl, state: state, shouldActivate: shouldActivate };
	                    }
	                    else {
	                        return { appliedUrl: appliedUrl, state: null, shouldActivate: shouldActivate };
	                    }
	                });
	                // applied the new router state
	                // this operation has side effects
	                var navigationIsSuccessful;
	                var storedState = _this.currentRouterState;
	                var storedUrl = _this.currentUrlTree;
	                routerState$
	                    .forEach(function (_a) {
	                    var appliedUrl = _a.appliedUrl, state = _a.state, shouldActivate = _a.shouldActivate;
	                    if (!shouldActivate || id !== _this.navigationId) {
	                        navigationIsSuccessful = false;
	                        return;
	                    }
	                    _this.currentUrlTree = appliedUrl;
	                    _this.rawUrlTree = _this.urlHandlingStrategy.merge(_this.currentUrlTree, rawUrl);
	                    _this.currentRouterState = state;
	                    if (!shouldPreventPushState) {
	                        var path = _this.urlSerializer.serialize(_this.rawUrlTree);
	                        if (_this.location.isCurrentPathEqualTo(path) || shouldReplaceUrl) {
	                            _this.location.replaceState(path);
	                        }
	                        else {
	                            _this.location.go(path);
	                        }
	                    }
	                    new ActivateRoutes(state, storedState).activate(_this.outletMap);
	                    navigationIsSuccessful = true;
	                })
	                    .then(function () {
	                    _this.navigated = true;
	                    if (navigationIsSuccessful) {
	                        _this.routerEvents.next(new NavigationEnd(id, _this.serializeUrl(url), _this.serializeUrl(_this.currentUrlTree)));
	                        resolvePromise(true);
	                    }
	                    else {
	                        _this.resetUrlToCurrentUrlTree();
	                        _this.routerEvents.next(new NavigationCancel(id, _this.serializeUrl(url), ''));
	                        resolvePromise(false);
	                    }
	                }, function (e) {
	                    if (e instanceof NavigationCancelingError) {
	                        _this.resetUrlToCurrentUrlTree();
	                        _this.navigated = true;
	                        _this.routerEvents.next(new NavigationCancel(id, _this.serializeUrl(url), e.message));
	                        resolvePromise(false);
	                    }
	                    else {
	                        _this.routerEvents.next(new NavigationError(id, _this.serializeUrl(url), e));
	                        try {
	                            resolvePromise(_this.errorHandler(e));
	                        }
	                        catch (ee) {
	                            rejectPromise(ee);
	                        }
	                    }
	                    _this.currentRouterState = storedState;
	                    _this.currentUrlTree = storedUrl;
	                    _this.rawUrlTree = _this.urlHandlingStrategy.merge(_this.currentUrlTree, rawUrl);
	                    _this.location.replaceState(_this.serializeUrl(_this.rawUrlTree));
	                });
	            });
	        };
	        Router.prototype.resetUrlToCurrentUrlTree = function () {
	            var path = this.urlSerializer.serialize(this.rawUrlTree);
	            this.location.replaceState(path);
	        };
	        return Router;
	    }());
	    var CanActivate = (function () {
	        function CanActivate(path) {
	            this.path = path;
	        }
	        Object.defineProperty(CanActivate.prototype, "route", {
	            get: function () { return this.path[this.path.length - 1]; },
	            enumerable: true,
	            configurable: true
	        });
	        return CanActivate;
	    }());
	    var CanDeactivate = (function () {
	        function CanDeactivate(component, route) {
	            this.component = component;
	            this.route = route;
	        }
	        return CanDeactivate;
	    }());
	    var PreActivation = (function () {
	        function PreActivation(future, curr, injector) {
	            this.future = future;
	            this.curr = curr;
	            this.injector = injector;
	            this.checks = [];
	        }
	        PreActivation.prototype.traverse = function (parentOutletMap) {
	            var futureRoot = this.future._root;
	            var currRoot = this.curr ? this.curr._root : null;
	            this.traverseChildRoutes(futureRoot, currRoot, parentOutletMap, [futureRoot.value]);
	        };
	        PreActivation.prototype.checkGuards = function () {
	            var _this = this;
	            if (this.checks.length === 0)
	                return rxjs_observable_of.of(true);
	            var checks$ = rxjs_observable_from.from(this.checks);
	            var runningChecks$ = rxjs_operator_mergeMap.mergeMap.call(checks$, function (s) {
	                if (s instanceof CanActivate) {
	                    return andObservables(rxjs_observable_from.from([_this.runCanActivateChild(s.path), _this.runCanActivate(s.route)]));
	                }
	                else if (s instanceof CanDeactivate) {
	                    // workaround https://github.com/Microsoft/TypeScript/issues/7271
	                    var s2 = s;
	                    return _this.runCanDeactivate(s2.component, s2.route);
	                }
	                else {
	                    throw new Error('Cannot be reached');
	                }
	            });
	            return rxjs_operator_every.every.call(runningChecks$, function (result) { return result === true; });
	        };
	        PreActivation.prototype.resolveData = function () {
	            var _this = this;
	            if (this.checks.length === 0)
	                return rxjs_observable_of.of(null);
	            var checks$ = rxjs_observable_from.from(this.checks);
	            var runningChecks$ = rxjs_operator_concatMap.concatMap.call(checks$, function (s) {
	                if (s instanceof CanActivate) {
	                    return _this.runResolve(s.route);
	                }
	                else {
	                    return rxjs_observable_of.of(null);
	                }
	            });
	            return rxjs_operator_reduce.reduce.call(runningChecks$, function (_, __) { return _; });
	        };
	        PreActivation.prototype.traverseChildRoutes = function (futureNode, currNode, outletMap, futurePath) {
	            var _this = this;
	            var prevChildren = nodeChildrenAsMap(currNode);
	            futureNode.children.forEach(function (c) {
	                _this.traverseRoutes(c, prevChildren[c.value.outlet], outletMap, futurePath.concat([c.value]));
	                delete prevChildren[c.value.outlet];
	            });
	            forEach(prevChildren, function (v, k) { return _this.deactiveRouteAndItsChildren(v, outletMap._outlets[k]); });
	        };
	        PreActivation.prototype.traverseRoutes = function (futureNode, currNode, parentOutletMap, futurePath) {
	            var future = futureNode.value;
	            var curr = currNode ? currNode.value : null;
	            var outlet = parentOutletMap ? parentOutletMap._outlets[futureNode.value.outlet] : null;
	            // reusing the node
	            if (curr && future._routeConfig === curr._routeConfig) {
	                if (!equalParamsAndUrlSegments(future, curr)) {
	                    this.checks.push(new CanDeactivate(outlet.component, curr), new CanActivate(futurePath));
	                }
	                else {
	                    // we need to set the data
	                    future.data = curr.data;
	                    future._resolvedData = curr._resolvedData;
	                }
	                // If we have a component, we need to go through an outlet.
	                if (future.component) {
	                    this.traverseChildRoutes(futureNode, currNode, outlet ? outlet.outletMap : null, futurePath);
	                }
	                else {
	                    this.traverseChildRoutes(futureNode, currNode, parentOutletMap, futurePath);
	                }
	            }
	            else {
	                if (curr) {
	                    this.deactiveRouteAndItsChildren(currNode, outlet);
	                }
	                this.checks.push(new CanActivate(futurePath));
	                // If we have a component, we need to go through an outlet.
	                if (future.component) {
	                    this.traverseChildRoutes(futureNode, null, outlet ? outlet.outletMap : null, futurePath);
	                }
	                else {
	                    this.traverseChildRoutes(futureNode, null, parentOutletMap, futurePath);
	                }
	            }
	        };
	        PreActivation.prototype.deactiveRouteAndItsChildren = function (route, outlet) {
	            var _this = this;
	            var prevChildren = nodeChildrenAsMap(route);
	            var r = route.value;
	            forEach(prevChildren, function (v, k) {
	                if (!r.component) {
	                    _this.deactiveRouteAndItsChildren(v, outlet);
	                }
	                else if (!!outlet) {
	                    _this.deactiveRouteAndItsChildren(v, outlet.outletMap._outlets[k]);
	                }
	                else {
	                    _this.deactiveRouteAndItsChildren(v, null);
	                }
	            });
	            if (!r.component) {
	                this.checks.push(new CanDeactivate(null, r));
	            }
	            else if (outlet && outlet.isActivated) {
	                this.checks.push(new CanDeactivate(outlet.component, r));
	            }
	            else {
	                this.checks.push(new CanDeactivate(null, r));
	            }
	        };
	        PreActivation.prototype.runCanActivate = function (future) {
	            var _this = this;
	            var canActivate = future._routeConfig ? future._routeConfig.canActivate : null;
	            if (!canActivate || canActivate.length === 0)
	                return rxjs_observable_of.of(true);
	            var obs = rxjs_operator_map.map.call(rxjs_observable_from.from(canActivate), function (c) {
	                var guard = _this.getToken(c, future);
	                var observable;
	                if (guard.canActivate) {
	                    observable = wrapIntoObservable(guard.canActivate(future, _this.future));
	                }
	                else {
	                    observable = wrapIntoObservable(guard(future, _this.future));
	                }
	                return rxjs_operator_first.first.call(observable);
	            });
	            return andObservables(obs);
	        };
	        PreActivation.prototype.runCanActivateChild = function (path) {
	            var _this = this;
	            var future = path[path.length - 1];
	            var canActivateChildGuards = path.slice(0, path.length - 1)
	                .reverse()
	                .map(function (p) { return _this.extractCanActivateChild(p); })
	                .filter(function (_) { return _ !== null; });
	            return andObservables(rxjs_operator_map.map.call(rxjs_observable_from.from(canActivateChildGuards), function (d) {
	                var obs = rxjs_operator_map.map.call(rxjs_observable_from.from(d.guards), function (c) {
	                    var guard = _this.getToken(c, c.node);
	                    var observable;
	                    if (guard.canActivateChild) {
	                        observable = wrapIntoObservable(guard.canActivateChild(future, _this.future));
	                    }
	                    else {
	                        observable = wrapIntoObservable(guard(future, _this.future));
	                    }
	                    return rxjs_operator_first.first.call(observable);
	                });
	                return andObservables(obs);
	            }));
	        };
	        PreActivation.prototype.extractCanActivateChild = function (p) {
	            var canActivateChild = p._routeConfig ? p._routeConfig.canActivateChild : null;
	            if (!canActivateChild || canActivateChild.length === 0)
	                return null;
	            return { node: p, guards: canActivateChild };
	        };
	        PreActivation.prototype.runCanDeactivate = function (component, curr) {
	            var _this = this;
	            var canDeactivate = curr && curr._routeConfig ? curr._routeConfig.canDeactivate : null;
	            if (!canDeactivate || canDeactivate.length === 0)
	                return rxjs_observable_of.of(true);
	            var canDeactivate$ = rxjs_operator_mergeMap.mergeMap.call(rxjs_observable_from.from(canDeactivate), function (c) {
	                var guard = _this.getToken(c, curr);
	                var observable;
	                if (guard.canDeactivate) {
	                    observable = wrapIntoObservable(guard.canDeactivate(component, curr, _this.curr));
	                }
	                else {
	                    observable = wrapIntoObservable(guard(component, curr, _this.curr));
	                }
	                return rxjs_operator_first.first.call(observable);
	            });
	            return rxjs_operator_every.every.call(canDeactivate$, function (result) { return result === true; });
	        };
	        PreActivation.prototype.runResolve = function (future) {
	            var resolve = future._resolve;
	            return rxjs_operator_map.map.call(this.resolveNode(resolve, future), function (resolvedData) {
	                future._resolvedData = resolvedData;
	                future.data = merge(future.data, inheritedParamsDataResolve(future).resolve);
	                return null;
	            });
	        };
	        PreActivation.prototype.resolveNode = function (resolve, future) {
	            var _this = this;
	            return waitForMap(resolve, function (k, v) {
	                var resolver = _this.getToken(v, future);
	                return resolver.resolve ? wrapIntoObservable(resolver.resolve(future, _this.future)) :
	                    wrapIntoObservable(resolver(future, _this.future));
	            });
	        };
	        PreActivation.prototype.getToken = function (token, snapshot) {
	            var config = closestLoadedConfig(snapshot);
	            var injector = config ? config.injector : this.injector;
	            return injector.get(token);
	        };
	        return PreActivation;
	    }());
	    var ActivateRoutes = (function () {
	        function ActivateRoutes(futureState, currState) {
	            this.futureState = futureState;
	            this.currState = currState;
	        }
	        ActivateRoutes.prototype.activate = function (parentOutletMap) {
	            var futureRoot = this.futureState._root;
	            var currRoot = this.currState ? this.currState._root : null;
	            this.deactivateChildRoutes(futureRoot, currRoot, parentOutletMap);
	            advanceActivatedRoute(this.futureState.root);
	            this.activateChildRoutes(futureRoot, currRoot, parentOutletMap);
	        };
	        ActivateRoutes.prototype.deactivateChildRoutes = function (futureNode, currNode, outletMap) {
	            var _this = this;
	            var prevChildren = nodeChildrenAsMap(currNode);
	            futureNode.children.forEach(function (c) {
	                _this.deactivateRoutes(c, prevChildren[c.value.outlet], outletMap);
	                delete prevChildren[c.value.outlet];
	            });
	            forEach(prevChildren, function (v, k) { return _this.deactiveRouteAndItsChildren(v, outletMap); });
	        };
	        ActivateRoutes.prototype.activateChildRoutes = function (futureNode, currNode, outletMap) {
	            var _this = this;
	            var prevChildren = nodeChildrenAsMap(currNode);
	            futureNode.children.forEach(function (c) { _this.activateRoutes(c, prevChildren[c.value.outlet], outletMap); });
	        };
	        ActivateRoutes.prototype.deactivateRoutes = function (futureNode, currNode, parentOutletMap) {
	            var future = futureNode.value;
	            var curr = currNode ? currNode.value : null;
	            // reusing the node
	            if (future === curr) {
	                // If we have a normal route, we need to go through an outlet.
	                if (future.component) {
	                    var outlet = getOutlet(parentOutletMap, future);
	                    this.deactivateChildRoutes(futureNode, currNode, outlet.outletMap);
	                }
	                else {
	                    this.deactivateChildRoutes(futureNode, currNode, parentOutletMap);
	                }
	            }
	            else {
	                if (curr) {
	                    this.deactiveRouteAndItsChildren(currNode, parentOutletMap);
	                }
	            }
	        };
	        ActivateRoutes.prototype.activateRoutes = function (futureNode, currNode, parentOutletMap) {
	            var future = futureNode.value;
	            var curr = currNode ? currNode.value : null;
	            // reusing the node
	            if (future === curr) {
	                // advance the route to push the parameters
	                advanceActivatedRoute(future);
	                // If we have a normal route, we need to go through an outlet.
	                if (future.component) {
	                    var outlet = getOutlet(parentOutletMap, future);
	                    this.activateChildRoutes(futureNode, currNode, outlet.outletMap);
	                }
	                else {
	                    this.activateChildRoutes(futureNode, currNode, parentOutletMap);
	                }
	            }
	            else {
	                // if we have a normal route, we need to advance the route
	                // and place the component into the outlet. After that recurse.
	                if (future.component) {
	                    advanceActivatedRoute(future);
	                    var outlet = getOutlet(parentOutletMap, futureNode.value);
	                    var outletMap = new RouterOutletMap();
	                    this.placeComponentIntoOutlet(outletMap, future, outlet);
	                    this.activateChildRoutes(futureNode, null, outletMap);
	                }
	                else {
	                    advanceActivatedRoute(future);
	                    this.activateChildRoutes(futureNode, null, parentOutletMap);
	                }
	            }
	        };
	        ActivateRoutes.prototype.placeComponentIntoOutlet = function (outletMap, future, outlet) {
	            var resolved = [{ provide: ActivatedRoute, useValue: future }, {
	                    provide: RouterOutletMap,
	                    useValue: outletMap
	                }];
	            var config = parentLoadedConfig(future.snapshot);
	            var resolver = null;
	            var injector = null;
	            if (config) {
	                injector = config.injectorFactory(outlet.locationInjector);
	                resolver = config.factoryResolver;
	                resolved.push({ provide: _angular_core.ComponentFactoryResolver, useValue: resolver });
	            }
	            else {
	                injector = outlet.locationInjector;
	                resolver = outlet.locationFactoryResolver;
	            }
	            outlet.activate(future, resolver, injector, _angular_core.ReflectiveInjector.resolve(resolved), outletMap);
	        };
	        ActivateRoutes.prototype.deactiveRouteAndItsChildren = function (route, parentOutletMap) {
	            var _this = this;
	            var prevChildren = nodeChildrenAsMap(route);
	            var outlet = null;
	            // getOutlet throws when cannot find the right outlet,
	            // which can happen if an outlet was in an NgIf and was removed
	            try {
	                outlet = getOutlet(parentOutletMap, route.value);
	            }
	            catch (e) {
	                return;
	            }
	            var childOutletMap = outlet.outletMap;
	            forEach(prevChildren, function (v, k) {
	                if (route.value.component) {
	                    _this.deactiveRouteAndItsChildren(v, childOutletMap);
	                }
	                else {
	                    _this.deactiveRouteAndItsChildren(v, parentOutletMap);
	                }
	            });
	            if (outlet && outlet.isActivated) {
	                outlet.deactivate();
	            }
	        };
	        return ActivateRoutes;
	    }());
	    function parentLoadedConfig(snapshot) {
	        var s = snapshot.parent;
	        while (s) {
	            var c = s._routeConfig;
	            if (c && c._loadedConfig)
	                return c._loadedConfig;
	            if (c && c.component)
	                return null;
	            s = s.parent;
	        }
	        return null;
	    }
	    function closestLoadedConfig(snapshot) {
	        if (!snapshot)
	            return null;
	        var s = snapshot.parent;
	        while (s) {
	            var c = s._routeConfig;
	            if (c && c._loadedConfig)
	                return c._loadedConfig;
	            s = s.parent;
	        }
	        return null;
	    }
	    function nodeChildrenAsMap(node) {
	        return node ? node.children.reduce(function (m, c) {
	            m[c.value.outlet] = c;
	            return m;
	        }, {}) : {};
	    }
	    function getOutlet(outletMap, route) {
	        var outlet = outletMap._outlets[route.outlet];
	        if (!outlet) {
	            var componentName = route.component.name;
	            if (route.outlet === PRIMARY_OUTLET) {
	                throw new Error("Cannot find primary outlet to load '" + componentName + "'");
	            }
	            else {
	                throw new Error("Cannot find the outlet " + route.outlet + " to load '" + componentName + "'");
	            }
	        }
	        return outlet;
	    }

	    /**
	     * @whatItDoes Lets you link to specific parts of your app.
	     *
	     * @howToUse
	     *
	     * Consider the following route configuration:

	     * ```
	     * [{ path: 'user/:name', component: UserCmp }]
	     * ```
	     *
	     * When linking to this `user/:name` route, you can write:
	     *
	     * ```
	     * <a routerLink='/user/bob'>link to user component</a>
	     * ```
	     *
	     * @description
	     *
	     * The RouterLink directives let you link to specific parts of your app.
	     *
	     * Whe the link is static, you can use the directive as follows:
	     *
	     * ```
	     * <a routerLink="/user/bob">link to user component</a>
	     * ```
	     *
	     * If you use dynamic values to generate the link, you can pass an array of path
	     * segments, followed by the params for each segment.
	     *
	     * For instance `['/team', teamId, 'user', userName, {details: true}]`
	     * means that we want to generate a link to `/team/11/user/bob;details=true`.
	     *
	     * Multiple static segments can be merged into one (e.g., `['/team/11/user', userName, {details:
	     true}]`).
	     *
	     * The first segment name can be prepended with `/`, `./`, or `../`:
	     * * If the first segment begins with `/`, the router will look up the route from the root of the
	     app.
	     * * If the first segment begins with `./`, or doesn't begin with a slash, the router will
	     * instead look in the children of the current activated route.
	     * * And if the first segment begins with `../`, the router will go up one level.
	     *
	     * You can set query params and fragment as follows:
	     *
	     * ```
	     * <a [routerLink]="['/user/bob']" [queryParams]="{debug: true}" fragment="education">link to user
	     component</a>
	     * ```
	     * RouterLink will use these to generate this link: `/user/bob#education?debug=true`.
	     *
	     * You can also tell the directive to preserve the current query params and fragment:
	     *
	     * ```
	     * <a [routerLink]="['/user/bob']" preserveQueryParams preserveFragment>link to user
	     component</a>
	     * ```
	     *
	     * The router link directive always treats the provided input as a delta to the current url.
	     *
	     * For instance, if the current url is `/user/(box//aux:team)`.
	     *
	     * Then the following link `<a [routerLink]="['/user/jim']">Jim</a>` will generate the link
	     * `/user/(jim//aux:team)`.
	     *
	     * @selector ':not(a)[routerLink]'
	     * @ngModule RouterModule
	     *
	     * See {@link Router.createUrlTree} for more information.
	     *
	     * @stable
	     */
	    var RouterLink = (function () {
	        function RouterLink(router, route, locationStrategy) {
	            this.router = router;
	            this.route = route;
	            this.locationStrategy = locationStrategy;
	            this.commands = [];
	        }
	        Object.defineProperty(RouterLink.prototype, "routerLink", {
	            set: function (data) {
	                if (Array.isArray(data)) {
	                    this.commands = data;
	                }
	                else {
	                    this.commands = [data];
	                }
	            },
	            enumerable: true,
	            configurable: true
	        });
	        RouterLink.prototype.onClick = function () {
	            this.router.navigateByUrl(this.urlTree);
	            return true;
	        };
	        Object.defineProperty(RouterLink.prototype, "urlTree", {
	            get: function () {
	                return this.router.createUrlTree(this.commands, {
	                    relativeTo: this.route,
	                    queryParams: this.queryParams,
	                    fragment: this.fragment,
	                    preserveQueryParams: toBool(this.preserveQueryParams),
	                    preserveFragment: toBool(this.preserveFragment)
	                });
	            },
	            enumerable: true,
	            configurable: true
	        });
	        RouterLink.decorators = [
	            { type: _angular_core.Directive, args: [{ selector: ':not(a)[routerLink]' },] },
	        ];
	        /** @nocollapse */
	        RouterLink.ctorParameters = [
	            { type: Router, },
	            { type: ActivatedRoute, },
	            { type: _angular_common.LocationStrategy, },
	        ];
	        RouterLink.propDecorators = {
	            'queryParams': [{ type: _angular_core.Input },],
	            'fragment': [{ type: _angular_core.Input },],
	            'preserveQueryParams': [{ type: _angular_core.Input },],
	            'preserveFragment': [{ type: _angular_core.Input },],
	            'routerLink': [{ type: _angular_core.Input },],
	            'onClick': [{ type: _angular_core.HostListener, args: ['click', [],] },],
	        };
	        return RouterLink;
	    }());
	    /**
	     * @whatItDoes Lets you link to specific parts of your app.
	     *
	     * See {@link RouterLink} for more information.
	     *
	     * @selector 'a[routerLink]'
	     * @ngModule RouterModule
	     *
	     * @stable
	     */
	    var RouterLinkWithHref = (function () {
	        function RouterLinkWithHref(router, route, locationStrategy) {
	            var _this = this;
	            this.router = router;
	            this.route = route;
	            this.locationStrategy = locationStrategy;
	            this.commands = [];
	            this.subscription = router.events.subscribe(function (s) {
	                if (s instanceof NavigationEnd) {
	                    _this.updateTargetUrlAndHref();
	                }
	            });
	        }
	        Object.defineProperty(RouterLinkWithHref.prototype, "routerLink", {
	            set: function (data) {
	                if (Array.isArray(data)) {
	                    this.commands = data;
	                }
	                else {
	                    this.commands = [data];
	                }
	            },
	            enumerable: true,
	            configurable: true
	        });
	        RouterLinkWithHref.prototype.ngOnChanges = function (changes) { this.updateTargetUrlAndHref(); };
	        RouterLinkWithHref.prototype.ngOnDestroy = function () { this.subscription.unsubscribe(); };
	        RouterLinkWithHref.prototype.onClick = function (button, ctrlKey, metaKey) {
	            if (button !== 0 || ctrlKey || metaKey) {
	                return true;
	            }
	            if (typeof this.target === 'string' && this.target != '_self') {
	                return true;
	            }
	            this.router.navigateByUrl(this.urlTree);
	            return false;
	        };
	        RouterLinkWithHref.prototype.updateTargetUrlAndHref = function () {
	            this.href = this.locationStrategy.prepareExternalUrl(this.router.serializeUrl(this.urlTree));
	        };
	        Object.defineProperty(RouterLinkWithHref.prototype, "urlTree", {
	            get: function () {
	                return this.router.createUrlTree(this.commands, {
	                    relativeTo: this.route,
	                    queryParams: this.queryParams,
	                    fragment: this.fragment,
	                    preserveQueryParams: toBool(this.preserveQueryParams),
	                    preserveFragment: toBool(this.preserveFragment)
	                });
	            },
	            enumerable: true,
	            configurable: true
	        });
	        RouterLinkWithHref.decorators = [
	            { type: _angular_core.Directive, args: [{ selector: 'a[routerLink]' },] },
	        ];
	        /** @nocollapse */
	        RouterLinkWithHref.ctorParameters = [
	            { type: Router, },
	            { type: ActivatedRoute, },
	            { type: _angular_common.LocationStrategy, },
	        ];
	        RouterLinkWithHref.propDecorators = {
	            'target': [{ type: _angular_core.Input },],
	            'queryParams': [{ type: _angular_core.Input },],
	            'fragment': [{ type: _angular_core.Input },],
	            'routerLinkOptions': [{ type: _angular_core.Input },],
	            'preserveQueryParams': [{ type: _angular_core.Input },],
	            'preserveFragment': [{ type: _angular_core.Input },],
	            'href': [{ type: _angular_core.HostBinding },],
	            'routerLink': [{ type: _angular_core.Input },],
	            'onClick': [{ type: _angular_core.HostListener, args: ['click', ['$event.button', '$event.ctrlKey', '$event.metaKey'],] },],
	        };
	        return RouterLinkWithHref;
	    }());
	    function toBool(s) {
	        if (s === '')
	            return true;
	        return !!s;
	    }

	    /**
	     * @whatItDoes Lets you add a CSS class to an element when the link's route becomes active.
	     *
	     * @howToUse
	     *
	     * ```
	     * <a routerLink="/user/bob" routerLinkActive="active-link">Bob</a>
	     * ```
	     *
	     * @description
	     *
	     * The RouterLinkActive directive lets you add a CSS class to an element when the link's route
	     * becomes active.
	     *
	     * Consider the following example:
	     *
	     * ```
	     * <a routerLink="/user/bob" routerLinkActive="active-link">Bob</a>
	     * ```
	     *
	     * When the url is either '/user' or '/user/bob', the active-link class will
	     * be added to the `a` tag. If the url changes, the class will be removed.
	     *
	     * You can set more than one class, as follows:
	     *
	     * ```
	     * <a routerLink="/user/bob" routerLinkActive="class1 class2">Bob</a>
	     * <a routerLink="/user/bob" [routerLinkActive]="['class1', 'class2']">Bob</a>
	     * ```
	     *
	     * You can configure RouterLinkActive by passing `exact: true`. This will add the classes
	     * only when the url matches the link exactly.
	     *
	     * ```
	     * <a routerLink="/user/bob" routerLinkActive="active-link" [routerLinkActiveOptions]="{exact:
	     * true}">Bob</a>
	     * ```
	     *
	     * You can assign the RouterLinkActive instance to a template variable and directly check
	     * the `isActive` status.
	     * ```
	     * <a routerLink="/user/bob" routerLinkActive #rla="routerLinkActive">
	     *   Bob {{ rla.isActive ? '(already open)' : ''}}
	     * </a>
	     * ```
	     *
	     * Finally, you can apply the RouterLinkActive directive to an ancestor of a RouterLink.
	     *
	     * ```
	     * <div routerLinkActive="active-link" [routerLinkActiveOptions]="{exact: true}">
	     *   <a routerLink="/user/jim">Jim</a>
	     *   <a routerLink="/user/bob">Bob</a>
	     * </div>
	     * ```
	     *
	     * This will set the active-link class on the div tag if the url is either '/user/jim' or
	     * '/user/bob'.
	     *
	     * @selector ':not(a)[routerLink]'
	     * @ngModule RouterModule
	     *
	     * @stable
	     */
	    var RouterLinkActive = (function () {
	        function RouterLinkActive(router, element, renderer) {
	            var _this = this;
	            this.router = router;
	            this.element = element;
	            this.renderer = renderer;
	            this.classes = [];
	            this.routerLinkActiveOptions = { exact: false };
	            this.subscription = router.events.subscribe(function (s) {
	                if (s instanceof NavigationEnd) {
	                    _this.update();
	                }
	            });
	        }
	        Object.defineProperty(RouterLinkActive.prototype, "isActive", {
	            get: function () { return this.hasActiveLink(); },
	            enumerable: true,
	            configurable: true
	        });
	        RouterLinkActive.prototype.ngAfterContentInit = function () {
	            var _this = this;
	            this.links.changes.subscribe(function (s) { return _this.update(); });
	            this.linksWithHrefs.changes.subscribe(function (s) { return _this.update(); });
	            this.update();
	        };
	        Object.defineProperty(RouterLinkActive.prototype, "routerLinkActive", {
	            set: function (data) {
	                if (Array.isArray(data)) {
	                    this.classes = data;
	                }
	                else {
	                    this.classes = data.split(' ');
	                }
	            },
	            enumerable: true,
	            configurable: true
	        });
	        RouterLinkActive.prototype.ngOnChanges = function (changes) { this.update(); };
	        RouterLinkActive.prototype.ngOnDestroy = function () { this.subscription.unsubscribe(); };
	        RouterLinkActive.prototype.update = function () {
	            var _this = this;
	            if (!this.links || !this.linksWithHrefs || !this.router.navigated)
	                return;
	            var isActive = this.hasActiveLink();
	            this.classes.forEach(function (c) {
	                if (c) {
	                    _this.renderer.setElementClass(_this.element.nativeElement, c, isActive);
	                }
	            });
	        };
	        RouterLinkActive.prototype.isLinkActive = function (router) {
	            var _this = this;
	            return function (link) {
	                return router.isActive(link.urlTree, _this.routerLinkActiveOptions.exact);
	            };
	        };
	        RouterLinkActive.prototype.hasActiveLink = function () {
	            return this.links.some(this.isLinkActive(this.router)) ||
	                this.linksWithHrefs.some(this.isLinkActive(this.router));
	        };
	        RouterLinkActive.decorators = [
	            { type: _angular_core.Directive, args: [{
	                        selector: '[routerLinkActive]',
	                        exportAs: 'routerLinkActive',
	                    },] },
	        ];
	        /** @nocollapse */
	        RouterLinkActive.ctorParameters = [
	            { type: Router, },
	            { type: _angular_core.ElementRef, },
	            { type: _angular_core.Renderer, },
	        ];
	        RouterLinkActive.propDecorators = {
	            'links': [{ type: _angular_core.ContentChildren, args: [RouterLink, { descendants: true },] },],
	            'linksWithHrefs': [{ type: _angular_core.ContentChildren, args: [RouterLinkWithHref, { descendants: true },] },],
	            'routerLinkActiveOptions': [{ type: _angular_core.Input },],
	            'routerLinkActive': [{ type: _angular_core.Input },],
	        };
	        return RouterLinkActive;
	    }());

	    /**
	     * @whatItDoes Acts as a placeholder that Angular dynamically fills based on the current router
	     * state.
	     *
	     * @howToUse
	     *
	     * ```
	     * <router-outlet></router-outlet>
	     * <router-outlet name='left'></router-outlet>
	     * <router-outlet name='right'></router-outlet>
	     * ```
	     *
	     * A router outlet will emit an activate event any time a new component is being instantiated,
	     * and a deactivate event when it is being destroyed.
	     *
	     * ```
	     * <router-outlet
	     *   (activate)='onActivate($event)'
	     *   (deactivate)='onDeactivate($event)'></router-outlet>
	     * ```
	     * @selector 'a[routerLink]'
	     * @ngModule RouterModule
	     *
	     * @stable
	     */
	    var RouterOutlet = (function () {
	        function RouterOutlet(parentOutletMap, location, resolver, name) {
	            this.parentOutletMap = parentOutletMap;
	            this.location = location;
	            this.resolver = resolver;
	            this.name = name;
	            this.activateEvents = new _angular_core.EventEmitter();
	            this.deactivateEvents = new _angular_core.EventEmitter();
	            parentOutletMap.registerOutlet(name ? name : PRIMARY_OUTLET, this);
	        }
	        RouterOutlet.prototype.ngOnDestroy = function () { this.parentOutletMap.removeOutlet(this.name ? this.name : PRIMARY_OUTLET); };
	        Object.defineProperty(RouterOutlet.prototype, "locationInjector", {
	            get: function () { return this.location.injector; },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(RouterOutlet.prototype, "locationFactoryResolver", {
	            get: function () { return this.resolver; },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(RouterOutlet.prototype, "isActivated", {
	            get: function () { return !!this.activated; },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(RouterOutlet.prototype, "component", {
	            get: function () {
	                if (!this.activated)
	                    throw new Error('Outlet is not activated');
	                return this.activated.instance;
	            },
	            enumerable: true,
	            configurable: true
	        });
	        Object.defineProperty(RouterOutlet.prototype, "activatedRoute", {
	            get: function () {
	                if (!this.activated)
	                    throw new Error('Outlet is not activated');
	                return this._activatedRoute;
	            },
	            enumerable: true,
	            configurable: true
	        });
	        RouterOutlet.prototype.deactivate = function () {
	            if (this.activated) {
	                var c = this.component;
	                this.activated.destroy();
	                this.activated = null;
	                this.deactivateEvents.emit(c);
	            }
	        };
	        RouterOutlet.prototype.activate = function (activatedRoute, resolver, injector, providers, outletMap) {
	            if (this.isActivated) {
	                throw new Error('Cannot activate an already activated outlet');
	            }
	            this.outletMap = outletMap;
	            this._activatedRoute = activatedRoute;
	            var snapshot = activatedRoute._futureSnapshot;
	            var component = snapshot._routeConfig.component;
	            var factory = resolver.resolveComponentFactory(component);
	            var inj = _angular_core.ReflectiveInjector.fromResolvedProviders(providers, injector);
	            this.activated = this.location.createComponent(factory, this.location.length, inj, []);
	            this.activated.changeDetectorRef.detectChanges();
	            this.activateEvents.emit(this.activated.instance);
	        };
	        RouterOutlet.decorators = [
	            { type: _angular_core.Directive, args: [{ selector: 'router-outlet' },] },
	        ];
	        /** @nocollapse */
	        RouterOutlet.ctorParameters = [
	            { type: RouterOutletMap, },
	            { type: _angular_core.ViewContainerRef, },
	            { type: _angular_core.ComponentFactoryResolver, },
	            { type: undefined, decorators: [{ type: _angular_core.Attribute, args: ['name',] },] },
	        ];
	        RouterOutlet.propDecorators = {
	            'activateEvents': [{ type: _angular_core.Output, args: ['activate',] },],
	            'deactivateEvents': [{ type: _angular_core.Output, args: ['deactivate',] },],
	        };
	        return RouterOutlet;
	    }());

	    var getDOM = _angular_platformBrowser.__platform_browser_private__.getDOM;

	    /**
	     * @whatItDoes Provides a preloading strategy.
	     *
	     * @experimental
	     */
	    var PreloadingStrategy = (function () {
	        function PreloadingStrategy() {
	        }
	        return PreloadingStrategy;
	    }());
	    /**
	     * @whatItDoes Provides a preloading strategy that preloads all modules as quicky as possible.
	     *
	     * @howToUse
	     *
	     * ```
	     * RouteModule.forRoot(ROUTES, {preloadingStrategy: PreloadAllModules})
	     * ```
	     *
	     * @experimental
	     */
	    var PreloadAllModules = (function () {
	        function PreloadAllModules() {
	        }
	        PreloadAllModules.prototype.preload = function (route, fn) {
	            return rxjs_operator_catch._catch.call(fn(), function () { return rxjs_observable_of.of(null); });
	        };
	        return PreloadAllModules;
	    }());
	    /**
	     * @whatItDoes Provides a preloading strategy that does not preload any modules.
	     *
	     * @description
	     *
	     * This strategy is enabled by default.
	     *
	     * @experimental
	     */
	    var NoPreloading = (function () {
	        function NoPreloading() {
	        }
	        NoPreloading.prototype.preload = function (route, fn) { return rxjs_observable_of.of(null); };
	        return NoPreloading;
	    }());
	    /**
	     * The preloader optimistically loads all router configurations to
	     * make navigations into lazily-loaded sections of the application faster.
	     *
	     * The preloader runs in the background. When the router bootstraps, the preloader
	     * starts listening to all navigation events. After every such event, the preloader
	     * will check if any configurations can be loaded lazily.
	     *
	     * If a route is protected by `canLoad` guards, the preloaded will not load it.
	     *
	     * @stable
	     */
	    var RouterPreloader = (function () {
	        function RouterPreloader(router, moduleLoader, compiler, injector, preloadingStrategy) {
	            this.router = router;
	            this.injector = injector;
	            this.preloadingStrategy = preloadingStrategy;
	            this.loader = new RouterConfigLoader(moduleLoader, compiler);
	        }
	        ;
	        RouterPreloader.prototype.setUpPreloading = function () {
	            var _this = this;
	            var navigations = rxjs_operator_filter.filter.call(this.router.events, function (e) { return e instanceof NavigationEnd; });
	            this.subscription = rxjs_operator_concatMap.concatMap.call(navigations, function () { return _this.preload(); }).subscribe(function (v) { });
	        };
	        RouterPreloader.prototype.preload = function () { return this.processRoutes(this.injector, this.router.config); };
	        RouterPreloader.prototype.ngOnDestroy = function () { this.subscription.unsubscribe(); };
	        RouterPreloader.prototype.processRoutes = function (injector, routes) {
	            var res = [];
	            for (var _i = 0, routes_1 = routes; _i < routes_1.length; _i++) {
	                var c = routes_1[_i];
	                // we already have the config loaded, just recurce
	                if (c.loadChildren && !c.canLoad && c._loadedConfig) {
	                    var childConfig = c._loadedConfig;
	                    res.push(this.processRoutes(childConfig.injector, childConfig.routes));
	                }
	                else if (c.loadChildren && !c.canLoad) {
	                    res.push(this.preloadConfig(injector, c));
	                }
	                else if (c.children) {
	                    res.push(this.processRoutes(injector, c.children));
	                }
	            }
	            return rxjs_operator_mergeAll.mergeAll.call(rxjs_observable_from.from(res));
	        };
	        RouterPreloader.prototype.preloadConfig = function (injector, route) {
	            var _this = this;
	            return this.preloadingStrategy.preload(route, function () {
	                var loaded = _this.loader.load(injector, route.loadChildren);
	                return rxjs_operator_mergeMap.mergeMap.call(loaded, function (config) {
	                    var c = route;
	                    c._loadedConfig = config;
	                    return _this.processRoutes(config.injector, config.routes);
	                });
	            });
	        };
	        RouterPreloader.decorators = [
	            { type: _angular_core.Injectable },
	        ];
	        /** @nocollapse */
	        RouterPreloader.ctorParameters = [
	            { type: Router, },
	            { type: _angular_core.NgModuleFactoryLoader, },
	            { type: _angular_core.Compiler, },
	            { type: _angular_core.Injector, },
	            { type: PreloadingStrategy, },
	        ];
	        return RouterPreloader;
	    }());

	    /**
	     * @whatItDoes Contains a list of directives
	     * @stable
	     */
	    var ROUTER_DIRECTIVES = [RouterOutlet, RouterLink, RouterLinkWithHref, RouterLinkActive];
	    /**
	     * @whatItDoes Is used in DI to configure the router.
	     * @stable
	     */
	    var ROUTER_CONFIGURATION = new _angular_core.OpaqueToken('ROUTER_CONFIGURATION');
	    /**
	     * @docsNotRequired
	     */
	    var ROUTER_FORROOT_GUARD = new _angular_core.OpaqueToken('ROUTER_FORROOT_GUARD');
	    var ROUTER_PROVIDERS = [
	        _angular_common.Location, { provide: UrlSerializer, useClass: DefaultUrlSerializer }, {
	            provide: Router,
	            useFactory: setupRouter,
	            deps: [
	                _angular_core.ApplicationRef, UrlSerializer, RouterOutletMap, _angular_common.Location, _angular_core.Injector, _angular_core.NgModuleFactoryLoader,
	                _angular_core.Compiler, ROUTES, ROUTER_CONFIGURATION, [UrlHandlingStrategy, new _angular_core.Optional()]
	            ]
	        },
	        RouterOutletMap, { provide: ActivatedRoute, useFactory: rootRoute, deps: [Router] },
	        { provide: _angular_core.NgModuleFactoryLoader, useClass: _angular_core.SystemJsNgModuleLoader }, RouterPreloader, NoPreloading,
	        PreloadAllModules, { provide: ROUTER_CONFIGURATION, useValue: { enableTracing: false } }
	    ];
	    /**
	     * @whatItDoes Adds router directives and providers.
	     *
	     * @howToUse
	     *
	     * RouterModule can be imported multiple times: once per lazily-loaded bundle.
	     * Since the router deals with a global shared resource--location, we cannot have
	     * more than one router service active.
	     *
	     * That is why there are two ways to create the module: `RouterModule.forRoot` and
	     * `RouterModule.forChild`.
	     *
	     * * `forRoot` creates a module that contains all the directives, the given routes, and the router
	     * service itself.
	     * * `forChild` creates a module that contains all the directives and the given routes, but does not
	     * include
	     * the router service.
	     *
	     * When registered at the root, the module should be used as follows
	     *
	     * ```
	     * @NgModule({
	     *   imports: [RouterModule.forRoot(ROUTES)]
	     * })
	     * class MyNgModule {}
	     * ```
	     *
	     * For submodules and lazy loaded submodules the module should be used as follows:
	     *
	     * ```
	     * @NgModule({
	     *   imports: [RouterModule.forChild(ROUTES)]
	     * })
	     * class MyNgModule {}
	     * ```
	     *
	     * @description
	     *
	     * Managing state transitions is one of the hardest parts of building applications. This is
	     * especially true on the web, where you also need to ensure that the state is reflected in the URL.
	     * In addition, we often want to split applications into multiple bundles and load them on demand.
	     * Doing this transparently is not trivial.
	     *
	     * The Angular 2 router solves these problems. Using the router, you can declaratively specify
	     * application states, manage state transitions while taking care of the URL, and load bundles on
	     * demand.
	     *
	     * [Read this developer guide](https://angular.io/docs/ts/latest/guide/router.html) to get an
	     * overview of how the router should be used.
	     *
	     * @stable
	     */
	    var RouterModule = (function () {
	        function RouterModule(guard) {
	        }
	        /**
	         * Creates a module with all the router providers and directives. It also optionally sets up an
	         * application listener to perform an initial navigation.
	         *
	         * Options:
	         * * `enableTracing` makes the router log all its internal events to the console.
	         * * `useHash` enables the location strategy that uses the URL fragment instead of the history
	         * API.
	         * * `initialNavigation` disables the initial navigation.
	         * * `errorHandler` provides a custom error handler.
	         */
	        RouterModule.forRoot = function (routes, config) {
	            return {
	                ngModule: RouterModule,
	                providers: [
	                    ROUTER_PROVIDERS, provideRoutes(routes), {
	                        provide: ROUTER_FORROOT_GUARD,
	                        useFactory: provideForRootGuard,
	                        deps: [[Router, new _angular_core.Optional(), new _angular_core.SkipSelf()]]
	                    },
	                    { provide: ROUTER_CONFIGURATION, useValue: config ? config : {} }, {
	                        provide: _angular_common.LocationStrategy,
	                        useFactory: provideLocationStrategy,
	                        deps: [
	                            _angular_common.PlatformLocation, [new _angular_core.Inject(_angular_common.APP_BASE_HREF), new _angular_core.Optional()], ROUTER_CONFIGURATION
	                        ]
	                    },
	                    {
	                        provide: PreloadingStrategy,
	                        useExisting: config && config.preloadingStrategy ? config.preloadingStrategy :
	                            NoPreloading
	                    },
	                    provideRouterInitializer()
	                ]
	            };
	        };
	        /**
	         * Creates a module with all the router directives and a provider registering routes.
	         */
	        RouterModule.forChild = function (routes) {
	            return { ngModule: RouterModule, providers: [provideRoutes(routes)] };
	        };
	        RouterModule.decorators = [
	            { type: _angular_core.NgModule, args: [{ declarations: ROUTER_DIRECTIVES, exports: ROUTER_DIRECTIVES },] },
	        ];
	        /** @nocollapse */
	        RouterModule.ctorParameters = [
	            { type: undefined, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Inject, args: [ROUTER_FORROOT_GUARD,] },] },
	        ];
	        return RouterModule;
	    }());
	    function provideLocationStrategy(platformLocationStrategy, baseHref, options) {
	        if (options === void 0) { options = {}; }
	        return options.useHash ? new _angular_common.HashLocationStrategy(platformLocationStrategy, baseHref) :
	            new _angular_common.PathLocationStrategy(platformLocationStrategy, baseHref);
	    }
	    function provideForRootGuard(router) {
	        if (router) {
	            throw new Error("RouterModule.forRoot() called twice. Lazy loaded modules should use RouterModule.forChild() instead.");
	        }
	        return 'guarded';
	    }
	    /**
	     * @whatItDoes Registers routes.
	     *
	     * @howToUse
	     *
	     * ```
	     * @NgModule({
	     *   imports: [RouterModule.forChild(ROUTES)],
	     *   providers: [provideRoutes(EXTRA_ROUTES)]
	     * })
	     * class MyNgModule {}
	     * ```
	     *
	     * @stable
	     */
	    function provideRoutes(routes) {
	        return [
	            { provide: _angular_core.ANALYZE_FOR_ENTRY_COMPONENTS, multi: true, useValue: routes },
	            { provide: ROUTES, multi: true, useValue: routes }
	        ];
	    }
	    function setupRouter(ref, urlSerializer, outletMap, location, injector, loader, compiler, config, opts, urlHandlingStrategy) {
	        if (opts === void 0) { opts = {}; }
	        var router = new Router(null, urlSerializer, outletMap, location, injector, loader, compiler, flatten(config));
	        if (urlHandlingStrategy) {
	            router.urlHandlingStrategy = urlHandlingStrategy;
	        }
	        if (opts.errorHandler) {
	            router.errorHandler = opts.errorHandler;
	        }
	        if (opts.enableTracing) {
	            var dom_1 = getDOM();
	            router.events.subscribe(function (e) {
	                dom_1.logGroup("Router Event: " + e.constructor.name);
	                dom_1.log(e.toString());
	                dom_1.log(e);
	                dom_1.logGroupEnd();
	            });
	        }
	        return router;
	    }
	    function rootRoute(router) {
	        return router.routerState.root;
	    }
	    function initialRouterNavigation(router, ref, preloader, opts) {
	        return function (bootstrappedComponentRef) {
	            if (bootstrappedComponentRef !== ref.components[0]) {
	                return;
	            }
	            router.resetRootComponentType(ref.componentTypes[0]);
	            preloader.setUpPreloading();
	            if (opts.initialNavigation === false) {
	                router.setUpLocationChangeListener();
	            }
	            else {
	                router.initialNavigation();
	            }
	        };
	    }
	    /**
	     * A token for the router initializer that will be called after the app is bootstrapped.
	     *
	     * @experimental
	     */
	    var ROUTER_INITIALIZER = new _angular_core.OpaqueToken('Router Initializer');
	    function provideRouterInitializer() {
	        return [
	            {
	                provide: ROUTER_INITIALIZER,
	                useFactory: initialRouterNavigation,
	                deps: [Router, _angular_core.ApplicationRef, RouterPreloader, ROUTER_CONFIGURATION]
	            },
	            { provide: _angular_core.APP_BOOTSTRAP_LISTENER, multi: true, useExisting: ROUTER_INITIALIZER }
	        ];
	    }

	    var __router_private__ = {
	        ROUTER_PROVIDERS: ROUTER_PROVIDERS,
	        ROUTES: ROUTES,
	        flatten: flatten
	    };

	    exports.RouterLink = RouterLink;
	    exports.RouterLinkWithHref = RouterLinkWithHref;
	    exports.RouterLinkActive = RouterLinkActive;
	    exports.RouterOutlet = RouterOutlet;
	    exports.NavigationCancel = NavigationCancel;
	    exports.NavigationEnd = NavigationEnd;
	    exports.NavigationError = NavigationError;
	    exports.NavigationStart = NavigationStart;
	    exports.Router = Router;
	    exports.RoutesRecognized = RoutesRecognized;
	    exports.ROUTER_CONFIGURATION = ROUTER_CONFIGURATION;
	    exports.ROUTER_INITIALIZER = ROUTER_INITIALIZER;
	    exports.RouterModule = RouterModule;
	    exports.provideRoutes = provideRoutes;
	    exports.RouterOutletMap = RouterOutletMap;
	    exports.NoPreloading = NoPreloading;
	    exports.PreloadAllModules = PreloadAllModules;
	    exports.PreloadingStrategy = PreloadingStrategy;
	    exports.RouterPreloader = RouterPreloader;
	    exports.ActivatedRoute = ActivatedRoute;
	    exports.ActivatedRouteSnapshot = ActivatedRouteSnapshot;
	    exports.RouterState = RouterState;
	    exports.RouterStateSnapshot = RouterStateSnapshot;
	    exports.PRIMARY_OUTLET = PRIMARY_OUTLET;
	    exports.UrlHandlingStrategy = UrlHandlingStrategy;
	    exports.DefaultUrlSerializer = DefaultUrlSerializer;
	    exports.UrlSegment = UrlSegment;
	    exports.UrlSegmentGroup = UrlSegmentGroup;
	    exports.UrlSerializer = UrlSerializer;
	    exports.UrlTree = UrlTree;
	    exports.__router_private__ = __router_private__;

	}));

/***/ },
/* 135 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var Subject_1 = __webpack_require__(81);
	var ObjectUnsubscribedError_1 = __webpack_require__(96);
	/**
	 * @class BehaviorSubject<T>
	 */
	var BehaviorSubject = (function (_super) {
	    __extends(BehaviorSubject, _super);
	    function BehaviorSubject(_value) {
	        _super.call(this);
	        this._value = _value;
	    }
	    Object.defineProperty(BehaviorSubject.prototype, "value", {
	        get: function () {
	            return this.getValue();
	        },
	        enumerable: true,
	        configurable: true
	    });
	    BehaviorSubject.prototype._subscribe = function (subscriber) {
	        var subscription = _super.prototype._subscribe.call(this, subscriber);
	        if (subscription && !subscription.closed) {
	            subscriber.next(this._value);
	        }
	        return subscription;
	    };
	    BehaviorSubject.prototype.getValue = function () {
	        if (this.hasError) {
	            throw this.thrownError;
	        }
	        else if (this.closed) {
	            throw new ObjectUnsubscribedError_1.ObjectUnsubscribedError();
	        }
	        else {
	            return this._value;
	        }
	    };
	    BehaviorSubject.prototype.next = function (value) {
	        _super.prototype.next.call(this, this._value = value);
	    };
	    return BehaviorSubject;
	}(Subject_1.Subject));
	exports.BehaviorSubject = BehaviorSubject;
	//# sourceMappingURL=BehaviorSubject.js.map

/***/ },
/* 136 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var FromObservable_1 = __webpack_require__(137);
	exports.from = FromObservable_1.FromObservable.create;
	//# sourceMappingURL=from.js.map

/***/ },
/* 137 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var isArray_1 = __webpack_require__(88);
	var isPromise_1 = __webpack_require__(131);
	var PromiseObservable_1 = __webpack_require__(112);
	var IteratorObservable_1 = __webpack_require__(138);
	var ArrayObservable_1 = __webpack_require__(139);
	var ArrayLikeObservable_1 = __webpack_require__(143);
	var iterator_1 = __webpack_require__(132);
	var Observable_1 = __webpack_require__(82);
	var observeOn_1 = __webpack_require__(144);
	var observable_1 = __webpack_require__(95);
	var isArrayLike = (function (x) { return x && typeof x.length === 'number'; });
	/**
	 * We need this JSDoc comment for affecting ESDoc.
	 * @extends {Ignored}
	 * @hide true
	 */
	var FromObservable = (function (_super) {
	    __extends(FromObservable, _super);
	    function FromObservable(ish, scheduler) {
	        _super.call(this, null);
	        this.ish = ish;
	        this.scheduler = scheduler;
	    }
	    /**
	     * Creates an Observable from an Array, an array-like object, a Promise, an
	     * iterable object, or an Observable-like object.
	     *
	     * <span class="informal">Converts almost anything to an Observable.</span>
	     *
	     * <img src="./img/from.png" width="100%">
	     *
	     * Convert various other objects and data types into Observables. `from`
	     * converts a Promise or an array-like or an
	     * [iterable](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#iterable)
	     * object into an Observable that emits the items in that promise or array or
	     * iterable. A String, in this context, is treated as an array of characters.
	     * Observable-like objects (contains a function named with the ES2015 Symbol
	     * for Observable) can also be converted through this operator.
	     *
	     * @example <caption>Converts an array to an Observable</caption>
	     * var array = [10, 20, 30];
	     * var result = Rx.Observable.from(array);
	     * result.subscribe(x => console.log(x));
	     *
	     * @example <caption>Convert an infinite iterable (from a generator) to an Observable</caption>
	     * function* generateDoubles(seed) {
	     *   var i = seed;
	     *   while (true) {
	     *     yield i;
	     *     i = 2 * i; // double it
	     *   }
	     * }
	     *
	     * var iterator = generateDoubles(3);
	     * var result = Rx.Observable.from(iterator).take(10);
	     * result.subscribe(x => console.log(x));
	     *
	     * @see {@link create}
	     * @see {@link fromEvent}
	     * @see {@link fromEventPattern}
	     * @see {@link fromPromise}
	     *
	     * @param {ObservableInput<T>} ish A subscribable object, a Promise, an
	     * Observable-like, an Array, an iterable or an array-like object to be
	     * converted.
	     * @param {Scheduler} [scheduler] The scheduler on which to schedule the
	     * emissions of values.
	     * @return {Observable<T>} The Observable whose values are originally from the
	     * input object that was converted.
	     * @static true
	     * @name from
	     * @owner Observable
	     */
	    FromObservable.create = function (ish, scheduler) {
	        if (ish != null) {
	            if (typeof ish[observable_1.$$observable] === 'function') {
	                if (ish instanceof Observable_1.Observable && !scheduler) {
	                    return ish;
	                }
	                return new FromObservable(ish, scheduler);
	            }
	            else if (isArray_1.isArray(ish)) {
	                return new ArrayObservable_1.ArrayObservable(ish, scheduler);
	            }
	            else if (isPromise_1.isPromise(ish)) {
	                return new PromiseObservable_1.PromiseObservable(ish, scheduler);
	            }
	            else if (typeof ish[iterator_1.$$iterator] === 'function' || typeof ish === 'string') {
	                return new IteratorObservable_1.IteratorObservable(ish, scheduler);
	            }
	            else if (isArrayLike(ish)) {
	                return new ArrayLikeObservable_1.ArrayLikeObservable(ish, scheduler);
	            }
	        }
	        throw new TypeError((ish !== null && typeof ish || ish) + ' is not observable');
	    };
	    FromObservable.prototype._subscribe = function (subscriber) {
	        var ish = this.ish;
	        var scheduler = this.scheduler;
	        if (scheduler == null) {
	            return ish[observable_1.$$observable]().subscribe(subscriber);
	        }
	        else {
	            return ish[observable_1.$$observable]().subscribe(new observeOn_1.ObserveOnSubscriber(subscriber, scheduler, 0));
	        }
	    };
	    return FromObservable;
	}(Observable_1.Observable));
	exports.FromObservable = FromObservable;
	//# sourceMappingURL=FromObservable.js.map

/***/ },
/* 138 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var root_1 = __webpack_require__(83);
	var Observable_1 = __webpack_require__(82);
	var iterator_1 = __webpack_require__(132);
	/**
	 * We need this JSDoc comment for affecting ESDoc.
	 * @extends {Ignored}
	 * @hide true
	 */
	var IteratorObservable = (function (_super) {
	    __extends(IteratorObservable, _super);
	    function IteratorObservable(iterator, scheduler) {
	        _super.call(this);
	        this.scheduler = scheduler;
	        if (iterator == null) {
	            throw new Error('iterator cannot be null.');
	        }
	        this.iterator = getIterator(iterator);
	    }
	    IteratorObservable.create = function (iterator, scheduler) {
	        return new IteratorObservable(iterator, scheduler);
	    };
	    IteratorObservable.dispatch = function (state) {
	        var index = state.index, hasError = state.hasError, iterator = state.iterator, subscriber = state.subscriber;
	        if (hasError) {
	            subscriber.error(state.error);
	            return;
	        }
	        var result = iterator.next();
	        if (result.done) {
	            subscriber.complete();
	            return;
	        }
	        subscriber.next(result.value);
	        state.index = index + 1;
	        if (subscriber.closed) {
	            return;
	        }
	        this.schedule(state);
	    };
	    IteratorObservable.prototype._subscribe = function (subscriber) {
	        var index = 0;
	        var _a = this, iterator = _a.iterator, scheduler = _a.scheduler;
	        if (scheduler) {
	            return scheduler.schedule(IteratorObservable.dispatch, 0, {
	                index: index, iterator: iterator, subscriber: subscriber
	            });
	        }
	        else {
	            do {
	                var result = iterator.next();
	                if (result.done) {
	                    subscriber.complete();
	                    break;
	                }
	                else {
	                    subscriber.next(result.value);
	                }
	                if (subscriber.closed) {
	                    break;
	                }
	            } while (true);
	        }
	    };
	    return IteratorObservable;
	}(Observable_1.Observable));
	exports.IteratorObservable = IteratorObservable;
	var StringIterator = (function () {
	    function StringIterator(str, idx, len) {
	        if (idx === void 0) { idx = 0; }
	        if (len === void 0) { len = str.length; }
	        this.str = str;
	        this.idx = idx;
	        this.len = len;
	    }
	    StringIterator.prototype[iterator_1.$$iterator] = function () { return (this); };
	    StringIterator.prototype.next = function () {
	        return this.idx < this.len ? {
	            done: false,
	            value: this.str.charAt(this.idx++)
	        } : {
	            done: true,
	            value: undefined
	        };
	    };
	    return StringIterator;
	}());
	var ArrayIterator = (function () {
	    function ArrayIterator(arr, idx, len) {
	        if (idx === void 0) { idx = 0; }
	        if (len === void 0) { len = toLength(arr); }
	        this.arr = arr;
	        this.idx = idx;
	        this.len = len;
	    }
	    ArrayIterator.prototype[iterator_1.$$iterator] = function () { return this; };
	    ArrayIterator.prototype.next = function () {
	        return this.idx < this.len ? {
	            done: false,
	            value: this.arr[this.idx++]
	        } : {
	            done: true,
	            value: undefined
	        };
	    };
	    return ArrayIterator;
	}());
	function getIterator(obj) {
	    var i = obj[iterator_1.$$iterator];
	    if (!i && typeof obj === 'string') {
	        return new StringIterator(obj);
	    }
	    if (!i && obj.length !== undefined) {
	        return new ArrayIterator(obj);
	    }
	    if (!i) {
	        throw new TypeError('object is not iterable');
	    }
	    return obj[iterator_1.$$iterator]();
	}
	var maxSafeInteger = Math.pow(2, 53) - 1;
	function toLength(o) {
	    var len = +o.length;
	    if (isNaN(len)) {
	        return 0;
	    }
	    if (len === 0 || !numberIsFinite(len)) {
	        return len;
	    }
	    len = sign(len) * Math.floor(Math.abs(len));
	    if (len <= 0) {
	        return 0;
	    }
	    if (len > maxSafeInteger) {
	        return maxSafeInteger;
	    }
	    return len;
	}
	function numberIsFinite(value) {
	    return typeof value === 'number' && root_1.root.isFinite(value);
	}
	function sign(value) {
	    var valueAsNumber = +value;
	    if (valueAsNumber === 0) {
	        return valueAsNumber;
	    }
	    if (isNaN(valueAsNumber)) {
	        return valueAsNumber;
	    }
	    return valueAsNumber < 0 ? -1 : 1;
	}
	//# sourceMappingURL=IteratorObservable.js.map

/***/ },
/* 139 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var Observable_1 = __webpack_require__(82);
	var ScalarObservable_1 = __webpack_require__(140);
	var EmptyObservable_1 = __webpack_require__(141);
	var isScheduler_1 = __webpack_require__(142);
	/**
	 * We need this JSDoc comment for affecting ESDoc.
	 * @extends {Ignored}
	 * @hide true
	 */
	var ArrayObservable = (function (_super) {
	    __extends(ArrayObservable, _super);
	    function ArrayObservable(array, scheduler) {
	        _super.call(this);
	        this.array = array;
	        this.scheduler = scheduler;
	        if (!scheduler && array.length === 1) {
	            this._isScalar = true;
	            this.value = array[0];
	        }
	    }
	    ArrayObservable.create = function (array, scheduler) {
	        return new ArrayObservable(array, scheduler);
	    };
	    /**
	     * Creates an Observable that emits some values you specify as arguments,
	     * immediately one after the other, and then emits a complete notification.
	     *
	     * <span class="informal">Emits the arguments you provide, then completes.
	     * </span>
	     *
	     * <img src="./img/of.png" width="100%">
	     *
	     * This static operator is useful for creating a simple Observable that only
	     * emits the arguments given, and the complete notification thereafter. It can
	     * be used for composing with other Observables, such as with {@link concat}.
	     * By default, it uses a `null` Scheduler, which means the `next`
	     * notifications are sent synchronously, although with a different Scheduler
	     * it is possible to determine when those notifications will be delivered.
	     *
	     * @example <caption>Emit 10, 20, 30, then 'a', 'b', 'c', then start ticking every second.</caption>
	     * var numbers = Rx.Observable.of(10, 20, 30);
	     * var letters = Rx.Observable.of('a', 'b', 'c');
	     * var interval = Rx.Observable.interval(1000);
	     * var result = numbers.concat(letters).concat(interval);
	     * result.subscribe(x => console.log(x));
	     *
	     * @see {@link create}
	     * @see {@link empty}
	     * @see {@link never}
	     * @see {@link throw}
	     *
	     * @param {...T} values Arguments that represent `next` values to be emitted.
	     * @param {Scheduler} [scheduler] A {@link Scheduler} to use for scheduling
	     * the emissions of the `next` notifications.
	     * @return {Observable<T>} An Observable that emits each given input value.
	     * @static true
	     * @name of
	     * @owner Observable
	     */
	    ArrayObservable.of = function () {
	        var array = [];
	        for (var _i = 0; _i < arguments.length; _i++) {
	            array[_i - 0] = arguments[_i];
	        }
	        var scheduler = array[array.length - 1];
	        if (isScheduler_1.isScheduler(scheduler)) {
	            array.pop();
	        }
	        else {
	            scheduler = null;
	        }
	        var len = array.length;
	        if (len > 1) {
	            return new ArrayObservable(array, scheduler);
	        }
	        else if (len === 1) {
	            return new ScalarObservable_1.ScalarObservable(array[0], scheduler);
	        }
	        else {
	            return new EmptyObservable_1.EmptyObservable(scheduler);
	        }
	    };
	    ArrayObservable.dispatch = function (state) {
	        var array = state.array, index = state.index, count = state.count, subscriber = state.subscriber;
	        if (index >= count) {
	            subscriber.complete();
	            return;
	        }
	        subscriber.next(array[index]);
	        if (subscriber.closed) {
	            return;
	        }
	        state.index = index + 1;
	        this.schedule(state);
	    };
	    ArrayObservable.prototype._subscribe = function (subscriber) {
	        var index = 0;
	        var array = this.array;
	        var count = array.length;
	        var scheduler = this.scheduler;
	        if (scheduler) {
	            return scheduler.schedule(ArrayObservable.dispatch, 0, {
	                array: array, index: index, count: count, subscriber: subscriber
	            });
	        }
	        else {
	            for (var i = 0; i < count && !subscriber.closed; i++) {
	                subscriber.next(array[i]);
	            }
	            subscriber.complete();
	        }
	    };
	    return ArrayObservable;
	}(Observable_1.Observable));
	exports.ArrayObservable = ArrayObservable;
	//# sourceMappingURL=ArrayObservable.js.map

/***/ },
/* 140 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var Observable_1 = __webpack_require__(82);
	/**
	 * We need this JSDoc comment for affecting ESDoc.
	 * @extends {Ignored}
	 * @hide true
	 */
	var ScalarObservable = (function (_super) {
	    __extends(ScalarObservable, _super);
	    function ScalarObservable(value, scheduler) {
	        _super.call(this);
	        this.value = value;
	        this.scheduler = scheduler;
	        this._isScalar = true;
	        if (scheduler) {
	            this._isScalar = false;
	        }
	    }
	    ScalarObservable.create = function (value, scheduler) {
	        return new ScalarObservable(value, scheduler);
	    };
	    ScalarObservable.dispatch = function (state) {
	        var done = state.done, value = state.value, subscriber = state.subscriber;
	        if (done) {
	            subscriber.complete();
	            return;
	        }
	        subscriber.next(value);
	        if (subscriber.closed) {
	            return;
	        }
	        state.done = true;
	        this.schedule(state);
	    };
	    ScalarObservable.prototype._subscribe = function (subscriber) {
	        var value = this.value;
	        var scheduler = this.scheduler;
	        if (scheduler) {
	            return scheduler.schedule(ScalarObservable.dispatch, 0, {
	                done: false, value: value, subscriber: subscriber
	            });
	        }
	        else {
	            subscriber.next(value);
	            if (!subscriber.closed) {
	                subscriber.complete();
	            }
	        }
	    };
	    return ScalarObservable;
	}(Observable_1.Observable));
	exports.ScalarObservable = ScalarObservable;
	//# sourceMappingURL=ScalarObservable.js.map

/***/ },
/* 141 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var Observable_1 = __webpack_require__(82);
	/**
	 * We need this JSDoc comment for affecting ESDoc.
	 * @extends {Ignored}
	 * @hide true
	 */
	var EmptyObservable = (function (_super) {
	    __extends(EmptyObservable, _super);
	    function EmptyObservable(scheduler) {
	        _super.call(this);
	        this.scheduler = scheduler;
	    }
	    /**
	     * Creates an Observable that emits no items to the Observer and immediately
	     * emits a complete notification.
	     *
	     * <span class="informal">Just emits 'complete', and nothing else.
	     * </span>
	     *
	     * <img src="./img/empty.png" width="100%">
	     *
	     * This static operator is useful for creating a simple Observable that only
	     * emits the complete notification. It can be used for composing with other
	     * Observables, such as in a {@link mergeMap}.
	     *
	     * @example <caption>Emit the number 7, then complete.</caption>
	     * var result = Rx.Observable.empty().startWith(7);
	     * result.subscribe(x => console.log(x));
	     *
	     * @example <caption>Map and flatten only odd numbers to the sequence 'a', 'b', 'c'</caption>
	     * var interval = Rx.Observable.interval(1000);
	     * var result = interval.mergeMap(x =>
	     *   x % 2 === 1 ? Rx.Observable.of('a', 'b', 'c') : Rx.Observable.empty()
	     * );
	     * result.subscribe(x => console.log(x));
	     *
	     * @see {@link create}
	     * @see {@link never}
	     * @see {@link of}
	     * @see {@link throw}
	     *
	     * @param {Scheduler} [scheduler] A {@link Scheduler} to use for scheduling
	     * the emission of the complete notification.
	     * @return {Observable} An "empty" Observable: emits only the complete
	     * notification.
	     * @static true
	     * @name empty
	     * @owner Observable
	     */
	    EmptyObservable.create = function (scheduler) {
	        return new EmptyObservable(scheduler);
	    };
	    EmptyObservable.dispatch = function (arg) {
	        var subscriber = arg.subscriber;
	        subscriber.complete();
	    };
	    EmptyObservable.prototype._subscribe = function (subscriber) {
	        var scheduler = this.scheduler;
	        if (scheduler) {
	            return scheduler.schedule(EmptyObservable.dispatch, 0, { subscriber: subscriber });
	        }
	        else {
	            subscriber.complete();
	        }
	    };
	    return EmptyObservable;
	}(Observable_1.Observable));
	exports.EmptyObservable = EmptyObservable;
	//# sourceMappingURL=EmptyObservable.js.map

/***/ },
/* 142 */
/***/ function(module, exports) {

	"use strict";
	function isScheduler(value) {
	    return value && typeof value.schedule === 'function';
	}
	exports.isScheduler = isScheduler;
	//# sourceMappingURL=isScheduler.js.map

/***/ },
/* 143 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var Observable_1 = __webpack_require__(82);
	var ScalarObservable_1 = __webpack_require__(140);
	var EmptyObservable_1 = __webpack_require__(141);
	/**
	 * We need this JSDoc comment for affecting ESDoc.
	 * @extends {Ignored}
	 * @hide true
	 */
	var ArrayLikeObservable = (function (_super) {
	    __extends(ArrayLikeObservable, _super);
	    function ArrayLikeObservable(arrayLike, scheduler) {
	        _super.call(this);
	        this.arrayLike = arrayLike;
	        this.scheduler = scheduler;
	        if (!scheduler && arrayLike.length === 1) {
	            this._isScalar = true;
	            this.value = arrayLike[0];
	        }
	    }
	    ArrayLikeObservable.create = function (arrayLike, scheduler) {
	        var length = arrayLike.length;
	        if (length === 0) {
	            return new EmptyObservable_1.EmptyObservable();
	        }
	        else if (length === 1) {
	            return new ScalarObservable_1.ScalarObservable(arrayLike[0], scheduler);
	        }
	        else {
	            return new ArrayLikeObservable(arrayLike, scheduler);
	        }
	    };
	    ArrayLikeObservable.dispatch = function (state) {
	        var arrayLike = state.arrayLike, index = state.index, length = state.length, subscriber = state.subscriber;
	        if (subscriber.closed) {
	            return;
	        }
	        if (index >= length) {
	            subscriber.complete();
	            return;
	        }
	        subscriber.next(arrayLike[index]);
	        state.index = index + 1;
	        this.schedule(state);
	    };
	    ArrayLikeObservable.prototype._subscribe = function (subscriber) {
	        var index = 0;
	        var _a = this, arrayLike = _a.arrayLike, scheduler = _a.scheduler;
	        var length = arrayLike.length;
	        if (scheduler) {
	            return scheduler.schedule(ArrayLikeObservable.dispatch, 0, {
	                arrayLike: arrayLike, index: index, length: length, subscriber: subscriber
	            });
	        }
	        else {
	            for (var i = 0; i < length && !subscriber.closed; i++) {
	                subscriber.next(arrayLike[i]);
	            }
	            subscriber.complete();
	        }
	    };
	    return ArrayLikeObservable;
	}(Observable_1.Observable));
	exports.ArrayLikeObservable = ArrayLikeObservable;
	//# sourceMappingURL=ArrayLikeObservable.js.map

/***/ },
/* 144 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var Subscriber_1 = __webpack_require__(85);
	var Notification_1 = __webpack_require__(145);
	/**
	 * @see {@link Notification}
	 *
	 * @param scheduler
	 * @param delay
	 * @return {Observable<R>|WebSocketSubject<T>|Observable<T>}
	 * @method observeOn
	 * @owner Observable
	 */
	function observeOn(scheduler, delay) {
	    if (delay === void 0) { delay = 0; }
	    return this.lift(new ObserveOnOperator(scheduler, delay));
	}
	exports.observeOn = observeOn;
	var ObserveOnOperator = (function () {
	    function ObserveOnOperator(scheduler, delay) {
	        if (delay === void 0) { delay = 0; }
	        this.scheduler = scheduler;
	        this.delay = delay;
	    }
	    ObserveOnOperator.prototype.call = function (subscriber, source) {
	        return source._subscribe(new ObserveOnSubscriber(subscriber, this.scheduler, this.delay));
	    };
	    return ObserveOnOperator;
	}());
	exports.ObserveOnOperator = ObserveOnOperator;
	/**
	 * We need this JSDoc comment for affecting ESDoc.
	 * @ignore
	 * @extends {Ignored}
	 */
	var ObserveOnSubscriber = (function (_super) {
	    __extends(ObserveOnSubscriber, _super);
	    function ObserveOnSubscriber(destination, scheduler, delay) {
	        if (delay === void 0) { delay = 0; }
	        _super.call(this, destination);
	        this.scheduler = scheduler;
	        this.delay = delay;
	    }
	    ObserveOnSubscriber.dispatch = function (arg) {
	        var notification = arg.notification, destination = arg.destination;
	        notification.observe(destination);
	    };
	    ObserveOnSubscriber.prototype.scheduleMessage = function (notification) {
	        this.add(this.scheduler.schedule(ObserveOnSubscriber.dispatch, this.delay, new ObserveOnMessage(notification, this.destination)));
	    };
	    ObserveOnSubscriber.prototype._next = function (value) {
	        this.scheduleMessage(Notification_1.Notification.createNext(value));
	    };
	    ObserveOnSubscriber.prototype._error = function (err) {
	        this.scheduleMessage(Notification_1.Notification.createError(err));
	    };
	    ObserveOnSubscriber.prototype._complete = function () {
	        this.scheduleMessage(Notification_1.Notification.createComplete());
	    };
	    return ObserveOnSubscriber;
	}(Subscriber_1.Subscriber));
	exports.ObserveOnSubscriber = ObserveOnSubscriber;
	var ObserveOnMessage = (function () {
	    function ObserveOnMessage(notification, destination) {
	        this.notification = notification;
	        this.destination = destination;
	    }
	    return ObserveOnMessage;
	}());
	exports.ObserveOnMessage = ObserveOnMessage;
	//# sourceMappingURL=observeOn.js.map

/***/ },
/* 145 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var Observable_1 = __webpack_require__(82);
	/**
	 * Represents a push-based event or value that an {@link Observable} can emit.
	 * This class is particularly useful for operators that manage notifications,
	 * like {@link materialize}, {@link dematerialize}, {@link observeOn}, and
	 * others. Besides wrapping the actual delivered value, it also annotates it
	 * with metadata of, for instance, what type of push message it is (`next`,
	 * `error`, or `complete`).
	 *
	 * @see {@link materialize}
	 * @see {@link dematerialize}
	 * @see {@link observeOn}
	 *
	 * @class Notification<T>
	 */
	var Notification = (function () {
	    function Notification(kind, value, exception) {
	        this.kind = kind;
	        this.value = value;
	        this.exception = exception;
	        this.hasValue = kind === 'N';
	    }
	    /**
	     * Delivers to the given `observer` the value wrapped by this Notification.
	     * @param {Observer} observer
	     * @return
	     */
	    Notification.prototype.observe = function (observer) {
	        switch (this.kind) {
	            case 'N':
	                return observer.next && observer.next(this.value);
	            case 'E':
	                return observer.error && observer.error(this.exception);
	            case 'C':
	                return observer.complete && observer.complete();
	        }
	    };
	    /**
	     * Given some {@link Observer} callbacks, deliver the value represented by the
	     * current Notification to the correctly corresponding callback.
	     * @param {function(value: T): void} next An Observer `next` callback.
	     * @param {function(err: any): void} [error] An Observer `error` callback.
	     * @param {function(): void} [complete] An Observer `complete` callback.
	     * @return {any}
	     */
	    Notification.prototype.do = function (next, error, complete) {
	        var kind = this.kind;
	        switch (kind) {
	            case 'N':
	                return next && next(this.value);
	            case 'E':
	                return error && error(this.exception);
	            case 'C':
	                return complete && complete();
	        }
	    };
	    /**
	     * Takes an Observer or its individual callback functions, and calls `observe`
	     * or `do` methods accordingly.
	     * @param {Observer|function(value: T): void} nextOrObserver An Observer or
	     * the `next` callback.
	     * @param {function(err: any): void} [error] An Observer `error` callback.
	     * @param {function(): void} [complete] An Observer `complete` callback.
	     * @return {any}
	     */
	    Notification.prototype.accept = function (nextOrObserver, error, complete) {
	        if (nextOrObserver && typeof nextOrObserver.next === 'function') {
	            return this.observe(nextOrObserver);
	        }
	        else {
	            return this.do(nextOrObserver, error, complete);
	        }
	    };
	    /**
	     * Returns a simple Observable that just delivers the notification represented
	     * by this Notification instance.
	     * @return {any}
	     */
	    Notification.prototype.toObservable = function () {
	        var kind = this.kind;
	        switch (kind) {
	            case 'N':
	                return Observable_1.Observable.of(this.value);
	            case 'E':
	                return Observable_1.Observable.throw(this.exception);
	            case 'C':
	                return Observable_1.Observable.empty();
	        }
	        throw new Error('unexpected notification kind value');
	    };
	    /**
	     * A shortcut to create a Notification instance of the type `next` from a
	     * given value.
	     * @param {T} value The `next` value.
	     * @return {Notification<T>} The "next" Notification representing the
	     * argument.
	     */
	    Notification.createNext = function (value) {
	        if (typeof value !== 'undefined') {
	            return new Notification('N', value);
	        }
	        return this.undefinedValueNotification;
	    };
	    /**
	     * A shortcut to create a Notification instance of the type `error` from a
	     * given error.
	     * @param {any} [err] The `error` exception.
	     * @return {Notification<T>} The "error" Notification representing the
	     * argument.
	     */
	    Notification.createError = function (err) {
	        return new Notification('E', undefined, err);
	    };
	    /**
	     * A shortcut to create a Notification instance of the type `complete`.
	     * @return {Notification<any>} The valueless "complete" Notification.
	     */
	    Notification.createComplete = function () {
	        return this.completeNotification;
	    };
	    Notification.completeNotification = new Notification('C');
	    Notification.undefinedValueNotification = new Notification('N', undefined);
	    return Notification;
	}());
	exports.Notification = Notification;
	//# sourceMappingURL=Notification.js.map

/***/ },
/* 146 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var ArrayObservable_1 = __webpack_require__(139);
	exports.of = ArrayObservable_1.ArrayObservable.of;
	//# sourceMappingURL=of.js.map

/***/ },
/* 147 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var mergeMap_1 = __webpack_require__(148);
	/**
	 * Projects each source value to an Observable which is merged in the output
	 * Observable, in a serialized fashion waiting for each one to complete before
	 * merging the next.
	 *
	 * <span class="informal">Maps each value to an Observable, then flattens all of
	 * these inner Observables using {@link concatAll}.</span>
	 *
	 * <img src="./img/concatMap.png" width="100%">
	 *
	 * Returns an Observable that emits items based on applying a function that you
	 * supply to each item emitted by the source Observable, where that function
	 * returns an (so-called "inner") Observable. Each new inner Observable is
	 * concatenated with the previous inner Observable.
	 *
	 * __Warning:__ if source values arrive endlessly and faster than their
	 * corresponding inner Observables can complete, it will result in memory issues
	 * as inner Observables amass in an unbounded buffer waiting for their turn to
	 * be subscribed to.
	 *
	 * Note: `concatMap` is equivalent to `mergeMap` with concurrency parameter set
	 * to `1`.
	 *
	 * @example <caption>For each click event, tick every second from 0 to 3, with no concurrency</caption>
	 * var clicks = Rx.Observable.fromEvent(document, 'click');
	 * var result = clicks.concatMap(ev => Rx.Observable.interval(1000).take(4));
	 * result.subscribe(x => console.log(x));
	 *
	 * @see {@link concat}
	 * @see {@link concatAll}
	 * @see {@link concatMapTo}
	 * @see {@link exhaustMap}
	 * @see {@link mergeMap}
	 * @see {@link switchMap}
	 *
	 * @param {function(value: T, ?index: number): Observable} project A function
	 * that, when applied to an item emitted by the source Observable, returns an
	 * Observable.
	 * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]
	 * A function to produce the value on the output Observable based on the values
	 * and the indices of the source (outer) emission and the inner Observable
	 * emission. The arguments passed to this function are:
	 * - `outerValue`: the value that came from the source
	 * - `innerValue`: the value that came from the projected Observable
	 * - `outerIndex`: the "index" of the value that came from the source
	 * - `innerIndex`: the "index" of the value from the projected Observable
	 * @return {Observable} an observable of values merged from the projected
	 * Observables as they were subscribed to, one at a time. Optionally, these
	 * values may have been projected from a passed `projectResult` argument.
	 * @return {Observable} An Observable that emits the result of applying the
	 * projection function (and the optional `resultSelector`) to each item emitted
	 * by the source Observable and taking values from each projected inner
	 * Observable sequentially.
	 * @method concatMap
	 * @owner Observable
	 */
	function concatMap(project, resultSelector) {
	    return this.lift(new mergeMap_1.MergeMapOperator(project, resultSelector, 1));
	}
	exports.concatMap = concatMap;
	//# sourceMappingURL=concatMap.js.map

/***/ },
/* 148 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var subscribeToResult_1 = __webpack_require__(130);
	var OuterSubscriber_1 = __webpack_require__(129);
	/**
	 * Projects each source value to an Observable which is merged in the output
	 * Observable.
	 *
	 * <span class="informal">Maps each value to an Observable, then flattens all of
	 * these inner Observables using {@link mergeAll}.</span>
	 *
	 * <img src="./img/mergeMap.png" width="100%">
	 *
	 * Returns an Observable that emits items based on applying a function that you
	 * supply to each item emitted by the source Observable, where that function
	 * returns an Observable, and then merging those resulting Observables and
	 * emitting the results of this merger.
	 *
	 * @example <caption>Map and flatten each letter to an Observable ticking every 1 second</caption>
	 * var letters = Rx.Observable.of('a', 'b', 'c');
	 * var result = letters.mergeMap(x =>
	 *   Rx.Observable.interval(1000).map(i => x+i)
	 * );
	 * result.subscribe(x => console.log(x));
	 *
	 * @see {@link concatMap}
	 * @see {@link exhaustMap}
	 * @see {@link merge}
	 * @see {@link mergeAll}
	 * @see {@link mergeMapTo}
	 * @see {@link mergeScan}
	 * @see {@link switchMap}
	 *
	 * @param {function(value: T, ?index: number): Observable} project A function
	 * that, when applied to an item emitted by the source Observable, returns an
	 * Observable.
	 * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]
	 * A function to produce the value on the output Observable based on the values
	 * and the indices of the source (outer) emission and the inner Observable
	 * emission. The arguments passed to this function are:
	 * - `outerValue`: the value that came from the source
	 * - `innerValue`: the value that came from the projected Observable
	 * - `outerIndex`: the "index" of the value that came from the source
	 * - `innerIndex`: the "index" of the value from the projected Observable
	 * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input
	 * Observables being subscribed to concurrently.
	 * @return {Observable} An Observable that emits the result of applying the
	 * projection function (and the optional `resultSelector`) to each item emitted
	 * by the source Observable and merging the results of the Observables obtained
	 * from this transformation.
	 * @method mergeMap
	 * @owner Observable
	 */
	function mergeMap(project, resultSelector, concurrent) {
	    if (concurrent === void 0) { concurrent = Number.POSITIVE_INFINITY; }
	    if (typeof resultSelector === 'number') {
	        concurrent = resultSelector;
	        resultSelector = null;
	    }
	    return this.lift(new MergeMapOperator(project, resultSelector, concurrent));
	}
	exports.mergeMap = mergeMap;
	var MergeMapOperator = (function () {
	    function MergeMapOperator(project, resultSelector, concurrent) {
	        if (concurrent === void 0) { concurrent = Number.POSITIVE_INFINITY; }
	        this.project = project;
	        this.resultSelector = resultSelector;
	        this.concurrent = concurrent;
	    }
	    MergeMapOperator.prototype.call = function (observer, source) {
	        return source._subscribe(new MergeMapSubscriber(observer, this.project, this.resultSelector, this.concurrent));
	    };
	    return MergeMapOperator;
	}());
	exports.MergeMapOperator = MergeMapOperator;
	/**
	 * We need this JSDoc comment for affecting ESDoc.
	 * @ignore
	 * @extends {Ignored}
	 */
	var MergeMapSubscriber = (function (_super) {
	    __extends(MergeMapSubscriber, _super);
	    function MergeMapSubscriber(destination, project, resultSelector, concurrent) {
	        if (concurrent === void 0) { concurrent = Number.POSITIVE_INFINITY; }
	        _super.call(this, destination);
	        this.project = project;
	        this.resultSelector = resultSelector;
	        this.concurrent = concurrent;
	        this.hasCompleted = false;
	        this.buffer = [];
	        this.active = 0;
	        this.index = 0;
	    }
	    MergeMapSubscriber.prototype._next = function (value) {
	        if (this.active < this.concurrent) {
	            this._tryNext(value);
	        }
	        else {
	            this.buffer.push(value);
	        }
	    };
	    MergeMapSubscriber.prototype._tryNext = function (value) {
	        var result;
	        var index = this.index++;
	        try {
	            result = this.project(value, index);
	        }
	        catch (err) {
	            this.destination.error(err);
	            return;
	        }
	        this.active++;
	        this._innerSub(result, value, index);
	    };
	    MergeMapSubscriber.prototype._innerSub = function (ish, value, index) {
	        this.add(subscribeToResult_1.subscribeToResult(this, ish, value, index));
	    };
	    MergeMapSubscriber.prototype._complete = function () {
	        this.hasCompleted = true;
	        if (this.active === 0 && this.buffer.length === 0) {
	            this.destination.complete();
	        }
	    };
	    MergeMapSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {
	        if (this.resultSelector) {
	            this._notifyResultSelector(outerValue, innerValue, outerIndex, innerIndex);
	        }
	        else {
	            this.destination.next(innerValue);
	        }
	    };
	    MergeMapSubscriber.prototype._notifyResultSelector = function (outerValue, innerValue, outerIndex, innerIndex) {
	        var result;
	        try {
	            result = this.resultSelector(outerValue, innerValue, outerIndex, innerIndex);
	        }
	        catch (err) {
	            this.destination.error(err);
	            return;
	        }
	        this.destination.next(result);
	    };
	    MergeMapSubscriber.prototype.notifyComplete = function (innerSub) {
	        var buffer = this.buffer;
	        this.remove(innerSub);
	        this.active--;
	        if (buffer.length > 0) {
	            this._next(buffer.shift());
	        }
	        else if (this.active === 0 && this.hasCompleted) {
	            this.destination.complete();
	        }
	    };
	    return MergeMapSubscriber;
	}(OuterSubscriber_1.OuterSubscriber));
	exports.MergeMapSubscriber = MergeMapSubscriber;
	//# sourceMappingURL=mergeMap.js.map

/***/ },
/* 149 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var Subscriber_1 = __webpack_require__(85);
	/**
	 * Returns an Observable that emits whether or not every item of the source satisfies the condition specified.
	 * @param {function} predicate a function for determining if an item meets a specified condition.
	 * @param {any} [thisArg] optional object to use for `this` in the callback
	 * @return {Observable} an Observable of booleans that determines if all items of the source Observable meet the condition specified.
	 * @method every
	 * @owner Observable
	 */
	function every(predicate, thisArg) {
	    return this.lift(new EveryOperator(predicate, thisArg, this));
	}
	exports.every = every;
	var EveryOperator = (function () {
	    function EveryOperator(predicate, thisArg, source) {
	        this.predicate = predicate;
	        this.thisArg = thisArg;
	        this.source = source;
	    }
	    EveryOperator.prototype.call = function (observer, source) {
	        return source._subscribe(new EverySubscriber(observer, this.predicate, this.thisArg, this.source));
	    };
	    return EveryOperator;
	}());
	/**
	 * We need this JSDoc comment for affecting ESDoc.
	 * @ignore
	 * @extends {Ignored}
	 */
	var EverySubscriber = (function (_super) {
	    __extends(EverySubscriber, _super);
	    function EverySubscriber(destination, predicate, thisArg, source) {
	        _super.call(this, destination);
	        this.predicate = predicate;
	        this.thisArg = thisArg;
	        this.source = source;
	        this.index = 0;
	        this.thisArg = thisArg || this;
	    }
	    EverySubscriber.prototype.notifyComplete = function (everyValueMatch) {
	        this.destination.next(everyValueMatch);
	        this.destination.complete();
	    };
	    EverySubscriber.prototype._next = function (value) {
	        var result = false;
	        try {
	            result = this.predicate.call(this.thisArg, value, this.index++, this.source);
	        }
	        catch (err) {
	            this.destination.error(err);
	            return;
	        }
	        if (!result) {
	            this.notifyComplete(false);
	        }
	    };
	    EverySubscriber.prototype._complete = function () {
	        this.notifyComplete(true);
	    };
	    return EverySubscriber;
	}(Subscriber_1.Subscriber));
	//# sourceMappingURL=every.js.map

/***/ },
/* 150 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var Subscriber_1 = __webpack_require__(85);
	var EmptyError_1 = __webpack_require__(151);
	/**
	 * Emits only the first value (or the first value that meets some condition)
	 * emitted by the source Observable.
	 *
	 * <span class="informal">Emits only the first value. Or emits only the first
	 * value that passes some test.</span>
	 *
	 * <img src="./img/first.png" width="100%">
	 *
	 * If called with no arguments, `first` emits the first value of the source
	 * Observable, then completes. If called with a `predicate` function, `first`
	 * emits the first value of the source that matches the specified condition. It
	 * may also take a `resultSelector` function to produce the output value from
	 * the input value, and a `defaultValue` to emit in case the source completes
	 * before it is able to emit a valid value. Throws an error if `defaultValue`
	 * was not provided and a matching element is not found.
	 *
	 * @example <caption>Emit only the first click that happens on the DOM</caption>
	 * var clicks = Rx.Observable.fromEvent(document, 'click');
	 * var result = clicks.first();
	 * result.subscribe(x => console.log(x));
	 *
	 * @example <caption>Emits the first click that happens on a DIV</caption>
	 * var clicks = Rx.Observable.fromEvent(document, 'click');
	 * var result = clicks.first(ev => ev.target.tagName === 'DIV');
	 * result.subscribe(x => console.log(x));
	 *
	 * @see {@link filter}
	 * @see {@link find}
	 * @see {@link take}
	 *
	 * @throws {EmptyError} Delivers an EmptyError to the Observer's `error`
	 * callback if the Observable completes before any `next` notification was sent.
	 *
	 * @param {function(value: T, index: number, source: Observable<T>): boolean} [predicate]
	 * An optional function called with each item to test for condition matching.
	 * @param {function(value: T, index: number): R} [resultSelector] A function to
	 * produce the value on the output Observable based on the values
	 * and the indices of the source Observable. The arguments passed to this
	 * function are:
	 * - `value`: the value that was emitted on the source.
	 * - `index`: the "index" of the value from the source.
	 * @param {R} [defaultValue] The default value emitted in case no valid value
	 * was found on the source.
	 * @return {Observable<T|R>} an Observable of the first item that matches the
	 * condition.
	 * @method first
	 * @owner Observable
	 */
	function first(predicate, resultSelector, defaultValue) {
	    return this.lift(new FirstOperator(predicate, resultSelector, defaultValue, this));
	}
	exports.first = first;
	var FirstOperator = (function () {
	    function FirstOperator(predicate, resultSelector, defaultValue, source) {
	        this.predicate = predicate;
	        this.resultSelector = resultSelector;
	        this.defaultValue = defaultValue;
	        this.source = source;
	    }
	    FirstOperator.prototype.call = function (observer, source) {
	        return source._subscribe(new FirstSubscriber(observer, this.predicate, this.resultSelector, this.defaultValue, this.source));
	    };
	    return FirstOperator;
	}());
	/**
	 * We need this JSDoc comment for affecting ESDoc.
	 * @ignore
	 * @extends {Ignored}
	 */
	var FirstSubscriber = (function (_super) {
	    __extends(FirstSubscriber, _super);
	    function FirstSubscriber(destination, predicate, resultSelector, defaultValue, source) {
	        _super.call(this, destination);
	        this.predicate = predicate;
	        this.resultSelector = resultSelector;
	        this.defaultValue = defaultValue;
	        this.source = source;
	        this.index = 0;
	        this.hasCompleted = false;
	    }
	    FirstSubscriber.prototype._next = function (value) {
	        var index = this.index++;
	        if (this.predicate) {
	            this._tryPredicate(value, index);
	        }
	        else {
	            this._emit(value, index);
	        }
	    };
	    FirstSubscriber.prototype._tryPredicate = function (value, index) {
	        var result;
	        try {
	            result = this.predicate(value, index, this.source);
	        }
	        catch (err) {
	            this.destination.error(err);
	            return;
	        }
	        if (result) {
	            this._emit(value, index);
	        }
	    };
	    FirstSubscriber.prototype._emit = function (value, index) {
	        if (this.resultSelector) {
	            this._tryResultSelector(value, index);
	            return;
	        }
	        this._emitFinal(value);
	    };
	    FirstSubscriber.prototype._tryResultSelector = function (value, index) {
	        var result;
	        try {
	            result = this.resultSelector(value, index);
	        }
	        catch (err) {
	            this.destination.error(err);
	            return;
	        }
	        this._emitFinal(result);
	    };
	    FirstSubscriber.prototype._emitFinal = function (value) {
	        var destination = this.destination;
	        destination.next(value);
	        destination.complete();
	        this.hasCompleted = true;
	    };
	    FirstSubscriber.prototype._complete = function () {
	        var destination = this.destination;
	        if (!this.hasCompleted && typeof this.defaultValue !== 'undefined') {
	            destination.next(this.defaultValue);
	            destination.complete();
	        }
	        else if (!this.hasCompleted) {
	            destination.error(new EmptyError_1.EmptyError);
	        }
	    };
	    return FirstSubscriber;
	}(Subscriber_1.Subscriber));
	//# sourceMappingURL=first.js.map

/***/ },
/* 151 */
/***/ function(module, exports) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	/**
	 * An error thrown when an Observable or a sequence was queried but has no
	 * elements.
	 *
	 * @see {@link first}
	 * @see {@link last}
	 * @see {@link single}
	 *
	 * @class EmptyError
	 */
	var EmptyError = (function (_super) {
	    __extends(EmptyError, _super);
	    function EmptyError() {
	        var err = _super.call(this, 'no elements in sequence');
	        this.name = err.name = 'EmptyError';
	        this.stack = err.stack;
	        this.message = err.message;
	    }
	    return EmptyError;
	}(Error));
	exports.EmptyError = EmptyError;
	//# sourceMappingURL=EmptyError.js.map

/***/ },
/* 152 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var Subscriber_1 = __webpack_require__(85);
	/**
	 * Applies a given `project` function to each value emitted by the source
	 * Observable, and emits the resulting values as an Observable.
	 *
	 * <span class="informal">Like [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map),
	 * it passes each source value through a transformation function to get
	 * corresponding output values.</span>
	 *
	 * <img src="./img/map.png" width="100%">
	 *
	 * Similar to the well known `Array.prototype.map` function, this operator
	 * applies a projection to each value and emits that projection in the output
	 * Observable.
	 *
	 * @example <caption>Map every every click to the clientX position of that click</caption>
	 * var clicks = Rx.Observable.fromEvent(document, 'click');
	 * var positions = clicks.map(ev => ev.clientX);
	 * positions.subscribe(x => console.log(x));
	 *
	 * @see {@link mapTo}
	 * @see {@link pluck}
	 *
	 * @param {function(value: T, index: number): R} project The function to apply
	 * to each `value` emitted by the source Observable. The `index` parameter is
	 * the number `i` for the i-th emission that has happened since the
	 * subscription, starting from the number `0`.
	 * @param {any} [thisArg] An optional argument to define what `this` is in the
	 * `project` function.
	 * @return {Observable<R>} An Observable that emits the values from the source
	 * Observable transformed by the given `project` function.
	 * @method map
	 * @owner Observable
	 */
	function map(project, thisArg) {
	    if (typeof project !== 'function') {
	        throw new TypeError('argument is not a function. Are you looking for `mapTo()`?');
	    }
	    return this.lift(new MapOperator(project, thisArg));
	}
	exports.map = map;
	var MapOperator = (function () {
	    function MapOperator(project, thisArg) {
	        this.project = project;
	        this.thisArg = thisArg;
	    }
	    MapOperator.prototype.call = function (subscriber, source) {
	        return source._subscribe(new MapSubscriber(subscriber, this.project, this.thisArg));
	    };
	    return MapOperator;
	}());
	exports.MapOperator = MapOperator;
	/**
	 * We need this JSDoc comment for affecting ESDoc.
	 * @ignore
	 * @extends {Ignored}
	 */
	var MapSubscriber = (function (_super) {
	    __extends(MapSubscriber, _super);
	    function MapSubscriber(destination, project, thisArg) {
	        _super.call(this, destination);
	        this.project = project;
	        this.count = 0;
	        this.thisArg = thisArg || this;
	    }
	    // NOTE: This looks unoptimized, but it's actually purposefully NOT
	    // using try/catch optimizations.
	    MapSubscriber.prototype._next = function (value) {
	        var result;
	        try {
	            result = this.project.call(this.thisArg, value, this.count++);
	        }
	        catch (err) {
	            this.destination.error(err);
	            return;
	        }
	        this.destination.next(result);
	    };
	    return MapSubscriber;
	}(Subscriber_1.Subscriber));
	//# sourceMappingURL=map.js.map

/***/ },
/* 153 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var Subscriber_1 = __webpack_require__(85);
	/**
	 * Applies an accumulator function over the source Observable, and returns the
	 * accumulated result when the source completes, given an optional seed value.
	 *
	 * <span class="informal">Combines together all values emitted on the source,
	 * using an accumulator function that knows how to join a new source value into
	 * the accumulation from the past.</span>
	 *
	 * <img src="./img/reduce.png" width="100%">
	 *
	 * Like
	 * [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce),
	 * `reduce` applies an `accumulator` function against an accumulation and each
	 * value of the source Observable (from the past) to reduce it to a single
	 * value, emitted on the output Observable. Note that `reduce` will only emit
	 * one value, only when the source Observable completes. It is equivalent to
	 * applying operator {@link scan} followed by operator {@link last}.
	 *
	 * Returns an Observable that applies a specified `accumulator` function to each
	 * item emitted by the source Observable. If a `seed` value is specified, then
	 * that value will be used as the initial value for the accumulator. If no seed
	 * value is specified, the first item of the source is used as the seed.
	 *
	 * @example <caption>Count the number of click events that happened in 5 seconds</caption>
	 * var clicksInFiveSeconds = Rx.Observable.fromEvent(document, 'click')
	 *   .takeUntil(Rx.Observable.interval(5000));
	 * var ones = clicksInFiveSeconds.mapTo(1);
	 * var seed = 0;
	 * var count = ones.reduce((acc, one) => acc + one, seed);
	 * count.subscribe(x => console.log(x));
	 *
	 * @see {@link count}
	 * @see {@link expand}
	 * @see {@link mergeScan}
	 * @see {@link scan}
	 *
	 * @param {function(acc: R, value: T): R} accumulator The accumulator function
	 * called on each source value.
	 * @param {R} [seed] The initial accumulation value.
	 * @return {Observable<R>} An observable of the accumulated values.
	 * @return {Observable<R>} An Observable that emits a single value that is the
	 * result of accumulating the values emitted by the source Observable.
	 * @method reduce
	 * @owner Observable
	 */
	function reduce(accumulator, seed) {
	    return this.lift(new ReduceOperator(accumulator, seed));
	}
	exports.reduce = reduce;
	var ReduceOperator = (function () {
	    function ReduceOperator(accumulator, seed) {
	        this.accumulator = accumulator;
	        this.seed = seed;
	    }
	    ReduceOperator.prototype.call = function (subscriber, source) {
	        return source._subscribe(new ReduceSubscriber(subscriber, this.accumulator, this.seed));
	    };
	    return ReduceOperator;
	}());
	exports.ReduceOperator = ReduceOperator;
	/**
	 * We need this JSDoc comment for affecting ESDoc.
	 * @ignore
	 * @extends {Ignored}
	 */
	var ReduceSubscriber = (function (_super) {
	    __extends(ReduceSubscriber, _super);
	    function ReduceSubscriber(destination, accumulator, seed) {
	        _super.call(this, destination);
	        this.accumulator = accumulator;
	        this.hasValue = false;
	        this.acc = seed;
	        this.accumulator = accumulator;
	        this.hasSeed = typeof seed !== 'undefined';
	    }
	    ReduceSubscriber.prototype._next = function (value) {
	        if (this.hasValue || (this.hasValue = this.hasSeed)) {
	            this._tryReduce(value);
	        }
	        else {
	            this.acc = value;
	            this.hasValue = true;
	        }
	    };
	    ReduceSubscriber.prototype._tryReduce = function (value) {
	        var result;
	        try {
	            result = this.accumulator(this.acc, value);
	        }
	        catch (err) {
	            this.destination.error(err);
	            return;
	        }
	        this.acc = result;
	    };
	    ReduceSubscriber.prototype._complete = function () {
	        if (this.hasValue || this.hasSeed) {
	            this.destination.next(this.acc);
	        }
	        this.destination.complete();
	    };
	    return ReduceSubscriber;
	}(Subscriber_1.Subscriber));
	exports.ReduceSubscriber = ReduceSubscriber;
	//# sourceMappingURL=reduce.js.map

/***/ },
/* 154 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var OuterSubscriber_1 = __webpack_require__(129);
	var subscribeToResult_1 = __webpack_require__(130);
	/**
	 * Catches errors on the observable to be handled by returning a new observable or throwing an error.
	 * @param {function} selector a function that takes as arguments `err`, which is the error, and `caught`, which
	 *  is the source observable, in case you'd like to "retry" that observable by returning it again. Whatever observable
	 *  is returned by the `selector` will be used to continue the observable chain.
	 * @return {Observable} an observable that originates from either the source or the observable returned by the
	 *  catch `selector` function.
	 * @method catch
	 * @owner Observable
	 */
	function _catch(selector) {
	    var operator = new CatchOperator(selector);
	    var caught = this.lift(operator);
	    return (operator.caught = caught);
	}
	exports._catch = _catch;
	var CatchOperator = (function () {
	    function CatchOperator(selector) {
	        this.selector = selector;
	    }
	    CatchOperator.prototype.call = function (subscriber, source) {
	        return source._subscribe(new CatchSubscriber(subscriber, this.selector, this.caught));
	    };
	    return CatchOperator;
	}());
	/**
	 * We need this JSDoc comment for affecting ESDoc.
	 * @ignore
	 * @extends {Ignored}
	 */
	var CatchSubscriber = (function (_super) {
	    __extends(CatchSubscriber, _super);
	    function CatchSubscriber(destination, selector, caught) {
	        _super.call(this, destination);
	        this.selector = selector;
	        this.caught = caught;
	    }
	    // NOTE: overriding `error` instead of `_error` because we don't want
	    // to have this flag this subscriber as `isStopped`.
	    CatchSubscriber.prototype.error = function (err) {
	        if (!this.isStopped) {
	            var result = void 0;
	            try {
	                result = this.selector(err, this.caught);
	            }
	            catch (err) {
	                this.destination.error(err);
	                return;
	            }
	            this.unsubscribe();
	            this.destination.remove(this);
	            subscribeToResult_1.subscribeToResult(this, result);
	        }
	    };
	    return CatchSubscriber;
	}(OuterSubscriber_1.OuterSubscriber));
	//# sourceMappingURL=catch.js.map

/***/ },
/* 155 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var mergeAll_1 = __webpack_require__(156);
	/**
	 * Converts a higher-order Observable into a first-order Observable by
	 * concatenating the inner Observables in order.
	 *
	 * <span class="informal">Flattens an Observable-of-Observables by putting one
	 * inner Observable after the other.</span>
	 *
	 * <img src="./img/concatAll.png" width="100%">
	 *
	 * Joins every Observable emitted by the source (a higher-order Observable), in
	 * a serial fashion. It subscribes to each inner Observable only after the
	 * previous inner Observable has completed, and merges all of their values into
	 * the returned observable.
	 *
	 * __Warning:__ If the source Observable emits Observables quickly and
	 * endlessly, and the inner Observables it emits generally complete slower than
	 * the source emits, you can run into memory issues as the incoming Observables
	 * collect in an unbounded buffer.
	 *
	 * Note: `concatAll` is equivalent to `mergeAll` with concurrency parameter set
	 * to `1`.
	 *
	 * @example <caption>For each click event, tick every second from 0 to 3, with no concurrency</caption>
	 * var clicks = Rx.Observable.fromEvent(document, 'click');
	 * var higherOrder = clicks.map(ev => Rx.Observable.interval(1000).take(4));
	 * var firstOrder = higherOrder.concatAll();
	 * firstOrder.subscribe(x => console.log(x));
	 *
	 * @see {@link combineAll}
	 * @see {@link concat}
	 * @see {@link concatMap}
	 * @see {@link concatMapTo}
	 * @see {@link exhaust}
	 * @see {@link mergeAll}
	 * @see {@link switch}
	 * @see {@link zipAll}
	 *
	 * @return {Observable} An Observable emitting values from all the inner
	 * Observables concatenated.
	 * @method concatAll
	 * @owner Observable
	 */
	function concatAll() {
	    return this.lift(new mergeAll_1.MergeAllOperator(1));
	}
	exports.concatAll = concatAll;
	//# sourceMappingURL=concatAll.js.map

/***/ },
/* 156 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var OuterSubscriber_1 = __webpack_require__(129);
	var subscribeToResult_1 = __webpack_require__(130);
	/**
	 * Converts a higher-order Observable into a first-order Observable which
	 * concurrently delivers all values that are emitted on the inner Observables.
	 *
	 * <span class="informal">Flattens an Observable-of-Observables.</span>
	 *
	 * <img src="./img/mergeAll.png" width="100%">
	 *
	 * `mergeAll` subscribes to an Observable that emits Observables, also known as
	 * a higher-order Observable. Each time it observes one of these emitted inner
	 * Observables, it subscribes to that and delivers all the values from the
	 * inner Observable on the output Observable. The output Observable only
	 * completes once all inner Observables have completed. Any error delivered by
	 * a inner Observable will be immediately emitted on the output Observable.
	 *
	 * @example <caption>Spawn a new interval Observable for each click event, and blend their outputs as one Observable</caption>
	 * var clicks = Rx.Observable.fromEvent(document, 'click');
	 * var higherOrder = clicks.map((ev) => Rx.Observable.interval(1000));
	 * var firstOrder = higherOrder.mergeAll();
	 * firstOrder.subscribe(x => console.log(x));
	 *
	 * @example <caption>Count from 0 to 9 every second for each click, but only allow 2 concurrent timers</caption>
	 * var clicks = Rx.Observable.fromEvent(document, 'click');
	 * var higherOrder = clicks.map((ev) => Rx.Observable.interval(1000).take(10));
	 * var firstOrder = higherOrder.mergeAll(2);
	 * firstOrder.subscribe(x => console.log(x));
	 *
	 * @see {@link combineAll}
	 * @see {@link concatAll}
	 * @see {@link exhaust}
	 * @see {@link merge}
	 * @see {@link mergeMap}
	 * @see {@link mergeMapTo}
	 * @see {@link mergeScan}
	 * @see {@link switch}
	 * @see {@link zipAll}
	 *
	 * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of inner
	 * Observables being subscribed to concurrently.
	 * @return {Observable} An Observable that emits values coming from all the
	 * inner Observables emitted by the source Observable.
	 * @method mergeAll
	 * @owner Observable
	 */
	function mergeAll(concurrent) {
	    if (concurrent === void 0) { concurrent = Number.POSITIVE_INFINITY; }
	    return this.lift(new MergeAllOperator(concurrent));
	}
	exports.mergeAll = mergeAll;
	var MergeAllOperator = (function () {
	    function MergeAllOperator(concurrent) {
	        this.concurrent = concurrent;
	    }
	    MergeAllOperator.prototype.call = function (observer, source) {
	        return source._subscribe(new MergeAllSubscriber(observer, this.concurrent));
	    };
	    return MergeAllOperator;
	}());
	exports.MergeAllOperator = MergeAllOperator;
	/**
	 * We need this JSDoc comment for affecting ESDoc.
	 * @ignore
	 * @extends {Ignored}
	 */
	var MergeAllSubscriber = (function (_super) {
	    __extends(MergeAllSubscriber, _super);
	    function MergeAllSubscriber(destination, concurrent) {
	        _super.call(this, destination);
	        this.concurrent = concurrent;
	        this.hasCompleted = false;
	        this.buffer = [];
	        this.active = 0;
	    }
	    MergeAllSubscriber.prototype._next = function (observable) {
	        if (this.active < this.concurrent) {
	            this.active++;
	            this.add(subscribeToResult_1.subscribeToResult(this, observable));
	        }
	        else {
	            this.buffer.push(observable);
	        }
	    };
	    MergeAllSubscriber.prototype._complete = function () {
	        this.hasCompleted = true;
	        if (this.active === 0 && this.buffer.length === 0) {
	            this.destination.complete();
	        }
	    };
	    MergeAllSubscriber.prototype.notifyComplete = function (innerSub) {
	        var buffer = this.buffer;
	        this.remove(innerSub);
	        this.active--;
	        if (buffer.length > 0) {
	            this._next(buffer.shift());
	        }
	        else if (this.active === 0 && this.hasCompleted) {
	            this.destination.complete();
	        }
	    };
	    return MergeAllSubscriber;
	}(OuterSubscriber_1.OuterSubscriber));
	exports.MergeAllSubscriber = MergeAllSubscriber;
	//# sourceMappingURL=mergeAll.js.map

/***/ },
/* 157 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var Subscriber_1 = __webpack_require__(85);
	var EmptyError_1 = __webpack_require__(151);
	/**
	 * Returns an Observable that emits only the last item emitted by the source Observable.
	 * It optionally takes a predicate function as a parameter, in which case, rather than emitting
	 * the last item from the source Observable, the resulting Observable will emit the last item
	 * from the source Observable that satisfies the predicate.
	 *
	 * <img src="./img/last.png" width="100%">
	 *
	 * @throws {EmptyError} Delivers an EmptyError to the Observer's `error`
	 * callback if the Observable completes before any `next` notification was sent.
	 * @param {function} predicate - the condition any source emitted item has to satisfy.
	 * @return {Observable} an Observable that emits only the last item satisfying the given condition
	 * from the source, or an NoSuchElementException if no such items are emitted.
	 * @throws - Throws if no items that match the predicate are emitted by the source Observable.
	 * @method last
	 * @owner Observable
	 */
	function last(predicate, resultSelector, defaultValue) {
	    return this.lift(new LastOperator(predicate, resultSelector, defaultValue, this));
	}
	exports.last = last;
	var LastOperator = (function () {
	    function LastOperator(predicate, resultSelector, defaultValue, source) {
	        this.predicate = predicate;
	        this.resultSelector = resultSelector;
	        this.defaultValue = defaultValue;
	        this.source = source;
	    }
	    LastOperator.prototype.call = function (observer, source) {
	        return source._subscribe(new LastSubscriber(observer, this.predicate, this.resultSelector, this.defaultValue, this.source));
	    };
	    return LastOperator;
	}());
	/**
	 * We need this JSDoc comment for affecting ESDoc.
	 * @ignore
	 * @extends {Ignored}
	 */
	var LastSubscriber = (function (_super) {
	    __extends(LastSubscriber, _super);
	    function LastSubscriber(destination, predicate, resultSelector, defaultValue, source) {
	        _super.call(this, destination);
	        this.predicate = predicate;
	        this.resultSelector = resultSelector;
	        this.defaultValue = defaultValue;
	        this.source = source;
	        this.hasValue = false;
	        this.index = 0;
	        if (typeof defaultValue !== 'undefined') {
	            this.lastValue = defaultValue;
	            this.hasValue = true;
	        }
	    }
	    LastSubscriber.prototype._next = function (value) {
	        var index = this.index++;
	        if (this.predicate) {
	            this._tryPredicate(value, index);
	        }
	        else {
	            if (this.resultSelector) {
	                this._tryResultSelector(value, index);
	                return;
	            }
	            this.lastValue = value;
	            this.hasValue = true;
	        }
	    };
	    LastSubscriber.prototype._tryPredicate = function (value, index) {
	        var result;
	        try {
	            result = this.predicate(value, index, this.source);
	        }
	        catch (err) {
	            this.destination.error(err);
	            return;
	        }
	        if (result) {
	            if (this.resultSelector) {
	                this._tryResultSelector(value, index);
	                return;
	            }
	            this.lastValue = value;
	            this.hasValue = true;
	        }
	    };
	    LastSubscriber.prototype._tryResultSelector = function (value, index) {
	        var result;
	        try {
	            result = this.resultSelector(value, index);
	        }
	        catch (err) {
	            this.destination.error(err);
	            return;
	        }
	        this.lastValue = result;
	        this.hasValue = true;
	    };
	    LastSubscriber.prototype._complete = function () {
	        var destination = this.destination;
	        if (this.hasValue) {
	            destination.next(this.lastValue);
	            destination.complete();
	        }
	        else {
	            destination.error(new EmptyError_1.EmptyError);
	        }
	    };
	    return LastSubscriber;
	}(Subscriber_1.Subscriber));
	//# sourceMappingURL=last.js.map

/***/ },
/* 158 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __extends = (this && this.__extends) || function (d, b) {
	    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	};
	var Subscriber_1 = __webpack_require__(85);
	/**
	 * Filter items emitted by the source Observable by only emitting those that
	 * satisfy a specified predicate.
	 *
	 * <span class="informal">Like
	 * [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter),
	 * it only emits a value from the source if it passes a criterion function.</span>
	 *
	 * <img src="./img/filter.png" width="100%">
	 *
	 * Similar to the well-known `Array.prototype.filter` method, this operator
	 * takes values from the source Observable, passes them through a `predicate`
	 * function and only emits those values that yielded `true`.
	 *
	 * @example <caption>Emit only click events whose target was a DIV element</caption>
	 * var clicks = Rx.Observable.fromEvent(document, 'click');
	 * var clicksOnDivs = clicks.filter(ev => ev.target.tagName === 'DIV');
	 * clicksOnDivs.subscribe(x => console.log(x));
	 *
	 * @see {@link distinct}
	 * @see {@link distinctKey}
	 * @see {@link distinctUntilChanged}
	 * @see {@link distinctUntilKeyChanged}
	 * @see {@link ignoreElements}
	 * @see {@link partition}
	 * @see {@link skip}
	 *
	 * @param {function(value: T, index: number): boolean} predicate A function that
	 * evaluates each value emitted by the source Observable. If it returns `true`,
	 * the value is emitted, if `false` the value is not passed to the output
	 * Observable. The `index` parameter is the number `i` for the i-th source
	 * emission that has happened since the subscription, starting from the number
	 * `0`.
	 * @param {any} [thisArg] An optional argument to determine the value of `this`
	 * in the `predicate` function.
	 * @return {Observable} An Observable of values from the source that were
	 * allowed by the `predicate` function.
	 * @method filter
	 * @owner Observable
	 */
	function filter(predicate, thisArg) {
	    return this.lift(new FilterOperator(predicate, thisArg));
	}
	exports.filter = filter;
	var FilterOperator = (function () {
	    function FilterOperator(predicate, thisArg) {
	        this.predicate = predicate;
	        this.thisArg = thisArg;
	    }
	    FilterOperator.prototype.call = function (subscriber, source) {
	        return source._subscribe(new FilterSubscriber(subscriber, this.predicate, this.thisArg));
	    };
	    return FilterOperator;
	}());
	/**
	 * We need this JSDoc comment for affecting ESDoc.
	 * @ignore
	 * @extends {Ignored}
	 */
	var FilterSubscriber = (function (_super) {
	    __extends(FilterSubscriber, _super);
	    function FilterSubscriber(destination, predicate, thisArg) {
	        _super.call(this, destination);
	        this.predicate = predicate;
	        this.thisArg = thisArg;
	        this.count = 0;
	        this.predicate = predicate;
	    }
	    // the try catch block below is left specifically for
	    // optimization and perf reasons. a tryCatcher is not necessary here.
	    FilterSubscriber.prototype._next = function (value) {
	        var result;
	        try {
	            result = this.predicate.call(this.thisArg, value, this.count++);
	        }
	        catch (err) {
	            this.destination.error(err);
	            return;
	        }
	        if (result) {
	            this.destination.next(value);
	        }
	    };
	    return FilterSubscriber;
	}(Subscriber_1.Subscriber));
	//# sourceMappingURL=filter.js.map

/***/ },
/* 159 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	__webpack_require__(127);
	var core_1 = __webpack_require__(80);
	var angular_2_local_storage_1 = __webpack_require__(101);
	var router_1 = __webpack_require__(134);
	var common_1 = __webpack_require__(99);
	var tip_service_1 = __webpack_require__(123);
	var EditTipComponent = (function () {
	    function EditTipComponent(tipService, route, location, localStorageService) {
	        this.tipService = tipService;
	        this.route = route;
	        this.location = location;
	        this.localStorageService = localStorageService;
	        this.tips = [];
	        this.tips2 = [];
	    }
	    EditTipComponent.prototype.noSave = function (id) {
	        this.tip = this.localStorageService.get('tip11');
	        //  this.tipService.getTips().then(tips => {this.tips = tips;
	        //    tip2 = tips[id-1];
	        //     console.log(tip2);
	        //   });
	        console.log(this.tip);
	        this.tipService.noSave(id, this.tip);
	    };
	    EditTipComponent.prototype.ngOnInit = function () {
	        var _this = this;
	        // this.tipService.getTips().then(tips => {this.tips = tips;
	        //   this.tips2[0]=TIPS[0];
	        //   console.log(TIPS[0]);
	        // });
	        this.route.params
	            .switchMap(function (params) { return _this.tipService.getTip(+params['id']); })
	            .subscribe(function (tip) {
	            _this.tip = tip;
	            _this.localStorageService.set('tip11', tip);
	            _this.newTip = _this.tip;
	            _this.tip = tip;
	        });
	        // this.tipService.getTips().then(tips => {this.tips = tips;
	        //   for(let i = 0; i < tips.length; i++)
	        //   {
	        //     this.tips2.push(tips[i]);
	        //   }
	        //   console.log(this.tips2);
	        //   });
	    };
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Number)
	    ], EditTipComponent.prototype, "id", void 0);
	    EditTipComponent = __decorate([
	        core_1.Component({
	            selector: 'my-app',
	            templateUrl: 'edit_tip.component.html',
	        }), 
	        __metadata('design:paramtypes', [tip_service_1.TipService, router_1.ActivatedRoute, common_1.Location, angular_2_local_storage_1.LocalStorageService])
	    ], EditTipComponent);
	    return EditTipComponent;
	}());
	exports.EditTipComponent = EditTipComponent;


/***/ },
/* 160 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var core_1 = __webpack_require__(80);
	var ng_bootstrap_1 = __webpack_require__(113);
	// import {MdDialogRef} from './dialog_ref';
	var tip_1 = __webpack_require__(124);
	var tip_service_1 = __webpack_require__(123);
	var AddTipComponent = (function () {
	    function AddTipComponent(tipService, modalService) {
	        this.tipService = tipService;
	        this.modalService = modalService;
	        this.tips = [];
	    }
	    AddTipComponent.prototype.setTip = function (name, expirationTime, description) {
	        this.notice = this.tipService.setTip(name, expirationTime, description);
	        if (!this.notice) {
	            this.addTip = new tip_1.Tip;
	        }
	    };
	    AddTipComponent.prototype.close = function () {
	        this.addTip = new tip_1.Tip;
	    };
	    AddTipComponent.prototype.ngOnInit = function () {
	        var _this = this;
	        // this.tip = tip;
	        this.tipService.reNew().then(function (reNewTip) {
	            _this.addTip = new tip_1.Tip;
	        });
	        ;
	    };
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Array)
	    ], AddTipComponent.prototype, "tips", void 0);
	    AddTipComponent = __decorate([
	        core_1.Component({
	            selector: 'add-tip',
	            templateUrl: '/component/add_tip.component.html'
	        }), 
	        __metadata('design:paramtypes', [tip_service_1.TipService, ng_bootstrap_1.NgbModal])
	    ], AddTipComponent);
	    return AddTipComponent;
	}());
	exports.AddTipComponent = AddTipComponent;
	// export class NgbdModalBasic {
	//   closeResult: string;
	//   constructor(private modalService: NgbModal) {}
	//   open(content: any) {
	//     this.modalService.open(content).result.then((result) => {
	//       this.closeResult = `Closed with: ${result}`;
	//     }, (reason) => {
	//       this.closeResult = `Dismissed ${this.getDismissReason(reason)}`;
	//     });
	//   }
	//   private getDismissReason(reason: any): string {
	//     if (reason === ModalDismissReasons.ESC) {
	//       return 'by pressing ESC';
	//     } else if (reason === ModalDismissReasons.BACKDROP_CLICK) {
	//       return 'by clicking on a backdrop';
	//     } else {
	//       return  `with: ${reason}`;
	//     }
	//   }
	// } 


/***/ },
/* 161 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	__webpack_require__(127);
	var core_1 = __webpack_require__(80);
	var angular_2_local_storage_1 = __webpack_require__(101);
	var router_1 = __webpack_require__(134);
	var common_1 = __webpack_require__(99);
	var tip_1 = __webpack_require__(124);
	var tip_service_1 = __webpack_require__(123);
	var MoreOperationComponent = (function () {
	    function MoreOperationComponent(tipService, route, location, localStorageService) {
	        this.tipService = tipService;
	        this.route = route;
	        this.location = location;
	        this.localStorageService = localStorageService;
	        this.tips = [];
	        this.tipEdit = this.id;
	        console.log(this.tipEdit);
	    }
	    MoreOperationComponent.prototype.editDetail = function () {
	        // this.tipEdit = this.localStorageService.get('tip12');
	        // this.tipEdit = 1;
	        // console.log(this.tipEdit);
	    };
	    MoreOperationComponent.prototype.deleteTip = function (id) {
	        var tipId = this.id;
	        this.tipService.deleteTip(tipId);
	        //   .then(reload => window.location.reload());
	    };
	    MoreOperationComponent.prototype.ngOnInit = function () {
	        var _this = this;
	        // this.route.params
	        //   .switchMap((params: Params) => this.tipService.getTip(+params['id']))
	        //   .subscribe(tip => this.tip = tip);
	        this.tipService.reNew().then(function (reNewTip) {
	            _this.tip = new tip_1.Tip;
	            _this.tipEdit = _this.id;
	            _this.tip.id = _this.tipEdit;
	            console.log(_this.id);
	            // this.localStorageService.set('tip12',1);  
	        });
	    };
	    __decorate([
	        core_1.Input(), 
	        __metadata('design:type', Number)
	    ], MoreOperationComponent.prototype, "id", void 0);
	    MoreOperationComponent = __decorate([
	        core_1.Component({
	            selector: 'more-oparetion',
	            templateUrl: 'component/more_operation.component.html',
	        }), 
	        __metadata('design:paramtypes', [tip_service_1.TipService, router_1.ActivatedRoute, common_1.Location, angular_2_local_storage_1.LocalStorageService])
	    ], MoreOperationComponent);
	    return MoreOperationComponent;
	}());
	exports.MoreOperationComponent = MoreOperationComponent;


/***/ },
/* 162 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	};
	var __metadata = (this && this.__metadata) || function (k, v) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
	};
	var core_1 = __webpack_require__(80);
	var router_1 = __webpack_require__(134);
	var todo_list_component_1 = __webpack_require__(122);
	var tip_detail_component_1 = __webpack_require__(126);
	var edit_tip_component_1 = __webpack_require__(159);
	var more_operation_component_1 = __webpack_require__(161);
	var add_tip_component_1 = __webpack_require__(160);
	var routes = [
	    { path: '', redirectTo: '/todo_list', pathMatch: 'full' },
	    { path: 'todo_list', component: todo_list_component_1.TodolistComponent },
	    { path: 'todo_list/:id', component: tip_detail_component_1.TipDetailComponent },
	    { path: 'todo_list/edit/:id', component: edit_tip_component_1.EditTipComponent },
	    { path: 'todo_list/add-tip', component: add_tip_component_1.AddTipComponent },
	    { path: 'todo_list/more-operation/:id', component: more_operation_component_1.MoreOperationComponent }
	];
	var AppRoutingModule = (function () {
	    function AppRoutingModule() {
	    }
	    AppRoutingModule = __decorate([
	        core_1.NgModule({
	            imports: [router_1.RouterModule.forRoot(routes)],
	            exports: [router_1.RouterModule]
	        }), 
	        __metadata('design:paramtypes', [])
	    ], AppRoutingModule);
	    return AppRoutingModule;
	}());
	exports.AppRoutingModule = AppRoutingModule;


/***/ }
/******/ ]);